//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Sat Nov 13 15:47:28 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   153
// RDY_server_response_get        O     1
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    20
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    20
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    20
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    20
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    20
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// wci_m_5_MCmd                   O     3
// wci_m_5_MAddrSpace             O     1
// wci_m_5_MByteEn                O     4
// wci_m_5_MAddr                  O    20
// wci_m_5_MData                  O    32 reg
// wci_m_5_MFlag                  O     2 reg
// wci_m_6_MCmd                   O     3
// wci_m_6_MAddrSpace             O     1
// wci_m_6_MByteEn                O     4
// wci_m_6_MAddr                  O    20
// wci_m_6_MData                  O    32 reg
// wci_m_6_MFlag                  O     2 reg
// wci_m_7_MCmd                   O     3
// wci_m_7_MAddrSpace             O     1
// wci_m_7_MByteEn                O     4
// wci_m_7_MAddr                  O    20
// wci_m_7_MData                  O    32 reg
// wci_m_7_MFlag                  O     2 reg
// wci_m_8_MCmd                   O     3
// wci_m_8_MAddrSpace             O     1
// wci_m_8_MByteEn                O     4
// wci_m_8_MAddr                  O    20
// wci_m_8_MData                  O    32 reg
// wci_m_8_MFlag                  O     2 reg
// wci_m_9_MCmd                   O     3
// wci_m_9_MAddrSpace             O     1
// wci_m_9_MByteEn                O     4
// wci_m_9_MAddr                  O    20
// wci_m_9_MData                  O    32 reg
// wci_m_9_MFlag                  O     2 reg
// wci_m_10_MCmd                  O     3
// wci_m_10_MAddrSpace            O     1
// wci_m_10_MByteEn               O     4
// wci_m_10_MAddr                 O    20
// wci_m_10_MData                 O    32 reg
// wci_m_10_MFlag                 O     2 reg
// wci_m_11_MCmd                  O     3
// wci_m_11_MAddrSpace            O     1
// wci_m_11_MByteEn               O     4
// wci_m_11_MAddr                 O    20
// wci_m_11_MData                 O    32 reg
// wci_m_11_MFlag                 O     2 reg
// wci_m_12_MCmd                  O     3
// wci_m_12_MAddrSpace            O     1
// wci_m_12_MByteEn               O     4
// wci_m_12_MAddr                 O    20
// wci_m_12_MData                 O    32 reg
// wci_m_12_MFlag                 O     2 reg
// wmiS0_SResp                    O     2 reg
// wmiS0_SData                    O    32 reg
// wmiS0_SThreadBusy              O     1
// wmiS0_SDataThreadBusy          O     1
// wmiS0_SRespLast                O     1 const
// wmiS0_SFlag                    O    32 reg
// wmiS0_SReset_n                 O     1
// wmiS1_SResp                    O     2 reg
// wmiS1_SData                    O    32 reg
// wmiS1_SThreadBusy              O     1
// wmiS1_SDataThreadBusy          O     1
// wmiS1_SRespLast                O     1 const
// wmiS1_SFlag                    O    32 reg
// wmiS1_SReset_n                 O     1
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// gps_ppsSyncOut                 O     1
// RST_N_wci_m_0                  O     1 reset
// RST_N_wci_m_1                  O     1 reset
// RST_N_wci_m_2                  O     1 reset
// RST_N_wci_m_3                  O     1 reset
// RST_N_wci_m_4                  O     1 reset
// RST_N_wci_m_5                  O     1 reset
// RST_N_wci_m_6                  O     1 reset
// RST_N_wci_m_7                  O     1 reset
// RST_N_wci_m_8                  O     1 reset
// RST_N_wci_m_9                  O     1 reset
// RST_N_wci_m_10                 O     1 reset
// RST_N_wci_m_11                 O     1 reset
// RST_N_wci_m_12                 O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wci_m_5_SResp                  I     2
// wci_m_5_SData                  I    32
// wci_m_5_SFlag                  I     2 reg
// wci_m_6_SResp                  I     2
// wci_m_6_SData                  I    32
// wci_m_6_SFlag                  I     2 reg
// wci_m_7_SResp                  I     2
// wci_m_7_SData                  I    32
// wci_m_7_SFlag                  I     2 reg
// wci_m_8_SResp                  I     2
// wci_m_8_SData                  I    32
// wci_m_8_SFlag                  I     2 reg
// wci_m_9_SResp                  I     2
// wci_m_9_SData                  I    32
// wci_m_9_SFlag                  I     2 reg
// wci_m_10_SResp                 I     2
// wci_m_10_SData                 I    32
// wci_m_10_SFlag                 I     2 reg
// wci_m_11_SResp                 I     2
// wci_m_11_SData                 I    32
// wci_m_11_SFlag                 I     2 reg
// wci_m_12_SResp                 I     2
// wci_m_12_SData                 I    32
// wci_m_12_SFlag                 I     2 reg
// wmiS0_MCmd                     I     3
// wmiS0_MReqInfo                 I     1
// wmiS0_MAddrSpace               I     1
// wmiS0_MAddr                    I    14
// wmiS0_MBurstLength             I    12
// wmiS0_MData                    I    32
// wmiS0_MDataByteEn              I     4
// wmiS0_arg_mFlag                I    32 reg
// wmiS1_MCmd                     I     3
// wmiS1_MReqInfo                 I     1
// wmiS1_MAddrSpace               I     1
// wmiS1_MAddr                    I    14
// wmiS1_MBurstLength             I    12
// wmiS1_MData                    I    32
// wmiS1_MDataByteEn              I     4
// wmiS1_arg_mFlag                I    32 reg
// gps_ppsSyncIn_x                I     1 reg
// EN_server_request_put          I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wci_m_5_SThreadBusy            I     1 reg
// wci_m_6_SThreadBusy            I     1 reg
// wci_m_7_SThreadBusy            I     1 reg
// wci_m_8_SThreadBusy            I     1 reg
// wci_m_9_SThreadBusy            I     1 reg
// wci_m_10_SThreadBusy           I     1 reg
// wci_m_11_SThreadBusy           I     1 reg
// wci_m_12_SThreadBusy           I     1 reg
// wmiS0_MReqLast                 I     1
// wmiS0_MDataValid               I     1
// wmiS0_MDataLast                I     1
// wmiS0_MReset_n                 I     1 reg
// wmiS1_MReqLast                 I     1
// wmiS1_MDataValid               I     1
// wmiS1_MDataLast                I     1
// wmiS1_MReset_n                 I     1 reg
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCInf4B(pciDevice,
		 CLK_sys0_clk,
		 RST_N_sys0_rst,
		 CLK,
		 RST_N,

		 server_request_put,
		 EN_server_request_put,
		 RDY_server_request_put,

		 EN_server_response_get,
		 server_response_get,
		 RDY_server_response_get,

		 led,

		 switch_x,

		 wci_m_0_MCmd,

		 wci_m_0_MAddrSpace,

		 wci_m_0_MByteEn,

		 wci_m_0_MAddr,

		 wci_m_0_MData,

		 wci_m_0_SResp,

		 wci_m_0_SData,

		 wci_m_0_SThreadBusy,

		 wci_m_0_SFlag,

		 wci_m_0_MFlag,

		 wci_m_1_MCmd,

		 wci_m_1_MAddrSpace,

		 wci_m_1_MByteEn,

		 wci_m_1_MAddr,

		 wci_m_1_MData,

		 wci_m_1_SResp,

		 wci_m_1_SData,

		 wci_m_1_SThreadBusy,

		 wci_m_1_SFlag,

		 wci_m_1_MFlag,

		 wci_m_2_MCmd,

		 wci_m_2_MAddrSpace,

		 wci_m_2_MByteEn,

		 wci_m_2_MAddr,

		 wci_m_2_MData,

		 wci_m_2_SResp,

		 wci_m_2_SData,

		 wci_m_2_SThreadBusy,

		 wci_m_2_SFlag,

		 wci_m_2_MFlag,

		 wci_m_3_MCmd,

		 wci_m_3_MAddrSpace,

		 wci_m_3_MByteEn,

		 wci_m_3_MAddr,

		 wci_m_3_MData,

		 wci_m_3_SResp,

		 wci_m_3_SData,

		 wci_m_3_SThreadBusy,

		 wci_m_3_SFlag,

		 wci_m_3_MFlag,

		 wci_m_4_MCmd,

		 wci_m_4_MAddrSpace,

		 wci_m_4_MByteEn,

		 wci_m_4_MAddr,

		 wci_m_4_MData,

		 wci_m_4_SResp,

		 wci_m_4_SData,

		 wci_m_4_SThreadBusy,

		 wci_m_4_SFlag,

		 wci_m_4_MFlag,

		 wci_m_5_MCmd,

		 wci_m_5_MAddrSpace,

		 wci_m_5_MByteEn,

		 wci_m_5_MAddr,

		 wci_m_5_MData,

		 wci_m_5_SResp,

		 wci_m_5_SData,

		 wci_m_5_SThreadBusy,

		 wci_m_5_SFlag,

		 wci_m_5_MFlag,

		 wci_m_6_MCmd,

		 wci_m_6_MAddrSpace,

		 wci_m_6_MByteEn,

		 wci_m_6_MAddr,

		 wci_m_6_MData,

		 wci_m_6_SResp,

		 wci_m_6_SData,

		 wci_m_6_SThreadBusy,

		 wci_m_6_SFlag,

		 wci_m_6_MFlag,

		 wci_m_7_MCmd,

		 wci_m_7_MAddrSpace,

		 wci_m_7_MByteEn,

		 wci_m_7_MAddr,

		 wci_m_7_MData,

		 wci_m_7_SResp,

		 wci_m_7_SData,

		 wci_m_7_SThreadBusy,

		 wci_m_7_SFlag,

		 wci_m_7_MFlag,

		 wci_m_8_MCmd,

		 wci_m_8_MAddrSpace,

		 wci_m_8_MByteEn,

		 wci_m_8_MAddr,

		 wci_m_8_MData,

		 wci_m_8_SResp,

		 wci_m_8_SData,

		 wci_m_8_SThreadBusy,

		 wci_m_8_SFlag,

		 wci_m_8_MFlag,

		 wci_m_9_MCmd,

		 wci_m_9_MAddrSpace,

		 wci_m_9_MByteEn,

		 wci_m_9_MAddr,

		 wci_m_9_MData,

		 wci_m_9_SResp,

		 wci_m_9_SData,

		 wci_m_9_SThreadBusy,

		 wci_m_9_SFlag,

		 wci_m_9_MFlag,

		 wci_m_10_MCmd,

		 wci_m_10_MAddrSpace,

		 wci_m_10_MByteEn,

		 wci_m_10_MAddr,

		 wci_m_10_MData,

		 wci_m_10_SResp,

		 wci_m_10_SData,

		 wci_m_10_SThreadBusy,

		 wci_m_10_SFlag,

		 wci_m_10_MFlag,

		 wci_m_11_MCmd,

		 wci_m_11_MAddrSpace,

		 wci_m_11_MByteEn,

		 wci_m_11_MAddr,

		 wci_m_11_MData,

		 wci_m_11_SResp,

		 wci_m_11_SData,

		 wci_m_11_SThreadBusy,

		 wci_m_11_SFlag,

		 wci_m_11_MFlag,

		 wci_m_12_MCmd,

		 wci_m_12_MAddrSpace,

		 wci_m_12_MByteEn,

		 wci_m_12_MAddr,

		 wci_m_12_MData,

		 wci_m_12_SResp,

		 wci_m_12_SData,

		 wci_m_12_SThreadBusy,

		 wci_m_12_SFlag,

		 wci_m_12_MFlag,

		 wmiS0_MCmd,

		 wmiS0_MReqLast,

		 wmiS0_MReqInfo,

		 wmiS0_MAddrSpace,

		 wmiS0_MAddr,

		 wmiS0_MBurstLength,

		 wmiS0_MDataValid,

		 wmiS0_MDataLast,

		 wmiS0_MData,

		 wmiS0_MDataByteEn,

		 wmiS0_SResp,

		 wmiS0_SData,

		 wmiS0_SThreadBusy,

		 wmiS0_SDataThreadBusy,

		 wmiS0_SRespLast,

		 wmiS0_SFlag,

		 wmiS0_arg_mFlag,

		 wmiS0_SReset_n,

		 wmiS0_MReset_n,

		 wmiS1_MCmd,

		 wmiS1_MReqLast,

		 wmiS1_MReqInfo,

		 wmiS1_MAddrSpace,

		 wmiS1_MAddr,

		 wmiS1_MBurstLength,

		 wmiS1_MDataValid,

		 wmiS1_MDataLast,

		 wmiS1_MData,

		 wmiS1_MDataByteEn,

		 wmiS1_SResp,

		 wmiS1_SData,

		 wmiS1_SThreadBusy,

		 wmiS1_SDataThreadBusy,

		 wmiS1_SRespLast,

		 wmiS1_SFlag,

		 wmiS1_arg_mFlag,

		 wmiS1_SReset_n,

		 wmiS1_MReset_n,

		 cpNow,
		 RDY_cpNow,

		 gps_ppsSyncIn_x,

		 gps_ppsSyncOut,

		 RST_N_wci_m_0,
		 RST_N_wci_m_1,
		 RST_N_wci_m_2,
		 RST_N_wci_m_3,
		 RST_N_wci_m_4,
		 RST_N_wci_m_5,
		 RST_N_wci_m_6,
		 RST_N_wci_m_7,
		 RST_N_wci_m_8,
		 RST_N_wci_m_9,
		 RST_N_wci_m_10,
		 RST_N_wci_m_11,
		 RST_N_wci_m_12);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [19 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [19 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [19 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [19 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [19 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method wci_m_5_mCmd
  output [2 : 0] wci_m_5_MCmd;

  // value method wci_m_5_mAddrSpace
  output wci_m_5_MAddrSpace;

  // value method wci_m_5_mByteEn
  output [3 : 0] wci_m_5_MByteEn;

  // value method wci_m_5_mAddr
  output [19 : 0] wci_m_5_MAddr;

  // value method wci_m_5_mData
  output [31 : 0] wci_m_5_MData;

  // action method wci_m_5_sResp
  input  [1 : 0] wci_m_5_SResp;

  // action method wci_m_5_sData
  input  [31 : 0] wci_m_5_SData;

  // action method wci_m_5_sThreadBusy
  input  wci_m_5_SThreadBusy;

  // action method wci_m_5_sFlag
  input  [1 : 0] wci_m_5_SFlag;

  // value method wci_m_5_mFlag
  output [1 : 0] wci_m_5_MFlag;

  // value method wci_m_6_mCmd
  output [2 : 0] wci_m_6_MCmd;

  // value method wci_m_6_mAddrSpace
  output wci_m_6_MAddrSpace;

  // value method wci_m_6_mByteEn
  output [3 : 0] wci_m_6_MByteEn;

  // value method wci_m_6_mAddr
  output [19 : 0] wci_m_6_MAddr;

  // value method wci_m_6_mData
  output [31 : 0] wci_m_6_MData;

  // action method wci_m_6_sResp
  input  [1 : 0] wci_m_6_SResp;

  // action method wci_m_6_sData
  input  [31 : 0] wci_m_6_SData;

  // action method wci_m_6_sThreadBusy
  input  wci_m_6_SThreadBusy;

  // action method wci_m_6_sFlag
  input  [1 : 0] wci_m_6_SFlag;

  // value method wci_m_6_mFlag
  output [1 : 0] wci_m_6_MFlag;

  // value method wci_m_7_mCmd
  output [2 : 0] wci_m_7_MCmd;

  // value method wci_m_7_mAddrSpace
  output wci_m_7_MAddrSpace;

  // value method wci_m_7_mByteEn
  output [3 : 0] wci_m_7_MByteEn;

  // value method wci_m_7_mAddr
  output [19 : 0] wci_m_7_MAddr;

  // value method wci_m_7_mData
  output [31 : 0] wci_m_7_MData;

  // action method wci_m_7_sResp
  input  [1 : 0] wci_m_7_SResp;

  // action method wci_m_7_sData
  input  [31 : 0] wci_m_7_SData;

  // action method wci_m_7_sThreadBusy
  input  wci_m_7_SThreadBusy;

  // action method wci_m_7_sFlag
  input  [1 : 0] wci_m_7_SFlag;

  // value method wci_m_7_mFlag
  output [1 : 0] wci_m_7_MFlag;

  // value method wci_m_8_mCmd
  output [2 : 0] wci_m_8_MCmd;

  // value method wci_m_8_mAddrSpace
  output wci_m_8_MAddrSpace;

  // value method wci_m_8_mByteEn
  output [3 : 0] wci_m_8_MByteEn;

  // value method wci_m_8_mAddr
  output [19 : 0] wci_m_8_MAddr;

  // value method wci_m_8_mData
  output [31 : 0] wci_m_8_MData;

  // action method wci_m_8_sResp
  input  [1 : 0] wci_m_8_SResp;

  // action method wci_m_8_sData
  input  [31 : 0] wci_m_8_SData;

  // action method wci_m_8_sThreadBusy
  input  wci_m_8_SThreadBusy;

  // action method wci_m_8_sFlag
  input  [1 : 0] wci_m_8_SFlag;

  // value method wci_m_8_mFlag
  output [1 : 0] wci_m_8_MFlag;

  // value method wci_m_9_mCmd
  output [2 : 0] wci_m_9_MCmd;

  // value method wci_m_9_mAddrSpace
  output wci_m_9_MAddrSpace;

  // value method wci_m_9_mByteEn
  output [3 : 0] wci_m_9_MByteEn;

  // value method wci_m_9_mAddr
  output [19 : 0] wci_m_9_MAddr;

  // value method wci_m_9_mData
  output [31 : 0] wci_m_9_MData;

  // action method wci_m_9_sResp
  input  [1 : 0] wci_m_9_SResp;

  // action method wci_m_9_sData
  input  [31 : 0] wci_m_9_SData;

  // action method wci_m_9_sThreadBusy
  input  wci_m_9_SThreadBusy;

  // action method wci_m_9_sFlag
  input  [1 : 0] wci_m_9_SFlag;

  // value method wci_m_9_mFlag
  output [1 : 0] wci_m_9_MFlag;

  // value method wci_m_10_mCmd
  output [2 : 0] wci_m_10_MCmd;

  // value method wci_m_10_mAddrSpace
  output wci_m_10_MAddrSpace;

  // value method wci_m_10_mByteEn
  output [3 : 0] wci_m_10_MByteEn;

  // value method wci_m_10_mAddr
  output [19 : 0] wci_m_10_MAddr;

  // value method wci_m_10_mData
  output [31 : 0] wci_m_10_MData;

  // action method wci_m_10_sResp
  input  [1 : 0] wci_m_10_SResp;

  // action method wci_m_10_sData
  input  [31 : 0] wci_m_10_SData;

  // action method wci_m_10_sThreadBusy
  input  wci_m_10_SThreadBusy;

  // action method wci_m_10_sFlag
  input  [1 : 0] wci_m_10_SFlag;

  // value method wci_m_10_mFlag
  output [1 : 0] wci_m_10_MFlag;

  // value method wci_m_11_mCmd
  output [2 : 0] wci_m_11_MCmd;

  // value method wci_m_11_mAddrSpace
  output wci_m_11_MAddrSpace;

  // value method wci_m_11_mByteEn
  output [3 : 0] wci_m_11_MByteEn;

  // value method wci_m_11_mAddr
  output [19 : 0] wci_m_11_MAddr;

  // value method wci_m_11_mData
  output [31 : 0] wci_m_11_MData;

  // action method wci_m_11_sResp
  input  [1 : 0] wci_m_11_SResp;

  // action method wci_m_11_sData
  input  [31 : 0] wci_m_11_SData;

  // action method wci_m_11_sThreadBusy
  input  wci_m_11_SThreadBusy;

  // action method wci_m_11_sFlag
  input  [1 : 0] wci_m_11_SFlag;

  // value method wci_m_11_mFlag
  output [1 : 0] wci_m_11_MFlag;

  // value method wci_m_12_mCmd
  output [2 : 0] wci_m_12_MCmd;

  // value method wci_m_12_mAddrSpace
  output wci_m_12_MAddrSpace;

  // value method wci_m_12_mByteEn
  output [3 : 0] wci_m_12_MByteEn;

  // value method wci_m_12_mAddr
  output [19 : 0] wci_m_12_MAddr;

  // value method wci_m_12_mData
  output [31 : 0] wci_m_12_MData;

  // action method wci_m_12_sResp
  input  [1 : 0] wci_m_12_SResp;

  // action method wci_m_12_sData
  input  [31 : 0] wci_m_12_SData;

  // action method wci_m_12_sThreadBusy
  input  wci_m_12_SThreadBusy;

  // action method wci_m_12_sFlag
  input  [1 : 0] wci_m_12_SFlag;

  // value method wci_m_12_mFlag
  output [1 : 0] wci_m_12_MFlag;

  // action method wmiS0_mCmd
  input  [2 : 0] wmiS0_MCmd;

  // action method wmiS0_mReqLast
  input  wmiS0_MReqLast;

  // action method wmiS0_mReqInfo
  input  wmiS0_MReqInfo;

  // action method wmiS0_mAddrSpace
  input  wmiS0_MAddrSpace;

  // action method wmiS0_mAddr
  input  [13 : 0] wmiS0_MAddr;

  // action method wmiS0_mBurstLength
  input  [11 : 0] wmiS0_MBurstLength;

  // action method wmiS0_mDataValid
  input  wmiS0_MDataValid;

  // action method wmiS0_mDataLast
  input  wmiS0_MDataLast;

  // action method wmiS0_mData
  input  [31 : 0] wmiS0_MData;

  // action method wmiS0_mDataInfo

  // action method wmiS0_mDataByteEn
  input  [3 : 0] wmiS0_MDataByteEn;

  // value method wmiS0_sResp
  output [1 : 0] wmiS0_SResp;

  // value method wmiS0_sData
  output [31 : 0] wmiS0_SData;

  // value method wmiS0_sThreadBusy
  output wmiS0_SThreadBusy;

  // value method wmiS0_sDataThreadBusy
  output wmiS0_SDataThreadBusy;

  // value method wmiS0_sRespLast
  output wmiS0_SRespLast;

  // value method wmiS0_sFlag
  output [31 : 0] wmiS0_SFlag;

  // action method wmiS0_mFlag
  input  [31 : 0] wmiS0_arg_mFlag;

  // value method wmiS0_sReset_n
  output wmiS0_SReset_n;

  // action method wmiS0_mReset_n
  input  wmiS0_MReset_n;

  // action method wmiS1_mCmd
  input  [2 : 0] wmiS1_MCmd;

  // action method wmiS1_mReqLast
  input  wmiS1_MReqLast;

  // action method wmiS1_mReqInfo
  input  wmiS1_MReqInfo;

  // action method wmiS1_mAddrSpace
  input  wmiS1_MAddrSpace;

  // action method wmiS1_mAddr
  input  [13 : 0] wmiS1_MAddr;

  // action method wmiS1_mBurstLength
  input  [11 : 0] wmiS1_MBurstLength;

  // action method wmiS1_mDataValid
  input  wmiS1_MDataValid;

  // action method wmiS1_mDataLast
  input  wmiS1_MDataLast;

  // action method wmiS1_mData
  input  [31 : 0] wmiS1_MData;

  // action method wmiS1_mDataInfo

  // action method wmiS1_mDataByteEn
  input  [3 : 0] wmiS1_MDataByteEn;

  // value method wmiS1_sResp
  output [1 : 0] wmiS1_SResp;

  // value method wmiS1_sData
  output [31 : 0] wmiS1_SData;

  // value method wmiS1_sThreadBusy
  output wmiS1_SThreadBusy;

  // value method wmiS1_sDataThreadBusy
  output wmiS1_SDataThreadBusy;

  // value method wmiS1_sRespLast
  output wmiS1_SRespLast;

  // value method wmiS1_sFlag
  output [31 : 0] wmiS1_SFlag;

  // action method wmiS1_mFlag
  input  [31 : 0] wmiS1_arg_mFlag;

  // value method wmiS1_sReset_n
  output wmiS1_SReset_n;

  // action method wmiS1_mReset_n
  input  wmiS1_MReset_n;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // output resets
  output RST_N_wci_m_0;
  output RST_N_wci_m_1;
  output RST_N_wci_m_2;
  output RST_N_wci_m_3;
  output RST_N_wci_m_4;
  output RST_N_wci_m_5;
  output RST_N_wci_m_6;
  output RST_N_wci_m_7;
  output RST_N_wci_m_8;
  output RST_N_wci_m_9;
  output RST_N_wci_m_10;
  output RST_N_wci_m_11;
  output RST_N_wci_m_12;

  // signals for module outputs
  wire [152 : 0] server_response_get;
  wire [63 : 0] cpNow;
  wire [31 : 0] wci_m_0_MData,
		wci_m_10_MData,
		wci_m_11_MData,
		wci_m_12_MData,
		wci_m_1_MData,
		wci_m_2_MData,
		wci_m_3_MData,
		wci_m_4_MData,
		wci_m_5_MData,
		wci_m_6_MData,
		wci_m_7_MData,
		wci_m_8_MData,
		wci_m_9_MData,
		wmiS0_SData,
		wmiS0_SFlag,
		wmiS1_SData,
		wmiS1_SFlag;
  wire [19 : 0] wci_m_0_MAddr,
		wci_m_10_MAddr,
		wci_m_11_MAddr,
		wci_m_12_MAddr,
		wci_m_1_MAddr,
		wci_m_2_MAddr,
		wci_m_3_MAddr,
		wci_m_4_MAddr,
		wci_m_5_MAddr,
		wci_m_6_MAddr,
		wci_m_7_MAddr,
		wci_m_8_MAddr,
		wci_m_9_MAddr;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_10_MByteEn,
	       wci_m_11_MByteEn,
	       wci_m_12_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wci_m_5_MByteEn,
	       wci_m_6_MByteEn,
	       wci_m_7_MByteEn,
	       wci_m_8_MByteEn,
	       wci_m_9_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_10_MCmd,
	       wci_m_11_MCmd,
	       wci_m_12_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wci_m_5_MCmd,
	       wci_m_6_MCmd,
	       wci_m_7_MCmd,
	       wci_m_8_MCmd,
	       wci_m_9_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_10_MFlag,
	       wci_m_11_MFlag,
	       wci_m_12_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag,
	       wci_m_5_MFlag,
	       wci_m_6_MFlag,
	       wci_m_7_MFlag,
	       wci_m_8_MFlag,
	       wci_m_9_MFlag,
	       wmiS0_SResp,
	       wmiS1_SResp;
  wire RDY_cpNow,
       RDY_server_request_put,
       RDY_server_response_get,
       RST_N_wci_m_0,
       RST_N_wci_m_1,
       RST_N_wci_m_10,
       RST_N_wci_m_11,
       RST_N_wci_m_12,
       RST_N_wci_m_2,
       RST_N_wci_m_3,
       RST_N_wci_m_4,
       RST_N_wci_m_5,
       RST_N_wci_m_6,
       RST_N_wci_m_7,
       RST_N_wci_m_8,
       RST_N_wci_m_9,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_10_MAddrSpace,
       wci_m_11_MAddrSpace,
       wci_m_12_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wci_m_5_MAddrSpace,
       wci_m_6_MAddrSpace,
       wci_m_7_MAddrSpace,
       wci_m_8_MAddrSpace,
       wci_m_9_MAddrSpace,
       wmiS0_SDataThreadBusy,
       wmiS0_SReset_n,
       wmiS0_SRespLast,
       wmiS0_SThreadBusy,
       wmiS1_SDataThreadBusy,
       wmiS1_SReset_n,
       wmiS1_SRespLast,
       wmiS1_SThreadBusy;

  // inlined wires
  wire [66 : 0] dp0_wti_wtiReq$wget, dp1_wti_wtiReq$wget;
  wire [63 : 0] dp0_wmi_nowW$wget, dp1_wmi_nowW$wget;
  wire [59 : 0] dp0_wci_wciReq$wget, dp1_wci_wciReq$wget;
  wire [37 : 0] dp0_wmi_wmi_wmiDh$wget, dp1_wmi_wmi_wmiDh$wget;
  wire [33 : 0] dp0_wci_respF_x_wire$wget,
		dp0_wmi_wmi_respF_x_wire$wget,
		dp1_wci_respF_x_wire$wget,
		dp1_wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] dp0_bram_serverAdapterA_1_outData_enqData$wget,
		dp0_bram_serverAdapterA_1_outData_outData$wget,
		dp0_bram_serverAdapterA_2_outData_enqData$wget,
		dp0_bram_serverAdapterA_2_outData_outData$wget,
		dp0_bram_serverAdapterA_3_outData_enqData$wget,
		dp0_bram_serverAdapterA_3_outData_outData$wget,
		dp0_bram_serverAdapterA_outData_enqData$wget,
		dp0_bram_serverAdapterA_outData_outData$wget,
		dp0_bram_serverAdapterB_1_outData_enqData$wget,
		dp0_bram_serverAdapterB_1_outData_outData$wget,
		dp0_bram_serverAdapterB_2_outData_enqData$wget,
		dp0_bram_serverAdapterB_2_outData_outData$wget,
		dp0_bram_serverAdapterB_3_outData_enqData$wget,
		dp0_bram_serverAdapterB_3_outData_outData$wget,
		dp0_bram_serverAdapterB_outData_enqData$wget,
		dp0_bram_serverAdapterB_outData_outData$wget,
		dp0_wci_Es_mData_w$wget,
		dp0_wmi_Es_mData_w$wget,
		dp0_wmi_wmi_wmiMFlag$wget,
		dp0_wmi_wmi_wmiReq$wget,
		dp1_bram_serverAdapterA_1_outData_enqData$wget,
		dp1_bram_serverAdapterA_1_outData_outData$wget,
		dp1_bram_serverAdapterA_2_outData_enqData$wget,
		dp1_bram_serverAdapterA_2_outData_outData$wget,
		dp1_bram_serverAdapterA_3_outData_enqData$wget,
		dp1_bram_serverAdapterA_3_outData_outData$wget,
		dp1_bram_serverAdapterA_outData_enqData$wget,
		dp1_bram_serverAdapterA_outData_outData$wget,
		dp1_bram_serverAdapterB_1_outData_enqData$wget,
		dp1_bram_serverAdapterB_1_outData_outData$wget,
		dp1_bram_serverAdapterB_2_outData_enqData$wget,
		dp1_bram_serverAdapterB_2_outData_outData$wget,
		dp1_bram_serverAdapterB_3_outData_enqData$wget,
		dp1_bram_serverAdapterB_3_outData_outData$wget,
		dp1_bram_serverAdapterB_outData_enqData$wget,
		dp1_bram_serverAdapterB_outData_outData$wget,
		dp1_wci_Es_mData_w$wget,
		dp1_wmi_Es_mData_w$wget,
		dp1_wmi_wmi_wmiMFlag$wget,
		dp1_wmi_wmi_wmiReq$wget;
  wire [19 : 0] dp0_wci_Es_mAddr_w$wget, dp1_wci_Es_mAddr_w$wget;
  wire [15 : 0] dp0_bml_crdBuf_modulus_bw$wget,
		dp0_bml_fabBuf_modulus_bw$wget,
		dp0_bml_lclBuf_modulus_bw$wget,
		dp0_bml_remBuf_modulus_bw$wget,
		dp1_bml_crdBuf_modulus_bw$wget,
		dp1_bml_fabBuf_modulus_bw$wget,
		dp1_bml_lclBuf_modulus_bw$wget,
		dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] dp0_wmi_Es_mAddr_w$wget, dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] dp0_wmi_Es_mBurstLength_w$wget,
		dp1_wmi_Es_mBurstLength_w$wget;
  wire [3 : 0] dp0_bml_dpControl$wget,
	       dp0_tlp_dpControl$wget,
	       dp0_wci_Es_mByteEn_w$wget,
	       dp0_wmi_Es_mDataByteEn_w$wget,
	       dp0_wmi_dpControl$wget,
	       dp1_bml_dpControl$wget,
	       dp1_tlp_dpControl$wget,
	       dp1_wci_Es_mByteEn_w$wget,
	       dp1_wmi_Es_mDataByteEn_w$wget,
	       dp1_wmi_dpControl$wget;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_1$wget,
	       dp0_bram_serverAdapterA_1_cnt_2$wget,
	       dp0_bram_serverAdapterA_1_cnt_3$wget,
	       dp0_bram_serverAdapterA_2_cnt_1$wget,
	       dp0_bram_serverAdapterA_2_cnt_2$wget,
	       dp0_bram_serverAdapterA_2_cnt_3$wget,
	       dp0_bram_serverAdapterA_3_cnt_1$wget,
	       dp0_bram_serverAdapterA_3_cnt_2$wget,
	       dp0_bram_serverAdapterA_3_cnt_3$wget,
	       dp0_bram_serverAdapterA_cnt_1$wget,
	       dp0_bram_serverAdapterA_cnt_2$wget,
	       dp0_bram_serverAdapterA_cnt_3$wget,
	       dp0_bram_serverAdapterB_1_cnt_1$wget,
	       dp0_bram_serverAdapterB_1_cnt_2$wget,
	       dp0_bram_serverAdapterB_1_cnt_3$wget,
	       dp0_bram_serverAdapterB_2_cnt_1$wget,
	       dp0_bram_serverAdapterB_2_cnt_2$wget,
	       dp0_bram_serverAdapterB_2_cnt_3$wget,
	       dp0_bram_serverAdapterB_3_cnt_1$wget,
	       dp0_bram_serverAdapterB_3_cnt_2$wget,
	       dp0_bram_serverAdapterB_3_cnt_3$wget,
	       dp0_bram_serverAdapterB_cnt_1$wget,
	       dp0_bram_serverAdapterB_cnt_2$wget,
	       dp0_bram_serverAdapterB_cnt_3$wget,
	       dp0_wci_Es_mCmd_w$wget,
	       dp0_wci_wEdge$wget,
	       dp0_wmi_Es_mCmd_w$wget,
	       dp1_bram_serverAdapterA_1_cnt_1$wget,
	       dp1_bram_serverAdapterA_1_cnt_2$wget,
	       dp1_bram_serverAdapterA_1_cnt_3$wget,
	       dp1_bram_serverAdapterA_2_cnt_1$wget,
	       dp1_bram_serverAdapterA_2_cnt_2$wget,
	       dp1_bram_serverAdapterA_2_cnt_3$wget,
	       dp1_bram_serverAdapterA_3_cnt_1$wget,
	       dp1_bram_serverAdapterA_3_cnt_2$wget,
	       dp1_bram_serverAdapterA_3_cnt_3$wget,
	       dp1_bram_serverAdapterA_cnt_1$wget,
	       dp1_bram_serverAdapterA_cnt_2$wget,
	       dp1_bram_serverAdapterA_cnt_3$wget,
	       dp1_bram_serverAdapterB_1_cnt_1$wget,
	       dp1_bram_serverAdapterB_1_cnt_2$wget,
	       dp1_bram_serverAdapterB_1_cnt_3$wget,
	       dp1_bram_serverAdapterB_2_cnt_1$wget,
	       dp1_bram_serverAdapterB_2_cnt_2$wget,
	       dp1_bram_serverAdapterB_2_cnt_3$wget,
	       dp1_bram_serverAdapterB_3_cnt_1$wget,
	       dp1_bram_serverAdapterB_3_cnt_2$wget,
	       dp1_bram_serverAdapterB_3_cnt_3$wget,
	       dp1_bram_serverAdapterB_cnt_1$wget,
	       dp1_bram_serverAdapterB_cnt_2$wget,
	       dp1_bram_serverAdapterB_cnt_3$wget,
	       dp1_wci_Es_mCmd_w$wget,
	       dp1_wci_wEdge$wget,
	       dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1_1$wget,
	       dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       dp0_bram_serverAdapterA_2_s1_1$wget,
	       dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       dp0_bram_serverAdapterA_3_s1_1$wget,
	       dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       dp0_bram_serverAdapterA_s1_1$wget,
	       dp0_bram_serverAdapterA_writeWithResp$wget,
	       dp0_bram_serverAdapterB_1_s1_1$wget,
	       dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       dp0_bram_serverAdapterB_2_s1_1$wget,
	       dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       dp0_bram_serverAdapterB_3_s1_1$wget,
	       dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       dp0_bram_serverAdapterB_s1_1$wget,
	       dp0_bram_serverAdapterB_writeWithResp$wget,
	       dp1_bram_serverAdapterA_1_s1_1$wget,
	       dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       dp1_bram_serverAdapterA_2_s1_1$wget,
	       dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       dp1_bram_serverAdapterA_3_s1_1$wget,
	       dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       dp1_bram_serverAdapterA_s1_1$wget,
	       dp1_bram_serverAdapterA_writeWithResp$wget,
	       dp1_bram_serverAdapterB_1_s1_1$wget,
	       dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       dp1_bram_serverAdapterB_2_s1_1$wget,
	       dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       dp1_bram_serverAdapterB_3_s1_1$wget,
	       dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       dp1_bram_serverAdapterB_s1_1$wget,
	       dp1_bram_serverAdapterB_writeWithResp$wget;
  wire dp0_bml_crdBuf_decAction$whas,
       dp0_bml_crdBuf_incAction$whas,
       dp0_bml_dpControl$whas,
       dp0_bml_fabAvail_1$wget,
       dp0_bml_fabAvail_1$whas,
       dp0_bml_fabBuf_decAction$whas,
       dp0_bml_fabBuf_incAction$whas,
       dp0_bml_fabDone_1$wget,
       dp0_bml_fabDone_1$whas,
       dp0_bml_lclBufDone_1$wget,
       dp0_bml_lclBufDone_1$whas,
       dp0_bml_lclBufStart_1$wget,
       dp0_bml_lclBufStart_1$whas,
       dp0_bml_lclBuf_decAction$whas,
       dp0_bml_lclBuf_incAction$whas,
       dp0_bml_remBuf_decAction$whas,
       dp0_bml_remBuf_incAction$whas,
       dp0_bml_remDone_1$wget,
       dp0_bml_remDone_1$whas,
       dp0_bml_remStart_1$wget,
       dp0_bml_remStart_1$whas,
       dp0_bram_serverAdapterA_1_cnt_1$whas,
       dp0_bram_serverAdapterA_1_cnt_2$whas,
       dp0_bram_serverAdapterA_1_cnt_3$whas,
       dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_1_outData_enqData$whas,
       dp0_bram_serverAdapterA_1_outData_outData$whas,
       dp0_bram_serverAdapterA_1_s1_1$whas,
       dp0_bram_serverAdapterA_1_writeWithResp$whas,
       dp0_bram_serverAdapterA_2_cnt_1$whas,
       dp0_bram_serverAdapterA_2_cnt_2$whas,
       dp0_bram_serverAdapterA_2_cnt_3$whas,
       dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_2_outData_enqData$whas,
       dp0_bram_serverAdapterA_2_outData_outData$whas,
       dp0_bram_serverAdapterA_2_s1_1$whas,
       dp0_bram_serverAdapterA_2_writeWithResp$whas,
       dp0_bram_serverAdapterA_3_cnt_1$whas,
       dp0_bram_serverAdapterA_3_cnt_2$whas,
       dp0_bram_serverAdapterA_3_cnt_3$whas,
       dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_3_outData_enqData$whas,
       dp0_bram_serverAdapterA_3_outData_outData$whas,
       dp0_bram_serverAdapterA_3_s1_1$whas,
       dp0_bram_serverAdapterA_3_writeWithResp$whas,
       dp0_bram_serverAdapterA_cnt_1$whas,
       dp0_bram_serverAdapterA_cnt_2$whas,
       dp0_bram_serverAdapterA_cnt_3$whas,
       dp0_bram_serverAdapterA_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_outData_enqData$whas,
       dp0_bram_serverAdapterA_outData_outData$whas,
       dp0_bram_serverAdapterA_s1_1$whas,
       dp0_bram_serverAdapterA_writeWithResp$whas,
       dp0_bram_serverAdapterB_1_cnt_1$whas,
       dp0_bram_serverAdapterB_1_cnt_2$whas,
       dp0_bram_serverAdapterB_1_cnt_3$whas,
       dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_1_outData_enqData$whas,
       dp0_bram_serverAdapterB_1_outData_outData$whas,
       dp0_bram_serverAdapterB_1_s1_1$whas,
       dp0_bram_serverAdapterB_1_writeWithResp$whas,
       dp0_bram_serverAdapterB_2_cnt_1$whas,
       dp0_bram_serverAdapterB_2_cnt_2$whas,
       dp0_bram_serverAdapterB_2_cnt_3$whas,
       dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_2_outData_enqData$whas,
       dp0_bram_serverAdapterB_2_outData_outData$whas,
       dp0_bram_serverAdapterB_2_s1_1$whas,
       dp0_bram_serverAdapterB_2_writeWithResp$whas,
       dp0_bram_serverAdapterB_3_cnt_1$whas,
       dp0_bram_serverAdapterB_3_cnt_2$whas,
       dp0_bram_serverAdapterB_3_cnt_3$whas,
       dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_3_outData_enqData$whas,
       dp0_bram_serverAdapterB_3_outData_outData$whas,
       dp0_bram_serverAdapterB_3_s1_1$whas,
       dp0_bram_serverAdapterB_3_writeWithResp$whas,
       dp0_bram_serverAdapterB_cnt_1$whas,
       dp0_bram_serverAdapterB_cnt_2$whas,
       dp0_bram_serverAdapterB_cnt_3$whas,
       dp0_bram_serverAdapterB_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_outData_enqData$whas,
       dp0_bram_serverAdapterB_outData_outData$whas,
       dp0_bram_serverAdapterB_s1_1$whas,
       dp0_bram_serverAdapterB_writeWithResp$whas,
       dp0_tlp_creditReady_1$wget,
       dp0_tlp_creditReady_1$whas,
       dp0_tlp_dpControl$whas,
       dp0_tlp_farBufReady_1$wget,
       dp0_tlp_farBufReady_1$whas,
       dp0_tlp_nearBufReady_1$wget,
       dp0_tlp_nearBufReady_1$whas,
       dp0_tlp_pullTagMatch_1$wget,
       dp0_tlp_pullTagMatch_1$whas,
       dp0_tlp_remDone_1$wget,
       dp0_tlp_remDone_1$whas,
       dp0_tlp_remStart_1$wget,
       dp0_tlp_remStart_1$whas,
       dp0_wci_Es_mAddrSpace_w$wget,
       dp0_wci_Es_mAddrSpace_w$whas,
       dp0_wci_Es_mAddr_w$whas,
       dp0_wci_Es_mByteEn_w$whas,
       dp0_wci_Es_mCmd_w$whas,
       dp0_wci_Es_mData_w$whas,
       dp0_wci_ctlAckReg_1$wget,
       dp0_wci_ctlAckReg_1$whas,
       dp0_wci_reqF_r_clr$whas,
       dp0_wci_reqF_r_deq$whas,
       dp0_wci_reqF_r_enq$whas,
       dp0_wci_respF_dequeueing$whas,
       dp0_wci_respF_enqueueing$whas,
       dp0_wci_respF_x_wire$whas,
       dp0_wci_sFlagReg_1$wget,
       dp0_wci_sFlagReg_1$whas,
       dp0_wci_sThreadBusy_pw$whas,
       dp0_wci_wEdge$whas,
       dp0_wci_wciReq$whas,
       dp0_wci_wci_cfrd_pw$whas,
       dp0_wci_wci_cfwr_pw$whas,
       dp0_wci_wci_ctrl_pw$whas,
       dp0_wmi_Es_mAddrSpace_w$wget,
       dp0_wmi_Es_mAddrSpace_w$whas,
       dp0_wmi_Es_mAddr_w$whas,
       dp0_wmi_Es_mBurstLength_w$whas,
       dp0_wmi_Es_mCmd_w$whas,
       dp0_wmi_Es_mDataByteEn_w$whas,
       dp0_wmi_Es_mDataInfo_w$whas,
       dp0_wmi_Es_mDataLast_w$whas,
       dp0_wmi_Es_mDataValid_w$whas,
       dp0_wmi_Es_mData_w$whas,
       dp0_wmi_Es_mReqInfo_w$wget,
       dp0_wmi_Es_mReqInfo_w$whas,
       dp0_wmi_Es_mReqLast_w$whas,
       dp0_wmi_dpControl$whas,
       dp0_wmi_mesgBufReady_1$wget,
       dp0_wmi_mesgBufReady_1$whas,
       dp0_wmi_mesgDone_1$wget,
       dp0_wmi_mesgDone_1$whas,
       dp0_wmi_mesgStart_1$wget,
       dp0_wmi_mesgStart_1$whas,
       dp0_wmi_nowW$whas,
       dp0_wmi_wmi_dhF_doResetClr$whas,
       dp0_wmi_wmi_dhF_doResetDeq$whas,
       dp0_wmi_wmi_dhF_doResetEnq$whas,
       dp0_wmi_wmi_dhF_r_clr$whas,
       dp0_wmi_wmi_dhF_r_deq$whas,
       dp0_wmi_wmi_dhF_r_enq$whas,
       dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       dp0_wmi_wmi_mFlagF_doResetClr$whas,
       dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       dp0_wmi_wmi_mFlagF_r_clr$whas,
       dp0_wmi_wmi_mFlagF_r_deq$whas,
       dp0_wmi_wmi_mFlagF_r_enq$whas,
       dp0_wmi_wmi_operateD_1$wget,
       dp0_wmi_wmi_operateD_1$whas,
       dp0_wmi_wmi_peerIsReady_1$wget,
       dp0_wmi_wmi_peerIsReady_1$whas,
       dp0_wmi_wmi_reqF_doResetClr$whas,
       dp0_wmi_wmi_reqF_doResetDeq$whas,
       dp0_wmi_wmi_reqF_doResetEnq$whas,
       dp0_wmi_wmi_reqF_r_clr$whas,
       dp0_wmi_wmi_reqF_r_deq$whas,
       dp0_wmi_wmi_reqF_r_enq$whas,
       dp0_wmi_wmi_respF_dequeueing$whas,
       dp0_wmi_wmi_respF_enqueueing$whas,
       dp0_wmi_wmi_respF_x_wire$whas,
       dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       dp0_wmi_wmi_sThreadBusy_dw$wget,
       dp0_wmi_wmi_sThreadBusy_dw$whas,
       dp0_wmi_wmi_wmiDh$whas,
       dp0_wmi_wmi_wmiMFlag$whas,
       dp0_wmi_wmi_wmiReq$whas,
       dp0_wti_wtiReq$whas,
       dp1_bml_crdBuf_decAction$whas,
       dp1_bml_crdBuf_incAction$whas,
       dp1_bml_dpControl$whas,
       dp1_bml_fabAvail_1$wget,
       dp1_bml_fabAvail_1$whas,
       dp1_bml_fabBuf_decAction$whas,
       dp1_bml_fabBuf_incAction$whas,
       dp1_bml_fabDone_1$wget,
       dp1_bml_fabDone_1$whas,
       dp1_bml_lclBufDone_1$wget,
       dp1_bml_lclBufDone_1$whas,
       dp1_bml_lclBufStart_1$wget,
       dp1_bml_lclBufStart_1$whas,
       dp1_bml_lclBuf_decAction$whas,
       dp1_bml_lclBuf_incAction$whas,
       dp1_bml_remBuf_decAction$whas,
       dp1_bml_remBuf_incAction$whas,
       dp1_bml_remDone_1$wget,
       dp1_bml_remDone_1$whas,
       dp1_bml_remStart_1$wget,
       dp1_bml_remStart_1$whas,
       dp1_bram_serverAdapterA_1_cnt_1$whas,
       dp1_bram_serverAdapterA_1_cnt_2$whas,
       dp1_bram_serverAdapterA_1_cnt_3$whas,
       dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_1_outData_enqData$whas,
       dp1_bram_serverAdapterA_1_outData_outData$whas,
       dp1_bram_serverAdapterA_1_s1_1$whas,
       dp1_bram_serverAdapterA_1_writeWithResp$whas,
       dp1_bram_serverAdapterA_2_cnt_1$whas,
       dp1_bram_serverAdapterA_2_cnt_2$whas,
       dp1_bram_serverAdapterA_2_cnt_3$whas,
       dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_2_outData_enqData$whas,
       dp1_bram_serverAdapterA_2_outData_outData$whas,
       dp1_bram_serverAdapterA_2_s1_1$whas,
       dp1_bram_serverAdapterA_2_writeWithResp$whas,
       dp1_bram_serverAdapterA_3_cnt_1$whas,
       dp1_bram_serverAdapterA_3_cnt_2$whas,
       dp1_bram_serverAdapterA_3_cnt_3$whas,
       dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_3_outData_enqData$whas,
       dp1_bram_serverAdapterA_3_outData_outData$whas,
       dp1_bram_serverAdapterA_3_s1_1$whas,
       dp1_bram_serverAdapterA_3_writeWithResp$whas,
       dp1_bram_serverAdapterA_cnt_1$whas,
       dp1_bram_serverAdapterA_cnt_2$whas,
       dp1_bram_serverAdapterA_cnt_3$whas,
       dp1_bram_serverAdapterA_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_outData_enqData$whas,
       dp1_bram_serverAdapterA_outData_outData$whas,
       dp1_bram_serverAdapterA_s1_1$whas,
       dp1_bram_serverAdapterA_writeWithResp$whas,
       dp1_bram_serverAdapterB_1_cnt_1$whas,
       dp1_bram_serverAdapterB_1_cnt_2$whas,
       dp1_bram_serverAdapterB_1_cnt_3$whas,
       dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_1_outData_enqData$whas,
       dp1_bram_serverAdapterB_1_outData_outData$whas,
       dp1_bram_serverAdapterB_1_s1_1$whas,
       dp1_bram_serverAdapterB_1_writeWithResp$whas,
       dp1_bram_serverAdapterB_2_cnt_1$whas,
       dp1_bram_serverAdapterB_2_cnt_2$whas,
       dp1_bram_serverAdapterB_2_cnt_3$whas,
       dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_2_outData_enqData$whas,
       dp1_bram_serverAdapterB_2_outData_outData$whas,
       dp1_bram_serverAdapterB_2_s1_1$whas,
       dp1_bram_serverAdapterB_2_writeWithResp$whas,
       dp1_bram_serverAdapterB_3_cnt_1$whas,
       dp1_bram_serverAdapterB_3_cnt_2$whas,
       dp1_bram_serverAdapterB_3_cnt_3$whas,
       dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_3_outData_enqData$whas,
       dp1_bram_serverAdapterB_3_outData_outData$whas,
       dp1_bram_serverAdapterB_3_s1_1$whas,
       dp1_bram_serverAdapterB_3_writeWithResp$whas,
       dp1_bram_serverAdapterB_cnt_1$whas,
       dp1_bram_serverAdapterB_cnt_2$whas,
       dp1_bram_serverAdapterB_cnt_3$whas,
       dp1_bram_serverAdapterB_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_outData_enqData$whas,
       dp1_bram_serverAdapterB_outData_outData$whas,
       dp1_bram_serverAdapterB_s1_1$whas,
       dp1_bram_serverAdapterB_writeWithResp$whas,
       dp1_tlp_creditReady_1$wget,
       dp1_tlp_creditReady_1$whas,
       dp1_tlp_dpControl$whas,
       dp1_tlp_farBufReady_1$wget,
       dp1_tlp_farBufReady_1$whas,
       dp1_tlp_nearBufReady_1$wget,
       dp1_tlp_nearBufReady_1$whas,
       dp1_tlp_pullTagMatch_1$wget,
       dp1_tlp_pullTagMatch_1$whas,
       dp1_tlp_remDone_1$wget,
       dp1_tlp_remDone_1$whas,
       dp1_tlp_remStart_1$wget,
       dp1_tlp_remStart_1$whas,
       dp1_wci_Es_mAddrSpace_w$wget,
       dp1_wci_Es_mAddrSpace_w$whas,
       dp1_wci_Es_mAddr_w$whas,
       dp1_wci_Es_mByteEn_w$whas,
       dp1_wci_Es_mCmd_w$whas,
       dp1_wci_Es_mData_w$whas,
       dp1_wci_ctlAckReg_1$wget,
       dp1_wci_ctlAckReg_1$whas,
       dp1_wci_reqF_r_clr$whas,
       dp1_wci_reqF_r_deq$whas,
       dp1_wci_reqF_r_enq$whas,
       dp1_wci_respF_dequeueing$whas,
       dp1_wci_respF_enqueueing$whas,
       dp1_wci_respF_x_wire$whas,
       dp1_wci_sFlagReg_1$wget,
       dp1_wci_sFlagReg_1$whas,
       dp1_wci_sThreadBusy_pw$whas,
       dp1_wci_wEdge$whas,
       dp1_wci_wciReq$whas,
       dp1_wci_wci_cfrd_pw$whas,
       dp1_wci_wci_cfwr_pw$whas,
       dp1_wci_wci_ctrl_pw$whas,
       dp1_wmi_Es_mAddrSpace_w$wget,
       dp1_wmi_Es_mAddrSpace_w$whas,
       dp1_wmi_Es_mAddr_w$whas,
       dp1_wmi_Es_mBurstLength_w$whas,
       dp1_wmi_Es_mCmd_w$whas,
       dp1_wmi_Es_mDataByteEn_w$whas,
       dp1_wmi_Es_mDataInfo_w$whas,
       dp1_wmi_Es_mDataLast_w$whas,
       dp1_wmi_Es_mDataValid_w$whas,
       dp1_wmi_Es_mData_w$whas,
       dp1_wmi_Es_mReqInfo_w$wget,
       dp1_wmi_Es_mReqInfo_w$whas,
       dp1_wmi_Es_mReqLast_w$whas,
       dp1_wmi_dpControl$whas,
       dp1_wmi_mesgBufReady_1$wget,
       dp1_wmi_mesgBufReady_1$whas,
       dp1_wmi_mesgDone_1$wget,
       dp1_wmi_mesgDone_1$whas,
       dp1_wmi_mesgStart_1$wget,
       dp1_wmi_mesgStart_1$whas,
       dp1_wmi_nowW$whas,
       dp1_wmi_wmi_dhF_doResetClr$whas,
       dp1_wmi_wmi_dhF_doResetDeq$whas,
       dp1_wmi_wmi_dhF_doResetEnq$whas,
       dp1_wmi_wmi_dhF_r_clr$whas,
       dp1_wmi_wmi_dhF_r_deq$whas,
       dp1_wmi_wmi_dhF_r_enq$whas,
       dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       dp1_wmi_wmi_mFlagF_doResetClr$whas,
       dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       dp1_wmi_wmi_mFlagF_r_clr$whas,
       dp1_wmi_wmi_mFlagF_r_deq$whas,
       dp1_wmi_wmi_mFlagF_r_enq$whas,
       dp1_wmi_wmi_operateD_1$wget,
       dp1_wmi_wmi_operateD_1$whas,
       dp1_wmi_wmi_peerIsReady_1$wget,
       dp1_wmi_wmi_peerIsReady_1$whas,
       dp1_wmi_wmi_reqF_doResetClr$whas,
       dp1_wmi_wmi_reqF_doResetDeq$whas,
       dp1_wmi_wmi_reqF_doResetEnq$whas,
       dp1_wmi_wmi_reqF_r_clr$whas,
       dp1_wmi_wmi_reqF_r_deq$whas,
       dp1_wmi_wmi_reqF_r_enq$whas,
       dp1_wmi_wmi_respF_dequeueing$whas,
       dp1_wmi_wmi_respF_enqueueing$whas,
       dp1_wmi_wmi_respF_x_wire$whas,
       dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       dp1_wmi_wmi_sThreadBusy_dw$wget,
       dp1_wmi_wmi_sThreadBusy_dw$whas,
       dp1_wmi_wmi_wmiDh$whas,
       dp1_wmi_wmi_wmiMFlag$whas,
       dp1_wmi_wmi_wmiReq$whas,
       dp1_wti_wtiReq$whas,
       itc0_wti_sThreadBusy_pw$whas,
       itc1_wti_sThreadBusy_pw$whas;

  // register chompCnt
  reg [7 : 0] chompCnt;
  wire [7 : 0] chompCnt$D_IN;
  wire chompCnt$EN;

  // register dp0_bml_crdBuf_modulus
  reg [15 : 0] dp0_bml_crdBuf_modulus;
  wire [15 : 0] dp0_bml_crdBuf_modulus$D_IN;
  wire dp0_bml_crdBuf_modulus$EN;

  // register dp0_bml_crdBuf_value
  reg [15 : 0] dp0_bml_crdBuf_value;
  wire [15 : 0] dp0_bml_crdBuf_value$D_IN;
  wire dp0_bml_crdBuf_value$EN;

  // register dp0_bml_fabAvail
  reg dp0_bml_fabAvail;
  wire dp0_bml_fabAvail$D_IN, dp0_bml_fabAvail$EN;

  // register dp0_bml_fabBuf_modulus
  reg [15 : 0] dp0_bml_fabBuf_modulus;
  wire [15 : 0] dp0_bml_fabBuf_modulus$D_IN;
  wire dp0_bml_fabBuf_modulus$EN;

  // register dp0_bml_fabBuf_value
  reg [15 : 0] dp0_bml_fabBuf_value;
  wire [15 : 0] dp0_bml_fabBuf_value$D_IN;
  wire dp0_bml_fabBuf_value$EN;

  // register dp0_bml_fabBufsAvail
  reg [15 : 0] dp0_bml_fabBufsAvail;
  wire [15 : 0] dp0_bml_fabBufsAvail$D_IN;
  wire dp0_bml_fabBufsAvail$EN;

  // register dp0_bml_fabDone
  reg dp0_bml_fabDone;
  wire dp0_bml_fabDone$D_IN, dp0_bml_fabDone$EN;

  // register dp0_bml_fabFlowAddr
  reg [31 : 0] dp0_bml_fabFlowAddr;
  reg [31 : 0] dp0_bml_fabFlowAddr$D_IN;
  wire dp0_bml_fabFlowAddr$EN;

  // register dp0_bml_fabFlowBase
  reg [31 : 0] dp0_bml_fabFlowBase;
  wire [31 : 0] dp0_bml_fabFlowBase$D_IN;
  wire dp0_bml_fabFlowBase$EN;

  // register dp0_bml_fabFlowSize
  reg [31 : 0] dp0_bml_fabFlowSize;
  wire [31 : 0] dp0_bml_fabFlowSize$D_IN;
  wire dp0_bml_fabFlowSize$EN;

  // register dp0_bml_fabMesgAddr
  reg [31 : 0] dp0_bml_fabMesgAddr;
  wire [31 : 0] dp0_bml_fabMesgAddr$D_IN;
  wire dp0_bml_fabMesgAddr$EN;

  // register dp0_bml_fabMesgBase
  reg [31 : 0] dp0_bml_fabMesgBase;
  wire [31 : 0] dp0_bml_fabMesgBase$D_IN;
  wire dp0_bml_fabMesgBase$EN;

  // register dp0_bml_fabMesgSize
  reg [31 : 0] dp0_bml_fabMesgSize;
  wire [31 : 0] dp0_bml_fabMesgSize$D_IN;
  wire dp0_bml_fabMesgSize$EN;

  // register dp0_bml_fabMetaAddr
  reg [31 : 0] dp0_bml_fabMetaAddr;
  wire [31 : 0] dp0_bml_fabMetaAddr$D_IN;
  wire dp0_bml_fabMetaAddr$EN;

  // register dp0_bml_fabMetaBase
  reg [31 : 0] dp0_bml_fabMetaBase;
  wire [31 : 0] dp0_bml_fabMetaBase$D_IN;
  wire dp0_bml_fabMetaBase$EN;

  // register dp0_bml_fabMetaSize
  reg [31 : 0] dp0_bml_fabMetaSize;
  wire [31 : 0] dp0_bml_fabMetaSize$D_IN;
  wire dp0_bml_fabMetaSize$EN;

  // register dp0_bml_fabNumBufs
  reg [15 : 0] dp0_bml_fabNumBufs;
  wire [15 : 0] dp0_bml_fabNumBufs$D_IN;
  wire dp0_bml_fabNumBufs$EN;

  // register dp0_bml_lclBufDone
  reg dp0_bml_lclBufDone;
  wire dp0_bml_lclBufDone$D_IN, dp0_bml_lclBufDone$EN;

  // register dp0_bml_lclBufStart
  reg dp0_bml_lclBufStart;
  wire dp0_bml_lclBufStart$D_IN, dp0_bml_lclBufStart$EN;

  // register dp0_bml_lclBuf_modulus
  reg [15 : 0] dp0_bml_lclBuf_modulus;
  wire [15 : 0] dp0_bml_lclBuf_modulus$D_IN;
  wire dp0_bml_lclBuf_modulus$EN;

  // register dp0_bml_lclBuf_value
  reg [15 : 0] dp0_bml_lclBuf_value;
  wire [15 : 0] dp0_bml_lclBuf_value$D_IN;
  wire dp0_bml_lclBuf_value$EN;

  // register dp0_bml_lclBufsAR
  reg [15 : 0] dp0_bml_lclBufsAR;
  wire [15 : 0] dp0_bml_lclBufsAR$D_IN;
  wire dp0_bml_lclBufsAR$EN;

  // register dp0_bml_lclBufsCF
  reg [15 : 0] dp0_bml_lclBufsCF;
  wire [15 : 0] dp0_bml_lclBufsCF$D_IN;
  wire dp0_bml_lclBufsCF$EN;

  // register dp0_bml_lclCredit
  reg [15 : 0] dp0_bml_lclCredit;
  wire [15 : 0] dp0_bml_lclCredit$D_IN;
  wire dp0_bml_lclCredit$EN;

  // register dp0_bml_lclDones
  reg [15 : 0] dp0_bml_lclDones;
  wire [15 : 0] dp0_bml_lclDones$D_IN;
  wire dp0_bml_lclDones$EN;

  // register dp0_bml_lclMesgAddr
  reg [15 : 0] dp0_bml_lclMesgAddr;
  wire [15 : 0] dp0_bml_lclMesgAddr$D_IN;
  wire dp0_bml_lclMesgAddr$EN;

  // register dp0_bml_lclMetaAddr
  reg [15 : 0] dp0_bml_lclMetaAddr;
  wire [15 : 0] dp0_bml_lclMetaAddr$D_IN;
  wire dp0_bml_lclMetaAddr$EN;

  // register dp0_bml_lclNumBufs
  reg [15 : 0] dp0_bml_lclNumBufs;
  wire [15 : 0] dp0_bml_lclNumBufs$D_IN;
  wire dp0_bml_lclNumBufs$EN;

  // register dp0_bml_lclStarts
  reg [15 : 0] dp0_bml_lclStarts;
  wire [15 : 0] dp0_bml_lclStarts$D_IN;
  wire dp0_bml_lclStarts$EN;

  // register dp0_bml_mesgBase
  reg [15 : 0] dp0_bml_mesgBase;
  wire [15 : 0] dp0_bml_mesgBase$D_IN;
  wire dp0_bml_mesgBase$EN;

  // register dp0_bml_mesgSize
  reg [15 : 0] dp0_bml_mesgSize;
  wire [15 : 0] dp0_bml_mesgSize$D_IN;
  wire dp0_bml_mesgSize$EN;

  // register dp0_bml_metaBase
  reg [15 : 0] dp0_bml_metaBase;
  wire [15 : 0] dp0_bml_metaBase$D_IN;
  wire dp0_bml_metaBase$EN;

  // register dp0_bml_metaSize
  reg [15 : 0] dp0_bml_metaSize;
  wire [15 : 0] dp0_bml_metaSize$D_IN;
  wire dp0_bml_metaSize$EN;

  // register dp0_bml_remBuf_modulus
  reg [15 : 0] dp0_bml_remBuf_modulus;
  wire [15 : 0] dp0_bml_remBuf_modulus$D_IN;
  wire dp0_bml_remBuf_modulus$EN;

  // register dp0_bml_remBuf_value
  reg [15 : 0] dp0_bml_remBuf_value;
  wire [15 : 0] dp0_bml_remBuf_value$D_IN;
  wire dp0_bml_remBuf_value$EN;

  // register dp0_bml_remDone
  reg dp0_bml_remDone;
  wire dp0_bml_remDone$D_IN, dp0_bml_remDone$EN;

  // register dp0_bml_remDones
  reg [15 : 0] dp0_bml_remDones;
  wire [15 : 0] dp0_bml_remDones$D_IN;
  wire dp0_bml_remDones$EN;

  // register dp0_bml_remMesgAddr
  reg [15 : 0] dp0_bml_remMesgAddr;
  wire [15 : 0] dp0_bml_remMesgAddr$D_IN;
  wire dp0_bml_remMesgAddr$EN;

  // register dp0_bml_remMetaAddr
  reg [15 : 0] dp0_bml_remMetaAddr;
  wire [15 : 0] dp0_bml_remMetaAddr$D_IN;
  wire dp0_bml_remMetaAddr$EN;

  // register dp0_bml_remStart
  reg dp0_bml_remStart;
  wire dp0_bml_remStart$D_IN, dp0_bml_remStart$EN;

  // register dp0_bml_remStarts
  reg [15 : 0] dp0_bml_remStarts;
  wire [15 : 0] dp0_bml_remStarts$D_IN;
  wire dp0_bml_remStarts$EN;

  // register dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire dp0_bram_serverAdapterA_1_cnt$EN;

  // register dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1$D_IN;
  wire dp0_bram_serverAdapterA_1_s1$EN;

  // register dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire dp0_bram_serverAdapterA_2_cnt$EN;

  // register dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_2_s1$D_IN;
  wire dp0_bram_serverAdapterA_2_s1$EN;

  // register dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire dp0_bram_serverAdapterA_3_cnt$EN;

  // register dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_3_s1$D_IN;
  wire dp0_bram_serverAdapterA_3_s1$EN;

  // register dp0_bram_serverAdapterA_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_cnt$D_IN;
  wire dp0_bram_serverAdapterA_cnt$EN;

  // register dp0_bram_serverAdapterA_s1
  reg [1 : 0] dp0_bram_serverAdapterA_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_s1$D_IN;
  wire dp0_bram_serverAdapterA_s1$EN;

  // register dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire dp0_bram_serverAdapterB_1_cnt$EN;

  // register dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_1_s1$D_IN;
  wire dp0_bram_serverAdapterB_1_s1$EN;

  // register dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire dp0_bram_serverAdapterB_2_cnt$EN;

  // register dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_2_s1$D_IN;
  wire dp0_bram_serverAdapterB_2_s1$EN;

  // register dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire dp0_bram_serverAdapterB_3_cnt$EN;

  // register dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_3_s1$D_IN;
  wire dp0_bram_serverAdapterB_3_s1$EN;

  // register dp0_bram_serverAdapterB_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_cnt$D_IN;
  wire dp0_bram_serverAdapterB_cnt$EN;

  // register dp0_bram_serverAdapterB_s1
  reg [1 : 0] dp0_bram_serverAdapterB_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_s1$D_IN;
  wire dp0_bram_serverAdapterB_s1$EN;

  // register dp0_dpControl
  reg [3 : 0] dp0_dpControl;
  wire [3 : 0] dp0_dpControl$D_IN;
  wire dp0_dpControl$EN;

  // register dp0_tlp_creditReady
  reg dp0_tlp_creditReady;
  wire dp0_tlp_creditReady$D_IN, dp0_tlp_creditReady$EN;

  // register dp0_tlp_debugBdata
  reg [127 : 0] dp0_tlp_debugBdata;
  wire [127 : 0] dp0_tlp_debugBdata$D_IN;
  wire dp0_tlp_debugBdata$EN;

  // register dp0_tlp_dmaDoTailEvent
  reg dp0_tlp_dmaDoTailEvent;
  reg dp0_tlp_dmaDoTailEvent$D_IN;
  wire dp0_tlp_dmaDoTailEvent$EN;

  // register dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire dp0_tlp_dmaPullRemainDWLen$EN;

  // register dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire dp0_tlp_dmaPullRemainDWSub$EN;

  // register dp0_tlp_dmaReqTag
  reg [4 : 0] dp0_tlp_dmaReqTag;
  wire [4 : 0] dp0_tlp_dmaReqTag$D_IN;
  wire dp0_tlp_dmaReqTag$EN;

  // register dp0_tlp_dmaTag
  reg [4 : 0] dp0_tlp_dmaTag;
  wire [4 : 0] dp0_tlp_dmaTag$D_IN;
  wire dp0_tlp_dmaTag$EN;

  // register dp0_tlp_doXmtMetaBody
  reg dp0_tlp_doXmtMetaBody;
  wire dp0_tlp_doXmtMetaBody$D_IN, dp0_tlp_doXmtMetaBody$EN;

  // register dp0_tlp_fabFlowAddr
  reg [31 : 0] dp0_tlp_fabFlowAddr;
  wire [31 : 0] dp0_tlp_fabFlowAddr$D_IN;
  wire dp0_tlp_fabFlowAddr$EN;

  // register dp0_tlp_fabMesgAccu
  reg [31 : 0] dp0_tlp_fabMesgAccu;
  reg [31 : 0] dp0_tlp_fabMesgAccu$D_IN;
  wire dp0_tlp_fabMesgAccu$EN;

  // register dp0_tlp_fabMesgAddr
  reg [31 : 0] dp0_tlp_fabMesgAddr;
  wire [31 : 0] dp0_tlp_fabMesgAddr$D_IN;
  wire dp0_tlp_fabMesgAddr$EN;

  // register dp0_tlp_fabMeta
  reg [128 : 0] dp0_tlp_fabMeta;
  reg [128 : 0] dp0_tlp_fabMeta$D_IN;
  wire dp0_tlp_fabMeta$EN;

  // register dp0_tlp_fabMetaAddr
  reg [31 : 0] dp0_tlp_fabMetaAddr;
  wire [31 : 0] dp0_tlp_fabMetaAddr$D_IN;
  wire dp0_tlp_fabMetaAddr$EN;

  // register dp0_tlp_farBufReady
  reg dp0_tlp_farBufReady;
  wire dp0_tlp_farBufReady$D_IN, dp0_tlp_farBufReady$EN;

  // register dp0_tlp_flowDiagCount
  reg [31 : 0] dp0_tlp_flowDiagCount;
  wire [31 : 0] dp0_tlp_flowDiagCount$D_IN;
  wire dp0_tlp_flowDiagCount$EN;

  // register dp0_tlp_gotResponseHeader
  reg dp0_tlp_gotResponseHeader;
  reg dp0_tlp_gotResponseHeader$D_IN;
  wire dp0_tlp_gotResponseHeader$EN;

  // register dp0_tlp_inIgnorePkt
  reg dp0_tlp_inIgnorePkt;
  wire dp0_tlp_inIgnorePkt$D_IN, dp0_tlp_inIgnorePkt$EN;

  // register dp0_tlp_maxPayloadSize
  reg [12 : 0] dp0_tlp_maxPayloadSize;
  wire [12 : 0] dp0_tlp_maxPayloadSize$D_IN;
  wire dp0_tlp_maxPayloadSize$EN;

  // register dp0_tlp_maxReadReqSize
  reg [12 : 0] dp0_tlp_maxReadReqSize;
  wire [12 : 0] dp0_tlp_maxReadReqSize$D_IN;
  wire dp0_tlp_maxReadReqSize$EN;

  // register dp0_tlp_mesgComplReceived
  reg [16 : 0] dp0_tlp_mesgComplReceived;
  reg [16 : 0] dp0_tlp_mesgComplReceived$D_IN;
  wire dp0_tlp_mesgComplReceived$EN;

  // register dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPull$D_IN;
  wire dp0_tlp_mesgLengthRemainPull$EN;

  // register dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPush$D_IN;
  wire dp0_tlp_mesgLengthRemainPush$EN;

  // register dp0_tlp_nearBufReady
  reg dp0_tlp_nearBufReady;
  wire dp0_tlp_nearBufReady$D_IN, dp0_tlp_nearBufReady$EN;

  // register dp0_tlp_outDwRemain
  reg [9 : 0] dp0_tlp_outDwRemain;
  wire [9 : 0] dp0_tlp_outDwRemain$D_IN;
  wire dp0_tlp_outDwRemain$EN;

  // register dp0_tlp_postSeqDwell
  reg [3 : 0] dp0_tlp_postSeqDwell;
  wire [3 : 0] dp0_tlp_postSeqDwell$D_IN;
  wire dp0_tlp_postSeqDwell$EN;

  // register dp0_tlp_pullTagMatch
  reg dp0_tlp_pullTagMatch;
  wire dp0_tlp_pullTagMatch$D_IN, dp0_tlp_pullTagMatch$EN;

  // register dp0_tlp_rdRespDwRemain
  reg [9 : 0] dp0_tlp_rdRespDwRemain;
  wire [9 : 0] dp0_tlp_rdRespDwRemain$D_IN;
  wire dp0_tlp_rdRespDwRemain$EN;

  // register dp0_tlp_readHeaderSent
  reg dp0_tlp_readHeaderSent;
  wire dp0_tlp_readHeaderSent$D_IN, dp0_tlp_readHeaderSent$EN;

  // register dp0_tlp_readNxtDWAddr
  reg [12 : 0] dp0_tlp_readNxtDWAddr;
  wire [12 : 0] dp0_tlp_readNxtDWAddr$D_IN;
  wire dp0_tlp_readNxtDWAddr$EN;

  // register dp0_tlp_readRemainDWLen
  reg [9 : 0] dp0_tlp_readRemainDWLen;
  wire [9 : 0] dp0_tlp_readRemainDWLen$D_IN;
  wire dp0_tlp_readRemainDWLen$EN;

  // register dp0_tlp_readStarted
  reg dp0_tlp_readStarted;
  wire dp0_tlp_readStarted$D_IN, dp0_tlp_readStarted$EN;

  // register dp0_tlp_remDone
  reg dp0_tlp_remDone;
  wire dp0_tlp_remDone$D_IN, dp0_tlp_remDone$EN;

  // register dp0_tlp_remMesgAccu
  reg [15 : 0] dp0_tlp_remMesgAccu;
  reg [15 : 0] dp0_tlp_remMesgAccu$D_IN;
  wire dp0_tlp_remMesgAccu$EN;

  // register dp0_tlp_remMesgAddr
  reg [15 : 0] dp0_tlp_remMesgAddr;
  wire [15 : 0] dp0_tlp_remMesgAddr$D_IN;
  wire dp0_tlp_remMesgAddr$EN;

  // register dp0_tlp_remMetaAddr
  reg [15 : 0] dp0_tlp_remMetaAddr;
  wire [15 : 0] dp0_tlp_remMetaAddr$D_IN;
  wire dp0_tlp_remMetaAddr$EN;

  // register dp0_tlp_remStart
  reg dp0_tlp_remStart;
  wire dp0_tlp_remStart$D_IN, dp0_tlp_remStart$EN;

  // register dp0_tlp_reqMesgInFlight
  reg dp0_tlp_reqMesgInFlight;
  reg dp0_tlp_reqMesgInFlight$D_IN;
  wire dp0_tlp_reqMesgInFlight$EN;

  // register dp0_tlp_reqMetaBodyInFlight
  reg dp0_tlp_reqMetaBodyInFlight;
  wire dp0_tlp_reqMetaBodyInFlight$D_IN, dp0_tlp_reqMetaBodyInFlight$EN;

  // register dp0_tlp_reqMetaInFlight
  reg dp0_tlp_reqMetaInFlight;
  reg dp0_tlp_reqMetaInFlight$D_IN;
  wire dp0_tlp_reqMetaInFlight$EN;

  // register dp0_tlp_srcMesgAccu
  reg [31 : 0] dp0_tlp_srcMesgAccu;
  wire [31 : 0] dp0_tlp_srcMesgAccu$D_IN;
  wire dp0_tlp_srcMesgAccu$EN;

  // register dp0_tlp_tlpMetaSent
  reg dp0_tlp_tlpMetaSent;
  wire dp0_tlp_tlpMetaSent$D_IN, dp0_tlp_tlpMetaSent$EN;

  // register dp0_tlp_tlpRcvBusy
  reg dp0_tlp_tlpRcvBusy;
  reg dp0_tlp_tlpRcvBusy$D_IN;
  wire dp0_tlp_tlpRcvBusy$EN;

  // register dp0_tlp_tlpXmtBusy
  reg dp0_tlp_tlpXmtBusy;
  reg dp0_tlp_tlpXmtBusy$D_IN;
  wire dp0_tlp_tlpXmtBusy$EN;

  // register dp0_tlp_writeDWAddr
  reg [12 : 0] dp0_tlp_writeDWAddr;
  wire [12 : 0] dp0_tlp_writeDWAddr$D_IN;
  wire dp0_tlp_writeDWAddr$EN;

  // register dp0_tlp_writeLastBE
  reg [3 : 0] dp0_tlp_writeLastBE;
  wire [3 : 0] dp0_tlp_writeLastBE$D_IN;
  wire dp0_tlp_writeLastBE$EN;

  // register dp0_tlp_writeRemainDWLen
  reg [9 : 0] dp0_tlp_writeRemainDWLen;
  wire [9 : 0] dp0_tlp_writeRemainDWLen$D_IN;
  wire dp0_tlp_writeRemainDWLen$EN;

  // register dp0_tlp_xmtMetaInFlight
  reg dp0_tlp_xmtMetaInFlight;
  wire dp0_tlp_xmtMetaInFlight$D_IN, dp0_tlp_xmtMetaInFlight$EN;

  // register dp0_tlp_xmtMetaOK
  reg dp0_tlp_xmtMetaOK;
  reg dp0_tlp_xmtMetaOK$D_IN;
  wire dp0_tlp_xmtMetaOK$EN;

  // register dp0_wci_cEdge
  reg [2 : 0] dp0_wci_cEdge;
  wire [2 : 0] dp0_wci_cEdge$D_IN;
  wire dp0_wci_cEdge$EN;

  // register dp0_wci_cState
  reg [2 : 0] dp0_wci_cState;
  wire [2 : 0] dp0_wci_cState$D_IN;
  wire dp0_wci_cState$EN;

  // register dp0_wci_ctlAckReg
  reg dp0_wci_ctlAckReg;
  wire dp0_wci_ctlAckReg$D_IN, dp0_wci_ctlAckReg$EN;

  // register dp0_wci_ctlOpActive
  reg dp0_wci_ctlOpActive;
  wire dp0_wci_ctlOpActive$D_IN, dp0_wci_ctlOpActive$EN;

  // register dp0_wci_illegalEdge
  reg dp0_wci_illegalEdge;
  wire dp0_wci_illegalEdge$D_IN, dp0_wci_illegalEdge$EN;

  // register dp0_wci_nState
  reg [2 : 0] dp0_wci_nState;
  reg [2 : 0] dp0_wci_nState$D_IN;
  wire dp0_wci_nState$EN;

  // register dp0_wci_reqF_countReg
  reg [1 : 0] dp0_wci_reqF_countReg;
  wire [1 : 0] dp0_wci_reqF_countReg$D_IN;
  wire dp0_wci_reqF_countReg$EN;

  // register dp0_wci_respF_c_r
  reg [1 : 0] dp0_wci_respF_c_r;
  wire [1 : 0] dp0_wci_respF_c_r$D_IN;
  wire dp0_wci_respF_c_r$EN;

  // register dp0_wci_respF_q_0
  reg [33 : 0] dp0_wci_respF_q_0;
  reg [33 : 0] dp0_wci_respF_q_0$D_IN;
  wire dp0_wci_respF_q_0$EN;

  // register dp0_wci_respF_q_1
  reg [33 : 0] dp0_wci_respF_q_1;
  reg [33 : 0] dp0_wci_respF_q_1$D_IN;
  wire dp0_wci_respF_q_1$EN;

  // register dp0_wci_sFlagReg
  reg dp0_wci_sFlagReg;
  wire dp0_wci_sFlagReg$D_IN, dp0_wci_sFlagReg$EN;

  // register dp0_wci_sThreadBusy_d
  reg dp0_wci_sThreadBusy_d;
  wire dp0_wci_sThreadBusy_d$D_IN, dp0_wci_sThreadBusy_d$EN;

  // register dp0_wmi_addr
  reg [13 : 0] dp0_wmi_addr;
  wire [13 : 0] dp0_wmi_addr$D_IN;
  wire dp0_wmi_addr$EN;

  // register dp0_wmi_bufDwell
  reg [1 : 0] dp0_wmi_bufDwell;
  wire [1 : 0] dp0_wmi_bufDwell$D_IN;
  wire dp0_wmi_bufDwell$EN;

  // register dp0_wmi_bytesRemainReq
  reg [13 : 0] dp0_wmi_bytesRemainReq;
  wire [13 : 0] dp0_wmi_bytesRemainReq$D_IN;
  wire dp0_wmi_bytesRemainReq$EN;

  // register dp0_wmi_bytesRemainResp
  reg [13 : 0] dp0_wmi_bytesRemainResp;
  wire [13 : 0] dp0_wmi_bytesRemainResp$D_IN;
  wire dp0_wmi_bytesRemainResp$EN;

  // register dp0_wmi_doneWithMesg
  reg dp0_wmi_doneWithMesg;
  wire dp0_wmi_doneWithMesg$D_IN, dp0_wmi_doneWithMesg$EN;

  // register dp0_wmi_lastMesg
  reg [31 : 0] dp0_wmi_lastMesg;
  wire [31 : 0] dp0_wmi_lastMesg$D_IN;
  wire dp0_wmi_lastMesg$EN;

  // register dp0_wmi_lclMesgAddr
  reg [14 : 0] dp0_wmi_lclMesgAddr;
  wire [14 : 0] dp0_wmi_lclMesgAddr$D_IN;
  wire dp0_wmi_lclMesgAddr$EN;

  // register dp0_wmi_lclMetaAddr
  reg [14 : 0] dp0_wmi_lclMetaAddr;
  wire [14 : 0] dp0_wmi_lclMetaAddr$D_IN;
  wire dp0_wmi_lclMetaAddr$EN;

  // register dp0_wmi_mesgBufReady
  reg dp0_wmi_mesgBufReady;
  wire dp0_wmi_mesgBufReady$D_IN, dp0_wmi_mesgBufReady$EN;

  // register dp0_wmi_mesgBusy
  reg dp0_wmi_mesgBusy;
  wire dp0_wmi_mesgBusy$D_IN, dp0_wmi_mesgBusy$EN;

  // register dp0_wmi_mesgCount
  reg [31 : 0] dp0_wmi_mesgCount;
  wire [31 : 0] dp0_wmi_mesgCount$D_IN;
  wire dp0_wmi_mesgCount$EN;

  // register dp0_wmi_mesgDone
  reg dp0_wmi_mesgDone;
  wire dp0_wmi_mesgDone$D_IN, dp0_wmi_mesgDone$EN;

  // register dp0_wmi_mesgMeta
  reg [128 : 0] dp0_wmi_mesgMeta;
  wire [128 : 0] dp0_wmi_mesgMeta$D_IN;
  wire dp0_wmi_mesgMeta$EN;

  // register dp0_wmi_mesgStart
  reg dp0_wmi_mesgStart;
  wire dp0_wmi_mesgStart$D_IN, dp0_wmi_mesgStart$EN;

  // register dp0_wmi_metaBusy
  reg dp0_wmi_metaBusy;
  wire dp0_wmi_metaBusy$D_IN, dp0_wmi_metaBusy$EN;

  // register dp0_wmi_p4B
  reg [1 : 0] dp0_wmi_p4B;
  wire [1 : 0] dp0_wmi_p4B$D_IN;
  wire dp0_wmi_p4B$EN;

  // register dp0_wmi_rdActive
  reg dp0_wmi_rdActive;
  wire dp0_wmi_rdActive$D_IN, dp0_wmi_rdActive$EN;

  // register dp0_wmi_reqCount
  reg [15 : 0] dp0_wmi_reqCount;
  wire [15 : 0] dp0_wmi_reqCount$D_IN;
  wire dp0_wmi_reqCount$EN;

  // register dp0_wmi_thisMesg
  reg [31 : 0] dp0_wmi_thisMesg;
  wire [31 : 0] dp0_wmi_thisMesg$D_IN;
  wire dp0_wmi_thisMesg$EN;

  // register dp0_wmi_wmi_blockReq
  reg dp0_wmi_wmi_blockReq;
  wire dp0_wmi_wmi_blockReq$D_IN, dp0_wmi_wmi_blockReq$EN;

  // register dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp0_wmi_wmi_dhF_countReg$D_IN;
  wire dp0_wmi_wmi_dhF_countReg$EN;

  // register dp0_wmi_wmi_dhF_levelsValid
  reg dp0_wmi_wmi_dhF_levelsValid;
  wire dp0_wmi_wmi_dhF_levelsValid$D_IN, dp0_wmi_wmi_dhF_levelsValid$EN;

  // register dp0_wmi_wmi_errorSticky
  reg dp0_wmi_wmi_errorSticky;
  wire dp0_wmi_wmi_errorSticky$D_IN, dp0_wmi_wmi_errorSticky$EN;

  // register dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp0_wmi_wmi_mFlagF_countReg$EN;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  reg dp0_wmi_wmi_mFlagF_levelsValid;
  wire dp0_wmi_wmi_mFlagF_levelsValid$D_IN, dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp0_wmi_wmi_mFlagReg
  reg [31 : 0] dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] dp0_wmi_wmi_mFlagReg$D_IN;
  wire dp0_wmi_wmi_mFlagReg$EN;

  // register dp0_wmi_wmi_operateD
  reg dp0_wmi_wmi_operateD;
  wire dp0_wmi_wmi_operateD$D_IN, dp0_wmi_wmi_operateD$EN;

  // register dp0_wmi_wmi_peerIsReady
  reg dp0_wmi_wmi_peerIsReady;
  wire dp0_wmi_wmi_peerIsReady$D_IN, dp0_wmi_wmi_peerIsReady$EN;

  // register dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp0_wmi_wmi_reqF_countReg$D_IN;
  wire dp0_wmi_wmi_reqF_countReg$EN;

  // register dp0_wmi_wmi_reqF_levelsValid
  reg dp0_wmi_wmi_reqF_levelsValid;
  wire dp0_wmi_wmi_reqF_levelsValid$D_IN, dp0_wmi_wmi_reqF_levelsValid$EN;

  // register dp0_wmi_wmi_respF_c_r
  reg [1 : 0] dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] dp0_wmi_wmi_respF_c_r$D_IN;
  wire dp0_wmi_wmi_respF_c_r$EN;

  // register dp0_wmi_wmi_respF_q_0
  reg [33 : 0] dp0_wmi_wmi_respF_q_0;
  reg [33 : 0] dp0_wmi_wmi_respF_q_0$D_IN;
  wire dp0_wmi_wmi_respF_q_0$EN;

  // register dp0_wmi_wmi_respF_q_1
  reg [33 : 0] dp0_wmi_wmi_respF_q_1;
  reg [33 : 0] dp0_wmi_wmi_respF_q_1$D_IN;
  wire dp0_wmi_wmi_respF_q_1$EN;

  // register dp0_wmi_wmi_sFlagReg
  reg [31 : 0] dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] dp0_wmi_wmi_sFlagReg$D_IN;
  wire dp0_wmi_wmi_sFlagReg$EN;

  // register dp0_wmi_wmi_statusR
  reg [7 : 0] dp0_wmi_wmi_statusR;
  wire [7 : 0] dp0_wmi_wmi_statusR$D_IN;
  wire dp0_wmi_wmi_statusR$EN;

  // register dp0_wmi_wmi_trafficSticky
  reg dp0_wmi_wmi_trafficSticky;
  wire dp0_wmi_wmi_trafficSticky$D_IN, dp0_wmi_wmi_trafficSticky$EN;

  // register dp0_wmi_wrActive
  reg dp0_wmi_wrActive;
  wire dp0_wmi_wrActive$D_IN, dp0_wmi_wrActive$EN;

  // register dp0_wmi_wrFinalize
  reg dp0_wmi_wrFinalize;
  wire dp0_wmi_wrFinalize$D_IN, dp0_wmi_wrFinalize$EN;

  // register dp0_wmi_wrtCount
  reg [15 : 0] dp0_wmi_wrtCount;
  wire [15 : 0] dp0_wmi_wrtCount$D_IN;
  wire dp0_wmi_wrtCount$EN;

  // register dp0_wti_nowReq
  reg [66 : 0] dp0_wti_nowReq;
  wire [66 : 0] dp0_wti_nowReq$D_IN;
  wire dp0_wti_nowReq$EN;

  // register dp1_bml_crdBuf_modulus
  reg [15 : 0] dp1_bml_crdBuf_modulus;
  wire [15 : 0] dp1_bml_crdBuf_modulus$D_IN;
  wire dp1_bml_crdBuf_modulus$EN;

  // register dp1_bml_crdBuf_value
  reg [15 : 0] dp1_bml_crdBuf_value;
  wire [15 : 0] dp1_bml_crdBuf_value$D_IN;
  wire dp1_bml_crdBuf_value$EN;

  // register dp1_bml_fabAvail
  reg dp1_bml_fabAvail;
  wire dp1_bml_fabAvail$D_IN, dp1_bml_fabAvail$EN;

  // register dp1_bml_fabBuf_modulus
  reg [15 : 0] dp1_bml_fabBuf_modulus;
  wire [15 : 0] dp1_bml_fabBuf_modulus$D_IN;
  wire dp1_bml_fabBuf_modulus$EN;

  // register dp1_bml_fabBuf_value
  reg [15 : 0] dp1_bml_fabBuf_value;
  wire [15 : 0] dp1_bml_fabBuf_value$D_IN;
  wire dp1_bml_fabBuf_value$EN;

  // register dp1_bml_fabBufsAvail
  reg [15 : 0] dp1_bml_fabBufsAvail;
  wire [15 : 0] dp1_bml_fabBufsAvail$D_IN;
  wire dp1_bml_fabBufsAvail$EN;

  // register dp1_bml_fabDone
  reg dp1_bml_fabDone;
  wire dp1_bml_fabDone$D_IN, dp1_bml_fabDone$EN;

  // register dp1_bml_fabFlowAddr
  reg [31 : 0] dp1_bml_fabFlowAddr;
  reg [31 : 0] dp1_bml_fabFlowAddr$D_IN;
  wire dp1_bml_fabFlowAddr$EN;

  // register dp1_bml_fabFlowBase
  reg [31 : 0] dp1_bml_fabFlowBase;
  wire [31 : 0] dp1_bml_fabFlowBase$D_IN;
  wire dp1_bml_fabFlowBase$EN;

  // register dp1_bml_fabFlowSize
  reg [31 : 0] dp1_bml_fabFlowSize;
  wire [31 : 0] dp1_bml_fabFlowSize$D_IN;
  wire dp1_bml_fabFlowSize$EN;

  // register dp1_bml_fabMesgAddr
  reg [31 : 0] dp1_bml_fabMesgAddr;
  wire [31 : 0] dp1_bml_fabMesgAddr$D_IN;
  wire dp1_bml_fabMesgAddr$EN;

  // register dp1_bml_fabMesgBase
  reg [31 : 0] dp1_bml_fabMesgBase;
  wire [31 : 0] dp1_bml_fabMesgBase$D_IN;
  wire dp1_bml_fabMesgBase$EN;

  // register dp1_bml_fabMesgSize
  reg [31 : 0] dp1_bml_fabMesgSize;
  wire [31 : 0] dp1_bml_fabMesgSize$D_IN;
  wire dp1_bml_fabMesgSize$EN;

  // register dp1_bml_fabMetaAddr
  reg [31 : 0] dp1_bml_fabMetaAddr;
  wire [31 : 0] dp1_bml_fabMetaAddr$D_IN;
  wire dp1_bml_fabMetaAddr$EN;

  // register dp1_bml_fabMetaBase
  reg [31 : 0] dp1_bml_fabMetaBase;
  wire [31 : 0] dp1_bml_fabMetaBase$D_IN;
  wire dp1_bml_fabMetaBase$EN;

  // register dp1_bml_fabMetaSize
  reg [31 : 0] dp1_bml_fabMetaSize;
  wire [31 : 0] dp1_bml_fabMetaSize$D_IN;
  wire dp1_bml_fabMetaSize$EN;

  // register dp1_bml_fabNumBufs
  reg [15 : 0] dp1_bml_fabNumBufs;
  wire [15 : 0] dp1_bml_fabNumBufs$D_IN;
  wire dp1_bml_fabNumBufs$EN;

  // register dp1_bml_lclBufDone
  reg dp1_bml_lclBufDone;
  wire dp1_bml_lclBufDone$D_IN, dp1_bml_lclBufDone$EN;

  // register dp1_bml_lclBufStart
  reg dp1_bml_lclBufStart;
  wire dp1_bml_lclBufStart$D_IN, dp1_bml_lclBufStart$EN;

  // register dp1_bml_lclBuf_modulus
  reg [15 : 0] dp1_bml_lclBuf_modulus;
  wire [15 : 0] dp1_bml_lclBuf_modulus$D_IN;
  wire dp1_bml_lclBuf_modulus$EN;

  // register dp1_bml_lclBuf_value
  reg [15 : 0] dp1_bml_lclBuf_value;
  wire [15 : 0] dp1_bml_lclBuf_value$D_IN;
  wire dp1_bml_lclBuf_value$EN;

  // register dp1_bml_lclBufsAR
  reg [15 : 0] dp1_bml_lclBufsAR;
  wire [15 : 0] dp1_bml_lclBufsAR$D_IN;
  wire dp1_bml_lclBufsAR$EN;

  // register dp1_bml_lclBufsCF
  reg [15 : 0] dp1_bml_lclBufsCF;
  wire [15 : 0] dp1_bml_lclBufsCF$D_IN;
  wire dp1_bml_lclBufsCF$EN;

  // register dp1_bml_lclCredit
  reg [15 : 0] dp1_bml_lclCredit;
  wire [15 : 0] dp1_bml_lclCredit$D_IN;
  wire dp1_bml_lclCredit$EN;

  // register dp1_bml_lclDones
  reg [15 : 0] dp1_bml_lclDones;
  wire [15 : 0] dp1_bml_lclDones$D_IN;
  wire dp1_bml_lclDones$EN;

  // register dp1_bml_lclMesgAddr
  reg [15 : 0] dp1_bml_lclMesgAddr;
  wire [15 : 0] dp1_bml_lclMesgAddr$D_IN;
  wire dp1_bml_lclMesgAddr$EN;

  // register dp1_bml_lclMetaAddr
  reg [15 : 0] dp1_bml_lclMetaAddr;
  wire [15 : 0] dp1_bml_lclMetaAddr$D_IN;
  wire dp1_bml_lclMetaAddr$EN;

  // register dp1_bml_lclNumBufs
  reg [15 : 0] dp1_bml_lclNumBufs;
  wire [15 : 0] dp1_bml_lclNumBufs$D_IN;
  wire dp1_bml_lclNumBufs$EN;

  // register dp1_bml_lclStarts
  reg [15 : 0] dp1_bml_lclStarts;
  wire [15 : 0] dp1_bml_lclStarts$D_IN;
  wire dp1_bml_lclStarts$EN;

  // register dp1_bml_mesgBase
  reg [15 : 0] dp1_bml_mesgBase;
  wire [15 : 0] dp1_bml_mesgBase$D_IN;
  wire dp1_bml_mesgBase$EN;

  // register dp1_bml_mesgSize
  reg [15 : 0] dp1_bml_mesgSize;
  wire [15 : 0] dp1_bml_mesgSize$D_IN;
  wire dp1_bml_mesgSize$EN;

  // register dp1_bml_metaBase
  reg [15 : 0] dp1_bml_metaBase;
  wire [15 : 0] dp1_bml_metaBase$D_IN;
  wire dp1_bml_metaBase$EN;

  // register dp1_bml_metaSize
  reg [15 : 0] dp1_bml_metaSize;
  wire [15 : 0] dp1_bml_metaSize$D_IN;
  wire dp1_bml_metaSize$EN;

  // register dp1_bml_remBuf_modulus
  reg [15 : 0] dp1_bml_remBuf_modulus;
  wire [15 : 0] dp1_bml_remBuf_modulus$D_IN;
  wire dp1_bml_remBuf_modulus$EN;

  // register dp1_bml_remBuf_value
  reg [15 : 0] dp1_bml_remBuf_value;
  wire [15 : 0] dp1_bml_remBuf_value$D_IN;
  wire dp1_bml_remBuf_value$EN;

  // register dp1_bml_remDone
  reg dp1_bml_remDone;
  wire dp1_bml_remDone$D_IN, dp1_bml_remDone$EN;

  // register dp1_bml_remDones
  reg [15 : 0] dp1_bml_remDones;
  wire [15 : 0] dp1_bml_remDones$D_IN;
  wire dp1_bml_remDones$EN;

  // register dp1_bml_remMesgAddr
  reg [15 : 0] dp1_bml_remMesgAddr;
  wire [15 : 0] dp1_bml_remMesgAddr$D_IN;
  wire dp1_bml_remMesgAddr$EN;

  // register dp1_bml_remMetaAddr
  reg [15 : 0] dp1_bml_remMetaAddr;
  wire [15 : 0] dp1_bml_remMetaAddr$D_IN;
  wire dp1_bml_remMetaAddr$EN;

  // register dp1_bml_remStart
  reg dp1_bml_remStart;
  wire dp1_bml_remStart$D_IN, dp1_bml_remStart$EN;

  // register dp1_bml_remStarts
  reg [15 : 0] dp1_bml_remStarts;
  wire [15 : 0] dp1_bml_remStarts$D_IN;
  wire dp1_bml_remStarts$EN;

  // register dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire dp1_bram_serverAdapterA_1_cnt$EN;

  // register dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_1_s1$D_IN;
  wire dp1_bram_serverAdapterA_1_s1$EN;

  // register dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire dp1_bram_serverAdapterA_2_cnt$EN;

  // register dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_2_s1$D_IN;
  wire dp1_bram_serverAdapterA_2_s1$EN;

  // register dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire dp1_bram_serverAdapterA_3_cnt$EN;

  // register dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_3_s1$D_IN;
  wire dp1_bram_serverAdapterA_3_s1$EN;

  // register dp1_bram_serverAdapterA_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_cnt$D_IN;
  wire dp1_bram_serverAdapterA_cnt$EN;

  // register dp1_bram_serverAdapterA_s1
  reg [1 : 0] dp1_bram_serverAdapterA_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_s1$D_IN;
  wire dp1_bram_serverAdapterA_s1$EN;

  // register dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire dp1_bram_serverAdapterB_1_cnt$EN;

  // register dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_1_s1$D_IN;
  wire dp1_bram_serverAdapterB_1_s1$EN;

  // register dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire dp1_bram_serverAdapterB_2_cnt$EN;

  // register dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_2_s1$D_IN;
  wire dp1_bram_serverAdapterB_2_s1$EN;

  // register dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire dp1_bram_serverAdapterB_3_cnt$EN;

  // register dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_3_s1$D_IN;
  wire dp1_bram_serverAdapterB_3_s1$EN;

  // register dp1_bram_serverAdapterB_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_cnt$D_IN;
  wire dp1_bram_serverAdapterB_cnt$EN;

  // register dp1_bram_serverAdapterB_s1
  reg [1 : 0] dp1_bram_serverAdapterB_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_s1$D_IN;
  wire dp1_bram_serverAdapterB_s1$EN;

  // register dp1_dpControl
  reg [3 : 0] dp1_dpControl;
  wire [3 : 0] dp1_dpControl$D_IN;
  wire dp1_dpControl$EN;

  // register dp1_tlp_creditReady
  reg dp1_tlp_creditReady;
  wire dp1_tlp_creditReady$D_IN, dp1_tlp_creditReady$EN;

  // register dp1_tlp_debugBdata
  reg [127 : 0] dp1_tlp_debugBdata;
  wire [127 : 0] dp1_tlp_debugBdata$D_IN;
  wire dp1_tlp_debugBdata$EN;

  // register dp1_tlp_dmaDoTailEvent
  reg dp1_tlp_dmaDoTailEvent;
  reg dp1_tlp_dmaDoTailEvent$D_IN;
  wire dp1_tlp_dmaDoTailEvent$EN;

  // register dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire dp1_tlp_dmaPullRemainDWLen$EN;

  // register dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire dp1_tlp_dmaPullRemainDWSub$EN;

  // register dp1_tlp_dmaReqTag
  reg [4 : 0] dp1_tlp_dmaReqTag;
  wire [4 : 0] dp1_tlp_dmaReqTag$D_IN;
  wire dp1_tlp_dmaReqTag$EN;

  // register dp1_tlp_dmaTag
  reg [4 : 0] dp1_tlp_dmaTag;
  wire [4 : 0] dp1_tlp_dmaTag$D_IN;
  wire dp1_tlp_dmaTag$EN;

  // register dp1_tlp_doXmtMetaBody
  reg dp1_tlp_doXmtMetaBody;
  wire dp1_tlp_doXmtMetaBody$D_IN, dp1_tlp_doXmtMetaBody$EN;

  // register dp1_tlp_fabFlowAddr
  reg [31 : 0] dp1_tlp_fabFlowAddr;
  wire [31 : 0] dp1_tlp_fabFlowAddr$D_IN;
  wire dp1_tlp_fabFlowAddr$EN;

  // register dp1_tlp_fabMesgAccu
  reg [31 : 0] dp1_tlp_fabMesgAccu;
  reg [31 : 0] dp1_tlp_fabMesgAccu$D_IN;
  wire dp1_tlp_fabMesgAccu$EN;

  // register dp1_tlp_fabMesgAddr
  reg [31 : 0] dp1_tlp_fabMesgAddr;
  wire [31 : 0] dp1_tlp_fabMesgAddr$D_IN;
  wire dp1_tlp_fabMesgAddr$EN;

  // register dp1_tlp_fabMeta
  reg [128 : 0] dp1_tlp_fabMeta;
  reg [128 : 0] dp1_tlp_fabMeta$D_IN;
  wire dp1_tlp_fabMeta$EN;

  // register dp1_tlp_fabMetaAddr
  reg [31 : 0] dp1_tlp_fabMetaAddr;
  wire [31 : 0] dp1_tlp_fabMetaAddr$D_IN;
  wire dp1_tlp_fabMetaAddr$EN;

  // register dp1_tlp_farBufReady
  reg dp1_tlp_farBufReady;
  wire dp1_tlp_farBufReady$D_IN, dp1_tlp_farBufReady$EN;

  // register dp1_tlp_flowDiagCount
  reg [31 : 0] dp1_tlp_flowDiagCount;
  wire [31 : 0] dp1_tlp_flowDiagCount$D_IN;
  wire dp1_tlp_flowDiagCount$EN;

  // register dp1_tlp_gotResponseHeader
  reg dp1_tlp_gotResponseHeader;
  reg dp1_tlp_gotResponseHeader$D_IN;
  wire dp1_tlp_gotResponseHeader$EN;

  // register dp1_tlp_inIgnorePkt
  reg dp1_tlp_inIgnorePkt;
  wire dp1_tlp_inIgnorePkt$D_IN, dp1_tlp_inIgnorePkt$EN;

  // register dp1_tlp_maxPayloadSize
  reg [12 : 0] dp1_tlp_maxPayloadSize;
  wire [12 : 0] dp1_tlp_maxPayloadSize$D_IN;
  wire dp1_tlp_maxPayloadSize$EN;

  // register dp1_tlp_maxReadReqSize
  reg [12 : 0] dp1_tlp_maxReadReqSize;
  wire [12 : 0] dp1_tlp_maxReadReqSize$D_IN;
  wire dp1_tlp_maxReadReqSize$EN;

  // register dp1_tlp_mesgComplReceived
  reg [16 : 0] dp1_tlp_mesgComplReceived;
  reg [16 : 0] dp1_tlp_mesgComplReceived$D_IN;
  wire dp1_tlp_mesgComplReceived$EN;

  // register dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPull$D_IN;
  wire dp1_tlp_mesgLengthRemainPull$EN;

  // register dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPush$D_IN;
  wire dp1_tlp_mesgLengthRemainPush$EN;

  // register dp1_tlp_nearBufReady
  reg dp1_tlp_nearBufReady;
  wire dp1_tlp_nearBufReady$D_IN, dp1_tlp_nearBufReady$EN;

  // register dp1_tlp_outDwRemain
  reg [9 : 0] dp1_tlp_outDwRemain;
  wire [9 : 0] dp1_tlp_outDwRemain$D_IN;
  wire dp1_tlp_outDwRemain$EN;

  // register dp1_tlp_postSeqDwell
  reg [3 : 0] dp1_tlp_postSeqDwell;
  wire [3 : 0] dp1_tlp_postSeqDwell$D_IN;
  wire dp1_tlp_postSeqDwell$EN;

  // register dp1_tlp_pullTagMatch
  reg dp1_tlp_pullTagMatch;
  wire dp1_tlp_pullTagMatch$D_IN, dp1_tlp_pullTagMatch$EN;

  // register dp1_tlp_rdRespDwRemain
  reg [9 : 0] dp1_tlp_rdRespDwRemain;
  wire [9 : 0] dp1_tlp_rdRespDwRemain$D_IN;
  wire dp1_tlp_rdRespDwRemain$EN;

  // register dp1_tlp_readHeaderSent
  reg dp1_tlp_readHeaderSent;
  wire dp1_tlp_readHeaderSent$D_IN, dp1_tlp_readHeaderSent$EN;

  // register dp1_tlp_readNxtDWAddr
  reg [12 : 0] dp1_tlp_readNxtDWAddr;
  wire [12 : 0] dp1_tlp_readNxtDWAddr$D_IN;
  wire dp1_tlp_readNxtDWAddr$EN;

  // register dp1_tlp_readRemainDWLen
  reg [9 : 0] dp1_tlp_readRemainDWLen;
  wire [9 : 0] dp1_tlp_readRemainDWLen$D_IN;
  wire dp1_tlp_readRemainDWLen$EN;

  // register dp1_tlp_readStarted
  reg dp1_tlp_readStarted;
  wire dp1_tlp_readStarted$D_IN, dp1_tlp_readStarted$EN;

  // register dp1_tlp_remDone
  reg dp1_tlp_remDone;
  wire dp1_tlp_remDone$D_IN, dp1_tlp_remDone$EN;

  // register dp1_tlp_remMesgAccu
  reg [15 : 0] dp1_tlp_remMesgAccu;
  reg [15 : 0] dp1_tlp_remMesgAccu$D_IN;
  wire dp1_tlp_remMesgAccu$EN;

  // register dp1_tlp_remMesgAddr
  reg [15 : 0] dp1_tlp_remMesgAddr;
  wire [15 : 0] dp1_tlp_remMesgAddr$D_IN;
  wire dp1_tlp_remMesgAddr$EN;

  // register dp1_tlp_remMetaAddr
  reg [15 : 0] dp1_tlp_remMetaAddr;
  wire [15 : 0] dp1_tlp_remMetaAddr$D_IN;
  wire dp1_tlp_remMetaAddr$EN;

  // register dp1_tlp_remStart
  reg dp1_tlp_remStart;
  wire dp1_tlp_remStart$D_IN, dp1_tlp_remStart$EN;

  // register dp1_tlp_reqMesgInFlight
  reg dp1_tlp_reqMesgInFlight;
  reg dp1_tlp_reqMesgInFlight$D_IN;
  wire dp1_tlp_reqMesgInFlight$EN;

  // register dp1_tlp_reqMetaBodyInFlight
  reg dp1_tlp_reqMetaBodyInFlight;
  wire dp1_tlp_reqMetaBodyInFlight$D_IN, dp1_tlp_reqMetaBodyInFlight$EN;

  // register dp1_tlp_reqMetaInFlight
  reg dp1_tlp_reqMetaInFlight;
  reg dp1_tlp_reqMetaInFlight$D_IN;
  wire dp1_tlp_reqMetaInFlight$EN;

  // register dp1_tlp_srcMesgAccu
  reg [31 : 0] dp1_tlp_srcMesgAccu;
  wire [31 : 0] dp1_tlp_srcMesgAccu$D_IN;
  wire dp1_tlp_srcMesgAccu$EN;

  // register dp1_tlp_tlpMetaSent
  reg dp1_tlp_tlpMetaSent;
  wire dp1_tlp_tlpMetaSent$D_IN, dp1_tlp_tlpMetaSent$EN;

  // register dp1_tlp_tlpRcvBusy
  reg dp1_tlp_tlpRcvBusy;
  reg dp1_tlp_tlpRcvBusy$D_IN;
  wire dp1_tlp_tlpRcvBusy$EN;

  // register dp1_tlp_tlpXmtBusy
  reg dp1_tlp_tlpXmtBusy;
  reg dp1_tlp_tlpXmtBusy$D_IN;
  wire dp1_tlp_tlpXmtBusy$EN;

  // register dp1_tlp_writeDWAddr
  reg [12 : 0] dp1_tlp_writeDWAddr;
  wire [12 : 0] dp1_tlp_writeDWAddr$D_IN;
  wire dp1_tlp_writeDWAddr$EN;

  // register dp1_tlp_writeLastBE
  reg [3 : 0] dp1_tlp_writeLastBE;
  wire [3 : 0] dp1_tlp_writeLastBE$D_IN;
  wire dp1_tlp_writeLastBE$EN;

  // register dp1_tlp_writeRemainDWLen
  reg [9 : 0] dp1_tlp_writeRemainDWLen;
  wire [9 : 0] dp1_tlp_writeRemainDWLen$D_IN;
  wire dp1_tlp_writeRemainDWLen$EN;

  // register dp1_tlp_xmtMetaInFlight
  reg dp1_tlp_xmtMetaInFlight;
  wire dp1_tlp_xmtMetaInFlight$D_IN, dp1_tlp_xmtMetaInFlight$EN;

  // register dp1_tlp_xmtMetaOK
  reg dp1_tlp_xmtMetaOK;
  reg dp1_tlp_xmtMetaOK$D_IN;
  wire dp1_tlp_xmtMetaOK$EN;

  // register dp1_wci_cEdge
  reg [2 : 0] dp1_wci_cEdge;
  wire [2 : 0] dp1_wci_cEdge$D_IN;
  wire dp1_wci_cEdge$EN;

  // register dp1_wci_cState
  reg [2 : 0] dp1_wci_cState;
  wire [2 : 0] dp1_wci_cState$D_IN;
  wire dp1_wci_cState$EN;

  // register dp1_wci_ctlAckReg
  reg dp1_wci_ctlAckReg;
  wire dp1_wci_ctlAckReg$D_IN, dp1_wci_ctlAckReg$EN;

  // register dp1_wci_ctlOpActive
  reg dp1_wci_ctlOpActive;
  wire dp1_wci_ctlOpActive$D_IN, dp1_wci_ctlOpActive$EN;

  // register dp1_wci_illegalEdge
  reg dp1_wci_illegalEdge;
  wire dp1_wci_illegalEdge$D_IN, dp1_wci_illegalEdge$EN;

  // register dp1_wci_nState
  reg [2 : 0] dp1_wci_nState;
  reg [2 : 0] dp1_wci_nState$D_IN;
  wire dp1_wci_nState$EN;

  // register dp1_wci_reqF_countReg
  reg [1 : 0] dp1_wci_reqF_countReg;
  wire [1 : 0] dp1_wci_reqF_countReg$D_IN;
  wire dp1_wci_reqF_countReg$EN;

  // register dp1_wci_respF_c_r
  reg [1 : 0] dp1_wci_respF_c_r;
  wire [1 : 0] dp1_wci_respF_c_r$D_IN;
  wire dp1_wci_respF_c_r$EN;

  // register dp1_wci_respF_q_0
  reg [33 : 0] dp1_wci_respF_q_0;
  reg [33 : 0] dp1_wci_respF_q_0$D_IN;
  wire dp1_wci_respF_q_0$EN;

  // register dp1_wci_respF_q_1
  reg [33 : 0] dp1_wci_respF_q_1;
  reg [33 : 0] dp1_wci_respF_q_1$D_IN;
  wire dp1_wci_respF_q_1$EN;

  // register dp1_wci_sFlagReg
  reg dp1_wci_sFlagReg;
  wire dp1_wci_sFlagReg$D_IN, dp1_wci_sFlagReg$EN;

  // register dp1_wci_sThreadBusy_d
  reg dp1_wci_sThreadBusy_d;
  wire dp1_wci_sThreadBusy_d$D_IN, dp1_wci_sThreadBusy_d$EN;

  // register dp1_wmi_addr
  reg [13 : 0] dp1_wmi_addr;
  wire [13 : 0] dp1_wmi_addr$D_IN;
  wire dp1_wmi_addr$EN;

  // register dp1_wmi_bufDwell
  reg [1 : 0] dp1_wmi_bufDwell;
  wire [1 : 0] dp1_wmi_bufDwell$D_IN;
  wire dp1_wmi_bufDwell$EN;

  // register dp1_wmi_bytesRemainReq
  reg [13 : 0] dp1_wmi_bytesRemainReq;
  wire [13 : 0] dp1_wmi_bytesRemainReq$D_IN;
  wire dp1_wmi_bytesRemainReq$EN;

  // register dp1_wmi_bytesRemainResp
  reg [13 : 0] dp1_wmi_bytesRemainResp;
  wire [13 : 0] dp1_wmi_bytesRemainResp$D_IN;
  wire dp1_wmi_bytesRemainResp$EN;

  // register dp1_wmi_doneWithMesg
  reg dp1_wmi_doneWithMesg;
  wire dp1_wmi_doneWithMesg$D_IN, dp1_wmi_doneWithMesg$EN;

  // register dp1_wmi_lastMesg
  reg [31 : 0] dp1_wmi_lastMesg;
  wire [31 : 0] dp1_wmi_lastMesg$D_IN;
  wire dp1_wmi_lastMesg$EN;

  // register dp1_wmi_lclMesgAddr
  reg [14 : 0] dp1_wmi_lclMesgAddr;
  wire [14 : 0] dp1_wmi_lclMesgAddr$D_IN;
  wire dp1_wmi_lclMesgAddr$EN;

  // register dp1_wmi_lclMetaAddr
  reg [14 : 0] dp1_wmi_lclMetaAddr;
  wire [14 : 0] dp1_wmi_lclMetaAddr$D_IN;
  wire dp1_wmi_lclMetaAddr$EN;

  // register dp1_wmi_mesgBufReady
  reg dp1_wmi_mesgBufReady;
  wire dp1_wmi_mesgBufReady$D_IN, dp1_wmi_mesgBufReady$EN;

  // register dp1_wmi_mesgBusy
  reg dp1_wmi_mesgBusy;
  wire dp1_wmi_mesgBusy$D_IN, dp1_wmi_mesgBusy$EN;

  // register dp1_wmi_mesgCount
  reg [31 : 0] dp1_wmi_mesgCount;
  wire [31 : 0] dp1_wmi_mesgCount$D_IN;
  wire dp1_wmi_mesgCount$EN;

  // register dp1_wmi_mesgDone
  reg dp1_wmi_mesgDone;
  wire dp1_wmi_mesgDone$D_IN, dp1_wmi_mesgDone$EN;

  // register dp1_wmi_mesgMeta
  reg [128 : 0] dp1_wmi_mesgMeta;
  wire [128 : 0] dp1_wmi_mesgMeta$D_IN;
  wire dp1_wmi_mesgMeta$EN;

  // register dp1_wmi_mesgStart
  reg dp1_wmi_mesgStart;
  wire dp1_wmi_mesgStart$D_IN, dp1_wmi_mesgStart$EN;

  // register dp1_wmi_metaBusy
  reg dp1_wmi_metaBusy;
  wire dp1_wmi_metaBusy$D_IN, dp1_wmi_metaBusy$EN;

  // register dp1_wmi_p4B
  reg [1 : 0] dp1_wmi_p4B;
  wire [1 : 0] dp1_wmi_p4B$D_IN;
  wire dp1_wmi_p4B$EN;

  // register dp1_wmi_rdActive
  reg dp1_wmi_rdActive;
  wire dp1_wmi_rdActive$D_IN, dp1_wmi_rdActive$EN;

  // register dp1_wmi_reqCount
  reg [15 : 0] dp1_wmi_reqCount;
  wire [15 : 0] dp1_wmi_reqCount$D_IN;
  wire dp1_wmi_reqCount$EN;

  // register dp1_wmi_thisMesg
  reg [31 : 0] dp1_wmi_thisMesg;
  wire [31 : 0] dp1_wmi_thisMesg$D_IN;
  wire dp1_wmi_thisMesg$EN;

  // register dp1_wmi_wmi_blockReq
  reg dp1_wmi_wmi_blockReq;
  wire dp1_wmi_wmi_blockReq$D_IN, dp1_wmi_wmi_blockReq$EN;

  // register dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp1_wmi_wmi_dhF_countReg$D_IN;
  wire dp1_wmi_wmi_dhF_countReg$EN;

  // register dp1_wmi_wmi_dhF_levelsValid
  reg dp1_wmi_wmi_dhF_levelsValid;
  wire dp1_wmi_wmi_dhF_levelsValid$D_IN, dp1_wmi_wmi_dhF_levelsValid$EN;

  // register dp1_wmi_wmi_errorSticky
  reg dp1_wmi_wmi_errorSticky;
  wire dp1_wmi_wmi_errorSticky$D_IN, dp1_wmi_wmi_errorSticky$EN;

  // register dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp1_wmi_wmi_mFlagF_countReg$EN;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  reg dp1_wmi_wmi_mFlagF_levelsValid;
  wire dp1_wmi_wmi_mFlagF_levelsValid$D_IN, dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp1_wmi_wmi_mFlagReg
  reg [31 : 0] dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] dp1_wmi_wmi_mFlagReg$D_IN;
  wire dp1_wmi_wmi_mFlagReg$EN;

  // register dp1_wmi_wmi_operateD
  reg dp1_wmi_wmi_operateD;
  wire dp1_wmi_wmi_operateD$D_IN, dp1_wmi_wmi_operateD$EN;

  // register dp1_wmi_wmi_peerIsReady
  reg dp1_wmi_wmi_peerIsReady;
  wire dp1_wmi_wmi_peerIsReady$D_IN, dp1_wmi_wmi_peerIsReady$EN;

  // register dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp1_wmi_wmi_reqF_countReg$D_IN;
  wire dp1_wmi_wmi_reqF_countReg$EN;

  // register dp1_wmi_wmi_reqF_levelsValid
  reg dp1_wmi_wmi_reqF_levelsValid;
  wire dp1_wmi_wmi_reqF_levelsValid$D_IN, dp1_wmi_wmi_reqF_levelsValid$EN;

  // register dp1_wmi_wmi_respF_c_r
  reg [1 : 0] dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] dp1_wmi_wmi_respF_c_r$D_IN;
  wire dp1_wmi_wmi_respF_c_r$EN;

  // register dp1_wmi_wmi_respF_q_0
  reg [33 : 0] dp1_wmi_wmi_respF_q_0;
  reg [33 : 0] dp1_wmi_wmi_respF_q_0$D_IN;
  wire dp1_wmi_wmi_respF_q_0$EN;

  // register dp1_wmi_wmi_respF_q_1
  reg [33 : 0] dp1_wmi_wmi_respF_q_1;
  reg [33 : 0] dp1_wmi_wmi_respF_q_1$D_IN;
  wire dp1_wmi_wmi_respF_q_1$EN;

  // register dp1_wmi_wmi_sFlagReg
  reg [31 : 0] dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] dp1_wmi_wmi_sFlagReg$D_IN;
  wire dp1_wmi_wmi_sFlagReg$EN;

  // register dp1_wmi_wmi_statusR
  reg [7 : 0] dp1_wmi_wmi_statusR;
  wire [7 : 0] dp1_wmi_wmi_statusR$D_IN;
  wire dp1_wmi_wmi_statusR$EN;

  // register dp1_wmi_wmi_trafficSticky
  reg dp1_wmi_wmi_trafficSticky;
  wire dp1_wmi_wmi_trafficSticky$D_IN, dp1_wmi_wmi_trafficSticky$EN;

  // register dp1_wmi_wrActive
  reg dp1_wmi_wrActive;
  wire dp1_wmi_wrActive$D_IN, dp1_wmi_wrActive$EN;

  // register dp1_wmi_wrFinalize
  reg dp1_wmi_wrFinalize;
  wire dp1_wmi_wrFinalize$D_IN, dp1_wmi_wrFinalize$EN;

  // register dp1_wmi_wrtCount
  reg [15 : 0] dp1_wmi_wrtCount;
  wire [15 : 0] dp1_wmi_wrtCount$D_IN;
  wire dp1_wmi_wrtCount$EN;

  // register dp1_wti_nowReq
  reg [66 : 0] dp1_wti_nowReq;
  wire [66 : 0] dp1_wti_nowReq$D_IN;
  wire dp1_wti_nowReq$EN;

  // register itc0_wti_nowReq
  reg [66 : 0] itc0_wti_nowReq;
  wire [66 : 0] itc0_wti_nowReq$D_IN;
  wire itc0_wti_nowReq$EN;

  // register itc0_wti_sThreadBusy_d
  reg itc0_wti_sThreadBusy_d;
  wire itc0_wti_sThreadBusy_d$D_IN, itc0_wti_sThreadBusy_d$EN;

  // register itc1_wti_nowReq
  reg [66 : 0] itc1_wti_nowReq;
  wire [66 : 0] itc1_wti_nowReq$D_IN;
  wire itc1_wti_nowReq$EN;

  // register itc1_wti_sThreadBusy_d
  reg itc1_wti_sThreadBusy_d;
  wire itc1_wti_sThreadBusy_d$D_IN, itc1_wti_sThreadBusy_d$EN;

  // ports of submodule cp
  wire [152 : 0] cp$server_request_put, cp$server_response_get;
  wire [63 : 0] cp$cpNow;
  wire [31 : 0] cp$wci_Vm_0_MData,
		cp$wci_Vm_0_SData,
		cp$wci_Vm_10_MData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_MData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_MData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_MData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_MData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_MData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_MData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_MData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_MData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_MData,
		cp$wci_Vm_9_SData;
  wire [19 : 0] cp$wci_Vm_0_MAddr,
		cp$wci_Vm_10_MAddr,
		cp$wci_Vm_11_MAddr,
		cp$wci_Vm_12_MAddr,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_14_MAddr,
		cp$wci_Vm_1_MAddr,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_5_MAddr,
		cp$wci_Vm_6_MAddr,
		cp$wci_Vm_7_MAddr,
		cp$wci_Vm_8_MAddr,
		cp$wci_Vm_9_MAddr;
  wire [3 : 0] cp$wci_Vm_0_MByteEn,
	       cp$wci_Vm_10_MByteEn,
	       cp$wci_Vm_11_MByteEn,
	       cp$wci_Vm_12_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_1_MByteEn,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_3_MByteEn,
	       cp$wci_Vm_4_MByteEn,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_7_MByteEn,
	       cp$wci_Vm_8_MByteEn,
	       cp$wci_Vm_9_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_0_MCmd,
	       cp$wci_Vm_10_MCmd,
	       cp$wci_Vm_11_MCmd,
	       cp$wci_Vm_12_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_1_MCmd,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd,
	       cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_7_MCmd,
	       cp$wci_Vm_8_MCmd,
	       cp$wci_Vm_9_MCmd;
  wire [1 : 0] cp$led,
	       cp$wci_Vm_0_MFlag,
	       cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_MFlag,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_MFlag,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_MFlag,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_MFlag,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_MFlag,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_MFlag,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_MFlag,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_MFlag,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_MFlag,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_MFlag,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_MFlag,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_0,
       cp$RST_N_wci_Vm_1,
       cp$RST_N_wci_Vm_10,
       cp$RST_N_wci_Vm_11,
       cp$RST_N_wci_Vm_12,
       cp$RST_N_wci_Vm_13,
       cp$RST_N_wci_Vm_14,
       cp$RST_N_wci_Vm_2,
       cp$RST_N_wci_Vm_3,
       cp$RST_N_wci_Vm_4,
       cp$RST_N_wci_Vm_5,
       cp$RST_N_wci_Vm_6,
       cp$RST_N_wci_Vm_7,
       cp$RST_N_wci_Vm_8,
       cp$RST_N_wci_Vm_9,
       cp$gps_ppsSyncIn_x,
       cp$gps_ppsSyncOut,
       cp$wci_Vm_0_MAddrSpace,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_MAddrSpace,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_MAddrSpace,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_MAddrSpace,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_MAddrSpace,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_MAddrSpace,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_MAddrSpace,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_MAddrSpace,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_MAddrSpace,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_MAddrSpace,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_MAddrSpace,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule dp0_bram_memory
  reg [31 : 0] dp0_bram_memory$DIA, dp0_bram_memory$DIB;
  reg [10 : 0] dp0_bram_memory$ADDRA, dp0_bram_memory$ADDRB;
  wire [31 : 0] dp0_bram_memory$DOA, dp0_bram_memory$DOB;
  wire dp0_bram_memory$ENA,
       dp0_bram_memory$ENB,
       dp0_bram_memory$WEA,
       dp0_bram_memory$WEB;

  // ports of submodule dp0_bram_memory_1
  reg [31 : 0] dp0_bram_memory_1$DIA, dp0_bram_memory_1$DIB;
  reg [10 : 0] dp0_bram_memory_1$ADDRA, dp0_bram_memory_1$ADDRB;
  wire [31 : 0] dp0_bram_memory_1$DOA, dp0_bram_memory_1$DOB;
  wire dp0_bram_memory_1$ENA,
       dp0_bram_memory_1$ENB,
       dp0_bram_memory_1$WEA,
       dp0_bram_memory_1$WEB;

  // ports of submodule dp0_bram_memory_2
  reg [31 : 0] dp0_bram_memory_2$DIA, dp0_bram_memory_2$DIB;
  reg [10 : 0] dp0_bram_memory_2$ADDRA, dp0_bram_memory_2$ADDRB;
  wire [31 : 0] dp0_bram_memory_2$DOA, dp0_bram_memory_2$DOB;
  wire dp0_bram_memory_2$ENA,
       dp0_bram_memory_2$ENB,
       dp0_bram_memory_2$WEA,
       dp0_bram_memory_2$WEB;

  // ports of submodule dp0_bram_memory_3
  reg [31 : 0] dp0_bram_memory_3$DIA, dp0_bram_memory_3$DIB;
  reg [10 : 0] dp0_bram_memory_3$ADDRA, dp0_bram_memory_3$ADDRB;
  wire [31 : 0] dp0_bram_memory_3$DOA, dp0_bram_memory_3$DOB;
  wire dp0_bram_memory_3$ENA,
       dp0_bram_memory_3$ENB,
       dp0_bram_memory_3$WEA,
       dp0_bram_memory_3$WEB;

  // ports of submodule dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_1_outDataCore$CLR,
       dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_2_outDataCore$CLR,
       dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_3_outDataCore$CLR,
       dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_outDataCore$D_IN,
		dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_outDataCore$CLR,
       dp0_bram_serverAdapterA_outDataCore$DEQ,
       dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_outDataCore$ENQ,
       dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_1_outDataCore$CLR,
       dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_2_outDataCore$CLR,
       dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_3_outDataCore$CLR,
       dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_outDataCore$D_IN,
		dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_outDataCore$CLR,
       dp0_bram_serverAdapterB_outDataCore$DEQ,
       dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_outDataCore$ENQ,
       dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp0_tlp_inF
  wire [152 : 0] dp0_tlp_inF$D_IN, dp0_tlp_inF$D_OUT;
  wire dp0_tlp_inF$CLR,
       dp0_tlp_inF$DEQ,
       dp0_tlp_inF$EMPTY_N,
       dp0_tlp_inF$ENQ,
       dp0_tlp_inF$FULL_N;

  // ports of submodule dp0_tlp_mReqF
  reg [129 : 0] dp0_tlp_mReqF$D_IN;
  wire [129 : 0] dp0_tlp_mReqF$D_OUT;
  wire dp0_tlp_mReqF$CLR,
       dp0_tlp_mReqF$DEQ,
       dp0_tlp_mReqF$EMPTY_N,
       dp0_tlp_mReqF$ENQ,
       dp0_tlp_mReqF$FULL_N;

  // ports of submodule dp0_tlp_mRespF
  wire [138 : 0] dp0_tlp_mRespF$D_IN, dp0_tlp_mRespF$D_OUT;
  wire dp0_tlp_mRespF$CLR,
       dp0_tlp_mRespF$DEQ,
       dp0_tlp_mRespF$EMPTY_N,
       dp0_tlp_mRespF$ENQ,
       dp0_tlp_mRespF$FULL_N;

  // ports of submodule dp0_tlp_outF
  reg [152 : 0] dp0_tlp_outF$D_IN;
  wire [152 : 0] dp0_tlp_outF$D_OUT;
  wire dp0_tlp_outF$CLR,
       dp0_tlp_outF$DEQ,
       dp0_tlp_outF$EMPTY_N,
       dp0_tlp_outF$ENQ,
       dp0_tlp_outF$FULL_N;

  // ports of submodule dp0_tlp_readReq
  wire [59 : 0] dp0_tlp_readReq$D_IN, dp0_tlp_readReq$D_OUT;
  wire dp0_tlp_readReq$CLR,
       dp0_tlp_readReq$DEQ,
       dp0_tlp_readReq$EMPTY_N,
       dp0_tlp_readReq$ENQ,
       dp0_tlp_readReq$FULL_N;

  // ports of submodule dp0_wci_isReset
  wire dp0_wci_isReset$VAL;

  // ports of submodule dp0_wci_reqF
  wire [59 : 0] dp0_wci_reqF$D_IN, dp0_wci_reqF$D_OUT;
  wire dp0_wci_reqF$CLR,
       dp0_wci_reqF$DEQ,
       dp0_wci_reqF$EMPTY_N,
       dp0_wci_reqF$ENQ;

  // ports of submodule dp0_wmi_wmi_dhF
  wire [37 : 0] dp0_wmi_wmi_dhF$D_IN, dp0_wmi_wmi_dhF$D_OUT;
  wire dp0_wmi_wmi_dhF$CLR,
       dp0_wmi_wmi_dhF$DEQ,
       dp0_wmi_wmi_dhF$EMPTY_N,
       dp0_wmi_wmi_dhF$ENQ,
       dp0_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp0_wmi_wmi_isReset
  wire dp0_wmi_wmi_isReset$VAL;

  // ports of submodule dp0_wmi_wmi_mFlagF
  wire [31 : 0] dp0_wmi_wmi_mFlagF$D_IN, dp0_wmi_wmi_mFlagF$D_OUT;
  wire dp0_wmi_wmi_mFlagF$CLR,
       dp0_wmi_wmi_mFlagF$DEQ,
       dp0_wmi_wmi_mFlagF$EMPTY_N,
       dp0_wmi_wmi_mFlagF$ENQ,
       dp0_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp0_wmi_wmi_reqF
  wire [31 : 0] dp0_wmi_wmi_reqF$D_IN, dp0_wmi_wmi_reqF$D_OUT;
  wire dp0_wmi_wmi_reqF$CLR,
       dp0_wmi_wmi_reqF$DEQ,
       dp0_wmi_wmi_reqF$EMPTY_N,
       dp0_wmi_wmi_reqF$ENQ,
       dp0_wmi_wmi_reqF$FULL_N;

  // ports of submodule dp0_wti_isReset
  wire dp0_wti_isReset$VAL;

  // ports of submodule dp1_bram_memory
  reg [31 : 0] dp1_bram_memory$DIA, dp1_bram_memory$DIB;
  reg [10 : 0] dp1_bram_memory$ADDRA, dp1_bram_memory$ADDRB;
  wire [31 : 0] dp1_bram_memory$DOA, dp1_bram_memory$DOB;
  wire dp1_bram_memory$ENA,
       dp1_bram_memory$ENB,
       dp1_bram_memory$WEA,
       dp1_bram_memory$WEB;

  // ports of submodule dp1_bram_memory_1
  reg [31 : 0] dp1_bram_memory_1$DIA, dp1_bram_memory_1$DIB;
  reg [10 : 0] dp1_bram_memory_1$ADDRA, dp1_bram_memory_1$ADDRB;
  wire [31 : 0] dp1_bram_memory_1$DOA, dp1_bram_memory_1$DOB;
  wire dp1_bram_memory_1$ENA,
       dp1_bram_memory_1$ENB,
       dp1_bram_memory_1$WEA,
       dp1_bram_memory_1$WEB;

  // ports of submodule dp1_bram_memory_2
  reg [31 : 0] dp1_bram_memory_2$DIA, dp1_bram_memory_2$DIB;
  reg [10 : 0] dp1_bram_memory_2$ADDRA, dp1_bram_memory_2$ADDRB;
  wire [31 : 0] dp1_bram_memory_2$DOA, dp1_bram_memory_2$DOB;
  wire dp1_bram_memory_2$ENA,
       dp1_bram_memory_2$ENB,
       dp1_bram_memory_2$WEA,
       dp1_bram_memory_2$WEB;

  // ports of submodule dp1_bram_memory_3
  reg [31 : 0] dp1_bram_memory_3$DIA, dp1_bram_memory_3$DIB;
  reg [10 : 0] dp1_bram_memory_3$ADDRA, dp1_bram_memory_3$ADDRB;
  wire [31 : 0] dp1_bram_memory_3$DOA, dp1_bram_memory_3$DOB;
  wire dp1_bram_memory_3$ENA,
       dp1_bram_memory_3$ENB,
       dp1_bram_memory_3$WEA,
       dp1_bram_memory_3$WEB;

  // ports of submodule dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_1_outDataCore$CLR,
       dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_2_outDataCore$CLR,
       dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_3_outDataCore$CLR,
       dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_outDataCore$D_IN,
		dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_outDataCore$CLR,
       dp1_bram_serverAdapterA_outDataCore$DEQ,
       dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_outDataCore$ENQ,
       dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_1_outDataCore$CLR,
       dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_2_outDataCore$CLR,
       dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_3_outDataCore$CLR,
       dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_outDataCore$D_IN,
		dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_outDataCore$CLR,
       dp1_bram_serverAdapterB_outDataCore$DEQ,
       dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_outDataCore$ENQ,
       dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp1_tlp_inF
  wire [152 : 0] dp1_tlp_inF$D_IN, dp1_tlp_inF$D_OUT;
  wire dp1_tlp_inF$CLR,
       dp1_tlp_inF$DEQ,
       dp1_tlp_inF$EMPTY_N,
       dp1_tlp_inF$ENQ,
       dp1_tlp_inF$FULL_N;

  // ports of submodule dp1_tlp_mReqF
  reg [129 : 0] dp1_tlp_mReqF$D_IN;
  wire [129 : 0] dp1_tlp_mReqF$D_OUT;
  wire dp1_tlp_mReqF$CLR,
       dp1_tlp_mReqF$DEQ,
       dp1_tlp_mReqF$EMPTY_N,
       dp1_tlp_mReqF$ENQ,
       dp1_tlp_mReqF$FULL_N;

  // ports of submodule dp1_tlp_mRespF
  wire [138 : 0] dp1_tlp_mRespF$D_IN, dp1_tlp_mRespF$D_OUT;
  wire dp1_tlp_mRespF$CLR,
       dp1_tlp_mRespF$DEQ,
       dp1_tlp_mRespF$EMPTY_N,
       dp1_tlp_mRespF$ENQ,
       dp1_tlp_mRespF$FULL_N;

  // ports of submodule dp1_tlp_outF
  reg [152 : 0] dp1_tlp_outF$D_IN;
  wire [152 : 0] dp1_tlp_outF$D_OUT;
  wire dp1_tlp_outF$CLR,
       dp1_tlp_outF$DEQ,
       dp1_tlp_outF$EMPTY_N,
       dp1_tlp_outF$ENQ,
       dp1_tlp_outF$FULL_N;

  // ports of submodule dp1_tlp_readReq
  wire [59 : 0] dp1_tlp_readReq$D_IN, dp1_tlp_readReq$D_OUT;
  wire dp1_tlp_readReq$CLR,
       dp1_tlp_readReq$DEQ,
       dp1_tlp_readReq$EMPTY_N,
       dp1_tlp_readReq$ENQ,
       dp1_tlp_readReq$FULL_N;

  // ports of submodule dp1_wci_isReset
  wire dp1_wci_isReset$VAL;

  // ports of submodule dp1_wci_reqF
  wire [59 : 0] dp1_wci_reqF$D_IN, dp1_wci_reqF$D_OUT;
  wire dp1_wci_reqF$CLR,
       dp1_wci_reqF$DEQ,
       dp1_wci_reqF$EMPTY_N,
       dp1_wci_reqF$ENQ;

  // ports of submodule dp1_wmi_wmi_dhF
  wire [37 : 0] dp1_wmi_wmi_dhF$D_IN, dp1_wmi_wmi_dhF$D_OUT;
  wire dp1_wmi_wmi_dhF$CLR,
       dp1_wmi_wmi_dhF$DEQ,
       dp1_wmi_wmi_dhF$EMPTY_N,
       dp1_wmi_wmi_dhF$ENQ,
       dp1_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp1_wmi_wmi_isReset
  wire dp1_wmi_wmi_isReset$VAL;

  // ports of submodule dp1_wmi_wmi_mFlagF
  wire [31 : 0] dp1_wmi_wmi_mFlagF$D_IN, dp1_wmi_wmi_mFlagF$D_OUT;
  wire dp1_wmi_wmi_mFlagF$CLR,
       dp1_wmi_wmi_mFlagF$DEQ,
       dp1_wmi_wmi_mFlagF$EMPTY_N,
       dp1_wmi_wmi_mFlagF$ENQ,
       dp1_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp1_wmi_wmi_reqF
  wire [31 : 0] dp1_wmi_wmi_reqF$D_IN, dp1_wmi_wmi_reqF$D_OUT;
  wire dp1_wmi_wmi_reqF$CLR,
       dp1_wmi_wmi_reqF$DEQ,
       dp1_wmi_wmi_reqF$EMPTY_N,
       dp1_wmi_wmi_reqF$ENQ,
       dp1_wmi_wmi_reqF$FULL_N;

  // ports of submodule dp1_wti_isReset
  wire dp1_wti_isReset$VAL;

  // ports of submodule itc0_now
  wire [63 : 0] itc0_now$dD_OUT, itc0_now$sD_IN;
  wire itc0_now$sEN, itc0_now$sRDY;

  // ports of submodule itc1_now
  wire [63 : 0] itc1_now$dD_OUT, itc1_now$sD_IN;
  wire itc1_now$sEN, itc1_now$sRDY;

  // ports of submodule sm0
  wire [152 : 0] sm0$c0_request_get,
		 sm0$c0_response_put,
		 sm0$c1_request_get,
		 sm0$c1_response_put,
		 sm0$s_request_put,
		 sm0$s_response_get;
  wire sm0$EN_c0_request_get,
       sm0$EN_c0_response_put,
       sm0$EN_c1_request_get,
       sm0$EN_c1_response_put,
       sm0$EN_s_request_put,
       sm0$EN_s_response_get,
       sm0$RDY_c0_request_get,
       sm0$RDY_c0_response_put,
       sm0$RDY_c1_request_get,
       sm0$RDY_c1_response_put,
       sm0$RDY_s_request_put,
       sm0$RDY_s_response_get;

  // ports of submodule sm1
  wire [152 : 0] sm1$c0_request_get,
		 sm1$c0_response_put,
		 sm1$c1_request_get,
		 sm1$c1_response_put,
		 sm1$s_request_put,
		 sm1$s_response_get;
  wire sm1$EN_c0_request_get,
       sm1$EN_c0_response_put,
       sm1$EN_c1_request_get,
       sm1$EN_c1_response_put,
       sm1$EN_s_request_put,
       sm1$EN_s_response_get,
       sm1$RDY_c0_request_get,
       sm1$RDY_c0_response_put,
       sm1$RDY_c1_request_get,
       sm1$RDY_c1_response_put,
       sm1$RDY_s_request_put,
       sm1$RDY_s_response_get;

  // ports of submodule sm2
  wire [152 : 0] sm2$c0_request_get,
		 sm2$c0_response_put,
		 sm2$c1_response_put,
		 sm2$s_request_put,
		 sm2$s_response_get;
  wire sm2$EN_c0_request_get,
       sm2$EN_c0_response_put,
       sm2$EN_c1_request_get,
       sm2$EN_c1_response_put,
       sm2$EN_s_request_put,
       sm2$EN_s_response_get,
       sm2$RDY_c0_request_get,
       sm2$RDY_c0_response_put,
       sm2$RDY_c1_request_get,
       sm2$RDY_s_request_put,
       sm2$RDY_s_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_chomp_rogue,
       CAN_FIRE_RL_dp0_assignControl,
       CAN_FIRE_RL_dp0_bml_cntLclDone,
       CAN_FIRE_RL_dp0_bml_cntLclStart,
       CAN_FIRE_RL_dp0_bml_cntRemDone,
       CAN_FIRE_RL_dp0_bml_cntRemStart,
       CAN_FIRE_RL_dp0_bml_crdAdvance,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_fba,
       CAN_FIRE_RL_dp0_bml_initAccumulators,
       CAN_FIRE_RL_dp0_bml_lbar,
       CAN_FIRE_RL_dp0_bml_lbcf,
       CAN_FIRE_RL_dp0_bml_lclAdvance,
       CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_lcredit,
       CAN_FIRE_RL_dp0_bml_remAdvance,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_mkConnectionVtoAf,
       CAN_FIRE_RL_dp0_operating_actions,
       CAN_FIRE_RL_dp0_rBMesg,
       CAN_FIRE_RL_dp0_rBMesg_1,
       CAN_FIRE_RL_dp0_rBMeta,
       CAN_FIRE_RL_dp0_rBMeta_1,
       CAN_FIRE_RL_dp0_rCredit_1,
       CAN_FIRE_RL_dp0_rDone,
       CAN_FIRE_RL_dp0_rDone_1,
       CAN_FIRE_RL_dp0_rFFlow_1,
       CAN_FIRE_RL_dp0_rFMesg_1,
       CAN_FIRE_RL_dp0_rFMeta_1,
       CAN_FIRE_RL_dp0_rFRdy_1,
       CAN_FIRE_RL_dp0_rRdy,
       CAN_FIRE_RL_dp0_rRdy_1,
       CAN_FIRE_RL_dp0_rStart,
       CAN_FIRE_RL_dp0_rStart_1,
       CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp0_tlp_read_FirstReq,
       CAN_FIRE_RL_dp0_tlp_read_FirstResp,
       CAN_FIRE_RL_dp0_tlp_read_NextReq,
       CAN_FIRE_RL_dp0_tlp_read_NextResp,
       CAN_FIRE_RL_dp0_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp0_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp0_tlp_tlpRcv,
       CAN_FIRE_RL_dp0_tlp_writeData,
       CAN_FIRE_RL_dp0_tlp_writeReq,
       CAN_FIRE_RL_dp0_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wci_cfrd,
       CAN_FIRE_RL_dp0_wci_cfwr,
       CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_ctl_op_complete,
       CAN_FIRE_RL_dp0_wci_ctl_op_start,
       CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wci_reqF_enq,
       CAN_FIRE_RL_dp0_wci_request_decode,
       CAN_FIRE_RL_dp0_wci_respF_both,
       CAN_FIRE_RL_dp0_wci_respF_decCtr,
       CAN_FIRE_RL_dp0_wci_respF_deq,
       CAN_FIRE_RL_dp0_wci_respF_incCtr,
       CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wmi_doDwell,
       CAN_FIRE_RL_dp0_wmi_doReadReq,
       CAN_FIRE_RL_dp0_wmi_doReadResp,
       CAN_FIRE_RL_dp0_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_dp0_wmi_getRequest,
       CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_dp0_wmi_respMetadata,
       CAN_FIRE_RL_dp0_wmi_throttleWmi,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_dp1_assignControl,
       CAN_FIRE_RL_dp1_bml_cntLclDone,
       CAN_FIRE_RL_dp1_bml_cntLclStart,
       CAN_FIRE_RL_dp1_bml_cntRemDone,
       CAN_FIRE_RL_dp1_bml_cntRemStart,
       CAN_FIRE_RL_dp1_bml_crdAdvance,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_fba,
       CAN_FIRE_RL_dp1_bml_initAccumulators,
       CAN_FIRE_RL_dp1_bml_lbar,
       CAN_FIRE_RL_dp1_bml_lbcf,
       CAN_FIRE_RL_dp1_bml_lclAdvance,
       CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_lcredit,
       CAN_FIRE_RL_dp1_bml_remAdvance,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_mkConnectionVtoAf,
       CAN_FIRE_RL_dp1_operating_actions,
       CAN_FIRE_RL_dp1_rBMesg,
       CAN_FIRE_RL_dp1_rBMesg_1,
       CAN_FIRE_RL_dp1_rBMeta,
       CAN_FIRE_RL_dp1_rBMeta_1,
       CAN_FIRE_RL_dp1_rCredit_1,
       CAN_FIRE_RL_dp1_rDone,
       CAN_FIRE_RL_dp1_rDone_1,
       CAN_FIRE_RL_dp1_rFFlow_1,
       CAN_FIRE_RL_dp1_rFMesg_1,
       CAN_FIRE_RL_dp1_rFMeta_1,
       CAN_FIRE_RL_dp1_rFRdy_1,
       CAN_FIRE_RL_dp1_rRdy,
       CAN_FIRE_RL_dp1_rRdy_1,
       CAN_FIRE_RL_dp1_rStart,
       CAN_FIRE_RL_dp1_rStart_1,
       CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp1_tlp_read_FirstReq,
       CAN_FIRE_RL_dp1_tlp_read_FirstResp,
       CAN_FIRE_RL_dp1_tlp_read_NextReq,
       CAN_FIRE_RL_dp1_tlp_read_NextResp,
       CAN_FIRE_RL_dp1_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp1_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_dp1_tlp_writeData,
       CAN_FIRE_RL_dp1_tlp_writeReq,
       CAN_FIRE_RL_dp1_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wci_cfrd,
       CAN_FIRE_RL_dp1_wci_cfwr,
       CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_ctl_op_complete,
       CAN_FIRE_RL_dp1_wci_ctl_op_start,
       CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wci_reqF_enq,
       CAN_FIRE_RL_dp1_wci_request_decode,
       CAN_FIRE_RL_dp1_wci_respF_both,
       CAN_FIRE_RL_dp1_wci_respF_decCtr,
       CAN_FIRE_RL_dp1_wci_respF_deq,
       CAN_FIRE_RL_dp1_wci_respF_incCtr,
       CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wmi_doDwell,
       CAN_FIRE_RL_dp1_wmi_doReadReq,
       CAN_FIRE_RL_dp1_wmi_doReadResp,
       CAN_FIRE_RL_dp1_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_dp1_wmi_getRequest,
       CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_dp1_wmi_respMetadata,
       CAN_FIRE_RL_dp1_wmi_throttleWmi,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_itc0_send_time,
       CAN_FIRE_RL_itc0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_itc1_send_time,
       CAN_FIRE_RL_itc1_wti_sThreadBusy_reg,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrConnect_1,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mAddrSConnect_1,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mBEConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_reqConnect,
       CAN_FIRE_RL_reqConnect_1,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_server_request_put,
       CAN_FIRE_server_response_get,
       CAN_FIRE_switch,
       CAN_FIRE_wci_m_0_sData,
       CAN_FIRE_wci_m_0_sFlag,
       CAN_FIRE_wci_m_0_sResp,
       CAN_FIRE_wci_m_0_sThreadBusy,
       CAN_FIRE_wci_m_10_sData,
       CAN_FIRE_wci_m_10_sFlag,
       CAN_FIRE_wci_m_10_sResp,
       CAN_FIRE_wci_m_10_sThreadBusy,
       CAN_FIRE_wci_m_11_sData,
       CAN_FIRE_wci_m_11_sFlag,
       CAN_FIRE_wci_m_11_sResp,
       CAN_FIRE_wci_m_11_sThreadBusy,
       CAN_FIRE_wci_m_12_sData,
       CAN_FIRE_wci_m_12_sFlag,
       CAN_FIRE_wci_m_12_sResp,
       CAN_FIRE_wci_m_12_sThreadBusy,
       CAN_FIRE_wci_m_1_sData,
       CAN_FIRE_wci_m_1_sFlag,
       CAN_FIRE_wci_m_1_sResp,
       CAN_FIRE_wci_m_1_sThreadBusy,
       CAN_FIRE_wci_m_2_sData,
       CAN_FIRE_wci_m_2_sFlag,
       CAN_FIRE_wci_m_2_sResp,
       CAN_FIRE_wci_m_2_sThreadBusy,
       CAN_FIRE_wci_m_3_sData,
       CAN_FIRE_wci_m_3_sFlag,
       CAN_FIRE_wci_m_3_sResp,
       CAN_FIRE_wci_m_3_sThreadBusy,
       CAN_FIRE_wci_m_4_sData,
       CAN_FIRE_wci_m_4_sFlag,
       CAN_FIRE_wci_m_4_sResp,
       CAN_FIRE_wci_m_4_sThreadBusy,
       CAN_FIRE_wci_m_5_sData,
       CAN_FIRE_wci_m_5_sFlag,
       CAN_FIRE_wci_m_5_sResp,
       CAN_FIRE_wci_m_5_sThreadBusy,
       CAN_FIRE_wci_m_6_sData,
       CAN_FIRE_wci_m_6_sFlag,
       CAN_FIRE_wci_m_6_sResp,
       CAN_FIRE_wci_m_6_sThreadBusy,
       CAN_FIRE_wci_m_7_sData,
       CAN_FIRE_wci_m_7_sFlag,
       CAN_FIRE_wci_m_7_sResp,
       CAN_FIRE_wci_m_7_sThreadBusy,
       CAN_FIRE_wci_m_8_sData,
       CAN_FIRE_wci_m_8_sFlag,
       CAN_FIRE_wci_m_8_sResp,
       CAN_FIRE_wci_m_8_sThreadBusy,
       CAN_FIRE_wci_m_9_sData,
       CAN_FIRE_wci_m_9_sFlag,
       CAN_FIRE_wci_m_9_sResp,
       CAN_FIRE_wci_m_9_sThreadBusy,
       CAN_FIRE_wmiS0_mAddr,
       CAN_FIRE_wmiS0_mAddrSpace,
       CAN_FIRE_wmiS0_mBurstLength,
       CAN_FIRE_wmiS0_mCmd,
       CAN_FIRE_wmiS0_mData,
       CAN_FIRE_wmiS0_mDataByteEn,
       CAN_FIRE_wmiS0_mDataInfo,
       CAN_FIRE_wmiS0_mDataLast,
       CAN_FIRE_wmiS0_mDataValid,
       CAN_FIRE_wmiS0_mFlag,
       CAN_FIRE_wmiS0_mReqInfo,
       CAN_FIRE_wmiS0_mReqLast,
       CAN_FIRE_wmiS0_mReset_n,
       CAN_FIRE_wmiS1_mAddr,
       CAN_FIRE_wmiS1_mAddrSpace,
       CAN_FIRE_wmiS1_mBurstLength,
       CAN_FIRE_wmiS1_mCmd,
       CAN_FIRE_wmiS1_mData,
       CAN_FIRE_wmiS1_mDataByteEn,
       CAN_FIRE_wmiS1_mDataInfo,
       CAN_FIRE_wmiS1_mDataLast,
       CAN_FIRE_wmiS1_mDataValid,
       CAN_FIRE_wmiS1_mFlag,
       CAN_FIRE_wmiS1_mReqInfo,
       CAN_FIRE_wmiS1_mReqLast,
       CAN_FIRE_wmiS1_mReset_n,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_chomp_rogue,
       WILL_FIRE_RL_dp0_assignControl,
       WILL_FIRE_RL_dp0_bml_cntLclDone,
       WILL_FIRE_RL_dp0_bml_cntLclStart,
       WILL_FIRE_RL_dp0_bml_cntRemDone,
       WILL_FIRE_RL_dp0_bml_cntRemStart,
       WILL_FIRE_RL_dp0_bml_crdAdvance,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_fba,
       WILL_FIRE_RL_dp0_bml_initAccumulators,
       WILL_FIRE_RL_dp0_bml_lbar,
       WILL_FIRE_RL_dp0_bml_lbcf,
       WILL_FIRE_RL_dp0_bml_lclAdvance,
       WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_lcredit,
       WILL_FIRE_RL_dp0_bml_remAdvance,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_mkConnectionVtoAf,
       WILL_FIRE_RL_dp0_operating_actions,
       WILL_FIRE_RL_dp0_rBMesg,
       WILL_FIRE_RL_dp0_rBMesg_1,
       WILL_FIRE_RL_dp0_rBMeta,
       WILL_FIRE_RL_dp0_rBMeta_1,
       WILL_FIRE_RL_dp0_rCredit_1,
       WILL_FIRE_RL_dp0_rDone,
       WILL_FIRE_RL_dp0_rDone_1,
       WILL_FIRE_RL_dp0_rFFlow_1,
       WILL_FIRE_RL_dp0_rFMesg_1,
       WILL_FIRE_RL_dp0_rFMeta_1,
       WILL_FIRE_RL_dp0_rFRdy_1,
       WILL_FIRE_RL_dp0_rRdy,
       WILL_FIRE_RL_dp0_rRdy_1,
       WILL_FIRE_RL_dp0_rStart,
       WILL_FIRE_RL_dp0_rStart_1,
       WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_dp0_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp0_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_dp0_tlp_writeData,
       WILL_FIRE_RL_dp0_tlp_writeReq,
       WILL_FIRE_RL_dp0_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wci_cfrd,
       WILL_FIRE_RL_dp0_wci_cfwr,
       WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wci_reqF_enq,
       WILL_FIRE_RL_dp0_wci_request_decode,
       WILL_FIRE_RL_dp0_wci_respF_both,
       WILL_FIRE_RL_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_dp0_wci_respF_deq,
       WILL_FIRE_RL_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wmi_doDwell,
       WILL_FIRE_RL_dp0_wmi_doReadReq,
       WILL_FIRE_RL_dp0_wmi_doReadResp,
       WILL_FIRE_RL_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_dp0_wmi_getRequest,
       WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_dp0_wmi_respMetadata,
       WILL_FIRE_RL_dp0_wmi_throttleWmi,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_dp1_assignControl,
       WILL_FIRE_RL_dp1_bml_cntLclDone,
       WILL_FIRE_RL_dp1_bml_cntLclStart,
       WILL_FIRE_RL_dp1_bml_cntRemDone,
       WILL_FIRE_RL_dp1_bml_cntRemStart,
       WILL_FIRE_RL_dp1_bml_crdAdvance,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_fba,
       WILL_FIRE_RL_dp1_bml_initAccumulators,
       WILL_FIRE_RL_dp1_bml_lbar,
       WILL_FIRE_RL_dp1_bml_lbcf,
       WILL_FIRE_RL_dp1_bml_lclAdvance,
       WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_lcredit,
       WILL_FIRE_RL_dp1_bml_remAdvance,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_mkConnectionVtoAf,
       WILL_FIRE_RL_dp1_operating_actions,
       WILL_FIRE_RL_dp1_rBMesg,
       WILL_FIRE_RL_dp1_rBMesg_1,
       WILL_FIRE_RL_dp1_rBMeta,
       WILL_FIRE_RL_dp1_rBMeta_1,
       WILL_FIRE_RL_dp1_rCredit_1,
       WILL_FIRE_RL_dp1_rDone,
       WILL_FIRE_RL_dp1_rDone_1,
       WILL_FIRE_RL_dp1_rFFlow_1,
       WILL_FIRE_RL_dp1_rFMesg_1,
       WILL_FIRE_RL_dp1_rFMeta_1,
       WILL_FIRE_RL_dp1_rFRdy_1,
       WILL_FIRE_RL_dp1_rRdy,
       WILL_FIRE_RL_dp1_rRdy_1,
       WILL_FIRE_RL_dp1_rStart,
       WILL_FIRE_RL_dp1_rStart_1,
       WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_dp1_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp1_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_dp1_tlp_writeData,
       WILL_FIRE_RL_dp1_tlp_writeReq,
       WILL_FIRE_RL_dp1_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wci_cfrd,
       WILL_FIRE_RL_dp1_wci_cfwr,
       WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wci_reqF_enq,
       WILL_FIRE_RL_dp1_wci_request_decode,
       WILL_FIRE_RL_dp1_wci_respF_both,
       WILL_FIRE_RL_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_dp1_wci_respF_deq,
       WILL_FIRE_RL_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wmi_doDwell,
       WILL_FIRE_RL_dp1_wmi_doReadReq,
       WILL_FIRE_RL_dp1_wmi_doReadResp,
       WILL_FIRE_RL_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_dp1_wmi_getRequest,
       WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_dp1_wmi_respMetadata,
       WILL_FIRE_RL_dp1_wmi_throttleWmi,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_itc0_send_time,
       WILL_FIRE_RL_itc0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_itc1_send_time,
       WILL_FIRE_RL_itc1_wti_sThreadBusy_reg,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrConnect_1,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mAddrSConnect_1,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mBEConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_reqConnect,
       WILL_FIRE_RL_reqConnect_1,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_server_request_put,
       WILL_FIRE_server_response_get,
       WILL_FIRE_switch,
       WILL_FIRE_wci_m_0_sData,
       WILL_FIRE_wci_m_0_sFlag,
       WILL_FIRE_wci_m_0_sResp,
       WILL_FIRE_wci_m_0_sThreadBusy,
       WILL_FIRE_wci_m_10_sData,
       WILL_FIRE_wci_m_10_sFlag,
       WILL_FIRE_wci_m_10_sResp,
       WILL_FIRE_wci_m_10_sThreadBusy,
       WILL_FIRE_wci_m_11_sData,
       WILL_FIRE_wci_m_11_sFlag,
       WILL_FIRE_wci_m_11_sResp,
       WILL_FIRE_wci_m_11_sThreadBusy,
       WILL_FIRE_wci_m_12_sData,
       WILL_FIRE_wci_m_12_sFlag,
       WILL_FIRE_wci_m_12_sResp,
       WILL_FIRE_wci_m_12_sThreadBusy,
       WILL_FIRE_wci_m_1_sData,
       WILL_FIRE_wci_m_1_sFlag,
       WILL_FIRE_wci_m_1_sResp,
       WILL_FIRE_wci_m_1_sThreadBusy,
       WILL_FIRE_wci_m_2_sData,
       WILL_FIRE_wci_m_2_sFlag,
       WILL_FIRE_wci_m_2_sResp,
       WILL_FIRE_wci_m_2_sThreadBusy,
       WILL_FIRE_wci_m_3_sData,
       WILL_FIRE_wci_m_3_sFlag,
       WILL_FIRE_wci_m_3_sResp,
       WILL_FIRE_wci_m_3_sThreadBusy,
       WILL_FIRE_wci_m_4_sData,
       WILL_FIRE_wci_m_4_sFlag,
       WILL_FIRE_wci_m_4_sResp,
       WILL_FIRE_wci_m_4_sThreadBusy,
       WILL_FIRE_wci_m_5_sData,
       WILL_FIRE_wci_m_5_sFlag,
       WILL_FIRE_wci_m_5_sResp,
       WILL_FIRE_wci_m_5_sThreadBusy,
       WILL_FIRE_wci_m_6_sData,
       WILL_FIRE_wci_m_6_sFlag,
       WILL_FIRE_wci_m_6_sResp,
       WILL_FIRE_wci_m_6_sThreadBusy,
       WILL_FIRE_wci_m_7_sData,
       WILL_FIRE_wci_m_7_sFlag,
       WILL_FIRE_wci_m_7_sResp,
       WILL_FIRE_wci_m_7_sThreadBusy,
       WILL_FIRE_wci_m_8_sData,
       WILL_FIRE_wci_m_8_sFlag,
       WILL_FIRE_wci_m_8_sResp,
       WILL_FIRE_wci_m_8_sThreadBusy,
       WILL_FIRE_wci_m_9_sData,
       WILL_FIRE_wci_m_9_sFlag,
       WILL_FIRE_wci_m_9_sResp,
       WILL_FIRE_wci_m_9_sThreadBusy,
       WILL_FIRE_wmiS0_mAddr,
       WILL_FIRE_wmiS0_mAddrSpace,
       WILL_FIRE_wmiS0_mBurstLength,
       WILL_FIRE_wmiS0_mCmd,
       WILL_FIRE_wmiS0_mData,
       WILL_FIRE_wmiS0_mDataByteEn,
       WILL_FIRE_wmiS0_mDataInfo,
       WILL_FIRE_wmiS0_mDataLast,
       WILL_FIRE_wmiS0_mDataValid,
       WILL_FIRE_wmiS0_mFlag,
       WILL_FIRE_wmiS0_mReqInfo,
       WILL_FIRE_wmiS0_mReqLast,
       WILL_FIRE_wmiS0_mReset_n,
       WILL_FIRE_wmiS1_mAddr,
       WILL_FIRE_wmiS1_mAddrSpace,
       WILL_FIRE_wmiS1_mBurstLength,
       WILL_FIRE_wmiS1_mCmd,
       WILL_FIRE_wmiS1_mData,
       WILL_FIRE_wmiS1_mDataByteEn,
       WILL_FIRE_wmiS1_mDataInfo,
       WILL_FIRE_wmiS1_mDataLast,
       WILL_FIRE_wmiS1_mDataValid,
       WILL_FIRE_wmiS1_mFlag,
       WILL_FIRE_wmiS1_mReqInfo,
       WILL_FIRE_wmiS1_mReqLast,
       WILL_FIRE_wmiS1_mReset_n;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_2,
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2;
  reg [10 : 0] MUX_dp0_bram_memory$a_put_2__VAL_3,
	       MUX_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_dp1_bram_memory$a_put_2__VAL_3,
	       MUX_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_dp0_tlp_outF$enq_1__VAL_6,
		 MUX_dp0_tlp_outF$enq_1__VAL_7,
		 MUX_dp0_tlp_outF$enq_1__VAL_8,
		 MUX_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_dp1_tlp_outF$enq_1__VAL_7,
		 MUX_dp1_tlp_outF$enq_1__VAL_8;
  wire [138 : 0] MUX_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_5,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_6,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_5,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_6;
  wire [128 : 0] MUX_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp0_tlp_fabMeta$write_1__VAL_3,
		 MUX_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_2,
		 MUX_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_1,
		MUX_dp0_wci_respF_q_1$write_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1,
		MUX_dp1_wci_respF_q_0$write_1__VAL_1,
		MUX_dp1_wci_respF_q_1$write_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_3,
		MUX_dp0_bram_memory_1$a_put_3__VAL_3,
		MUX_dp0_bram_memory_2$a_put_3__VAL_3,
		MUX_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_3,
		MUX_dp1_bram_memory_1$a_put_3__VAL_3,
		MUX_dp1_bram_memory_2$a_put_3__VAL_3,
		MUX_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [16 : 0] MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2,
		MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_dp0_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp0_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp0_bml_remBuf_value$write_1__VAL_3,
		MUX_dp0_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_3,
		MUX_dp1_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp1_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp1_bml_remBuf_value$write_1__VAL_3,
		MUX_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_3;
  wire [13 : 0] MUX_dp0_wmi_addr$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_dp1_wmi_addr$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [10 : 0] MUX_dp0_bram_memory$b_put_2__VAL_1,
		MUX_dp1_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [3 : 0] MUX_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp0_wmi_p4B$write_1__VAL_2,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp1_wmi_p4B$write_1__VAL_2,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_2,
       MUX_dp0_bram_memory$a_put_1__SEL_3,
       MUX_dp0_bram_memory$b_put_1__SEL_1,
       MUX_dp0_bram_memory$b_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_dp0_bram_memory_1$b_put_1__SEL_1,
       MUX_dp0_bram_memory_1$b_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_dp0_bram_memory_2$b_put_1__SEL_1,
       MUX_dp0_bram_memory_2$b_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_dp0_bram_memory_3$b_put_1__SEL_1,
       MUX_dp0_bram_memory_3$b_put_1__SEL_2,
       MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_6,
       MUX_dp0_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp0_tlp_outF$enq_1__SEL_8,
       MUX_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_dp0_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp0_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_dp0_wci_respF_q_0$write_1__SEL_2,
       MUX_dp0_wci_respF_q_1$write_1__SEL_2,
       MUX_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp0_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_2,
       MUX_dp1_bram_memory$a_put_1__SEL_3,
       MUX_dp1_bram_memory$b_put_1__SEL_1,
       MUX_dp1_bram_memory$b_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_dp1_bram_memory_1$b_put_1__SEL_1,
       MUX_dp1_bram_memory_1$b_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_3__SEL_3,
       MUX_dp1_bram_memory_2$b_put_1__SEL_1,
       MUX_dp1_bram_memory_2$b_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_dp1_bram_memory_3$b_put_1__SEL_1,
       MUX_dp1_bram_memory_3$b_put_1__SEL_2,
       MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_dp1_tlp_mReqF$enq_1__SEL_6,
       MUX_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp1_tlp_outF$enq_1__SEL_8,
       MUX_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_dp1_wci_respF_q_0$write_1__SEL_2,
       MUX_dp1_wci_respF_q_1$write_1__SEL_2,
       MUX_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp1_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_dp1_wmi_wrFinalize$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h100933,
	       v__h101942,
	       v__h106036,
	       v__h106382,
	       v__h106949,
	       v__h107300,
	       v__h108363,
	       v__h111097,
	       v__h112131,
	       v__h113178,
	       v__h113512,
	       v__h114760,
	       v__h118864,
	       v__h119291,
	       v__h119909,
	       v__h120226,
	       v__h121280,
	       v__h150599,
	       v__h157994,
	       v__h158368,
	       v__h158530,
	       v__h162724,
	       v__h17574,
	       v__h17759,
	       v__h17914,
	       v__h21859,
	       v__h22871,
	       v__h26965,
	       v__h27311,
	       v__h27878,
	       v__h28229,
	       v__h29292,
	       v__h32026,
	       v__h33060,
	       v__h34107,
	       v__h34446,
	       v__h35697,
	       v__h39801,
	       v__h40228,
	       v__h40846,
	       v__h41163,
	       v__h42217,
	       v__h71536,
	       v__h78936,
	       v__h79310,
	       v__h79472,
	       v__h96663,
	       v__h96845,
	       v__h97000;
  reg [31 : 0] IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673,
	       IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678,
	       IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674,
	       IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679,
	       IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675,
	       IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680,
	       IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676,
	       IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681,
	       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677,
	       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682,
	       _theResult____h158514,
	       _theResult____h79456,
	       rdata__h151716,
	       rdata__h72653;
  reg [15 : 0] CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3,
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4;
  reg [1 : 0] lowAddr10__h133793,
	      lowAddr10__h54730,
	      x__h133915,
	      x__h133938,
	      x__h54852,
	      x__h54875;
  reg CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11,
      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9,
      CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1,
      CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6,
      CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5,
      CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27,
      CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19,
      CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2,
      CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8,
      CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7,
      CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29,
      CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30,
      IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157,
      IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613,
      IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343,
      IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602,
      IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167,
      IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579,
      IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353,
      IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603,
      IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177,
      IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578,
      IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363,
      IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604,
      IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187,
      IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612,
      IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373,
      IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605,
      IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997,
      IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1389,
      IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382,
      IF_dp0_wmi_p4B_806_EQ_1_809_THEN_dp0_bram_serv_ETC___d1815,
      IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183,
      IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3575,
      IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397,
      IF_dp1_wmi_p4B_992_EQ_1_995_THEN_dp1_bram_serv_ETC___d4001;
  wire [127 : 0] IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1508,
		 IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1513,
		 IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3694,
		 IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3699,
		 pkt__h122275,
		 pkt__h43212,
		 rdata__h139163,
		 rdata__h60100,
		 w_data__h106491,
		 w_data__h107469,
		 w_data__h108531,
		 w_data__h111251,
		 w_data__h113435,
		 w_data__h119198,
		 w_data__h27420,
		 w_data__h28398,
		 w_data__h29460,
		 w_data__h32180,
		 w_data__h34364,
		 w_data__h40135;
  wire [31 : 0] dp0_bml_fabFlowAddr_959_PLUS_dp0_bml_fabFlowSi_ETC___d5130,
		dp1_bml_fabFlowAddr_145_PLUS_dp1_bml_fabFlowSi_ETC___d5131,
		mesgMeta_opcode__h149996,
		mesgMeta_opcode__h70933,
		nowLS__h102873,
		nowLS__h115707,
		nowLS__h23802,
		nowLS__h36644,
		nowMS__h102872,
		nowMS__h115706,
		nowMS__h23801,
		nowMS__h36643,
		opcode__h102871,
		opcode__h115705,
		opcode__h23800,
		opcode__h36642,
		rdat__h158593,
		rdat__h158601,
		rdat__h158609,
		rdat__h158617,
		rdat__h158625,
		rdat__h158633,
		rdat__h158641,
		rdat__h158662,
		rdat__h158667,
		rdat__h158678,
		rdat__h158683,
		rdat__h158744,
		rdat__h79535,
		rdat__h79543,
		rdat__h79551,
		rdat__h79559,
		rdat__h79567,
		rdat__h79575,
		rdat__h79583,
		rdat__h79604,
		rdat__h79609,
		rdat__h79620,
		rdat__h79625,
		rdat__h79686,
		rresp_data__h133837,
		rresp_data__h54774,
		x3__h149956,
		x3__h70893,
		x__h102934,
		x__h115737,
		x__h23863,
		x__h36674,
		y__h106221,
		y__h106638,
		y__h119013,
		y__h27150,
		y__h27567,
		y__h39950,
		y_avValue__h151552,
		y_avValue__h151572,
		y_avValue__h151592,
		y_avValue__h151612,
		y_avValue__h72489,
		y_avValue__h72509,
		y_avValue__h72529,
		y_avValue__h72549;
  wire [16 : 0] x__h106140,
		x__h118950,
		x__h27069,
		x__h39887,
		y__h106127,
		y__h106142,
		y__h118942,
		y__h118952,
		y__h120202,
		y__h27056,
		y__h27071,
		y__h39879,
		y__h39889,
		y__h41139;
  wire [15 : 0] w_be__h107043,
		w_be__h27972,
		x__h155737,
		x__h156861,
		x__h156866,
		x__h156938,
		x__h156943,
		x__h156980,
		x__h156985,
		x__h157018,
		x__h157023,
		x__h76677,
		x__h77801,
		x__h77806,
		x__h77878,
		x__h77883,
		x__h77920,
		x__h77925,
		x__h77958,
		x__h77963,
		y__h106269,
		y__h119524,
		y__h27198,
		y__h40461;
  wire [12 : 0] dp0_tlp_readNxtDWAddr_PLUS_1__q16,
		dp0_tlp_readNxtDWAddr_PLUS_2__q17,
		dp0_tlp_readNxtDWAddr_PLUS_3__q15,
		dp0_tlp_writeDWAddr_PLUS_1__q13,
		dp0_tlp_writeDWAddr_PLUS_2__q14,
		dp0_tlp_writeDWAddr_PLUS_3__q12,
		dp1_tlp_readNxtDWAddr_PLUS_1__q24,
		dp1_tlp_readNxtDWAddr_PLUS_2__q25,
		dp1_tlp_readNxtDWAddr_PLUS_3__q23,
		dp1_tlp_writeDWAddr_PLUS_1__q21,
		dp1_tlp_writeDWAddr_PLUS_2__q22,
		dp1_tlp_writeDWAddr_PLUS_3__q20,
		spanToNextPage__h106086,
		spanToNextPage__h118916,
		spanToNextPage__h27015,
		spanToNextPage__h39853,
		thisRequestLength__h106087,
		thisRequestLength__h118917,
		thisRequestLength__h27016,
		thisRequestLength__h39854;
  wire [11 : 0] byteCount__h133795,
		byteCount__h54732,
		x__h133906,
		x__h133908,
		x__h54843,
		x__h54845,
		y__h133907,
		y__h133909,
		y__h54844,
		y__h54846;
  wire [9 : 0] x__h106641,
	       x__h119527,
	       x__h120205,
	       x__h27570,
	       x__h40464,
	       x__h41142;
  wire [7 : 0] rreq_tag__h106316,
	       rreq_tag__h27245,
	       tag__h119192,
	       tag__h40129,
	       tagm__h119318,
	       tagm__h40255;
  wire [6 : 0] lowAddr__h133794, lowAddr__h54731;
  wire [3 : 0] lastBE__h106515,
	       lastBE__h119219,
	       lastBE__h27444,
	       lastBE__h40156;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_dp0_b_ETC___d150,
	       dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_dp0_b_ETC___d268,
	       dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_dp0_b_ETC___d386,
	       dp0_bram_serverAdapterA_cnt_6_PLUS_IF_dp0_bram_ETC___d32,
	       dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_dp0_b_ETC___d209,
	       dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_dp0_b_ETC___d327,
	       dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_dp0_b_ETC___d445,
	       dp0_bram_serverAdapterB_cnt_5_PLUS_IF_dp0_bram_ETC___d91,
	       dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF_dp1__ETC___d2342,
	       dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF_dp1__ETC___d2460,
	       dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF_dp1__ETC___d2578,
	       dp1_bram_serverAdapterA_cnt_218_PLUS_IF_dp1_br_ETC___d2224,
	       dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF_dp1__ETC___d2401,
	       dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF_dp1__ETC___d2519,
	       dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF_dp1__ETC___d2637,
	       dp1_bram_serverAdapterB_cnt_277_PLUS_IF_dp1_br_ETC___d2283;
  wire [1 : 0] ab__h10947,
	       ab__h12477,
	       ab__h13874,
	       ab__h3694,
	       ab__h5093,
	       ab__h6623,
	       ab__h8020,
	       ab__h82792,
	       ab__h84191,
	       ab__h85721,
	       ab__h87118,
	       ab__h88648,
	       ab__h90045,
	       ab__h91575,
	       ab__h92972,
	       ab__h9550,
	       idx__h124616,
	       idx__h126839,
	       idx__h128135,
	       idx__h129431,
	       idx__h131679,
	       idx__h132147,
	       idx__h132520,
	       idx__h132893,
	       idx__h45553,
	       idx__h47776,
	       idx__h49072,
	       idx__h50368,
	       idx__h52616,
	       idx__h53084,
	       idx__h53457,
	       idx__h53830;
  wire IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1190,
       IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3376,
       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1397,
       IF_dp0_wmi_p4B_806_EQ_0_807_THEN_dp0_bram_serv_ETC___d1820,
       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3583,
       IF_dp1_wmi_p4B_992_EQ_0_993_THEN_dp1_bram_serv_ETC___d4006,
       NOT_dp0_bml_lclBufDone_944_011_AND_IF_dp0_bml__ETC___d2024,
       NOT_dp0_tlp_mReqF_first__108_BITS_28_TO_19_285_ETC___d1299,
       NOT_dp0_wmi_wrActive_724_725_OR_NOT_dp0_wmi_rd_ETC___d1734,
       NOT_dp1_bml_lclBufDone_130_197_AND_IF_dp1_bml__ETC___d4210,
       NOT_dp1_tlp_mReqF_first__294_BITS_28_TO_19_471_ETC___d3485,
       NOT_dp1_wmi_wrActive_910_911_OR_NOT_dp1_wmi_rd_ETC___d3920,
       _dfoo15,
       _dfoo5,
       dp0_bml_crdBuf_value_902_EQ_dp0_bml_crdBuf_mod_ETC___d5255,
       dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256,
       dp0_bml_lclBufDone_944_AND_IF_dp0_bml_dpContro_ETC___d4580,
       dp0_bml_lclBuf_value_857_EQ_dp0_bml_lclBuf_mod_ETC___d5271,
       dp0_bml_remBuf_value_872_EQ_dp0_bml_remBuf_mod_ETC___d4622,
       dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552,
       dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136,
       dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1468,
       dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137,
       dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135,
       dp0_bram_serverAdapterA_outDataCore_notEmpty_O_ETC___d1470,
       dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1466,
       dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665,
       dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1693,
       dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666,
       dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667,
       dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664,
       dp0_tlp_dmaPullRemainDWLen_001_ULE_dp0_tlp_dma_ETC___d5132,
       dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_1_ETC___d654,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d1040,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d877,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d910,
       dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ_pciD_ETC___d908,
       dp0_tlp_inF_first__96_BIT_152_043_AND_NOT_dp0__ETC___d1068,
       dp0_tlp_mReqF_RDY_deq__107_AND_IF_dp0_tlp_mReq_ETC___d1123,
       dp0_tlp_mRespF_first__64_BITS_71_TO_62_54_ULE_1___d4519,
       dp0_tlp_outDwRemain_81_ULE_4___d4818,
       dp0_tlp_rdRespDwRemain_458_ULE_4___d1459,
       dp0_tlp_readRemainDWLen_314_ULE_4___d1315,
       dp0_tlp_writeRemainDWLen_144_ULE_1___d4512,
       dp0_tlp_writeRemainDWLen_144_ULE_2___d4510,
       dp0_tlp_writeRemainDWLen_144_ULE_3___d4509,
       dp0_wmi_dpControl_whas__651_AND_dp0_bram_serve_ETC___d1697,
       dp1_bml_crdBuf_value_088_EQ_dp1_bml_crdBuf_mod_ETC___d5323,
       dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324,
       dp1_bml_lclBufDone_130_AND_IF_dp1_bml_dpContro_ETC___d4606,
       dp1_bml_lclBuf_value_043_EQ_dp1_bml_lclBuf_mod_ETC___d5339,
       dp1_bml_remBuf_value_058_EQ_dp1_bml_remBuf_mod_ETC___d5340,
       dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139,
       dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140,
       dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3654,
       dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141,
       dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138,
       dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3656,
       dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3652,
       dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851,
       dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3879,
       dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852,
       dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853,
       dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850,
       dp1_tlp_dmaPullRemainDWLen_187_ULE_dp1_tlp_dma_ETC___d5133,
       dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134,
       dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d2845,
       dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3065,
       dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3096,
       dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3226,
       dp1_tlp_inF_first__084_BITS_63_TO_56_087_EQ_pc_ETC___d3094,
       dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_dp1_ETC___d3254,
       dp1_tlp_mReqF_RDY_deq__293_AND_IF_dp1_tlp_mReq_ETC___d3309,
       dp1_tlp_mRespF_first__854_BITS_71_TO_62_944_ULE_1___d4513,
       dp1_tlp_outDwRemain_970_ULE_4___d4824,
       dp1_tlp_rdRespDwRemain_644_ULE_4___d3645,
       dp1_tlp_readRemainDWLen_500_ULE_4___d3501,
       dp1_tlp_writeRemainDWLen_330_ULE_1___d4528,
       dp1_tlp_writeRemainDWLen_330_ULE_2___d4520,
       dp1_tlp_writeRemainDWLen_330_ULE_3___d4522,
       dp1_wmi_dpControl_whas__837_AND_dp1_bram_serve_ETC___d3883;

  // output resets
  assign RST_N_wci_m_0 = cp$RST_N_wci_Vm_0 ;
  assign RST_N_wci_m_1 = cp$RST_N_wci_Vm_1 ;
  assign RST_N_wci_m_2 = cp$RST_N_wci_Vm_2 ;
  assign RST_N_wci_m_3 = cp$RST_N_wci_Vm_3 ;
  assign RST_N_wci_m_4 = cp$RST_N_wci_Vm_4 ;
  assign RST_N_wci_m_5 = cp$RST_N_wci_Vm_5 ;
  assign RST_N_wci_m_6 = cp$RST_N_wci_Vm_6 ;
  assign RST_N_wci_m_7 = cp$RST_N_wci_Vm_7 ;
  assign RST_N_wci_m_8 = cp$RST_N_wci_Vm_8 ;
  assign RST_N_wci_m_9 = cp$RST_N_wci_Vm_9 ;
  assign RST_N_wci_m_10 = cp$RST_N_wci_Vm_10 ;
  assign RST_N_wci_m_11 = cp$RST_N_wci_Vm_11 ;
  assign RST_N_wci_m_12 = cp$RST_N_wci_Vm_12 ;

  // action method server_request_put
  assign RDY_server_request_put = sm0$RDY_s_request_put ;
  assign CAN_FIRE_server_request_put = sm0$RDY_s_request_put ;
  assign WILL_FIRE_server_request_put = EN_server_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = sm0$s_response_get ;
  assign RDY_server_response_get = sm0$RDY_s_response_get ;
  assign CAN_FIRE_server_response_get = sm0$RDY_s_response_get ;
  assign WILL_FIRE_server_response_get = EN_server_response_get ;

  // value method led
  assign led = cp$led ;

  // action method switch
  assign CAN_FIRE_switch = 1'd1 ;
  assign WILL_FIRE_switch = 1'd1 ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = cp$wci_Vm_0_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = cp$wci_Vm_0_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = cp$wci_Vm_0_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = cp$wci_Vm_0_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = cp$wci_Vm_0_MData ;

  // action method wci_m_0_sResp
  assign CAN_FIRE_wci_m_0_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sResp = 1'd1 ;

  // action method wci_m_0_sData
  assign CAN_FIRE_wci_m_0_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sData = 1'd1 ;

  // action method wci_m_0_sThreadBusy
  assign CAN_FIRE_wci_m_0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sThreadBusy = wci_m_0_SThreadBusy ;

  // action method wci_m_0_sFlag
  assign CAN_FIRE_wci_m_0_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sFlag = 1'd1 ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = cp$wci_Vm_0_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = cp$wci_Vm_1_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = cp$wci_Vm_1_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = cp$wci_Vm_1_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = cp$wci_Vm_1_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = cp$wci_Vm_1_MData ;

  // action method wci_m_1_sResp
  assign CAN_FIRE_wci_m_1_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sResp = 1'd1 ;

  // action method wci_m_1_sData
  assign CAN_FIRE_wci_m_1_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sData = 1'd1 ;

  // action method wci_m_1_sThreadBusy
  assign CAN_FIRE_wci_m_1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sThreadBusy = wci_m_1_SThreadBusy ;

  // action method wci_m_1_sFlag
  assign CAN_FIRE_wci_m_1_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sFlag = 1'd1 ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = cp$wci_Vm_1_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = cp$wci_Vm_2_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = cp$wci_Vm_2_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = cp$wci_Vm_2_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = cp$wci_Vm_2_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = cp$wci_Vm_2_MData ;

  // action method wci_m_2_sResp
  assign CAN_FIRE_wci_m_2_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sResp = 1'd1 ;

  // action method wci_m_2_sData
  assign CAN_FIRE_wci_m_2_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sData = 1'd1 ;

  // action method wci_m_2_sThreadBusy
  assign CAN_FIRE_wci_m_2_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sThreadBusy = wci_m_2_SThreadBusy ;

  // action method wci_m_2_sFlag
  assign CAN_FIRE_wci_m_2_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sFlag = 1'd1 ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = cp$wci_Vm_2_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = cp$wci_Vm_3_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = cp$wci_Vm_3_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = cp$wci_Vm_3_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = cp$wci_Vm_3_MData ;

  // action method wci_m_3_sResp
  assign CAN_FIRE_wci_m_3_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sResp = 1'd1 ;

  // action method wci_m_3_sData
  assign CAN_FIRE_wci_m_3_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sData = 1'd1 ;

  // action method wci_m_3_sThreadBusy
  assign CAN_FIRE_wci_m_3_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sThreadBusy = wci_m_3_SThreadBusy ;

  // action method wci_m_3_sFlag
  assign CAN_FIRE_wci_m_3_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sFlag = 1'd1 ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = cp$wci_Vm_3_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = cp$wci_Vm_4_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = cp$wci_Vm_4_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = cp$wci_Vm_4_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = cp$wci_Vm_4_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = cp$wci_Vm_4_MData ;

  // action method wci_m_4_sResp
  assign CAN_FIRE_wci_m_4_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sResp = 1'd1 ;

  // action method wci_m_4_sData
  assign CAN_FIRE_wci_m_4_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sData = 1'd1 ;

  // action method wci_m_4_sThreadBusy
  assign CAN_FIRE_wci_m_4_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sThreadBusy = wci_m_4_SThreadBusy ;

  // action method wci_m_4_sFlag
  assign CAN_FIRE_wci_m_4_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sFlag = 1'd1 ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = cp$wci_Vm_4_MFlag ;

  // value method wci_m_5_mCmd
  assign wci_m_5_MCmd = cp$wci_Vm_5_MCmd ;

  // value method wci_m_5_mAddrSpace
  assign wci_m_5_MAddrSpace = cp$wci_Vm_5_MAddrSpace ;

  // value method wci_m_5_mByteEn
  assign wci_m_5_MByteEn = cp$wci_Vm_5_MByteEn ;

  // value method wci_m_5_mAddr
  assign wci_m_5_MAddr = cp$wci_Vm_5_MAddr ;

  // value method wci_m_5_mData
  assign wci_m_5_MData = cp$wci_Vm_5_MData ;

  // action method wci_m_5_sResp
  assign CAN_FIRE_wci_m_5_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sResp = 1'd1 ;

  // action method wci_m_5_sData
  assign CAN_FIRE_wci_m_5_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sData = 1'd1 ;

  // action method wci_m_5_sThreadBusy
  assign CAN_FIRE_wci_m_5_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sThreadBusy = wci_m_5_SThreadBusy ;

  // action method wci_m_5_sFlag
  assign CAN_FIRE_wci_m_5_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sFlag = 1'd1 ;

  // value method wci_m_5_mFlag
  assign wci_m_5_MFlag = cp$wci_Vm_5_MFlag ;

  // value method wci_m_6_mCmd
  assign wci_m_6_MCmd = cp$wci_Vm_6_MCmd ;

  // value method wci_m_6_mAddrSpace
  assign wci_m_6_MAddrSpace = cp$wci_Vm_6_MAddrSpace ;

  // value method wci_m_6_mByteEn
  assign wci_m_6_MByteEn = cp$wci_Vm_6_MByteEn ;

  // value method wci_m_6_mAddr
  assign wci_m_6_MAddr = cp$wci_Vm_6_MAddr ;

  // value method wci_m_6_mData
  assign wci_m_6_MData = cp$wci_Vm_6_MData ;

  // action method wci_m_6_sResp
  assign CAN_FIRE_wci_m_6_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sResp = 1'd1 ;

  // action method wci_m_6_sData
  assign CAN_FIRE_wci_m_6_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sData = 1'd1 ;

  // action method wci_m_6_sThreadBusy
  assign CAN_FIRE_wci_m_6_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sThreadBusy = wci_m_6_SThreadBusy ;

  // action method wci_m_6_sFlag
  assign CAN_FIRE_wci_m_6_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sFlag = 1'd1 ;

  // value method wci_m_6_mFlag
  assign wci_m_6_MFlag = cp$wci_Vm_6_MFlag ;

  // value method wci_m_7_mCmd
  assign wci_m_7_MCmd = cp$wci_Vm_7_MCmd ;

  // value method wci_m_7_mAddrSpace
  assign wci_m_7_MAddrSpace = cp$wci_Vm_7_MAddrSpace ;

  // value method wci_m_7_mByteEn
  assign wci_m_7_MByteEn = cp$wci_Vm_7_MByteEn ;

  // value method wci_m_7_mAddr
  assign wci_m_7_MAddr = cp$wci_Vm_7_MAddr ;

  // value method wci_m_7_mData
  assign wci_m_7_MData = cp$wci_Vm_7_MData ;

  // action method wci_m_7_sResp
  assign CAN_FIRE_wci_m_7_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sResp = 1'd1 ;

  // action method wci_m_7_sData
  assign CAN_FIRE_wci_m_7_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sData = 1'd1 ;

  // action method wci_m_7_sThreadBusy
  assign CAN_FIRE_wci_m_7_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sThreadBusy = wci_m_7_SThreadBusy ;

  // action method wci_m_7_sFlag
  assign CAN_FIRE_wci_m_7_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sFlag = 1'd1 ;

  // value method wci_m_7_mFlag
  assign wci_m_7_MFlag = cp$wci_Vm_7_MFlag ;

  // value method wci_m_8_mCmd
  assign wci_m_8_MCmd = cp$wci_Vm_8_MCmd ;

  // value method wci_m_8_mAddrSpace
  assign wci_m_8_MAddrSpace = cp$wci_Vm_8_MAddrSpace ;

  // value method wci_m_8_mByteEn
  assign wci_m_8_MByteEn = cp$wci_Vm_8_MByteEn ;

  // value method wci_m_8_mAddr
  assign wci_m_8_MAddr = cp$wci_Vm_8_MAddr ;

  // value method wci_m_8_mData
  assign wci_m_8_MData = cp$wci_Vm_8_MData ;

  // action method wci_m_8_sResp
  assign CAN_FIRE_wci_m_8_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sResp = 1'd1 ;

  // action method wci_m_8_sData
  assign CAN_FIRE_wci_m_8_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sData = 1'd1 ;

  // action method wci_m_8_sThreadBusy
  assign CAN_FIRE_wci_m_8_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sThreadBusy = wci_m_8_SThreadBusy ;

  // action method wci_m_8_sFlag
  assign CAN_FIRE_wci_m_8_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sFlag = 1'd1 ;

  // value method wci_m_8_mFlag
  assign wci_m_8_MFlag = cp$wci_Vm_8_MFlag ;

  // value method wci_m_9_mCmd
  assign wci_m_9_MCmd = cp$wci_Vm_9_MCmd ;

  // value method wci_m_9_mAddrSpace
  assign wci_m_9_MAddrSpace = cp$wci_Vm_9_MAddrSpace ;

  // value method wci_m_9_mByteEn
  assign wci_m_9_MByteEn = cp$wci_Vm_9_MByteEn ;

  // value method wci_m_9_mAddr
  assign wci_m_9_MAddr = cp$wci_Vm_9_MAddr ;

  // value method wci_m_9_mData
  assign wci_m_9_MData = cp$wci_Vm_9_MData ;

  // action method wci_m_9_sResp
  assign CAN_FIRE_wci_m_9_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sResp = 1'd1 ;

  // action method wci_m_9_sData
  assign CAN_FIRE_wci_m_9_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sData = 1'd1 ;

  // action method wci_m_9_sThreadBusy
  assign CAN_FIRE_wci_m_9_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sThreadBusy = wci_m_9_SThreadBusy ;

  // action method wci_m_9_sFlag
  assign CAN_FIRE_wci_m_9_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sFlag = 1'd1 ;

  // value method wci_m_9_mFlag
  assign wci_m_9_MFlag = cp$wci_Vm_9_MFlag ;

  // value method wci_m_10_mCmd
  assign wci_m_10_MCmd = cp$wci_Vm_10_MCmd ;

  // value method wci_m_10_mAddrSpace
  assign wci_m_10_MAddrSpace = cp$wci_Vm_10_MAddrSpace ;

  // value method wci_m_10_mByteEn
  assign wci_m_10_MByteEn = cp$wci_Vm_10_MByteEn ;

  // value method wci_m_10_mAddr
  assign wci_m_10_MAddr = cp$wci_Vm_10_MAddr ;

  // value method wci_m_10_mData
  assign wci_m_10_MData = cp$wci_Vm_10_MData ;

  // action method wci_m_10_sResp
  assign CAN_FIRE_wci_m_10_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sResp = 1'd1 ;

  // action method wci_m_10_sData
  assign CAN_FIRE_wci_m_10_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sData = 1'd1 ;

  // action method wci_m_10_sThreadBusy
  assign CAN_FIRE_wci_m_10_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sThreadBusy = wci_m_10_SThreadBusy ;

  // action method wci_m_10_sFlag
  assign CAN_FIRE_wci_m_10_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sFlag = 1'd1 ;

  // value method wci_m_10_mFlag
  assign wci_m_10_MFlag = cp$wci_Vm_10_MFlag ;

  // value method wci_m_11_mCmd
  assign wci_m_11_MCmd = cp$wci_Vm_11_MCmd ;

  // value method wci_m_11_mAddrSpace
  assign wci_m_11_MAddrSpace = cp$wci_Vm_11_MAddrSpace ;

  // value method wci_m_11_mByteEn
  assign wci_m_11_MByteEn = cp$wci_Vm_11_MByteEn ;

  // value method wci_m_11_mAddr
  assign wci_m_11_MAddr = cp$wci_Vm_11_MAddr ;

  // value method wci_m_11_mData
  assign wci_m_11_MData = cp$wci_Vm_11_MData ;

  // action method wci_m_11_sResp
  assign CAN_FIRE_wci_m_11_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sResp = 1'd1 ;

  // action method wci_m_11_sData
  assign CAN_FIRE_wci_m_11_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sData = 1'd1 ;

  // action method wci_m_11_sThreadBusy
  assign CAN_FIRE_wci_m_11_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sThreadBusy = wci_m_11_SThreadBusy ;

  // action method wci_m_11_sFlag
  assign CAN_FIRE_wci_m_11_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sFlag = 1'd1 ;

  // value method wci_m_11_mFlag
  assign wci_m_11_MFlag = cp$wci_Vm_11_MFlag ;

  // value method wci_m_12_mCmd
  assign wci_m_12_MCmd = cp$wci_Vm_12_MCmd ;

  // value method wci_m_12_mAddrSpace
  assign wci_m_12_MAddrSpace = cp$wci_Vm_12_MAddrSpace ;

  // value method wci_m_12_mByteEn
  assign wci_m_12_MByteEn = cp$wci_Vm_12_MByteEn ;

  // value method wci_m_12_mAddr
  assign wci_m_12_MAddr = cp$wci_Vm_12_MAddr ;

  // value method wci_m_12_mData
  assign wci_m_12_MData = cp$wci_Vm_12_MData ;

  // action method wci_m_12_sResp
  assign CAN_FIRE_wci_m_12_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sResp = 1'd1 ;

  // action method wci_m_12_sData
  assign CAN_FIRE_wci_m_12_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sData = 1'd1 ;

  // action method wci_m_12_sThreadBusy
  assign CAN_FIRE_wci_m_12_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sThreadBusy = wci_m_12_SThreadBusy ;

  // action method wci_m_12_sFlag
  assign CAN_FIRE_wci_m_12_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sFlag = 1'd1 ;

  // value method wci_m_12_mFlag
  assign wci_m_12_MFlag = cp$wci_Vm_12_MFlag ;

  // action method wmiS0_mCmd
  assign CAN_FIRE_wmiS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS0_mCmd = 1'd1 ;

  // action method wmiS0_mReqLast
  assign CAN_FIRE_wmiS0_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqLast = wmiS0_MReqLast ;

  // action method wmiS0_mReqInfo
  assign CAN_FIRE_wmiS0_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqInfo = 1'd1 ;

  // action method wmiS0_mAddrSpace
  assign CAN_FIRE_wmiS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddrSpace = 1'd1 ;

  // action method wmiS0_mAddr
  assign CAN_FIRE_wmiS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddr = 1'd1 ;

  // action method wmiS0_mBurstLength
  assign CAN_FIRE_wmiS0_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS0_mBurstLength = 1'd1 ;

  // action method wmiS0_mDataValid
  assign CAN_FIRE_wmiS0_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataValid = wmiS0_MDataValid ;

  // action method wmiS0_mDataLast
  assign CAN_FIRE_wmiS0_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataLast = wmiS0_MDataLast ;

  // action method wmiS0_mData
  assign CAN_FIRE_wmiS0_mData = 1'd1 ;
  assign WILL_FIRE_wmiS0_mData = 1'd1 ;

  // action method wmiS0_mDataInfo
  assign CAN_FIRE_wmiS0_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataInfo = 1'd1 ;

  // action method wmiS0_mDataByteEn
  assign CAN_FIRE_wmiS0_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataByteEn = 1'd1 ;

  // value method wmiS0_sResp
  assign wmiS0_SResp = dp0_wmi_wmi_respF_q_0[33:32] ;

  // value method wmiS0_sData
  assign wmiS0_SData = dp0_wmi_wmi_respF_q_0[31:0] ;

  // value method wmiS0_sThreadBusy
  assign wmiS0_SThreadBusy =
	     !CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ||
	     dp0_wmi_wmi_sThreadBusy_dw$wget ;

  // value method wmiS0_sDataThreadBusy
  assign wmiS0_SDataThreadBusy =
	     !CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ||
	     dp0_wmi_wmi_sDataThreadBusy_dw$wget ;

  // value method wmiS0_sRespLast
  assign wmiS0_SRespLast = 1'd0 ;

  // value method wmiS0_sFlag
  assign wmiS0_SFlag = dp0_wmi_wmi_sFlagReg ;

  // action method wmiS0_mFlag
  assign CAN_FIRE_wmiS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS0_mFlag = 1'd1 ;

  // value method wmiS0_sReset_n
  assign wmiS0_SReset_n = !dp0_wmi_wmi_isReset$VAL && dp0_wmi_wmi_operateD ;

  // action method wmiS0_mReset_n
  assign CAN_FIRE_wmiS0_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReset_n = wmiS0_MReset_n ;

  // action method wmiS1_mCmd
  assign CAN_FIRE_wmiS1_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS1_mCmd = 1'd1 ;

  // action method wmiS1_mReqLast
  assign CAN_FIRE_wmiS1_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqLast = wmiS1_MReqLast ;

  // action method wmiS1_mReqInfo
  assign CAN_FIRE_wmiS1_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqInfo = 1'd1 ;

  // action method wmiS1_mAddrSpace
  assign CAN_FIRE_wmiS1_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddrSpace = 1'd1 ;

  // action method wmiS1_mAddr
  assign CAN_FIRE_wmiS1_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddr = 1'd1 ;

  // action method wmiS1_mBurstLength
  assign CAN_FIRE_wmiS1_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS1_mBurstLength = 1'd1 ;

  // action method wmiS1_mDataValid
  assign CAN_FIRE_wmiS1_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataValid = wmiS1_MDataValid ;

  // action method wmiS1_mDataLast
  assign CAN_FIRE_wmiS1_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataLast = wmiS1_MDataLast ;

  // action method wmiS1_mData
  assign CAN_FIRE_wmiS1_mData = 1'd1 ;
  assign WILL_FIRE_wmiS1_mData = 1'd1 ;

  // action method wmiS1_mDataInfo
  assign CAN_FIRE_wmiS1_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataInfo = 1'd1 ;

  // action method wmiS1_mDataByteEn
  assign CAN_FIRE_wmiS1_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataByteEn = 1'd1 ;

  // value method wmiS1_sResp
  assign wmiS1_SResp = dp1_wmi_wmi_respF_q_0[33:32] ;

  // value method wmiS1_sData
  assign wmiS1_SData = dp1_wmi_wmi_respF_q_0[31:0] ;

  // value method wmiS1_sThreadBusy
  assign wmiS1_SThreadBusy =
	     !CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ||
	     dp1_wmi_wmi_sThreadBusy_dw$wget ;

  // value method wmiS1_sDataThreadBusy
  assign wmiS1_SDataThreadBusy =
	     !CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ||
	     dp1_wmi_wmi_sDataThreadBusy_dw$wget ;

  // value method wmiS1_sRespLast
  assign wmiS1_SRespLast = 1'd0 ;

  // value method wmiS1_sFlag
  assign wmiS1_SFlag = dp1_wmi_wmi_sFlagReg ;

  // action method wmiS1_mFlag
  assign CAN_FIRE_wmiS1_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS1_mFlag = 1'd1 ;

  // value method wmiS1_sReset_n
  assign wmiS1_SReset_n = !dp1_wmi_wmi_isReset$VAL && dp1_wmi_wmi_operateD ;

  // action method wmiS1_mReset_n
  assign CAN_FIRE_wmiS1_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReset_n = wmiS1_MReset_n ;

  // value method cpNow
  assign cpNow = cp$cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = cp$gps_ppsSyncOut ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_sys0_clk(CLK_sys0_clk),
	    .RST_N_sys0_rst(RST_N_sys0_rst),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .led(cp$led),
	    .wci_Vm_0_MCmd(cp$wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp$wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp$wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp$wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp$wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp$wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(cp$wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp$wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp$wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp$wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp$wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp$wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp$wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp$wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(cp$wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp$wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp$wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp$wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp$wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(cp$wci_Vm_5_MFlag),
	    .wci_Vm_6_MCmd(cp$wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp$wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp$wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp$wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp$wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(cp$wci_Vm_6_MFlag),
	    .wci_Vm_7_MCmd(cp$wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp$wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp$wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp$wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp$wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp$wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(cp$wci_Vm_8_MCmd),
	    .wci_Vm_8_MAddrSpace(cp$wci_Vm_8_MAddrSpace),
	    .wci_Vm_8_MByteEn(cp$wci_Vm_8_MByteEn),
	    .wci_Vm_8_MAddr(cp$wci_Vm_8_MAddr),
	    .wci_Vm_8_MData(cp$wci_Vm_8_MData),
	    .wci_Vm_8_MFlag(cp$wci_Vm_8_MFlag),
	    .wci_Vm_9_MCmd(cp$wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp$wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp$wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp$wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp$wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp$wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp$wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp$wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp$wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp$wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp$wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp$wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp$wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp$wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp$wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp$wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp$wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp$wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(cp$wci_Vm_12_MCmd),
	    .wci_Vm_12_MAddrSpace(cp$wci_Vm_12_MAddrSpace),
	    .wci_Vm_12_MByteEn(cp$wci_Vm_12_MByteEn),
	    .wci_Vm_12_MAddr(cp$wci_Vm_12_MAddr),
	    .wci_Vm_12_MData(cp$wci_Vm_12_MData),
	    .wci_Vm_12_MFlag(cp$wci_Vm_12_MFlag),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(cp$wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp$wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp$wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp$wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp$wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(),
	    .cpNow(cp$cpNow),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(cp$gps_ppsSyncOut),
	    .RST_N_wci_Vm_0(cp$RST_N_wci_Vm_0),
	    .RST_N_wci_Vm_1(cp$RST_N_wci_Vm_1),
	    .RST_N_wci_Vm_2(cp$RST_N_wci_Vm_2),
	    .RST_N_wci_Vm_3(cp$RST_N_wci_Vm_3),
	    .RST_N_wci_Vm_4(cp$RST_N_wci_Vm_4),
	    .RST_N_wci_Vm_5(cp$RST_N_wci_Vm_5),
	    .RST_N_wci_Vm_6(cp$RST_N_wci_Vm_6),
	    .RST_N_wci_Vm_7(cp$RST_N_wci_Vm_7),
	    .RST_N_wci_Vm_8(cp$RST_N_wci_Vm_8),
	    .RST_N_wci_Vm_9(cp$RST_N_wci_Vm_9),
	    .RST_N_wci_Vm_10(cp$RST_N_wci_Vm_10),
	    .RST_N_wci_Vm_11(cp$RST_N_wci_Vm_11),
	    .RST_N_wci_Vm_12(cp$RST_N_wci_Vm_12),
	    .RST_N_wci_Vm_13(cp$RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14(cp$RST_N_wci_Vm_14));

  // submodule dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(dp0_bram_memory$ADDRA),
					      .ADDRB(dp0_bram_memory$ADDRB),
					      .DIA(dp0_bram_memory$DIA),
					      .DIB(dp0_bram_memory$DIB),
					      .WEA(dp0_bram_memory$WEA),
					      .WEB(dp0_bram_memory$WEB),
					      .ENA(dp0_bram_memory$ENA),
					      .ENB(dp0_bram_memory$ENB),
					      .DOA(dp0_bram_memory$DOA),
					      .DOB(dp0_bram_memory$DOB));

  // submodule dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_1(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_1$ADDRA),
						.ADDRB(dp0_bram_memory_1$ADDRB),
						.DIA(dp0_bram_memory_1$DIA),
						.DIB(dp0_bram_memory_1$DIB),
						.WEA(dp0_bram_memory_1$WEA),
						.WEB(dp0_bram_memory_1$WEB),
						.ENA(dp0_bram_memory_1$ENA),
						.ENB(dp0_bram_memory_1$ENB),
						.DOA(dp0_bram_memory_1$DOA),
						.DOB(dp0_bram_memory_1$DOB));

  // submodule dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_2(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_2$ADDRA),
						.ADDRB(dp0_bram_memory_2$ADDRB),
						.DIA(dp0_bram_memory_2$DIA),
						.DIB(dp0_bram_memory_2$DIB),
						.WEA(dp0_bram_memory_2$WEA),
						.WEB(dp0_bram_memory_2$WEB),
						.ENA(dp0_bram_memory_2$ENA),
						.ENB(dp0_bram_memory_2$ENB),
						.DOA(dp0_bram_memory_2$DOA),
						.DOB(dp0_bram_memory_2$DOB));

  // submodule dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_3(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_3$ADDRA),
						.ADDRB(dp0_bram_memory_3$ADDRB),
						.DIA(dp0_bram_memory_3$DIA),
						.DIB(dp0_bram_memory_3$DIB),
						.WEA(dp0_bram_memory_3$WEA),
						.WEB(dp0_bram_memory_3$WEB),
						.ENA(dp0_bram_memory_3$ENA),
						.ENB(dp0_bram_memory_3$ENB),
						.DOA(dp0_bram_memory_3$DOA),
						.DOB(dp0_bram_memory_3$DOB));

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(CLK),
								   .D_IN(dp0_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(CLK),
								   .D_IN(dp0_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp0_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_inF(.CLK(CLK),
					  .RST_N(cp$RST_N_wci_Vm_13),
					  .D_IN(dp0_tlp_inF$D_IN),
					  .ENQ(dp0_tlp_inF$ENQ),
					  .DEQ(dp0_tlp_inF$DEQ),
					  .CLR(dp0_tlp_inF$CLR),
					  .D_OUT(dp0_tlp_inF$D_OUT),
					  .EMPTY_N(dp0_tlp_inF$EMPTY_N),
					  .FULL_N(dp0_tlp_inF$FULL_N));

  // submodule dp0_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_mReqF(.CLK(CLK),
					    .RST_N(cp$RST_N_wci_Vm_13),
					    .D_IN(dp0_tlp_mReqF$D_IN),
					    .ENQ(dp0_tlp_mReqF$ENQ),
					    .DEQ(dp0_tlp_mReqF$DEQ),
					    .CLR(dp0_tlp_mReqF$CLR),
					    .D_OUT(dp0_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp0_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp0_tlp_mReqF$FULL_N));

  // submodule dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp0_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_13),
					  .CLK(CLK),
					  .D_IN(dp0_tlp_mRespF$D_IN),
					  .ENQ(dp0_tlp_mRespF$ENQ),
					  .DEQ(dp0_tlp_mRespF$DEQ),
					  .CLR(dp0_tlp_mRespF$CLR),
					  .D_OUT(dp0_tlp_mRespF$D_OUT),
					  .FULL_N(dp0_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp0_tlp_mRespF$EMPTY_N));

  // submodule dp0_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_outF(.CLK(CLK),
					   .RST_N(cp$RST_N_wci_Vm_13),
					   .D_IN(dp0_tlp_outF$D_IN),
					   .ENQ(dp0_tlp_outF$ENQ),
					   .DEQ(dp0_tlp_outF$DEQ),
					   .CLR(dp0_tlp_outF$CLR),
					   .D_OUT(dp0_tlp_outF$D_OUT),
					   .EMPTY_N(dp0_tlp_outF$EMPTY_N),
					   .FULL_N(dp0_tlp_outF$FULL_N));

  // submodule dp0_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_readReq(.CLK(CLK),
					      .RST_N(cp$RST_N_wci_Vm_13),
					      .D_IN(dp0_tlp_readReq$D_IN),
					      .ENQ(dp0_tlp_readReq$ENQ),
					      .DEQ(dp0_tlp_readReq$DEQ),
					      .CLR(dp0_tlp_readReq$CLR),
					      .D_OUT(dp0_tlp_readReq$D_OUT),
					      .EMPTY_N(dp0_tlp_readReq$EMPTY_N),
					      .FULL_N(dp0_tlp_readReq$FULL_N));

  // submodule dp0_wci_isReset
  ResetToBool dp0_wci_isReset(.RST(cp$RST_N_wci_Vm_13),
			      .VAL(dp0_wci_isReset$VAL));

  // submodule dp0_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wci_reqF(.RST_N(cp$RST_N_wci_Vm_13),
					    .CLK(CLK),
					    .D_IN(dp0_wci_reqF$D_IN),
					    .ENQ(dp0_wci_reqF$ENQ),
					    .DEQ(dp0_wci_reqF$DEQ),
					    .CLR(dp0_wci_reqF$CLR),
					    .D_OUT(dp0_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp0_wci_reqF$EMPTY_N));

  // submodule dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_13),
					       .CLK(CLK),
					       .D_IN(dp0_wmi_wmi_dhF$D_IN),
					       .ENQ(dp0_wmi_wmi_dhF$ENQ),
					       .DEQ(dp0_wmi_wmi_dhF$DEQ),
					       .CLR(dp0_wmi_wmi_dhF$CLR),
					       .D_OUT(dp0_wmi_wmi_dhF$D_OUT),
					       .FULL_N(dp0_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule dp0_wmi_wmi_isReset
  ResetToBool dp0_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_13),
				  .VAL(dp0_wmi_wmi_isReset$VAL));

  // submodule dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_13),
						  .CLK(CLK),
						  .D_IN(dp0_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp0_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp0_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp0_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp0_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp0_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_13),
						.CLK(CLK),
						.D_IN(dp0_wmi_wmi_reqF$D_IN),
						.ENQ(dp0_wmi_wmi_reqF$ENQ),
						.DEQ(dp0_wmi_wmi_reqF$DEQ),
						.CLR(dp0_wmi_wmi_reqF$CLR),
						.D_OUT(dp0_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp0_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule dp0_wti_isReset
  ResetToBool dp0_wti_isReset(.RST(cp$RST_N_wci_Vm_13),
			      .VAL(dp0_wti_isReset$VAL));

  // submodule dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(dp1_bram_memory$ADDRA),
					      .ADDRB(dp1_bram_memory$ADDRB),
					      .DIA(dp1_bram_memory$DIA),
					      .DIB(dp1_bram_memory$DIB),
					      .WEA(dp1_bram_memory$WEA),
					      .WEB(dp1_bram_memory$WEB),
					      .ENA(dp1_bram_memory$ENA),
					      .ENB(dp1_bram_memory$ENB),
					      .DOA(dp1_bram_memory$DOA),
					      .DOB(dp1_bram_memory$DOB));

  // submodule dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_1(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_1$ADDRA),
						.ADDRB(dp1_bram_memory_1$ADDRB),
						.DIA(dp1_bram_memory_1$DIA),
						.DIB(dp1_bram_memory_1$DIB),
						.WEA(dp1_bram_memory_1$WEA),
						.WEB(dp1_bram_memory_1$WEB),
						.ENA(dp1_bram_memory_1$ENA),
						.ENB(dp1_bram_memory_1$ENB),
						.DOA(dp1_bram_memory_1$DOA),
						.DOB(dp1_bram_memory_1$DOB));

  // submodule dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_2(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_2$ADDRA),
						.ADDRB(dp1_bram_memory_2$ADDRB),
						.DIA(dp1_bram_memory_2$DIA),
						.DIB(dp1_bram_memory_2$DIB),
						.WEA(dp1_bram_memory_2$WEA),
						.WEB(dp1_bram_memory_2$WEB),
						.ENA(dp1_bram_memory_2$ENA),
						.ENB(dp1_bram_memory_2$ENB),
						.DOA(dp1_bram_memory_2$DOA),
						.DOB(dp1_bram_memory_2$DOB));

  // submodule dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_3(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_3$ADDRA),
						.ADDRB(dp1_bram_memory_3$ADDRB),
						.DIA(dp1_bram_memory_3$DIA),
						.DIB(dp1_bram_memory_3$DIB),
						.WEA(dp1_bram_memory_3$WEA),
						.WEB(dp1_bram_memory_3$WEB),
						.ENA(dp1_bram_memory_3$ENA),
						.ENB(dp1_bram_memory_3$ENB),
						.DOA(dp1_bram_memory_3$DOA),
						.DOB(dp1_bram_memory_3$DOB));

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(CLK),
								   .D_IN(dp1_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(CLK),
								   .D_IN(dp1_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp1_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_inF(.CLK(CLK),
					  .RST_N(cp$RST_N_wci_Vm_14),
					  .D_IN(dp1_tlp_inF$D_IN),
					  .ENQ(dp1_tlp_inF$ENQ),
					  .DEQ(dp1_tlp_inF$DEQ),
					  .CLR(dp1_tlp_inF$CLR),
					  .D_OUT(dp1_tlp_inF$D_OUT),
					  .EMPTY_N(dp1_tlp_inF$EMPTY_N),
					  .FULL_N(dp1_tlp_inF$FULL_N));

  // submodule dp1_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_mReqF(.CLK(CLK),
					    .RST_N(cp$RST_N_wci_Vm_14),
					    .D_IN(dp1_tlp_mReqF$D_IN),
					    .ENQ(dp1_tlp_mReqF$ENQ),
					    .DEQ(dp1_tlp_mReqF$DEQ),
					    .CLR(dp1_tlp_mReqF$CLR),
					    .D_OUT(dp1_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp1_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp1_tlp_mReqF$FULL_N));

  // submodule dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp1_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_14),
					  .CLK(CLK),
					  .D_IN(dp1_tlp_mRespF$D_IN),
					  .ENQ(dp1_tlp_mRespF$ENQ),
					  .DEQ(dp1_tlp_mRespF$DEQ),
					  .CLR(dp1_tlp_mRespF$CLR),
					  .D_OUT(dp1_tlp_mRespF$D_OUT),
					  .FULL_N(dp1_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp1_tlp_mRespF$EMPTY_N));

  // submodule dp1_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_outF(.CLK(CLK),
					   .RST_N(cp$RST_N_wci_Vm_14),
					   .D_IN(dp1_tlp_outF$D_IN),
					   .ENQ(dp1_tlp_outF$ENQ),
					   .DEQ(dp1_tlp_outF$DEQ),
					   .CLR(dp1_tlp_outF$CLR),
					   .D_OUT(dp1_tlp_outF$D_OUT),
					   .EMPTY_N(dp1_tlp_outF$EMPTY_N),
					   .FULL_N(dp1_tlp_outF$FULL_N));

  // submodule dp1_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_readReq(.CLK(CLK),
					      .RST_N(cp$RST_N_wci_Vm_14),
					      .D_IN(dp1_tlp_readReq$D_IN),
					      .ENQ(dp1_tlp_readReq$ENQ),
					      .DEQ(dp1_tlp_readReq$DEQ),
					      .CLR(dp1_tlp_readReq$CLR),
					      .D_OUT(dp1_tlp_readReq$D_OUT),
					      .EMPTY_N(dp1_tlp_readReq$EMPTY_N),
					      .FULL_N(dp1_tlp_readReq$FULL_N));

  // submodule dp1_wci_isReset
  ResetToBool dp1_wci_isReset(.RST(cp$RST_N_wci_Vm_14),
			      .VAL(dp1_wci_isReset$VAL));

  // submodule dp1_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wci_reqF(.RST_N(cp$RST_N_wci_Vm_14),
					    .CLK(CLK),
					    .D_IN(dp1_wci_reqF$D_IN),
					    .ENQ(dp1_wci_reqF$ENQ),
					    .DEQ(dp1_wci_reqF$DEQ),
					    .CLR(dp1_wci_reqF$CLR),
					    .D_OUT(dp1_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp1_wci_reqF$EMPTY_N));

  // submodule dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_14),
					       .CLK(CLK),
					       .D_IN(dp1_wmi_wmi_dhF$D_IN),
					       .ENQ(dp1_wmi_wmi_dhF$ENQ),
					       .DEQ(dp1_wmi_wmi_dhF$DEQ),
					       .CLR(dp1_wmi_wmi_dhF$CLR),
					       .D_OUT(dp1_wmi_wmi_dhF$D_OUT),
					       .FULL_N(dp1_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule dp1_wmi_wmi_isReset
  ResetToBool dp1_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_14),
				  .VAL(dp1_wmi_wmi_isReset$VAL));

  // submodule dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_14),
						  .CLK(CLK),
						  .D_IN(dp1_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp1_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp1_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp1_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp1_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp1_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_14),
						.CLK(CLK),
						.D_IN(dp1_wmi_wmi_reqF$D_IN),
						.ENQ(dp1_wmi_wmi_reqF$ENQ),
						.DEQ(dp1_wmi_wmi_reqF$DEQ),
						.CLR(dp1_wmi_wmi_reqF$CLR),
						.D_OUT(dp1_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp1_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule dp1_wti_isReset
  ResetToBool dp1_wti_isReset(.RST(cp$RST_N_wci_Vm_14),
			      .VAL(dp1_wti_isReset$VAL));

  // submodule itc0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc0_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc0_now$sD_IN),
							.sEN(itc0_now$sEN),
							.dD_OUT(itc0_now$dD_OUT),
							.sRDY(itc0_now$sRDY));

  // submodule itc1_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc1_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc1_now$sD_IN),
							.sEN(itc1_now$sEN),
							.dD_OUT(itc1_now$dD_OUT),
							.sRDY(itc1_now$sRDY));

  // submodule sm0
  mkTLPSM sm0(.pfk(14'd1360),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm0$c0_response_put),
	      .c1_response_put(sm0$c1_response_put),
	      .s_request_put(sm0$s_request_put),
	      .EN_s_request_put(sm0$EN_s_request_put),
	      .EN_s_response_get(sm0$EN_s_response_get),
	      .EN_c0_request_get(sm0$EN_c0_request_get),
	      .EN_c0_response_put(sm0$EN_c0_response_put),
	      .EN_c1_request_get(sm0$EN_c1_request_get),
	      .EN_c1_response_put(sm0$EN_c1_response_put),
	      .RDY_s_request_put(sm0$RDY_s_request_put),
	      .s_response_get(sm0$s_response_get),
	      .RDY_s_response_get(sm0$RDY_s_response_get),
	      .c0_request_get(sm0$c0_request_get),
	      .RDY_c0_request_get(sm0$RDY_c0_request_get),
	      .RDY_c0_response_put(sm0$RDY_c0_response_put),
	      .c1_request_get(sm0$c1_request_get),
	      .RDY_c1_request_get(sm0$RDY_c1_request_get),
	      .RDY_c1_response_put(sm0$RDY_c1_response_put));

  // submodule sm1
  mkTLPSM sm1(.pfk(14'd9488),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm1$c0_response_put),
	      .c1_response_put(sm1$c1_response_put),
	      .s_request_put(sm1$s_request_put),
	      .EN_s_request_put(sm1$EN_s_request_put),
	      .EN_s_response_get(sm1$EN_s_response_get),
	      .EN_c0_request_get(sm1$EN_c0_request_get),
	      .EN_c0_response_put(sm1$EN_c0_response_put),
	      .EN_c1_request_get(sm1$EN_c1_request_get),
	      .EN_c1_response_put(sm1$EN_c1_response_put),
	      .RDY_s_request_put(sm1$RDY_s_request_put),
	      .s_response_get(sm1$s_response_get),
	      .RDY_s_response_get(sm1$RDY_s_response_get),
	      .c0_request_get(sm1$c0_request_get),
	      .RDY_c0_request_get(sm1$RDY_c0_request_get),
	      .RDY_c0_response_put(sm1$RDY_c0_response_put),
	      .c1_request_get(sm1$c1_request_get),
	      .RDY_c1_request_get(sm1$RDY_c1_request_get),
	      .RDY_c1_response_put(sm1$RDY_c1_response_put));

  // submodule sm2
  mkTLPSM sm2(.pfk(14'd9497),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm2$c0_response_put),
	      .c1_response_put(sm2$c1_response_put),
	      .s_request_put(sm2$s_request_put),
	      .EN_s_request_put(sm2$EN_s_request_put),
	      .EN_s_response_get(sm2$EN_s_response_get),
	      .EN_c0_request_get(sm2$EN_c0_request_get),
	      .EN_c0_response_put(sm2$EN_c0_response_put),
	      .EN_c1_request_get(sm2$EN_c1_request_get),
	      .EN_c1_response_put(sm2$EN_c1_response_put),
	      .RDY_s_request_put(sm2$RDY_s_request_put),
	      .s_response_get(sm2$s_response_get),
	      .RDY_s_response_get(sm2$RDY_s_response_get),
	      .c0_request_get(sm2$c0_request_get),
	      .RDY_c0_request_get(sm2$RDY_c0_request_get),
	      .RDY_c0_response_put(sm2$RDY_c0_response_put),
	      .c1_request_get(),
	      .RDY_c1_request_get(sm2$RDY_c1_request_get),
	      .RDY_c1_response_put());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;

  // rule RL_dp0_assignControl
  assign CAN_FIRE_RL_dp0_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp0_assignControl = 1'd1 ;

  // rule RL_dp0_wmi_throttleWmi
  assign CAN_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp0_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     dp0_wmi_wmi_reqF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;

  // rule RL_dp0_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     dp0_wmi_wmi_dhF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;

  // rule RL_dp1_assignControl
  assign CAN_FIRE_RL_dp1_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp1_assignControl = 1'd1 ;

  // rule RL_dp1_wmi_throttleWmi
  assign CAN_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp1_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     dp1_wmi_wmi_reqF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;

  // rule RL_dp1_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     dp1_wmi_wmi_dhF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect =
	     dp0_wci_reqF_countReg > 2'd1 || dp0_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect = CAN_FIRE_RL_stbConnect ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_mAddrSConnect_1
  assign CAN_FIRE_RL_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_1 = 1'd1 ;

  // rule RL_mBEConnect_1
  assign CAN_FIRE_RL_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mAddrConnect_1
  assign CAN_FIRE_RL_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 =
	     dp1_wci_reqF_countReg > 2'd1 || dp1_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_1 = CAN_FIRE_RL_stbConnect_1 ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = dp0_wti_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_2 = dp0_wti_isReset$VAL ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = dp1_wti_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_3 = dp1_wti_isReset$VAL ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     sm1$RDY_s_request_put && sm0$RDY_c1_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     sm1$RDY_s_response_get && sm0$RDY_c1_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     dp0_tlp_inF$FULL_N && sm1$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     sm2$RDY_s_request_put && sm1$RDY_c1_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     dp0_tlp_outF$EMPTY_N && sm1$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     sm2$RDY_s_response_get && sm1$RDY_c1_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     dp1_tlp_inF$FULL_N && sm2$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     dp1_tlp_outF$EMPTY_N && sm2$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_dp0_rStart
  assign CAN_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;

  // rule RL_chomp_rogue
  assign CAN_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;

  // rule RL_dp0_rDone
  assign CAN_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;

  // rule RL_dp0_rRdy
  assign CAN_FIRE_RL_dp0_rRdy =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy = CAN_FIRE_RL_dp0_rRdy ;

  // rule RL_dp0_rStart_1
  assign CAN_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;
  assign WILL_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;

  // rule RL_dp0_rDone_1
  assign CAN_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;
  assign WILL_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;

  // rule RL_dp0_rRdy_1
  assign CAN_FIRE_RL_dp0_rRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy_1 = CAN_FIRE_RL_dp0_rRdy_1 ;

  // rule RL_dp0_rFRdy_1
  assign CAN_FIRE_RL_dp0_rFRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rFRdy_1 = CAN_FIRE_RL_dp0_rFRdy_1 ;

  // rule RL_dp0_rCredit_1
  assign CAN_FIRE_RL_dp0_rCredit_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rCredit_1 = CAN_FIRE_RL_dp0_rCredit_1 ;

  // rule RL_dp0_operating_actions
  assign CAN_FIRE_RL_dp0_operating_actions = CAN_FIRE_RL_dp0_bml_lbar ;
  assign WILL_FIRE_RL_dp0_operating_actions = CAN_FIRE_RL_dp0_bml_lbar ;

  // rule RL_dp0_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;

  // rule RL_reqConnect
  assign CAN_FIRE_RL_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_s1[0] ||
	      dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     dp0_bram_serverAdapterA_s1[1] &&
	     !dp0_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_s1[0] ||
	      dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     dp0_bram_serverAdapterB_s1[1] &&
	     !dp0_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_1_s1[0] ||
	      dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     dp0_bram_serverAdapterA_1_s1[1] &&
	     !dp0_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_1_s1[0] ||
	      dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     dp0_bram_serverAdapterB_1_s1[1] &&
	     !dp0_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_2_s1[0] ||
	      dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     dp0_bram_serverAdapterA_2_s1[1] &&
	     !dp0_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_2_s1[0] ||
	      dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     dp0_bram_serverAdapterB_2_s1[1] &&
	     !dp0_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_3_s1[0] ||
	      dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     dp0_bram_serverAdapterA_3_s1[1] &&
	     !dp0_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_3_s1[0] ||
	      dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     dp0_bram_serverAdapterB_3_s1[1] &&
	     !dp0_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp0_wci_request_decode
  assign CAN_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;

  // rule RL_dp0_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp0_wci_respF_deq
  assign CAN_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;

  // rule RL_dp0_wci_cfrd
  assign CAN_FIRE_RL_dp0_wci_cfrd =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfrd =
	     CAN_FIRE_RL_dp0_wci_cfrd && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_start
  assign CAN_FIRE_RL_dp0_wci_ctl_op_start =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_start =
	     CAN_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta =
	     dp0_tlp_mReqF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_1_ETC___d654 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_dp0_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg =
	     dp0_tlp_mReqF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp0_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead =
	     dp0_tlp_mRespF$EMPTY_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ;

  // rule RL_dp0_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_dp0_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody ;

  // rule RL_dp0_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_xmtMetaInFlight &&
	     dp0_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_dp0_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_dp0_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell = dp0_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell ;

  // rule RL_dp0_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_tlpMetaSent &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_dp0_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[1:0] == 2'd2 &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_creditReady ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // rule RL_dp0_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     dp0_tlp_inF$EMPTY_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;

  // rule RL_dp0_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d910 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_rBMeta_1
  assign CAN_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_pullTagMatch &&
	     !dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_tlpRcv
  assign CAN_FIRE_RL_dp0_tlp_tlpRcv =
	     dp0_tlp_inF$EMPTY_N &&
	     (dp0_tlp_inF$D_OUT[152] ?
		dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
		dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp0_tlp_mReqF$FULL_N :
		dp0_tlp_inIgnorePkt || dp0_tlp_mReqF$FULL_N) &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp0_tlp_tlpRcv =
	     CAN_FIRE_RL_dp0_tlp_tlpRcv &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_dp0_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody =
	     dp0_tlp_mRespF$EMPTY_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp0_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d877 &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_rFMeta_1
  assign CAN_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d1040 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // rule RL_dp0_rFFlow_1
  assign CAN_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_rBMesg_1
  assign CAN_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;

  // rule RL_dp0_rFMesg_1
  assign CAN_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;

  // rule RL_dp0_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Header =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_dp0_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Body =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_dp0_tlp_writeReq
  assign CAN_FIRE_RL_dp0_tlp_writeReq =
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_mReqF_RDY_deq__107_AND_IF_dp0_tlp_mReq_ETC___d1123 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_writeReq = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // rule RL_dp0_tlp_writeData
  assign CAN_FIRE_RL_dp0_tlp_writeData =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157 ||
	      dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135) &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1190 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_writeData = CAN_FIRE_RL_dp0_tlp_writeData ;

  // rule RL_dp0_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp0_tlp_read_FirstResp =
	     dp0_tlp_readReq$EMPTY_N && dp0_tlp_mRespF$FULL_N &&
	     IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1397 &&
	     (dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp0_tlp_readReq$EMPTY_N) &&
	     !dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp0_tlp_read_FirstResp ;

  // rule RL_dp0_tlp_read_NextResp
  assign CAN_FIRE_RL_dp0_tlp_read_NextResp =
	     dp0_tlp_readReq$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore_notEmpty_O_ETC___d1470 &&
	     dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextResp =
	     CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp0_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp0_tlp_read_FirstReq =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_readReq$FULL_N &&
	     NOT_dp0_tlp_mReqF_first__108_BITS_28_TO_19_285_ETC___d1299 &&
	     !dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp0_tlp_read_FirstReq ;

  // rule RL_dp0_tlp_read_NextReq
  assign CAN_FIRE_RL_dp0_tlp_read_NextReq =
	     dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135 &&
	     dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552 &&
	     dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136 &&
	     dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137 &&
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextReq =
	     CAN_FIRE_RL_dp0_tlp_read_NextReq ;

  // rule RL_dp0_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     dp0_bram_serverAdapterA_cnt_1$whas ||
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_dp0_wmi_reqMetadata =
	     dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 &&
	     dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 &&
	     dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 &&
	     dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     !dp0_wmi_metaBusy &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doDwell
  assign CAN_FIRE_RL_dp0_wmi_doDwell = dp0_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doDwell = CAN_FIRE_RL_dp0_wmi_doDwell ;

  // rule RL_dp0_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp0_wmi_doWriteFinalize =
	     dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 &&
	     dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 &&
	     dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 &&
	     dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 &&
	     dp0_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_rBMeta
  assign CAN_FIRE_RL_dp0_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta = 1'd1 ;

  // rule RL_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_dp0_wmi_respMetadata =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_dpControl_whas__651_AND_dp0_bram_serve_ETC___d1697 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_wmi_doReadReq
  assign CAN_FIRE_RL_dp0_wmi_doReadReq =
	     IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 &&
	     dp0_wmi_rdActive ;
  assign WILL_FIRE_RL_dp0_wmi_doReadReq =
	     CAN_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doReadResp
  assign CAN_FIRE_RL_dp0_wmi_doReadResp =
	     dp0_wmi_wmi_respF_c_r != 2'd2 && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     IF_dp0_wmi_p4B_806_EQ_0_807_THEN_dp0_bram_serv_ETC___d1820 &&
	     dp0_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doReadResp = CAN_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp0_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp0_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr =
	     ((dp0_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_dp0_wmi_doReadResp) &&
	     CAN_FIRE_RL_dp0_wmi_doReadResp &&
	     !(dp0_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr ;

  // rule RL_dp0_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // rule RL_dp0_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_both =
	     ((dp0_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_dp0_wmi_doReadResp) &&
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_both =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_both ;

  // rule RL_dp0_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_cntLclStart
  assign CAN_FIRE_RL_dp0_bml_cntLclStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp0_bml_cntLclStart = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // rule RL_dp0_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd0 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI ;

  // rule RL_dp0_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd2 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE ;

  // rule RL_dp0_bml_cntLclDone
  assign CAN_FIRE_RL_dp0_bml_cntLclDone =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp0_bml_cntLclDone = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_cntRemStart
  assign CAN_FIRE_RL_dp0_bml_cntRemStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_cntRemStart = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // rule RL_dp0_bml_cntRemDone
  assign CAN_FIRE_RL_dp0_bml_cntRemDone = CAN_FIRE_RL_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_dp0_bml_cntRemDone = CAN_FIRE_RL_dp0_bml_remAdvance ;

  // rule RL_dp0_bml_lbar
  assign CAN_FIRE_RL_dp0_bml_lbar = dp0_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp0_bml_lbar = CAN_FIRE_RL_dp0_bml_lbar ;

  // rule RL_dp0_bml_lbcf
  assign CAN_FIRE_RL_dp0_bml_lbcf = CAN_FIRE_RL_dp0_bml_lbar ;
  assign WILL_FIRE_RL_dp0_bml_lbcf = CAN_FIRE_RL_dp0_bml_lbar ;

  // rule RL_dp0_bml_fba
  assign CAN_FIRE_RL_dp0_bml_fba =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fba = CAN_FIRE_RL_dp0_bml_fba ;

  // rule RL_dp0_bml_lcredit
  assign CAN_FIRE_RL_dp0_bml_lcredit =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_bml_lcredit = CAN_FIRE_RL_dp0_bml_lcredit ;

  // rule RL_dp0_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_remAdvance
  assign CAN_FIRE_RL_dp0_bml_remAdvance =
	     dp0_wci_cState == 3'd2 && dp0_bml_remDone ;
  assign WILL_FIRE_RL_dp0_bml_remAdvance =
	     CAN_FIRE_RL_dp0_bml_remAdvance &&
	     !WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // rule RL_dp0_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp0_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_crdAdvance
  assign CAN_FIRE_RL_dp0_bml_crdAdvance =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 &&
	     dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_crdAdvance = CAN_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc = CAN_FIRE_RL_dp0_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_wci_reqF_enq
  assign CAN_FIRE_RL_dp0_wci_reqF_enq = dp0_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_dp0_wci_reqF_enq = CAN_FIRE_RL_dp0_wci_reqF_enq ;

  // rule RL_dp0_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq ;

  // rule RL_dp0_wmi_getRequest
  assign CAN_FIRE_RL_dp0_wmi_getRequest =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_blockReq &&
	     dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp0_wmi_wrActive_724_725_OR_NOT_dp0_wmi_rd_ETC___d1734 &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_getRequest =
	     CAN_FIRE_RL_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp0_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_dp0_wmi_getRequest ;

  // rule RL_dp0_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset ;

  // rule RL_dp0_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;

  // rule RL_dp0_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp0_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq = CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq ;

  // rule RL_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_dp0_wmi_doWriteReq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 &&
	     dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteReq =
	     CAN_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_rBMesg
  assign CAN_FIRE_RL_dp0_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     dp0_bram_serverAdapterB_cnt_1$whas ||
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset ;

  // rule RL_dp0_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclAdvance
  assign CAN_FIRE_RL_dp0_bml_lclAdvance = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp0_bml_lclAdvance = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_initAccumulators
  assign CAN_FIRE_RL_dp0_bml_initAccumulators =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd1 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp0_bml_initAccumulators =
	     CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // rule RL_dp0_wci_cfwr
  assign CAN_FIRE_RL_dp0_wci_cfwr =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfwr =
	     CAN_FIRE_RL_dp0_wci_cfwr && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp0_wci_ctl_op_complete =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_ctlOpActive &&
	     dp0_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     (dp0_wci_wciReq$wget[59:57] != 3'd0) != dp0_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // rule RL_dp0_wci_respF_incCtr
  assign CAN_FIRE_RL_dp0_wci_respF_incCtr =
	     ((dp0_wci_respF_c_r == 2'd0) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd1 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_enqueueing$whas &&
	     !(dp0_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp0_wci_respF_incCtr =
	     CAN_FIRE_RL_dp0_wci_respF_incCtr ;

  // rule RL_dp0_wci_respF_decCtr
  assign CAN_FIRE_RL_dp0_wci_respF_decCtr =
	     dp0_wci_respF_c_r != 2'd0 && !dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_decCtr =
	     CAN_FIRE_RL_dp0_wci_respF_decCtr ;

  // rule RL_dp0_wci_respF_both
  assign CAN_FIRE_RL_dp0_wci_respF_both =
	     ((dp0_wci_respF_c_r == 2'd1) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd2 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_c_r != 2'd0 &&
	     dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_both = CAN_FIRE_RL_dp0_wci_respF_both ;

  // rule RL_dp0_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_dp1_rStart
  assign CAN_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;

  // rule RL_dp1_rDone
  assign CAN_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;

  // rule RL_dp1_rRdy
  assign CAN_FIRE_RL_dp1_rRdy =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy = CAN_FIRE_RL_dp1_rRdy ;

  // rule RL_dp1_rStart_1
  assign CAN_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;
  assign WILL_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;

  // rule RL_dp1_rDone_1
  assign CAN_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;
  assign WILL_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;

  // rule RL_dp1_rRdy_1
  assign CAN_FIRE_RL_dp1_rRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy_1 = CAN_FIRE_RL_dp1_rRdy_1 ;

  // rule RL_dp1_rFRdy_1
  assign CAN_FIRE_RL_dp1_rFRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rFRdy_1 = CAN_FIRE_RL_dp1_rFRdy_1 ;

  // rule RL_dp1_rCredit_1
  assign CAN_FIRE_RL_dp1_rCredit_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rCredit_1 = CAN_FIRE_RL_dp1_rCredit_1 ;

  // rule RL_dp1_operating_actions
  assign CAN_FIRE_RL_dp1_operating_actions = CAN_FIRE_RL_dp1_bml_lbar ;
  assign WILL_FIRE_RL_dp1_operating_actions = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;

  // rule RL_reqConnect_1
  assign CAN_FIRE_RL_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_1 = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_s1[0] ||
	      dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     dp1_bram_serverAdapterA_s1[1] &&
	     !dp1_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_s1[0] ||
	      dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     dp1_bram_serverAdapterB_s1[1] &&
	     !dp1_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_1_s1[0] ||
	      dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     dp1_bram_serverAdapterA_1_s1[1] &&
	     !dp1_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_1_s1[0] ||
	      dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     dp1_bram_serverAdapterB_1_s1[1] &&
	     !dp1_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_2_s1[0] ||
	      dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     dp1_bram_serverAdapterA_2_s1[1] &&
	     !dp1_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_2_s1[0] ||
	      dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     dp1_bram_serverAdapterB_2_s1[1] &&
	     !dp1_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_3_s1[0] ||
	      dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     dp1_bram_serverAdapterA_3_s1[1] &&
	     !dp1_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_3_s1[0] ||
	      dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     dp1_bram_serverAdapterB_3_s1[1] &&
	     !dp1_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp1_wci_request_decode
  assign CAN_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;

  // rule RL_dp1_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp1_wci_respF_deq
  assign CAN_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;

  // rule RL_dp1_wci_cfrd
  assign CAN_FIRE_RL_dp1_wci_cfrd =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfrd =
	     CAN_FIRE_RL_dp1_wci_cfrd && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_start
  assign CAN_FIRE_RL_dp1_wci_ctl_op_start =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_start =
	     CAN_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d2845 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     dp1_tlp_mReqF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;

  // rule RL_dp1_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody ;

  // rule RL_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_xmtMetaInFlight &&
	     dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_tlpMetaSent &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell = dp1_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell ;

  // rule RL_dp1_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[1:0] == 2'd2 &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_creditReady ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // rule RL_dp1_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag =
	     dp1_tlp_inF$EMPTY_N && dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag ;

  // rule RL_dp1_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3096 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp1_rBMeta_1
  assign CAN_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_pullTagMatch &&
	     !dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp1_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_reqMesgInFlight &&
	     dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp1_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent =
	     dp1_tlp_outF$FULL_N &&
	     dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3226 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // rule RL_dp1_rFFlow_1
  assign CAN_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_reqMetaBodyInFlight &&
	     !dp1_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_dp1_tlp_tlpRcv =
	     dp1_tlp_inF$EMPTY_N &&
	     (dp1_tlp_inF$D_OUT[152] ?
		dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
		dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp1_tlp_mReqF$FULL_N :
		dp1_tlp_inIgnorePkt || dp1_tlp_mReqF$FULL_N) &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp1_tlp_tlpRcv =
	     CAN_FIRE_RL_dp1_tlp_tlpRcv &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_dp1_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_rBMesg_1
  assign CAN_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;

  // rule RL_dp1_rFMesg_1
  assign CAN_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta =
	     dp1_tlp_outF$FULL_N &&
	     dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3065 &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta ;

  // rule RL_dp1_rFMeta_1
  assign CAN_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_reqMesgInFlight &&
	     dp1_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp1_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Header =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Body =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_writeReq
  assign CAN_FIRE_RL_dp1_tlp_writeReq =
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_mReqF_RDY_deq__293_AND_IF_dp1_tlp_mReq_ETC___d3309 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_writeReq = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // rule RL_dp1_tlp_writeData
  assign CAN_FIRE_RL_dp1_tlp_writeData =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343 ||
	      dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138) &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3376 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_writeData = CAN_FIRE_RL_dp1_tlp_writeData ;

  // rule RL_dp1_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp1_tlp_read_FirstResp =
	     dp1_tlp_readReq$EMPTY_N && dp1_tlp_mRespF$FULL_N &&
	     IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3583 &&
	     (dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp1_tlp_readReq$EMPTY_N) &&
	     !dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp1_tlp_read_FirstResp ;

  // rule RL_dp1_tlp_read_NextResp
  assign CAN_FIRE_RL_dp1_tlp_read_NextResp =
	     dp1_tlp_readReq$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3656 &&
	     dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextResp =
	     CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp1_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp1_tlp_read_FirstReq =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_readReq$FULL_N &&
	     NOT_dp1_tlp_mReqF_first__294_BITS_28_TO_19_471_ETC___d3485 &&
	     !dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp1_tlp_read_FirstReq ;

  // rule RL_dp1_tlp_read_NextReq
  assign CAN_FIRE_RL_dp1_tlp_read_NextReq =
	     dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138 &&
	     dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139 &&
	     dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140 &&
	     dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141 &&
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextReq =
	     CAN_FIRE_RL_dp1_tlp_read_NextReq ;

  // rule RL_dp1_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     dp1_bram_serverAdapterA_cnt_1$whas ||
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_2$a_put_3__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_dp1_wmi_reqMetadata =
	     dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 &&
	     dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 &&
	     dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 &&
	     dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     !dp1_wmi_metaBusy &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doDwell
  assign CAN_FIRE_RL_dp1_wmi_doDwell = dp1_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doDwell = CAN_FIRE_RL_dp1_wmi_doDwell ;

  // rule RL_dp1_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp1_wmi_doWriteFinalize =
	     dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 &&
	     dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 &&
	     dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 &&
	     dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 &&
	     dp1_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_rBMeta
  assign CAN_FIRE_RL_dp1_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta = 1'd1 ;

  // rule RL_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_dp1_wmi_respMetadata =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_dpControl_whas__837_AND_dp1_bram_serve_ETC___d3883 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_wmi_doReadReq
  assign CAN_FIRE_RL_dp1_wmi_doReadReq =
	     IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 &&
	     dp1_wmi_rdActive ;
  assign WILL_FIRE_RL_dp1_wmi_doReadReq =
	     CAN_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doReadResp
  assign CAN_FIRE_RL_dp1_wmi_doReadResp =
	     dp1_wmi_wmi_respF_c_r != 2'd2 && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     IF_dp1_wmi_p4B_992_EQ_0_993_THEN_dp1_bram_serv_ETC___d4006 &&
	     dp1_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doReadResp = CAN_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp1_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp1_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr =
	     ((dp1_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_dp1_wmi_doReadResp) &&
	     CAN_FIRE_RL_dp1_wmi_doReadResp &&
	     !(dp1_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr ;

  // rule RL_dp1_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // rule RL_dp1_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_both =
	     ((dp1_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_dp1_wmi_doReadResp) &&
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_both =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_both ;

  // rule RL_dp1_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd0 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI ;

  // rule RL_dp1_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd2 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE ;

  // rule RL_dp1_bml_cntLclStart
  assign CAN_FIRE_RL_dp1_bml_cntLclStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp1_bml_cntLclStart = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // rule RL_dp1_bml_cntLclDone
  assign CAN_FIRE_RL_dp1_bml_cntLclDone = CAN_FIRE_RL_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_dp1_bml_cntLclDone = CAN_FIRE_RL_dp1_bml_lclAdvance ;

  // rule RL_dp1_bml_cntRemStart
  assign CAN_FIRE_RL_dp1_bml_cntRemStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_cntRemStart = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // rule RL_dp1_bml_cntRemDone
  assign CAN_FIRE_RL_dp1_bml_cntRemDone = CAN_FIRE_RL_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_dp1_bml_cntRemDone = CAN_FIRE_RL_dp1_bml_remAdvance ;

  // rule RL_dp1_bml_lbar
  assign CAN_FIRE_RL_dp1_bml_lbar = dp1_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp1_bml_lbar = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_bml_lbcf
  assign CAN_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_bml_lbar ;
  assign WILL_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_bml_fba
  assign CAN_FIRE_RL_dp1_bml_fba =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fba = CAN_FIRE_RL_dp1_bml_fba ;

  // rule RL_dp1_bml_lcredit
  assign CAN_FIRE_RL_dp1_bml_lcredit =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_bml_lcredit = CAN_FIRE_RL_dp1_bml_lcredit ;

  // rule RL_dp1_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_remAdvance
  assign CAN_FIRE_RL_dp1_bml_remAdvance =
	     dp1_wci_cState == 3'd2 && dp1_bml_remDone ;
  assign WILL_FIRE_RL_dp1_bml_remAdvance =
	     CAN_FIRE_RL_dp1_bml_remAdvance &&
	     !WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // rule RL_dp1_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp1_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_crdAdvance
  assign CAN_FIRE_RL_dp1_bml_crdAdvance =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 &&
	     dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_crdAdvance = CAN_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc = CAN_FIRE_RL_dp1_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_wci_reqF_enq
  assign CAN_FIRE_RL_dp1_wci_reqF_enq = dp1_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_dp1_wci_reqF_enq = CAN_FIRE_RL_dp1_wci_reqF_enq ;

  // rule RL_dp1_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq ;

  // rule RL_dp1_wmi_getRequest
  assign CAN_FIRE_RL_dp1_wmi_getRequest =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_blockReq &&
	     dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp1_wmi_wrActive_910_911_OR_NOT_dp1_wmi_rd_ETC___d3920 &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_getRequest =
	     CAN_FIRE_RL_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp1_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_dp1_wmi_getRequest ;

  // rule RL_dp1_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset ;

  // rule RL_dp1_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;

  // rule RL_dp1_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp1_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq = CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq ;

  // rule RL_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_dp1_wmi_doWriteReq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 &&
	     dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteReq =
	     CAN_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_rBMesg
  assign CAN_FIRE_RL_dp1_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     dp1_bram_serverAdapterB_cnt_1$whas ||
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset ;

  // rule RL_dp1_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclAdvance
  assign CAN_FIRE_RL_dp1_bml_lclAdvance =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp1_bml_lclAdvance = CAN_FIRE_RL_dp1_bml_lclAdvance ;

  // rule RL_dp1_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_lclAdvance ;

  // rule RL_dp1_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_initAccumulators
  assign CAN_FIRE_RL_dp1_bml_initAccumulators =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd1 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp1_bml_initAccumulators =
	     CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // rule RL_dp1_wci_cfwr
  assign CAN_FIRE_RL_dp1_wci_cfwr =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfwr =
	     CAN_FIRE_RL_dp1_wci_cfwr && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp1_wci_ctl_op_complete =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_ctlOpActive &&
	     dp1_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     (dp1_wci_wciReq$wget[59:57] != 3'd0) != dp1_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // rule RL_dp1_wci_respF_incCtr
  assign CAN_FIRE_RL_dp1_wci_respF_incCtr =
	     ((dp1_wci_respF_c_r == 2'd0) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd1 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_enqueueing$whas &&
	     !(dp1_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp1_wci_respF_incCtr =
	     CAN_FIRE_RL_dp1_wci_respF_incCtr ;

  // rule RL_dp1_wci_respF_decCtr
  assign CAN_FIRE_RL_dp1_wci_respF_decCtr =
	     dp1_wci_respF_c_r != 2'd0 && !dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_decCtr =
	     CAN_FIRE_RL_dp1_wci_respF_decCtr ;

  // rule RL_dp1_wci_respF_both
  assign CAN_FIRE_RL_dp1_wci_respF_both =
	     ((dp1_wci_respF_c_r == 2'd1) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd2 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_c_r != 2'd0 &&
	     dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_both = CAN_FIRE_RL_dp1_wci_respF_both ;

  // rule RL_dp1_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_itc0_send_time
  assign CAN_FIRE_RL_itc0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc0_send_time = 1'd1 ;

  // rule RL_itc0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_itc1_send_time
  assign CAN_FIRE_RL_itc1_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc1_send_time = 1'd1 ;

  // rule RL_itc1_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbar &&
	     (IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997 &&
	      !dp0_bml_lclBufStart ||
	      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 &&
	      dp0_bml_lclBufStart) ;
  assign MUX_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_944_AND_IF_dp0_bml_dpContro_ETC___d4580 ||
	      NOT_dp0_bml_lclBufDone_944_011_AND_IF_dp0_bml__ETC___d2024) ;
  assign MUX_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__96_BIT_152_043_AND_NOT_dp0__ETC___d1068 ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp0_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ;
  assign MUX_dp0_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader && _dfoo5 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !dp0_tlp_mRespF_first__64_BITS_71_TO_62_54_ULE_1___d4519 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     dp0_tlp_outDwRemain_81_ULE_4___d4818 ;
  assign MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     dp0_tlp_outDwRemain_81_ULE_4___d4818 &&
	     dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp0_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader &&
	     dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState != 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 && dp0_wci_cState != 3'd1 &&
	      dp0_wci_cState != 3'd3 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState != 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 && dp0_wci_cState != 3'd3 &&
	      dp0_wci_cState != 3'd2 &&
	      dp0_wci_cState != 3'd1 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp0_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_dp0_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ;
  assign MUX_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbar &&
	     (IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183 &&
	      !dp1_bml_lclBufStart ||
	      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 &&
	      dp1_bml_lclBufStart) ;
  assign MUX_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_130_AND_IF_dp1_bml_dpContro_ETC___d4606 ||
	      NOT_dp1_bml_lclBufDone_130_197_AND_IF_dp1_bml__ETC___d4210) ;
  assign MUX_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$a_put_3__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_dp1_ETC___d3254 ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;
  assign MUX_dp1_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo15 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__854_BITS_71_TO_62_944_ULE_1___d4513 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     dp1_tlp_outDwRemain_970_ULE_4___d4824 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_970_ULE_4___d4824 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState != 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 && dp1_wci_cState != 3'd1 &&
	      dp1_wci_cState != 3'd3 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState != 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 && dp1_wci_cState != 3'd3 &&
	      dp1_wci_cState != 3'd2 &&
	      dp1_wci_cState != 3'd1 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp1_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_dp1_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ;
  assign MUX_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp0_bml_crdBuf_value$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_902_EQ_dp0_bml_crdBuf_mod_ETC___d5255 ?
	       16'd0 :
	       dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBuf_value$write_1__VAL_3 =
	     dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256 ?
	       16'd0 :
	       dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp0_bml_fabAvail && !dp0_bml_remStart) ? x__h77920 : x__h77925 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? x__h76677 : 16'd0 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_959_PLUS_dp0_bml_fabFlowSi_ETC___d5130 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_902_EQ_dp0_bml_crdBuf_mod_ETC___d5255 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_959_PLUS_dp0_bml_fabFlowSi_ETC___d5130 ;
  assign MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256 ?
	       dp0_bml_fabMesgBase :
	       dp0_bml_fabMesgAddr + dp0_bml_fabMesgSize ;
  assign MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256 ?
	       dp0_bml_fabMetaBase :
	       dp0_bml_fabMetaAddr + dp0_bml_fabMetaSize ;
  assign MUX_dp0_bml_lclBuf_value$write_1__VAL_3 =
	     dp0_bml_lclBuf_value_857_EQ_dp0_bml_lclBuf_mod_ETC___d5271 ?
	       16'd0 :
	       dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997 &&
	      !dp0_bml_lclBufStart) ?
	       x__h77801 :
	       x__h77806 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? dp0_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     dp0_bml_lclBufDone_944_AND_IF_dp0_bml_dpContro_ETC___d4580 ?
	       x__h77878 :
	       x__h77883 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? 16'd0 : dp0_bml_lclNumBufs ;
  assign MUX_dp0_bml_lclCredit$write_1__VAL_1 =
	     (dp0_bml_lclBufDone && !dp0_bml_remStart) ?
	       x__h77958 :
	       x__h77963 ;
  assign MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_857_EQ_dp0_bml_lclBuf_mod_ETC___d5271 ?
	       dp0_bml_mesgBase :
	       dp0_bml_lclMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_857_EQ_dp0_bml_lclBuf_mod_ETC___d5271 ?
	       dp0_bml_metaBase :
	       dp0_bml_lclMetaAddr + dp0_bml_metaSize ;
  assign MUX_dp0_bml_remBuf_value$write_1__VAL_3 =
	     dp0_bml_remBuf_value_872_EQ_dp0_bml_remBuf_mod_ETC___d4622 ?
	       16'd0 :
	       dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_dp0_bml_remMesgAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_872_EQ_dp0_bml_remBuf_mod_ETC___d4622 ?
	       dp0_bml_mesgBase :
	       dp0_bml_remMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_872_EQ_dp0_bml_remBuf_mod_ETC___d4622 ?
	       dp0_bml_metaBase :
	       dp0_bml_remMetaAddr + dp0_bml_metaSize ;
  always@(idx__h45553 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h45553)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h52616 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h52616)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory$a_put_3__VAL_1 =
	     { dp0_tlp_mReqF$D_OUT[7:0],
	       dp0_tlp_mReqF$D_OUT[15:8],
	       dp0_tlp_mReqF$D_OUT[23:16],
	       dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp0_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673[7:0],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673[15:8],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673[23:16],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673[31:24] } ;
  assign MUX_dp0_bram_memory$b_put_2__VAL_1 =
	     dp0_wmi_lclMesgAddr[14:4] + { 1'd0, dp0_wmi_addr[13:4] } ;
  always@(idx__h47776 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h47776)
      2'd0: MUX_dp0_bram_memory_1$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h53084 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h53084)
      2'd0:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674[7:0],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674[15:8],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674[23:16],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674[31:24] } ;
  always@(idx__h49072 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h49072)
      2'd0: MUX_dp0_bram_memory_2$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h53457 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h53457)
      2'd0:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675[7:0],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675[15:8],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675[23:16],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675[31:24] } ;
  always@(idx__h50368 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h50368)
      2'd0: MUX_dp0_bram_memory_3$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h53830 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h53830)
      2'd0:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676[7:0],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676[15:8],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676[23:16],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676[31:24] } ;
  assign MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 &&
	     dp0_tlp_dmaPullRemainDWLen_001_ULE_dp0_tlp_dma_ETC___d5132 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 ?
	       dp0_tlp_dmaPullRemainDWLen - dp0_tlp_dmaPullRemainDWSub :
	       dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 ?
	       10'd0 :
	       dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp0_tlp_fabMesgAccu + y__h27567 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3 =
	     dp0_tlp_fabMesgAccu + y__h39950 ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h36674,
	       opcode__h36642,
	       nowMS__h36643,
	       nowLS__h36644 } ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_3 =
	     { 1'd1,
	       x__h23863,
	       opcode__h23800,
	       nowMS__h23801,
	       nowLS__h23802 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[152] ?
	       (dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp0_tlp_inF$D_OUT[95:80],
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[79:72],
		    dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp0_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp0_tlp_remMesgAccu[14:2],
	       thisRequestLength__h27016[11:2],
	       8'd255,
	       rreq_tag__h27245,
	       3'h2 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMesgAccu[14:2],
	       dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_6 = { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp0_tlp_readReq$D_OUT[59:42],
	       dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h54731,
	       byteCount__h54732,
	       dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h54774 } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp0_tlp_readReq$D_OUT[59:58],
	       dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h60100 } ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp0_tlp_mesgComplReceived + y__h41139 ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp0_tlp_inF$D_OUT[8],
	       dp0_tlp_inF$D_OUT[23:16],
	       dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPull - y__h39879 ;
  assign MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp0_tlp_mRespF$D_OUT[8],
	       dp0_tlp_mRespF$D_OUT[23:16],
	       dp0_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPush - y__h27056 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h27420 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_2 = { 25'd16973823, w_data__h28398 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_3 = { 25'd8585200, w_data__h29460 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_4 = { 25'd25362416, w_data__h34364 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_5 = { 25'd25362416, w_data__h40135 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h43212 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       dp0_tlp_outDwRemain_81_ULE_4___d4818,
	       7'h02,
	       w_be__h27972,
	       dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_8 = { 25'd25296895, w_data__h32180 } ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     dp0_tlp_remMesgAccu + y__h27198 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_3 =
	     dp0_tlp_remMesgAccu + y__h40461 ;
  assign MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 ||
	     !dp0_tlp_dmaPullRemainDWLen_001_ULE_dp0_tlp_dma_ETC___d5132 ;
  assign MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp0_tlp_srcMesgAccu + y__h27150 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp0_wci_illegalEdge$write_1__VAL_2 =
	     dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_1 = dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_2 = dp0_wci_respF_c_r - 2'd1 ;
  assign MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd1) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       dp0_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_dp0_wci_ctl_op_complete or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_cfrd or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_ctl_op_complete:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_cfrd:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_cfwr:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp0_wci_respF_q_1$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd2) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h79456 } ;
  assign MUX_dp0_wmi_addr$write_1__VAL_1 = dp0_wmi_addr + 14'd4 ;
  assign MUX_dp0_wmi_bufDwell$write_1__VAL_3 = dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp0_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     { dp0_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp0_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp0_wmi_mesgCount$write_1__VAL_1 = dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h72489,
	       y_avValue__h72509,
	       y_avValue__h72529,
	       y_avValue__h72549 } ;
  assign MUX_dp0_wmi_p4B$write_1__VAL_2 = dp0_wmi_p4B + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp0_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (dp0_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       dp0_wmi_wmi_respF_q_1 ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 = { 2'd1, rdata__h72653 } ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (dp0_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_bml_crdBuf_value$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_088_EQ_dp1_bml_crdBuf_mod_ETC___d5323 ?
	       16'd0 :
	       dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBuf_value$write_1__VAL_3 =
	     dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324 ?
	       16'd0 :
	       dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp1_bml_fabAvail && !dp1_bml_remStart) ?
	       x__h156980 :
	       x__h156985 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? x__h155737 : 16'd0 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_145_PLUS_dp1_bml_fabFlowSi_ETC___d5131 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_088_EQ_dp1_bml_crdBuf_mod_ETC___d5323 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_145_PLUS_dp1_bml_fabFlowSi_ETC___d5131 ;
  assign MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324 ?
	       dp1_bml_fabMesgBase :
	       dp1_bml_fabMesgAddr + dp1_bml_fabMesgSize ;
  assign MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324 ?
	       dp1_bml_fabMetaBase :
	       dp1_bml_fabMetaAddr + dp1_bml_fabMetaSize ;
  assign MUX_dp1_bml_lclBuf_value$write_1__VAL_3 =
	     dp1_bml_lclBuf_value_043_EQ_dp1_bml_lclBuf_mod_ETC___d5339 ?
	       16'd0 :
	       dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183 &&
	      !dp1_bml_lclBufStart) ?
	       x__h156861 :
	       x__h156866 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? dp1_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     dp1_bml_lclBufDone_130_AND_IF_dp1_bml_dpContro_ETC___d4606 ?
	       x__h156938 :
	       x__h156943 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? 16'd0 : dp1_bml_lclNumBufs ;
  assign MUX_dp1_bml_lclCredit$write_1__VAL_1 =
	     (dp1_bml_lclBufDone && !dp1_bml_remStart) ?
	       x__h157018 :
	       x__h157023 ;
  assign MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_043_EQ_dp1_bml_lclBuf_mod_ETC___d5339 ?
	       dp1_bml_mesgBase :
	       dp1_bml_lclMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_043_EQ_dp1_bml_lclBuf_mod_ETC___d5339 ?
	       dp1_bml_metaBase :
	       dp1_bml_lclMetaAddr + dp1_bml_metaSize ;
  assign MUX_dp1_bml_remBuf_value$write_1__VAL_3 =
	     dp1_bml_remBuf_value_058_EQ_dp1_bml_remBuf_mod_ETC___d5340 ?
	       16'd0 :
	       dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_058_EQ_dp1_bml_remBuf_mod_ETC___d5340 ?
	       dp1_bml_mesgBase :
	       dp1_bml_remMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_058_EQ_dp1_bml_remBuf_mod_ETC___d5340 ?
	       dp1_bml_metaBase :
	       dp1_bml_remMetaAddr + dp1_bml_metaSize ;
  always@(idx__h124616 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h124616)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h131679 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h131679)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory$a_put_3__VAL_1 =
	     { dp1_tlp_mReqF$D_OUT[7:0],
	       dp1_tlp_mReqF$D_OUT[15:8],
	       dp1_tlp_mReqF$D_OUT[23:16],
	       dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp1_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678[7:0],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678[15:8],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678[23:16],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678[31:24] } ;
  assign MUX_dp1_bram_memory$b_put_2__VAL_1 =
	     dp1_wmi_lclMesgAddr[14:4] + { 1'd0, dp1_wmi_addr[13:4] } ;
  always@(idx__h126839 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h126839)
      2'd0: MUX_dp1_bram_memory_1$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h132147 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h132147)
      2'd0:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679[7:0],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679[15:8],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679[23:16],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679[31:24] } ;
  always@(idx__h128135 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h128135)
      2'd0: MUX_dp1_bram_memory_2$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h132520 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h132520)
      2'd0:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680[7:0],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680[15:8],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680[23:16],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680[31:24] } ;
  always@(idx__h129431 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h129431)
      2'd0: MUX_dp1_bram_memory_3$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h132893 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h132893)
      2'd0:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681[7:0],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681[15:8],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681[23:16],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681[31:24] } ;
  assign MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 &&
	     dp1_tlp_dmaPullRemainDWLen_187_ULE_dp1_tlp_dma_ETC___d5133 ;
  assign MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 ?
	       dp1_tlp_dmaPullRemainDWLen - dp1_tlp_dmaPullRemainDWSub :
	       dp1_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 ?
	       10'd0 :
	       dp1_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp1_tlp_fabMesgAccu + y__h106638 ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3 =
	     dp1_tlp_fabMesgAccu + y__h119013 ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h102934,
	       opcode__h102871,
	       nowMS__h102872,
	       nowLS__h102873 } ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h115737,
	       opcode__h115705,
	       nowMS__h115706,
	       nowLS__h115707 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[152] ?
	       (dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp1_tlp_inF$D_OUT[95:80],
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[79:72],
		    dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h106087[11:2],
	       8'd255,
	       rreq_tag__h106316,
	       3'h2 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp1_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp1_tlp_remMesgAccu[14:2],
	       dp1_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_6 = { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp1_tlp_readReq$D_OUT[59:42],
	       dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h133794,
	       byteCount__h133795,
	       dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h133837 } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp1_tlp_readReq$D_OUT[59:58],
	       dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h139163 } ;
  assign MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp1_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp1_tlp_mesgComplReceived + y__h120202 ;
  assign MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp1_tlp_inF$D_OUT[8],
	       dp1_tlp_inF$D_OUT[23:16],
	       dp1_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPull - y__h118942 ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp1_tlp_mRespF$D_OUT[8],
	       dp1_tlp_mRespF$D_OUT[23:16],
	       dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPush - y__h106127 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h106491 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_2 = { 25'd16973823, w_data__h107469 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_3 = { 25'd8585200, w_data__h108531 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_4 = { 25'd25362416, w_data__h113435 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_5 = { 25'd25362416, w_data__h119198 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h122275 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       dp1_tlp_outDwRemain_970_ULE_4___d4824,
	       7'h02,
	       w_be__h107043,
	       dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_8 = { 25'd25296895, w_data__h111251 } ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     dp1_tlp_remMesgAccu + y__h106269 ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_3 =
	     dp1_tlp_remMesgAccu + y__h119524 ;
  assign MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 ||
	     !dp1_tlp_dmaPullRemainDWLen_187_ULE_dp1_tlp_dma_ETC___d5133 ;
  assign MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp1_tlp_srcMesgAccu + y__h106221 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp1_wci_illegalEdge$write_1__VAL_2 =
	     dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_1 = dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_2 = dp1_wci_respF_c_r - 2'd1 ;
  assign MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd1) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       dp1_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_dp1_wci_ctl_op_complete or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_cfrd or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_ctl_op_complete:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_cfrd:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_cfwr:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp1_wci_respF_q_1$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd2) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h158514 } ;
  assign MUX_dp1_wmi_addr$write_1__VAL_1 = dp1_wmi_addr + 14'd4 ;
  assign MUX_dp1_wmi_bufDwell$write_1__VAL_3 = dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp1_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 =
	     { dp1_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp1_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp1_wmi_mesgCount$write_1__VAL_1 = dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h151552,
	       y_avValue__h151572,
	       y_avValue__h151592,
	       y_avValue__h151612 } ;
  assign MUX_dp1_wmi_p4B$write_1__VAL_2 = dp1_wmi_p4B + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp1_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (dp1_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       dp1_wmi_wmi_respF_q_1 ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 = { 2'd1, rdata__h151716 } ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (dp1_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;

  // inlined wires
  assign dp0_bram_serverAdapterA_outData_enqData$wget = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_s1[0] ;
  assign dp0_bram_serverAdapterA_outData_outData$wget =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_outData$whas =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h3694[1] || ab__h3694[0]) ;
  assign dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_2$whas =
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_writeWithResp$wget = ab__h3694 ;
  assign dp0_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h3694[1] || ab__h3694[0] } ;
  assign dp0_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_outData_enqData$wget = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_s1[0] ;
  assign dp0_bram_serverAdapterB_outData_outData$wget = y_avValue__h72489 ;
  assign dp0_bram_serverAdapterB_outData_outData$whas =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h5093[1] || ab__h5093[0]) ;
  assign dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_2$whas =
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_writeWithResp$wget = ab__h5093 ;
  assign dp0_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h5093[1] || ab__h5093[0] } ;
  assign dp0_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_1_s1[0] ;
  assign dp0_bram_serverAdapterA_1_outData_outData$wget =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_outData$whas =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h6623[1] || ab__h6623[0]) ;
  assign dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_1_cnt_2$whas =
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$wget = ab__h6623 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h6623[1] || ab__h6623[0] } ;
  assign dp0_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_1_s1[0] ;
  assign dp0_bram_serverAdapterB_1_outData_outData$wget = y_avValue__h72509 ;
  assign dp0_bram_serverAdapterB_1_outData_outData$whas =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h8020[1] || ab__h8020[0]) ;
  assign dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_1_cnt_2$whas =
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$wget = ab__h8020 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h8020[1] || ab__h8020[0] } ;
  assign dp0_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_2_s1[0] ;
  assign dp0_bram_serverAdapterA_2_outData_outData$wget =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_outData$whas =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h9550[1] || ab__h9550[0]) ;
  assign dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_2$whas =
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$wget = ab__h9550 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h9550[1] || ab__h9550[0] } ;
  assign dp0_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_2_s1[0] ;
  assign dp0_bram_serverAdapterB_2_outData_outData$wget = y_avValue__h72529 ;
  assign dp0_bram_serverAdapterB_2_outData_outData$whas =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h10947[1] || ab__h10947[0]) ;
  assign dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_2_cnt_2$whas =
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$wget = ab__h10947 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h10947[1] || ab__h10947[0] } ;
  assign dp0_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_3_s1[0] ;
  assign dp0_bram_serverAdapterA_3_outData_outData$wget =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_outData$whas =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h12477[1] || ab__h12477[0]) ;
  assign dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_3_cnt_2$whas =
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$wget = ab__h12477 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h12477[1] || ab__h12477[0] } ;
  assign dp0_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_3_s1[0] ;
  assign dp0_bram_serverAdapterB_3_outData_outData$wget = y_avValue__h72549 ;
  assign dp0_bram_serverAdapterB_3_outData_outData$whas =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h13874[1] || ab__h13874[0]) ;
  assign dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_2$whas =
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$wget = ab__h13874 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h13874[1] || ab__h13874[0] } ;
  assign dp0_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_wci_wciReq$wget =
	     { cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_13_MAddrSpace,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_13_MAddr,
	       cp$wci_Vm_13_MData } ;
  assign dp0_wci_wciReq$whas = 1'd1 ;
  assign dp0_wci_respF_x_wire$wget = MUX_dp0_wci_respF_q_0$write_1__VAL_2 ;
  assign dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_cfrd ||
	     WILL_FIRE_RL_dp0_wci_cfwr ;
  assign dp0_wci_wEdge$wget = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_wEdge$whas = WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp0_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_wti_wtiReq$wget = 67'h0 ;
  assign dp0_wti_wtiReq$whas = 1'b0 ;
  assign dp0_tlp_remStart_1$wget = 1'd1 ;
  assign dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ;
  assign dp0_tlp_remDone_1$wget = 1'd1 ;
  assign dp0_tlp_remDone_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ;
  assign dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign dp0_tlp_creditReady_1$whas = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_dpControl$wget = dp0_dpControl ;
  assign dp0_tlp_dpControl$whas = 1'd1 ;
  assign dp0_tlp_pullTagMatch_1$wget =
	     tagm__h40255 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ_pciD_ETC___d908 ;
  assign dp0_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;
  assign dp0_wmi_wmi_wmiReq$wget =
	     { wmiS0_MCmd,
	       wmiS0_MReqLast,
	       wmiS0_MReqInfo,
	       wmiS0_MAddrSpace,
	       wmiS0_MAddr,
	       wmiS0_MBurstLength } ;
  assign dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiMFlag$wget = wmiS0_arg_mFlag ;
  assign dp0_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiDh$wget =
	     { wmiS0_MDataValid,
	       wmiS0_MDataLast,
	       wmiS0_MData,
	       wmiS0_MDataByteEn } ;
  assign dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp0_wmi_wmi_respF_x_wire$wget =
	     MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign dp0_wmi_wmi_respF_x_wire$whas = CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp0_bml_lbar ;
  assign dp0_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_peerIsReady_1$whas = wmiS0_MReset_n ;
  assign dp0_wmi_wmi_sThreadBusy_dw$wget = dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;
  assign dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp0_wmi_getRequest && !dp0_wmi_mesgBusy ;
  assign dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp0_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_dpControl$wget = dp0_dpControl ;
  assign dp0_wmi_dpControl$whas = 1'd1 ;
  assign dp0_wmi_nowW$wget = dp0_wti_nowReq[63:0] ;
  assign dp0_wmi_nowW$whas = 1'd1 ;
  assign dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp0_bml_lclBufStart_1$whas = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp0_bml_lclBufDone_1$whas = dp0_wmi_mesgDone ;
  assign dp0_bml_remStart_1$wget = 1'd1 ;
  assign dp0_bml_remStart_1$whas = dp0_tlp_remStart ;
  assign dp0_bml_remDone_1$wget = 1'd1 ;
  assign dp0_bml_remDone_1$whas = dp0_tlp_remDone ;
  assign dp0_bml_fabDone_1$wget = 1'd1 ;
  assign dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] != 2'd1 ;
  assign dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign dp0_bml_dpControl$wget = dp0_dpControl ;
  assign dp0_bml_dpControl$whas = 1'd1 ;
  assign dp0_wci_Es_mCmd_w$wget = cp$wci_Vm_13_MCmd ;
  assign dp0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_13_MAddrSpace ;
  assign dp0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddr_w$wget = cp$wci_Vm_13_MAddr ;
  assign dp0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wci_Es_mData_w$wget = cp$wci_Vm_13_MData ;
  assign dp0_wci_Es_mData_w$whas = 1'd1 ;
  assign dp0_wci_Es_mByteEn_w$wget = cp$wci_Vm_13_MByteEn ;
  assign dp0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mCmd_w$wget = wmiS0_MCmd ;
  assign dp0_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mReqInfo_w$wget = wmiS0_MReqInfo ;
  assign dp0_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mAddrSpace_w$wget = wmiS0_MAddrSpace ;
  assign dp0_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mAddr_w$wget = wmiS0_MAddr ;
  assign dp0_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mBurstLength_w$wget = wmiS0_MBurstLength ;
  assign dp0_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mData_w$wget = wmiS0_MData ;
  assign dp0_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mDataByteEn_w$wget = wmiS0_MDataByteEn ;
  assign dp0_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign dp1_bram_serverAdapterA_outData_enqData$wget = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_s1[0] ;
  assign dp1_bram_serverAdapterA_outData_outData$wget =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_outData$whas =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h82792[1] || ab__h82792[0]) ;
  assign dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_2$whas =
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_writeWithResp$wget = ab__h82792 ;
  assign dp1_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h82792[1] || ab__h82792[0] } ;
  assign dp1_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_outData_enqData$wget = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_s1[0] ;
  assign dp1_bram_serverAdapterB_outData_outData$wget = y_avValue__h151552 ;
  assign dp1_bram_serverAdapterB_outData_outData$whas =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h84191[1] || ab__h84191[0]) ;
  assign dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_2$whas =
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_writeWithResp$wget = ab__h84191 ;
  assign dp1_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h84191[1] || ab__h84191[0] } ;
  assign dp1_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_1_s1[0] ;
  assign dp1_bram_serverAdapterA_1_outData_outData$wget =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_outData$whas =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h85721[1] || ab__h85721[0]) ;
  assign dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_1_cnt_2$whas =
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$wget = ab__h85721 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h85721[1] || ab__h85721[0] } ;
  assign dp1_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_1_s1[0] ;
  assign dp1_bram_serverAdapterB_1_outData_outData$wget = y_avValue__h151572 ;
  assign dp1_bram_serverAdapterB_1_outData_outData$whas =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h87118[1] || ab__h87118[0]) ;
  assign dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_1_cnt_2$whas =
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$wget = ab__h87118 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h87118[1] || ab__h87118[0] } ;
  assign dp1_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_2_s1[0] ;
  assign dp1_bram_serverAdapterA_2_outData_outData$wget =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_outData$whas =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h88648[1] || ab__h88648[0]) ;
  assign dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_2$whas =
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$wget = ab__h88648 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h88648[1] || ab__h88648[0] } ;
  assign dp1_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_2_s1[0] ;
  assign dp1_bram_serverAdapterB_2_outData_outData$wget = y_avValue__h151592 ;
  assign dp1_bram_serverAdapterB_2_outData_outData$whas =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h90045[1] || ab__h90045[0]) ;
  assign dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_2_cnt_2$whas =
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$wget = ab__h90045 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h90045[1] || ab__h90045[0] } ;
  assign dp1_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_3_s1[0] ;
  assign dp1_bram_serverAdapterA_3_outData_outData$wget =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_outData$whas =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h91575[1] || ab__h91575[0]) ;
  assign dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_3_cnt_2$whas =
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$wget = ab__h91575 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h91575[1] || ab__h91575[0] } ;
  assign dp1_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_3_s1[0] ;
  assign dp1_bram_serverAdapterB_3_outData_outData$wget = y_avValue__h151612 ;
  assign dp1_bram_serverAdapterB_3_outData_outData$whas =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h92972[1] || ab__h92972[0]) ;
  assign dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_2$whas =
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$wget = ab__h92972 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h92972[1] || ab__h92972[0] } ;
  assign dp1_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_wci_wciReq$wget =
	     { cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_14_MAddrSpace,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_14_MAddr,
	       cp$wci_Vm_14_MData } ;
  assign dp1_wci_wciReq$whas = 1'd1 ;
  assign dp1_wci_respF_x_wire$wget = MUX_dp1_wci_respF_q_0$write_1__VAL_2 ;
  assign dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_cfrd ||
	     WILL_FIRE_RL_dp1_wci_cfwr ;
  assign dp1_wci_wEdge$wget = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_wEdge$whas = WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp1_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_wti_wtiReq$wget = 67'h0 ;
  assign dp1_wti_wtiReq$whas = 1'b0 ;
  assign dp1_tlp_remStart_1$wget = 1'd1 ;
  assign dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;
  assign dp1_tlp_remDone_1$wget = 1'd1 ;
  assign dp1_tlp_remDone_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign dp1_tlp_creditReady_1$whas = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_dpControl$wget = dp1_dpControl ;
  assign dp1_tlp_dpControl$whas = 1'd1 ;
  assign dp1_tlp_pullTagMatch_1$wget =
	     tagm__h119318 == dp1_tlp_inF$D_OUT[47:40] &&
	     dp1_tlp_inF_first__084_BITS_63_TO_56_087_EQ_pc_ETC___d3094 ;
  assign dp1_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag ;
  assign dp1_wmi_wmi_wmiReq$wget =
	     { wmiS1_MCmd,
	       wmiS1_MReqLast,
	       wmiS1_MReqInfo,
	       wmiS1_MAddrSpace,
	       wmiS1_MAddr,
	       wmiS1_MBurstLength } ;
  assign dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiMFlag$wget = wmiS1_arg_mFlag ;
  assign dp1_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiDh$wget =
	     { wmiS1_MDataValid,
	       wmiS1_MDataLast,
	       wmiS1_MData,
	       wmiS1_MDataByteEn } ;
  assign dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp1_wmi_wmi_respF_x_wire$wget =
	     MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign dp1_wmi_wmi_respF_x_wire$whas = CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp1_bml_lbar ;
  assign dp1_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_peerIsReady_1$whas = wmiS1_MReset_n ;
  assign dp1_wmi_wmi_sThreadBusy_dw$wget = dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;
  assign dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp1_wmi_getRequest && !dp1_wmi_mesgBusy ;
  assign dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp1_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_dpControl$wget = dp1_dpControl ;
  assign dp1_wmi_dpControl$whas = 1'd1 ;
  assign dp1_wmi_nowW$wget = dp1_wti_nowReq[63:0] ;
  assign dp1_wmi_nowW$whas = 1'd1 ;
  assign dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp1_bml_lclBufStart_1$whas = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp1_bml_lclBufDone_1$whas = dp1_wmi_mesgDone ;
  assign dp1_bml_remStart_1$wget = 1'd1 ;
  assign dp1_bml_remStart_1$whas = dp1_tlp_remStart ;
  assign dp1_bml_remDone_1$wget = 1'd1 ;
  assign dp1_bml_remDone_1$whas = dp1_tlp_remDone ;
  assign dp1_bml_fabDone_1$wget = 1'd1 ;
  assign dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] != 2'd1 ;
  assign dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign dp1_bml_dpControl$wget = dp1_dpControl ;
  assign dp1_bml_dpControl$whas = 1'd1 ;
  assign dp1_wci_Es_mCmd_w$wget = cp$wci_Vm_14_MCmd ;
  assign dp1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_14_MAddrSpace ;
  assign dp1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddr_w$wget = cp$wci_Vm_14_MAddr ;
  assign dp1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wci_Es_mData_w$wget = cp$wci_Vm_14_MData ;
  assign dp1_wci_Es_mData_w$whas = 1'd1 ;
  assign dp1_wci_Es_mByteEn_w$wget = cp$wci_Vm_14_MByteEn ;
  assign dp1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mCmd_w$wget = wmiS1_MCmd ;
  assign dp1_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mReqInfo_w$wget = wmiS1_MReqInfo ;
  assign dp1_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddrSpace_w$wget = wmiS1_MAddrSpace ;
  assign dp1_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddr_w$wget = wmiS1_MAddr ;
  assign dp1_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mBurstLength_w$wget = wmiS1_MBurstLength ;
  assign dp1_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mData_w$wget = wmiS1_MData ;
  assign dp1_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mDataByteEn_w$wget = wmiS1_MDataByteEn ;
  assign dp1_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wci_reqF_r_enq$whas = CAN_FIRE_RL_dp0_wci_reqF_enq ;
  assign dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_respF_dequeueing$whas = dp0_wci_respF_c_r != 2'd0 ;
  assign dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp0_wci_wci_cfwr_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp0_wci_wci_cfrd_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wci_wci_ctrl_pw$whas =
	     dp0_wci_reqF$EMPTY_N && !dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp0_dpControl[3:2] != 2'd1 && !dp0_wmi_mesgMeta[128] ||
	     dp0_dpControl[3:2] == 2'd1 && !dp0_wmi_mesgBufReady ;
  assign dp0_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_enqueueing$whas = CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_respF_dequeueing$whas = dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp0_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_fabBuf_incAction$whas =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_crdBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_crdAdvance ;
  assign dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp0_wmi_Es_mReqLast_w$whas = wmiS0_MReqLast ;
  assign dp0_wmi_Es_mDataValid_w$whas = wmiS0_MDataValid ;
  assign dp0_wmi_Es_mDataLast_w$whas = wmiS0_MDataLast ;
  assign dp0_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wci_reqF_r_enq$whas = CAN_FIRE_RL_dp1_wci_reqF_enq ;
  assign dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_respF_dequeueing$whas = dp1_wci_respF_c_r != 2'd0 ;
  assign dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp1_wci_wci_cfwr_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp1_wci_wci_cfrd_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wci_wci_ctrl_pw$whas =
	     dp1_wci_reqF$EMPTY_N && !dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp1_dpControl[3:2] != 2'd1 && !dp1_wmi_mesgMeta[128] ||
	     dp1_dpControl[3:2] == 2'd1 && !dp1_wmi_mesgBufReady ;
  assign dp1_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_enqueueing$whas = CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_respF_dequeueing$whas = dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp1_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_lclAdvance ;
  assign dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_fabBuf_incAction$whas =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_crdBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_crdAdvance ;
  assign dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp1_wmi_Es_mReqLast_w$whas = wmiS1_MReqLast ;
  assign dp1_wmi_Es_mDataValid_w$whas = wmiS1_MDataValid ;
  assign dp1_wmi_Es_mDataLast_w$whas = wmiS1_MDataLast ;
  assign dp1_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign itc0_wti_sThreadBusy_pw$whas = dp0_wti_isReset$VAL ;
  assign itc1_wti_sThreadBusy_pw$whas = dp1_wti_isReset$VAL ;
  assign dp0_bml_lclBuf_modulus_bw$wget = dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_modulus_bw$wget = dp0_bml_remBuf_modulus ;
  assign dp0_bml_fabBuf_modulus_bw$wget = dp0_bml_fabBuf_modulus ;
  assign dp0_bml_crdBuf_modulus_bw$wget = dp0_bml_crdBuf_modulus ;
  assign dp1_bml_lclBuf_modulus_bw$wget = dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_modulus_bw$wget = dp1_bml_remBuf_modulus ;
  assign dp1_bml_fabBuf_modulus_bw$wget = dp1_bml_fabBuf_modulus ;
  assign dp1_bml_crdBuf_modulus_bw$wget = dp1_bml_crdBuf_modulus ;

  // register chompCnt
  assign chompCnt$D_IN = chompCnt + 8'd1 ;
  assign chompCnt$EN = sm2$RDY_c1_request_get && chompCnt != 8'd255 ;

  // register dp0_bml_crdBuf_modulus
  assign dp0_bml_crdBuf_modulus$D_IN = dp0_bml_lclNumBufs - 16'd1 ;
  assign dp0_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_crdBuf_value
  assign dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp0_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabAvail
  assign dp0_bml_fabAvail$D_IN = dp0_bml_fabAvail_1$whas ;
  assign dp0_bml_fabAvail$EN = 1'd1 ;

  // register dp0_bml_fabBuf_modulus
  assign dp0_bml_fabBuf_modulus$D_IN = dp0_bml_fabNumBufs - 16'd1 ;
  assign dp0_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBuf_value
  assign dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp0_bml_fabBuf_value$EN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBufsAvail
  assign dp0_bml_fabBufsAvail$D_IN =
	     MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabDone
  assign dp0_bml_fabDone$D_IN = dp0_bml_fabDone_1$whas ;
  assign dp0_bml_fabDone$EN = 1'd1 ;

  // register dp0_bml_fabFlowAddr
  always@(MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_bml_initAccumulators or
	  dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_dp0_bml_crdAdvance or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp0_bml_initAccumulators:
	  dp0_bml_fabFlowAddr$D_IN = dp0_bml_fabFlowBase;
      WILL_FIRE_RL_dp0_bml_crdAdvance:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // register dp0_bml_fabFlowBase
  assign dp0_bml_fabFlowBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp0_bml_fabFlowSize
  assign dp0_bml_fabFlowSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp0_bml_fabMesgAddr
  assign dp0_bml_fabMesgAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       dp0_bml_fabMesgBase ;
  assign dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMesgBase
  assign dp0_bml_fabMesgBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp0_bml_fabMesgSize
  assign dp0_bml_fabMesgSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp0_bml_fabMetaAddr
  assign dp0_bml_fabMetaAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       dp0_bml_fabMetaBase ;
  assign dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMetaBase
  assign dp0_bml_fabMetaBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp0_bml_fabMetaSize
  assign dp0_bml_fabMetaSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp0_bml_fabNumBufs
  assign dp0_bml_fabNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp0_bml_lclBufDone
  assign dp0_bml_lclBufDone$D_IN = dp0_wmi_mesgDone ;
  assign dp0_bml_lclBufDone$EN = 1'd1 ;

  // register dp0_bml_lclBufStart
  assign dp0_bml_lclBufStart$D_IN = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufStart$EN = 1'd1 ;

  // register dp0_bml_lclBuf_modulus
  assign dp0_bml_lclBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBuf_value
  assign dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp0_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_cntLclDone ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsAR
  assign dp0_bml_lclBufsAR$D_IN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp0_bml_lclBufsAR$EN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsCF
  assign dp0_bml_lclBufsCF$D_IN =
	     MUX_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp0_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_944_AND_IF_dp0_bml_dpContro_ETC___d4580 ||
	      NOT_dp0_bml_lclBufDone_944_011_AND_IF_dp0_bml__ETC___d2024) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclCredit
  assign dp0_bml_lclCredit$D_IN =
	     MUX_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclDones
  assign dp0_bml_lclDones$D_IN = dp0_bml_lclDones + 16'd1 ;
  assign dp0_bml_lclDones$EN = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // register dp0_bml_lclMesgAddr
  assign dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclMetaAddr
  assign dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclNumBufs
  assign dp0_bml_lclNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp0_bml_lclStarts
  assign dp0_bml_lclStarts$D_IN = dp0_bml_lclStarts + 16'd1 ;
  assign dp0_bml_lclStarts$EN = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // register dp0_bml_mesgBase
  assign dp0_bml_mesgBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp0_bml_mesgSize
  assign dp0_bml_mesgSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp0_bml_metaBase
  assign dp0_bml_metaBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp0_bml_metaSize
  assign dp0_bml_metaSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp0_bml_remBuf_modulus
  assign dp0_bml_remBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remBuf_value
  assign dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_remBuf_value$write_1__VAL_3 ;
  assign dp0_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remDone
  assign dp0_bml_remDone$D_IN = dp0_tlp_remDone ;
  assign dp0_bml_remDone$EN = 1'd1 ;

  // register dp0_bml_remDones
  assign dp0_bml_remDones$D_IN = dp0_bml_remDones + 16'd1 ;
  assign dp0_bml_remDones$EN = CAN_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMesgAddr
  assign dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMetaAddr
  assign dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remStart
  assign dp0_bml_remStart$D_IN = dp0_tlp_remStart ;
  assign dp0_bml_remStart$EN = 1'd1 ;

  // register dp0_bml_remStarts
  assign dp0_bml_remStarts$D_IN = dp0_bml_remStarts + 16'd1 ;
  assign dp0_bml_remStarts$EN = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // register dp0_bram_serverAdapterA_1_cnt
  assign dp0_bram_serverAdapterA_1_cnt$D_IN =
	     dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_dp0_b_ETC___d150 ;
  assign dp0_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_1_s1
  assign dp0_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_2_cnt
  assign dp0_bram_serverAdapterA_2_cnt$D_IN =
	     dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_dp0_b_ETC___d268 ;
  assign dp0_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_2_s1
  assign dp0_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_3_cnt
  assign dp0_bram_serverAdapterA_3_cnt$D_IN =
	     dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_dp0_b_ETC___d386 ;
  assign dp0_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_3_s1
  assign dp0_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_cnt
  assign dp0_bram_serverAdapterA_cnt$D_IN =
	     dp0_bram_serverAdapterA_cnt_6_PLUS_IF_dp0_bram_ETC___d32 ;
  assign dp0_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_s1
  assign dp0_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_s1_1$wget[1],
	       dp0_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_1_cnt
  assign dp0_bram_serverAdapterB_1_cnt$D_IN =
	     dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_dp0_b_ETC___d209 ;
  assign dp0_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_1_s1
  assign dp0_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_2_cnt
  assign dp0_bram_serverAdapterB_2_cnt$D_IN =
	     dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_dp0_b_ETC___d327 ;
  assign dp0_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_2_s1
  assign dp0_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_3_cnt
  assign dp0_bram_serverAdapterB_3_cnt$D_IN =
	     dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_dp0_b_ETC___d445 ;
  assign dp0_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_3_s1
  assign dp0_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_cnt
  assign dp0_bram_serverAdapterB_cnt$D_IN =
	     dp0_bram_serverAdapterB_cnt_5_PLUS_IF_dp0_bram_ETC___d91 ;
  assign dp0_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_s1
  assign dp0_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_s1_1$wget[1],
	       dp0_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp0_dpControl
  assign dp0_dpControl$D_IN = dp0_wci_reqF$D_OUT[3:0] ;
  assign dp0_dpControl$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp0_tlp_creditReady
  assign dp0_tlp_creditReady$D_IN = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_creditReady$EN = 1'd1 ;

  // register dp0_tlp_debugBdata
  assign dp0_tlp_debugBdata$D_IN =
	     { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp0_tlp_debugBdata$EN = CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent: dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_dmaPullRemainDWLen == 10'd1;
    default: dp0_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h39854 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h39854[11:2];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaPullRemainDWSub
  assign dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ?
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaReqTag
  assign dp0_tlp_dmaReqTag$D_IN = dp0_tlp_dmaTag ;
  assign dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_dmaTag
  assign dp0_tlp_dmaTag$D_IN = dp0_tlp_dmaTag + 5'd1 ;
  assign dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_doXmtMetaBody
  assign dp0_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ;
  assign dp0_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_fabFlowAddr
  assign dp0_tlp_fabFlowAddr$D_IN = dp0_bml_fabFlowAddr ;
  assign dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMesgAccu
  always@(MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp0_tlp_fabMesgAddr or
	  WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader or
	  MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  dp0_tlp_fabMesgAccu$D_IN = dp0_tlp_fabMesgAddr;
      WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader:
	  dp0_tlp_fabMesgAccu$D_IN = MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_fabMesgAccu$D_IN = MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3;
      default: dp0_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_fabMesgAddr
  assign dp0_tlp_fabMesgAddr$D_IN = dp0_bml_fabMesgAddr ;
  assign dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMeta
  always@(WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  MUX_dp0_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  MUX_dp0_tlp_fabMeta$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_fabMeta$D_IN = MUX_dp0_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent:
	dp0_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody:
	dp0_tlp_fabMeta$D_IN = MUX_dp0_tlp_fabMeta$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent:
	dp0_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: dp0_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;

  // register dp0_tlp_fabMetaAddr
  assign dp0_tlp_fabMetaAddr$D_IN = dp0_bml_fabMetaAddr ;
  assign dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_farBufReady
  assign dp0_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_farBufReady$EN = 1'd1 ;

  // register dp0_tlp_flowDiagCount
  assign dp0_tlp_flowDiagCount$D_IN = dp0_tlp_flowDiagCount + 32'd1 ;
  assign dp0_tlp_flowDiagCount$EN = CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_gotResponseHeader$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_gotResponseHeader$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp0_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_inIgnorePkt
  assign dp0_tlp_inIgnorePkt$D_IN =
	     dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
	     dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv && dp0_tlp_inF$D_OUT[152] ;

  // register dp0_tlp_maxPayloadSize
  assign dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp0_tlp_maxReadReqSize
  assign dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp0_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	  dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;

  // register dp0_tlp_mesgLengthRemainPull
  assign dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_mesgLengthRemainPush
  assign dp0_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ?
	       MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ;

  // register dp0_tlp_nearBufReady
  assign dp0_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register dp0_tlp_outDwRemain
  assign dp0_tlp_outDwRemain$D_IN =
	     MUX_dp0_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ;

  // register dp0_tlp_postSeqDwell
  assign dp0_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ?
	       MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp0_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;

  // register dp0_tlp_pullTagMatch
  assign dp0_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag &&
	     dp0_tlp_pullTagMatch_1$wget ;
  assign dp0_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp0_tlp_rdRespDwRemain
  assign dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_readHeaderSent
  assign dp0_tlp_readHeaderSent$D_IN =
	     MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ;

  // register dp0_tlp_readNxtDWAddr
  assign dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readRemainDWLen
  assign dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readStarted
  assign dp0_tlp_readStarted$D_IN = MUX_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_314_ULE_4___d1315 ;

  // register dp0_tlp_remDone
  assign dp0_tlp_remDone$D_IN = dp0_tlp_remDone_1$whas ;
  assign dp0_tlp_remDone$EN = 1'd1 ;

  // register dp0_tlp_remMesgAccu
  always@(MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp0_tlp_remMesgAddr or
	  WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg or
	  MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  dp0_tlp_remMesgAccu$D_IN = dp0_tlp_remMesgAddr;
      WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg:
	  dp0_tlp_remMesgAccu$D_IN = MUX_dp0_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_remMesgAccu$D_IN = MUX_dp0_tlp_remMesgAccu$write_1__VAL_3;
      default: dp0_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // register dp0_tlp_remMesgAddr
  assign dp0_tlp_remMesgAddr$D_IN = dp0_bml_remMesgAddr ;
  assign dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_remMetaAddr
  assign dp0_tlp_remMetaAddr$D_IN = dp0_bml_remMetaAddr ;
  assign dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_remStart
  assign dp0_tlp_remStart$D_IN = dp0_tlp_remStart_1$whas ;
  assign dp0_tlp_remStart$EN = 1'd1 ;

  // register dp0_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_reqMesgInFlight$D_IN = dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp0_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_reqMetaBodyInFlight
  assign dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // register dp0_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: dp0_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ;

  // register dp0_tlp_srcMesgAccu
  assign dp0_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ?
	       dp0_tlp_fabMesgAddr :
	       MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ;

  // register dp0_tlp_tlpMetaSent
  assign dp0_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign dp0_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ;

  // register dp0_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_dp0_tlp_tlpRcv or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_tlpRcv:
	  dp0_tlp_tlpRcvBusy$D_IN = !dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_tlpRcvBusy$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_tlpRcvBusy$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497;
      default: dp0_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_tlpXmtBusy
  always@(MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 or
	  dp0_tlp_mRespF$D_OUT or
	  MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody or
	  MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1:
	  dp0_tlp_tlpXmtBusy$D_IN = dp0_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody:
	  dp0_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead:
	  dp0_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp0_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader && _dfoo5 ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !dp0_tlp_mRespF_first__64_BITS_71_TO_62_54_ULE_1___d4519 ||
	     (WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody) &&
	     dp0_tlp_outDwRemain_81_ULE_4___d4818 ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_writeDWAddr
  assign dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_writeLastBE
  assign dp0_tlp_writeLastBE$D_IN = dp0_tlp_mReqF$D_OUT[35:32] ;
  assign dp0_tlp_writeLastBE$EN = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_writeRemainDWLen
  assign dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_xmtMetaInFlight
  assign dp0_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign dp0_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  dp0_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead or
	  MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_dp0_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody:
	dp0_tlp_xmtMetaOK$D_IN = dp0_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead: dp0_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_dp0_tlp_xmtMetaOK$write_1__SEL_4:
	dp0_tlp_xmtMetaOK$D_IN = 1'd1;
    default: dp0_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader &&
	     dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     dp0_tlp_outDwRemain_81_ULE_4___d4818 &&
	     dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_wci_cEdge
  assign dp0_wci_cEdge$D_IN = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_cEdge$EN = WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_cState
  assign dp0_wci_cState$D_IN = dp0_wci_nState ;
  assign dp0_wci_cState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge ;

  // register dp0_wci_ctlAckReg
  assign dp0_wci_ctlAckReg$D_IN = dp0_wci_ctlAckReg_1$whas ;
  assign dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register dp0_wci_ctlOpActive
  assign dp0_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_illegalEdge
  assign dp0_wci_illegalEdge$D_IN =
	     !MUX_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ||
	     MUX_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register dp0_wci_nState
  always@(dp0_wci_reqF$D_OUT)
  begin
    case (dp0_wci_reqF$D_OUT[36:34])
      3'd0: dp0_wci_nState$D_IN = 3'd1;
      3'd1: dp0_wci_nState$D_IN = 3'd2;
      3'd2: dp0_wci_nState$D_IN = 3'd3;
      default: dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp0_wci_nState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState == 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp0_wci_cState == 3'd1 || dp0_wci_cState == 3'd3) ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState == 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp0_wci_cState == 3'd3 || dp0_wci_cState == 3'd2 ||
	       dp0_wci_cState == 3'd1)) ;

  // register dp0_wci_reqF_countReg
  assign dp0_wci_reqF_countReg$D_IN =
	     (dp0_wci_wciReq$wget[59:57] != 3'd0) ?
	       dp0_wci_reqF_countReg + 2'd1 :
	       dp0_wci_reqF_countReg - 2'd1 ;
  assign dp0_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // register dp0_wci_respF_c_r
  assign dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ?
	       MUX_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_0
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr or dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_1;
      MUX_dp0_wci_respF_q_0$write_1__SEL_2:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_0$D_IN = dp0_wci_respF_q_1;
      default: dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_1
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_1$write_1__VAL_1;
      MUX_dp0_wci_respF_q_1$write_1__SEL_2:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_sFlagReg
  assign dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp0_wci_sFlagReg$EN = 1'd1 ;

  // register dp0_wci_sThreadBusy_d
  assign dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp0_wmi_addr
  assign dp0_wmi_addr$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_addr$write_1__VAL_1 :
	       dp0_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp0_wmi_addr$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bufDwell
  assign dp0_wmi_bufDwell$D_IN =
	     (MUX_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doDwell ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_bytesRemainReq
  assign dp0_wmi_bytesRemainReq$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bytesRemainResp
  assign dp0_wmi_bytesRemainResp$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_doneWithMesg
  assign dp0_wmi_doneWithMesg$D_IN =
	     !MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_dp0_wmi_doWriteReq) &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_lastMesg
  assign dp0_wmi_lastMesg$D_IN = dp0_wmi_thisMesg ;
  assign dp0_wmi_lastMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_lclMesgAddr
  assign dp0_wmi_lclMesgAddr$D_IN = dp0_bml_lclMesgAddr[14:0] ;
  assign dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp0_wmi_lclMetaAddr
  assign dp0_wmi_lclMetaAddr$D_IN = dp0_bml_lclMetaAddr[14:0] ;
  assign dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp0_wmi_mesgBufReady
  assign dp0_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp0_wmi_mesgBusy
  assign dp0_wmi_mesgBusy$D_IN = !MUX_dp0_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp0_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_mesgCount
  assign dp0_wmi_mesgCount$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign dp0_wmi_mesgCount$EN = dp0_wmi_mesgDone_1$whas ;

  // register dp0_wmi_mesgDone
  assign dp0_wmi_mesgDone$D_IN = dp0_wmi_mesgDone_1$whas ;
  assign dp0_wmi_mesgDone$EN = 1'd1 ;

  // register dp0_wmi_mesgMeta
  assign dp0_wmi_mesgMeta$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_mesgStart
  assign dp0_wmi_mesgStart$D_IN = dp0_wmi_mesgStart_1$whas ;
  assign dp0_wmi_mesgStart$EN = 1'd1 ;

  // register dp0_wmi_metaBusy
  assign dp0_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ;

  // register dp0_wmi_p4B
  assign dp0_wmi_p4B$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp0_wmi_p4B$write_1__VAL_2 ;
  assign dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_rdActive
  assign dp0_wmi_rdActive$D_IN =
	     !MUX_dp0_wmi_rdActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_reqCount
  assign dp0_wmi_reqCount$D_IN = dp0_wmi_reqCount + 16'd1 ;
  assign dp0_wmi_reqCount$EN = WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_thisMesg
  assign dp0_wmi_thisMesg$D_IN =
	     { dp0_wmi_mesgCount[7:0],
	       dp0_wmi_wmi_mFlagReg[31:24],
	       dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign dp0_wmi_thisMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_blockReq
  assign dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[28] &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_dhF_countReg
  assign dp0_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_dhF_countReg + 2'd1 :
	       dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // register dp0_wmi_wmi_dhF_levelsValid
  assign dp0_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;
  assign dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;

  // register dp0_wmi_wmi_errorSticky
  assign dp0_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp0_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && !dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     !dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && !dp0_wmi_wmi_dhF$FULL_N ;

  // register dp0_wmi_wmi_mFlagF_countReg
  assign dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       dp0_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  assign dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;
  assign dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;

  // register dp0_wmi_wmi_mFlagReg
  assign dp0_wmi_wmi_mFlagReg$D_IN = dp0_wmi_wmi_mFlagF$D_OUT ;
  assign dp0_wmi_wmi_mFlagReg$EN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp0_wmi_wmi_operateD
  assign dp0_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp0_bml_lbar ;
  assign dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp0_wmi_wmi_peerIsReady
  assign dp0_wmi_wmi_peerIsReady$D_IN = wmiS0_MReset_n ;
  assign dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp0_wmi_wmi_reqF_countReg
  assign dp0_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_reqF_countReg + 2'd1 :
	       dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // register dp0_wmi_wmi_reqF_levelsValid
  assign dp0_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;
  assign dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;

  // register dp0_wmi_wmi_respF_c_r
  assign dp0_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ?
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp0_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr or dp0_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_0$D_IN = dp0_wmi_wmi_respF_q_1;
      default: dp0_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_sFlagReg
  assign dp0_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h72509[7:0], y_avValue__h72489[23:0] } ;
  assign dp0_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_wmi_statusR
  assign dp0_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp0_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp0_wmi_wmi_trafficSticky
  assign dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp0_wmi_wrActive
  assign dp0_wmi_wrActive$D_IN =
	     !MUX_dp0_wmi_wrActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wrFinalize
  assign dp0_wmi_wrFinalize$D_IN = MUX_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wrtCount
  assign dp0_wmi_wrtCount$D_IN = dp0_wmi_wrtCount + 16'd1 ;
  assign dp0_wmi_wrtCount$EN = WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wti_nowReq
  assign dp0_wti_nowReq$D_IN =
	     itc0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc0_wti_nowReq ;
  assign dp0_wti_nowReq$EN = 1'd1 ;

  // register dp1_bml_crdBuf_modulus
  assign dp1_bml_crdBuf_modulus$D_IN = dp1_bml_lclNumBufs - 16'd1 ;
  assign dp1_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_crdBuf_value
  assign dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp1_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabAvail
  assign dp1_bml_fabAvail$D_IN = dp1_bml_fabAvail_1$whas ;
  assign dp1_bml_fabAvail$EN = 1'd1 ;

  // register dp1_bml_fabBuf_modulus
  assign dp1_bml_fabBuf_modulus$D_IN = dp1_bml_fabNumBufs - 16'd1 ;
  assign dp1_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBuf_value
  assign dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp1_bml_fabBuf_value$EN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBufsAvail
  assign dp1_bml_fabBufsAvail$D_IN =
	     MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabDone
  assign dp1_bml_fabDone$D_IN = dp1_bml_fabDone_1$whas ;
  assign dp1_bml_fabDone$EN = 1'd1 ;

  // register dp1_bml_fabFlowAddr
  always@(MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_bml_initAccumulators or
	  dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_dp1_bml_crdAdvance or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp1_bml_initAccumulators:
	  dp1_bml_fabFlowAddr$D_IN = dp1_bml_fabFlowBase;
      WILL_FIRE_RL_dp1_bml_crdAdvance:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // register dp1_bml_fabFlowBase
  assign dp1_bml_fabFlowBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp1_bml_fabFlowSize
  assign dp1_bml_fabFlowSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp1_bml_fabMesgAddr
  assign dp1_bml_fabMesgAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       dp1_bml_fabMesgBase ;
  assign dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMesgBase
  assign dp1_bml_fabMesgBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp1_bml_fabMesgSize
  assign dp1_bml_fabMesgSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp1_bml_fabMetaAddr
  assign dp1_bml_fabMetaAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       dp1_bml_fabMetaBase ;
  assign dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMetaBase
  assign dp1_bml_fabMetaBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp1_bml_fabMetaSize
  assign dp1_bml_fabMetaSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp1_bml_fabNumBufs
  assign dp1_bml_fabNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp1_bml_lclBufDone
  assign dp1_bml_lclBufDone$D_IN = dp1_wmi_mesgDone ;
  assign dp1_bml_lclBufDone$EN = 1'd1 ;

  // register dp1_bml_lclBufStart
  assign dp1_bml_lclBufStart$D_IN = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufStart$EN = 1'd1 ;

  // register dp1_bml_lclBuf_modulus
  assign dp1_bml_lclBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBuf_value
  assign dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp1_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_lclAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsAR
  assign dp1_bml_lclBufsAR$D_IN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp1_bml_lclBufsAR$EN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsCF
  assign dp1_bml_lclBufsCF$D_IN =
	     MUX_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp1_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_130_AND_IF_dp1_bml_dpContro_ETC___d4606 ||
	      NOT_dp1_bml_lclBufDone_130_197_AND_IF_dp1_bml__ETC___d4210) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclCredit
  assign dp1_bml_lclCredit$D_IN =
	     MUX_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclDones
  assign dp1_bml_lclDones$D_IN = dp1_bml_lclDones + 16'd1 ;
  assign dp1_bml_lclDones$EN = CAN_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclMesgAddr
  assign dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclMetaAddr
  assign dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclNumBufs
  assign dp1_bml_lclNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp1_bml_lclStarts
  assign dp1_bml_lclStarts$D_IN = dp1_bml_lclStarts + 16'd1 ;
  assign dp1_bml_lclStarts$EN = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // register dp1_bml_mesgBase
  assign dp1_bml_mesgBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp1_bml_mesgSize
  assign dp1_bml_mesgSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp1_bml_metaBase
  assign dp1_bml_metaBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp1_bml_metaSize
  assign dp1_bml_metaSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp1_bml_remBuf_modulus
  assign dp1_bml_remBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remBuf_value
  assign dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_remBuf_value$write_1__VAL_3 ;
  assign dp1_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remDone
  assign dp1_bml_remDone$D_IN = dp1_tlp_remDone ;
  assign dp1_bml_remDone$EN = 1'd1 ;

  // register dp1_bml_remDones
  assign dp1_bml_remDones$D_IN = dp1_bml_remDones + 16'd1 ;
  assign dp1_bml_remDones$EN = CAN_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMesgAddr
  assign dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMetaAddr
  assign dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remStart
  assign dp1_bml_remStart$D_IN = dp1_tlp_remStart ;
  assign dp1_bml_remStart$EN = 1'd1 ;

  // register dp1_bml_remStarts
  assign dp1_bml_remStarts$D_IN = dp1_bml_remStarts + 16'd1 ;
  assign dp1_bml_remStarts$EN = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // register dp1_bram_serverAdapterA_1_cnt
  assign dp1_bram_serverAdapterA_1_cnt$D_IN =
	     dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF_dp1__ETC___d2342 ;
  assign dp1_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_1_s1
  assign dp1_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_2_cnt
  assign dp1_bram_serverAdapterA_2_cnt$D_IN =
	     dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF_dp1__ETC___d2460 ;
  assign dp1_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_2_s1
  assign dp1_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_3_cnt
  assign dp1_bram_serverAdapterA_3_cnt$D_IN =
	     dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF_dp1__ETC___d2578 ;
  assign dp1_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_3_s1
  assign dp1_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_cnt
  assign dp1_bram_serverAdapterA_cnt$D_IN =
	     dp1_bram_serverAdapterA_cnt_218_PLUS_IF_dp1_br_ETC___d2224 ;
  assign dp1_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_s1
  assign dp1_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_s1_1$wget[1],
	       dp1_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_1_cnt
  assign dp1_bram_serverAdapterB_1_cnt$D_IN =
	     dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF_dp1__ETC___d2401 ;
  assign dp1_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_1_s1
  assign dp1_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_2_cnt
  assign dp1_bram_serverAdapterB_2_cnt$D_IN =
	     dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF_dp1__ETC___d2519 ;
  assign dp1_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_2_s1
  assign dp1_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_3_cnt
  assign dp1_bram_serverAdapterB_3_cnt$D_IN =
	     dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF_dp1__ETC___d2637 ;
  assign dp1_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_3_s1
  assign dp1_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_cnt
  assign dp1_bram_serverAdapterB_cnt$D_IN =
	     dp1_bram_serverAdapterB_cnt_277_PLUS_IF_dp1_br_ETC___d2283 ;
  assign dp1_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_s1
  assign dp1_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_s1_1$wget[1],
	       dp1_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp1_dpControl
  assign dp1_dpControl$D_IN = dp1_wci_reqF$D_OUT[3:0] ;
  assign dp1_dpControl$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp1_tlp_creditReady
  assign dp1_tlp_creditReady$D_IN = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_creditReady$EN = 1'd1 ;

  // register dp1_tlp_debugBdata
  assign dp1_tlp_debugBdata$D_IN =
	     { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp1_tlp_debugBdata$EN = CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta or
	  dp1_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	dp1_tlp_dmaDoTailEvent$D_IN = dp1_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent: dp1_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	dp1_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	dp1_tlp_dmaDoTailEvent$D_IN = dp1_tlp_dmaPullRemainDWLen == 10'd1;
    default: dp1_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;

  // register dp1_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h118917 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h118917[11:2];
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp1_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;

  // register dp1_tlp_dmaPullRemainDWSub
  assign dp1_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ?
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign dp1_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;

  // register dp1_tlp_dmaReqTag
  assign dp1_tlp_dmaReqTag$D_IN = dp1_tlp_dmaTag ;
  assign dp1_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ;

  // register dp1_tlp_dmaTag
  assign dp1_tlp_dmaTag$D_IN = dp1_tlp_dmaTag + 5'd1 ;
  assign dp1_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ;

  // register dp1_tlp_doXmtMetaBody
  assign dp1_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_fabFlowAddr
  assign dp1_tlp_fabFlowAddr$D_IN = dp1_bml_fabFlowAddr ;
  assign dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMesgAccu
  always@(MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp1_tlp_fabMesgAddr or
	  WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  dp1_tlp_fabMesgAccu$D_IN = dp1_tlp_fabMesgAddr;
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_fabMesgAccu$D_IN = MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_fabMesgAccu$D_IN = MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3;
      default: dp1_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_fabMesgAddr
  assign dp1_tlp_fabMesgAddr$D_IN = dp1_bml_fabMesgAddr ;
  assign dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMeta
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  MUX_dp1_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta or
	  MUX_dp1_tlp_fabMeta$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_fabMeta$D_IN = MUX_dp1_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	dp1_tlp_fabMeta$D_IN = MUX_dp1_tlp_fabMeta$write_1__VAL_2;
    WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
    WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent:
	dp1_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: dp1_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_fabMetaAddr
  assign dp1_tlp_fabMetaAddr$D_IN = dp1_bml_fabMetaAddr ;
  assign dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_farBufReady
  assign dp1_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_farBufReady$EN = 1'd1 ;

  // register dp1_tlp_flowDiagCount
  assign dp1_tlp_flowDiagCount$D_IN = dp1_tlp_flowDiagCount + 32'd1 ;
  assign dp1_tlp_flowDiagCount$EN = CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // register dp1_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_gotResponseHeader$D_IN = dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_gotResponseHeader$D_IN =
	      !dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp1_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_inIgnorePkt
  assign dp1_tlp_inIgnorePkt$D_IN =
	     dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
	     dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv && dp1_tlp_inF$D_OUT[152] ;

  // register dp1_tlp_maxPayloadSize
  assign dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp1_tlp_maxReadReqSize
  assign dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp1_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_mesgComplReceived$D_IN =
	      MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_mesgComplReceived$D_IN =
	      MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	  dp1_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp1_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;

  // register dp1_tlp_mesgLengthRemainPull
  assign dp1_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ?
	       MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp1_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_mesgLengthRemainPush
  assign dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_nearBufReady
  assign dp1_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register dp1_tlp_outDwRemain
  assign dp1_tlp_outDwRemain$D_IN =
	     MUX_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;

  // register dp1_tlp_postSeqDwell
  assign dp1_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ?
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp1_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_pullTagMatch
  assign dp1_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag &&
	     dp1_tlp_pullTagMatch_1$wget ;
  assign dp1_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp1_tlp_rdRespDwRemain
  assign dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_readHeaderSent
  assign dp1_tlp_readHeaderSent$D_IN =
	     MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ;

  // register dp1_tlp_readNxtDWAddr
  assign dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readRemainDWLen
  assign dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readStarted
  assign dp1_tlp_readStarted$D_IN = MUX_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_500_ULE_4___d3501 ;

  // register dp1_tlp_remDone
  assign dp1_tlp_remDone$D_IN = dp1_tlp_remDone_1$whas ;
  assign dp1_tlp_remDone$EN = 1'd1 ;

  // register dp1_tlp_remMesgAccu
  always@(MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp1_tlp_remMesgAddr or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  dp1_tlp_remMesgAccu$D_IN = dp1_tlp_remMesgAddr;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_remMesgAccu$D_IN = MUX_dp1_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_remMesgAccu$D_IN = MUX_dp1_tlp_remMesgAccu$write_1__VAL_3;
      default: dp1_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ;

  // register dp1_tlp_remMesgAddr
  assign dp1_tlp_remMesgAddr$D_IN = dp1_bml_remMesgAddr ;
  assign dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_remMetaAddr
  assign dp1_tlp_remMetaAddr$D_IN = dp1_bml_remMetaAddr ;
  assign dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_remStart
  assign dp1_tlp_remStart$D_IN = dp1_tlp_remStart_1$whas ;
  assign dp1_tlp_remStart$EN = 1'd1 ;

  // register dp1_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_reqMesgInFlight$D_IN = dp1_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_reqMesgInFlight$D_IN =
	      MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp1_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_reqMetaBodyInFlight
  assign dp1_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  assign dp1_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // register dp1_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: dp1_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // register dp1_tlp_srcMesgAccu
  assign dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_tlpMetaSent
  assign dp1_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;

  // register dp1_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_dp1_tlp_tlpRcv or
	  dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_tlpRcv:
	  dp1_tlp_tlpRcvBusy$D_IN = !dp1_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_tlpRcvBusy$D_IN = dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_tlpRcvBusy$D_IN =
	      !dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134;
      default: dp1_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;

  // register dp1_tlp_tlpXmtBusy
  always@(MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  dp1_tlp_mRespF$D_OUT or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1:
	  dp1_tlp_tlpXmtBusy$D_IN = dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp1_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo15 ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__854_BITS_71_TO_62_944_ULE_1___d4513 ||
	     (WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody) &&
	     dp1_tlp_outDwRemain_970_ULE_4___d4824 ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_writeDWAddr
  assign dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_writeLastBE
  assign dp1_tlp_writeLastBE$D_IN = dp1_tlp_mReqF$D_OUT[35:32] ;
  assign dp1_tlp_writeLastBE$EN = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_writeRemainDWLen
  assign dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_xmtMetaInFlight
  assign dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  dp1_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_xmtMetaOK$D_IN = dp1_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead: dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_4:
	dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    default: dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_970_ULE_4___d4824 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_wci_cEdge
  assign dp1_wci_cEdge$D_IN = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_cEdge$EN = WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_cState
  assign dp1_wci_cState$D_IN = dp1_wci_nState ;
  assign dp1_wci_cState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge ;

  // register dp1_wci_ctlAckReg
  assign dp1_wci_ctlAckReg$D_IN = dp1_wci_ctlAckReg_1$whas ;
  assign dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register dp1_wci_ctlOpActive
  assign dp1_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_illegalEdge
  assign dp1_wci_illegalEdge$D_IN =
	     !MUX_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ||
	     MUX_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register dp1_wci_nState
  always@(dp1_wci_reqF$D_OUT)
  begin
    case (dp1_wci_reqF$D_OUT[36:34])
      3'd0: dp1_wci_nState$D_IN = 3'd1;
      3'd1: dp1_wci_nState$D_IN = 3'd2;
      3'd2: dp1_wci_nState$D_IN = 3'd3;
      default: dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp1_wci_nState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState == 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp1_wci_cState == 3'd1 || dp1_wci_cState == 3'd3) ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState == 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp1_wci_cState == 3'd3 || dp1_wci_cState == 3'd2 ||
	       dp1_wci_cState == 3'd1)) ;

  // register dp1_wci_reqF_countReg
  assign dp1_wci_reqF_countReg$D_IN =
	     (dp1_wci_wciReq$wget[59:57] != 3'd0) ?
	       dp1_wci_reqF_countReg + 2'd1 :
	       dp1_wci_reqF_countReg - 2'd1 ;
  assign dp1_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // register dp1_wci_respF_c_r
  assign dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ?
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_0
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr or dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_1;
      MUX_dp1_wci_respF_q_0$write_1__SEL_2:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_0$D_IN = dp1_wci_respF_q_1;
      default: dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_1
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_1$write_1__VAL_1;
      MUX_dp1_wci_respF_q_1$write_1__SEL_2:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_sFlagReg
  assign dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp1_wci_sFlagReg$EN = 1'd1 ;

  // register dp1_wci_sThreadBusy_d
  assign dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp1_wmi_addr
  assign dp1_wmi_addr$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_addr$write_1__VAL_1 :
	       dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp1_wmi_addr$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bufDwell
  assign dp1_wmi_bufDwell$D_IN =
	     (MUX_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doDwell ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_bytesRemainReq
  assign dp1_wmi_bytesRemainReq$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bytesRemainResp
  assign dp1_wmi_bytesRemainResp$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_doneWithMesg
  assign dp1_wmi_doneWithMesg$D_IN =
	     !MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_dp1_wmi_doWriteReq) &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_lastMesg
  assign dp1_wmi_lastMesg$D_IN = dp1_wmi_thisMesg ;
  assign dp1_wmi_lastMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_lclMesgAddr
  assign dp1_wmi_lclMesgAddr$D_IN = dp1_bml_lclMesgAddr[14:0] ;
  assign dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp1_wmi_lclMetaAddr
  assign dp1_wmi_lclMetaAddr$D_IN = dp1_bml_lclMetaAddr[14:0] ;
  assign dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp1_wmi_mesgBufReady
  assign dp1_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp1_wmi_mesgBusy
  assign dp1_wmi_mesgBusy$D_IN = !MUX_dp1_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp1_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_mesgCount
  assign dp1_wmi_mesgCount$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign dp1_wmi_mesgCount$EN = dp1_wmi_mesgDone_1$whas ;

  // register dp1_wmi_mesgDone
  assign dp1_wmi_mesgDone$D_IN = dp1_wmi_mesgDone_1$whas ;
  assign dp1_wmi_mesgDone$EN = 1'd1 ;

  // register dp1_wmi_mesgMeta
  assign dp1_wmi_mesgMeta$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_mesgStart
  assign dp1_wmi_mesgStart$D_IN = dp1_wmi_mesgStart_1$whas ;
  assign dp1_wmi_mesgStart$EN = 1'd1 ;

  // register dp1_wmi_metaBusy
  assign dp1_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ;

  // register dp1_wmi_p4B
  assign dp1_wmi_p4B$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp1_wmi_p4B$write_1__VAL_2 ;
  assign dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_rdActive
  assign dp1_wmi_rdActive$D_IN =
	     !MUX_dp1_wmi_rdActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_reqCount
  assign dp1_wmi_reqCount$D_IN = dp1_wmi_reqCount + 16'd1 ;
  assign dp1_wmi_reqCount$EN = WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_thisMesg
  assign dp1_wmi_thisMesg$D_IN =
	     { dp1_wmi_mesgCount[7:0],
	       dp1_wmi_wmi_mFlagReg[31:24],
	       dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign dp1_wmi_thisMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_blockReq
  assign dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[28] &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_dhF_countReg
  assign dp1_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_dhF_countReg + 2'd1 :
	       dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // register dp1_wmi_wmi_dhF_levelsValid
  assign dp1_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;
  assign dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;

  // register dp1_wmi_wmi_errorSticky
  assign dp1_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp1_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && !dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     !dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && !dp1_wmi_wmi_dhF$FULL_N ;

  // register dp1_wmi_wmi_mFlagF_countReg
  assign dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       dp1_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  assign dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;
  assign dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;

  // register dp1_wmi_wmi_mFlagReg
  assign dp1_wmi_wmi_mFlagReg$D_IN = dp1_wmi_wmi_mFlagF$D_OUT ;
  assign dp1_wmi_wmi_mFlagReg$EN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp1_wmi_wmi_operateD
  assign dp1_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp1_bml_lbar ;
  assign dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp1_wmi_wmi_peerIsReady
  assign dp1_wmi_wmi_peerIsReady$D_IN = wmiS1_MReset_n ;
  assign dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp1_wmi_wmi_reqF_countReg
  assign dp1_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_reqF_countReg + 2'd1 :
	       dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // register dp1_wmi_wmi_reqF_levelsValid
  assign dp1_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;
  assign dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;

  // register dp1_wmi_wmi_respF_c_r
  assign dp1_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ?
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp1_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr or dp1_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_0$D_IN = dp1_wmi_wmi_respF_q_1;
      default: dp1_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_sFlagReg
  assign dp1_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h151572[7:0], y_avValue__h151552[23:0] } ;
  assign dp1_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_wmi_statusR
  assign dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp1_wmi_wmi_trafficSticky
  assign dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp1_wmi_wrActive
  assign dp1_wmi_wrActive$D_IN =
	     !MUX_dp1_wmi_wrActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wrFinalize
  assign dp1_wmi_wrFinalize$D_IN = MUX_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wrtCount
  assign dp1_wmi_wrtCount$D_IN = dp1_wmi_wrtCount + 16'd1 ;
  assign dp1_wmi_wrtCount$EN = WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wti_nowReq
  assign dp1_wti_nowReq$D_IN =
	     itc1_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc1_wti_nowReq ;
  assign dp1_wti_nowReq$EN = 1'd1 ;

  // register itc0_wti_nowReq
  assign itc0_wti_nowReq$D_IN = { 3'd1, itc0_now$dD_OUT } ;
  assign itc0_wti_nowReq$EN = 1'd1 ;

  // register itc0_wti_sThreadBusy_d
  assign itc0_wti_sThreadBusy_d$D_IN = dp0_wti_isReset$VAL ;
  assign itc0_wti_sThreadBusy_d$EN = 1'd1 ;

  // register itc1_wti_nowReq
  assign itc1_wti_nowReq$D_IN = { 3'd1, itc1_now$dD_OUT } ;
  assign itc1_wti_nowReq$EN = 1'd1 ;

  // register itc1_wti_sThreadBusy_d
  assign itc1_wti_sThreadBusy_d$D_IN = dp1_wti_isReset$VAL ;
  assign itc1_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign cp$server_request_put = sm0$c0_request_get ;
  assign cp$switch_x = switch_x ;
  assign cp$wci_Vm_0_SData = wci_m_0_SData ;
  assign cp$wci_Vm_0_SFlag = wci_m_0_SFlag ;
  assign cp$wci_Vm_0_SResp = wci_m_0_SResp ;
  assign cp$wci_Vm_10_SData = wci_m_10_SData ;
  assign cp$wci_Vm_10_SFlag = wci_m_10_SFlag ;
  assign cp$wci_Vm_10_SResp = wci_m_10_SResp ;
  assign cp$wci_Vm_11_SData = wci_m_11_SData ;
  assign cp$wci_Vm_11_SFlag = wci_m_11_SFlag ;
  assign cp$wci_Vm_11_SResp = wci_m_11_SResp ;
  assign cp$wci_Vm_12_SData = wci_m_12_SData ;
  assign cp$wci_Vm_12_SFlag = wci_m_12_SFlag ;
  assign cp$wci_Vm_12_SResp = wci_m_12_SResp ;
  assign cp$wci_Vm_13_SData = dp0_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_13_SFlag = { 1'd1, dp0_wci_sFlagReg } ;
  assign cp$wci_Vm_13_SResp = dp0_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_14_SData = dp1_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_14_SFlag = { 1'd1, dp1_wci_sFlagReg } ;
  assign cp$wci_Vm_14_SResp = dp1_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_1_SData = wci_m_1_SData ;
  assign cp$wci_Vm_1_SFlag = wci_m_1_SFlag ;
  assign cp$wci_Vm_1_SResp = wci_m_1_SResp ;
  assign cp$wci_Vm_2_SData = wci_m_2_SData ;
  assign cp$wci_Vm_2_SFlag = wci_m_2_SFlag ;
  assign cp$wci_Vm_2_SResp = wci_m_2_SResp ;
  assign cp$wci_Vm_3_SData = wci_m_3_SData ;
  assign cp$wci_Vm_3_SFlag = wci_m_3_SFlag ;
  assign cp$wci_Vm_3_SResp = wci_m_3_SResp ;
  assign cp$wci_Vm_4_SData = wci_m_4_SData ;
  assign cp$wci_Vm_4_SFlag = wci_m_4_SFlag ;
  assign cp$wci_Vm_4_SResp = wci_m_4_SResp ;
  assign cp$wci_Vm_5_SData = wci_m_5_SData ;
  assign cp$wci_Vm_5_SFlag = wci_m_5_SFlag ;
  assign cp$wci_Vm_5_SResp = wci_m_5_SResp ;
  assign cp$wci_Vm_6_SData = wci_m_6_SData ;
  assign cp$wci_Vm_6_SFlag = wci_m_6_SFlag ;
  assign cp$wci_Vm_6_SResp = wci_m_6_SResp ;
  assign cp$wci_Vm_7_SData = wci_m_7_SData ;
  assign cp$wci_Vm_7_SFlag = wci_m_7_SFlag ;
  assign cp$wci_Vm_7_SResp = wci_m_7_SResp ;
  assign cp$wci_Vm_8_SData = wci_m_8_SData ;
  assign cp$wci_Vm_8_SFlag = wci_m_8_SFlag ;
  assign cp$wci_Vm_8_SResp = wci_m_8_SResp ;
  assign cp$wci_Vm_9_SData = wci_m_9_SData ;
  assign cp$wci_Vm_9_SFlag = wci_m_9_SFlag ;
  assign cp$wci_Vm_9_SResp = wci_m_9_SResp ;
  assign cp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest ;
  assign cp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse ;
  assign cp$wci_Vm_0_SThreadBusy = wci_m_0_SThreadBusy ;
  assign cp$wci_Vm_1_SThreadBusy = wci_m_1_SThreadBusy ;
  assign cp$wci_Vm_2_SThreadBusy = wci_m_2_SThreadBusy ;
  assign cp$wci_Vm_3_SThreadBusy = wci_m_3_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy = wci_m_4_SThreadBusy ;
  assign cp$wci_Vm_5_SThreadBusy = wci_m_5_SThreadBusy ;
  assign cp$wci_Vm_6_SThreadBusy = wci_m_6_SThreadBusy ;
  assign cp$wci_Vm_7_SThreadBusy = wci_m_7_SThreadBusy ;
  assign cp$wci_Vm_8_SThreadBusy = wci_m_8_SThreadBusy ;
  assign cp$wci_Vm_9_SThreadBusy = wci_m_9_SThreadBusy ;
  assign cp$wci_Vm_10_SThreadBusy = wci_m_10_SThreadBusy ;
  assign cp$wci_Vm_11_SThreadBusy = wci_m_11_SThreadBusy ;
  assign cp$wci_Vm_12_SThreadBusy = wci_m_12_SThreadBusy ;
  assign cp$wci_Vm_13_SThreadBusy = CAN_FIRE_RL_stbConnect ;
  assign cp$wci_Vm_14_SThreadBusy = CAN_FIRE_RL_stbConnect_1 ;

  // submodule dp0_bram_memory
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_4;
      default: dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory$b_put_1__SEL_1:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory$a_put_1__SEL_2 || WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$DIA = 32'd0;
      default: dp0_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  x3__h70893 or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize: dp0_bram_memory$DIB = x3__h70893;
      MUX_dp0_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory$DIB = 32'd0;
      default: dp0_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory$WEA =
	     !MUX_dp0_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$WEB =
	     !MUX_dp0_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_1
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_4;
      default: dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_1$b_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_1$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory_1$a_put_3__VAL_3;
      MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$DIA = 32'd0;
      default: dp0_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  mesgMeta_opcode__h70933 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$DIB = mesgMeta_opcode__h70933;
      MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_1$DIB = 32'd0;
      default: dp0_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_1$WEA =
	     !MUX_dp0_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$WEB =
	     !MUX_dp0_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_2
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_4;
      default: dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_2$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory_2$a_put_3__VAL_3;
      MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$DIA = 32'd0;
      default: dp0_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$DIB = dp0_wmi_nowW$wget[63:32];
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_2$DIB = 32'd0;
      default: dp0_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_2$WEA =
	     !MUX_dp0_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$WEB =
	     !MUX_dp0_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_3
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_3$a_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_4;
      default: dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$DIA = 32'd0;
      default: dp0_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$DIB = dp0_wmi_nowW$wget[31:0];
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_3$DIB = 32'd0;
      default: dp0_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_3$WEA =
	     !MUX_dp0_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$WEB =
	     !MUX_dp0_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  assign dp0_bram_serverAdapterA_1_outDataCore$D_IN = dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  assign dp0_bram_serverAdapterA_2_outDataCore$D_IN = dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  assign dp0_bram_serverAdapterA_3_outDataCore$D_IN = dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_outDataCore
  assign dp0_bram_serverAdapterA_outDataCore$D_IN = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  assign dp0_bram_serverAdapterB_1_outDataCore$D_IN = dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  assign dp0_bram_serverAdapterB_2_outDataCore$D_IN = dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  assign dp0_bram_serverAdapterB_3_outDataCore$D_IN = dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_outDataCore
  assign dp0_bram_serverAdapterB_outDataCore$D_IN = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp0_tlp_inF
  assign dp0_tlp_inF$D_IN = sm1$c0_request_get ;
  assign dp0_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;
  assign dp0_tlp_inF$CLR = 1'b0 ;

  // submodule dp0_tlp_mReqF
  always@(MUX_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_5 or
	  MUX_dp0_tlp_mReqF$enq_1__SEL_6 or MUX_dp0_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_mReqF$enq_1__SEL_1:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_5;
      MUX_dp0_tlp_mReqF$enq_1__SEL_6:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_6;
      default: dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__96_BIT_152_043_AND_NOT_dp0__ETC___d1068 ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_314_ULE_4___d1315 ||
	     WILL_FIRE_RL_dp0_tlp_writeData ||
	     WILL_FIRE_RL_dp0_tlp_writeReq ;
  assign dp0_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp0_tlp_mRespF
  assign dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp0_tlp_mRespF$enq_1__VAL_2 ;
  assign dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ;
  assign dp0_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp0_tlp_outF
  always@(WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader or
	  MUX_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead or
	  MUX_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody or
	  MUX_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  MUX_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Header or
	  MUX_dp0_tlp_outF$enq_1__VAL_6 or
	  MUX_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_dp0_tlp_outF$enq_1__VAL_7 or
	  MUX_dp0_tlp_outF$enq_1__SEL_8 or MUX_dp0_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Header:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_6;
      MUX_dp0_tlp_tlpXmtBusy$write_1__PSEL_3:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_7;
      MUX_dp0_tlp_outF$enq_1__SEL_8:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_8;
      default: dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign dp0_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dp0_tlp_outF$CLR = 1'b0 ;

  // submodule dp0_tlp_readReq
  assign dp0_tlp_readReq$D_IN = dp0_tlp_mReqF$D_OUT[59:0] ;
  assign dp0_tlp_readReq$ENQ = CAN_FIRE_RL_dp0_tlp_read_FirstReq ;
  assign dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp0_tlp_readReq$CLR = 1'b0 ;

  // submodule dp0_wci_reqF
  assign dp0_wci_reqF$D_IN = dp0_wci_wciReq$wget ;
  assign dp0_wci_reqF$ENQ = CAN_FIRE_RL_dp0_wci_reqF_enq ;
  assign dp0_wci_reqF$DEQ = dp0_wci_reqF_r_deq$whas ;
  assign dp0_wci_reqF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_dhF
  assign dp0_wmi_wmi_dhF$D_IN = dp0_wmi_wmi_wmiDh$wget ;
  assign dp0_wmi_wmi_dhF$ENQ =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_mFlagF
  assign dp0_wmi_wmi_mFlagF$D_IN = wmiS0_arg_mFlag ;
  assign dp0_wmi_wmi_mFlagF$ENQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_reqF
  assign dp0_wmi_wmi_reqF$D_IN = dp0_wmi_wmi_wmiReq$wget ;
  assign dp0_wmi_wmi_reqF$ENQ =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule dp1_bram_memory
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_4;
      default: dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory$b_put_1__SEL_1:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory$a_put_1__SEL_2 || WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$DIA = 32'd0;
      default: dp1_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  x3__h149956 or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize: dp1_bram_memory$DIB = x3__h149956;
      MUX_dp1_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory$DIB = 32'd0;
      default: dp1_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory$WEA =
	     !MUX_dp1_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$WEB =
	     !MUX_dp1_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_1
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_4;
      default: dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_1$b_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_1$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory_1$a_put_3__VAL_3;
      MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$DIA = 32'd0;
      default: dp1_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  mesgMeta_opcode__h149996 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$DIB = mesgMeta_opcode__h149996;
      MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_1$DIB = 32'd0;
      default: dp1_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_1$WEA =
	     !MUX_dp1_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$WEB =
	     !MUX_dp1_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_2
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_3__SEL_3 or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_2$a_put_3__SEL_3:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_4;
      default: dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_2$a_put_3__SEL_3 or
	  MUX_dp1_bram_memory_2$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_2$a_put_3__SEL_3:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory_2$a_put_3__VAL_3;
      MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$DIA = 32'd0;
      default: dp1_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$DIB = dp1_wmi_nowW$wget[63:32];
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_2$DIB = 32'd0;
      default: dp1_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_2$WEA =
	     !MUX_dp1_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$WEB =
	     !MUX_dp1_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_3
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_3$a_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_4;
      default: dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$DIA = 32'd0;
      default: dp1_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$DIB = dp1_wmi_nowW$wget[31:0];
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_3$DIB = 32'd0;
      default: dp1_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_3$WEA =
	     !MUX_dp1_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$WEB =
	     !MUX_dp1_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  assign dp1_bram_serverAdapterA_1_outDataCore$D_IN = dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  assign dp1_bram_serverAdapterA_2_outDataCore$D_IN = dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  assign dp1_bram_serverAdapterA_3_outDataCore$D_IN = dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_outDataCore
  assign dp1_bram_serverAdapterA_outDataCore$D_IN = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  assign dp1_bram_serverAdapterB_1_outDataCore$D_IN = dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  assign dp1_bram_serverAdapterB_2_outDataCore$D_IN = dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  assign dp1_bram_serverAdapterB_3_outDataCore$D_IN = dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_outDataCore
  assign dp1_bram_serverAdapterB_outDataCore$D_IN = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp1_tlp_inF
  assign dp1_tlp_inF$D_IN = sm2$c0_request_get ;
  assign dp1_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign dp1_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;
  assign dp1_tlp_inF$CLR = 1'b0 ;

  // submodule dp1_tlp_mReqF
  always@(MUX_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_5 or
	  MUX_dp1_tlp_mReqF$enq_1__SEL_6 or MUX_dp1_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_mReqF$enq_1__SEL_1:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_5;
      MUX_dp1_tlp_mReqF$enq_1__SEL_6:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_6;
      default: dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_dp1_ETC___d3254 ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  assign dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_500_ULE_4___d3501 ||
	     WILL_FIRE_RL_dp1_tlp_writeData ||
	     WILL_FIRE_RL_dp1_tlp_writeReq ;
  assign dp1_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp1_tlp_mRespF
  assign dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp1_tlp_mRespF$enq_1__VAL_2 ;
  assign dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;
  assign dp1_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp1_tlp_outF
  always@(WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead or
	  MUX_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta or
	  MUX_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_dp1_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_dp1_tlp_dataXmt_Header or
	  MUX_dp1_tlp_outF$enq_1__VAL_6 or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_dp1_tlp_outF$enq_1__VAL_7 or
	  MUX_dp1_tlp_outF$enq_1__SEL_8 or MUX_dp1_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_dp1_tlp_dataXmt_Header:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_6;
      MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_7;
      MUX_dp1_tlp_outF$enq_1__SEL_8:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_8;
      default: dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign dp1_tlp_outF$CLR = 1'b0 ;

  // submodule dp1_tlp_readReq
  assign dp1_tlp_readReq$D_IN = dp1_tlp_mReqF$D_OUT[59:0] ;
  assign dp1_tlp_readReq$ENQ = CAN_FIRE_RL_dp1_tlp_read_FirstReq ;
  assign dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp1_tlp_readReq$CLR = 1'b0 ;

  // submodule dp1_wci_reqF
  assign dp1_wci_reqF$D_IN = dp1_wci_wciReq$wget ;
  assign dp1_wci_reqF$ENQ = CAN_FIRE_RL_dp1_wci_reqF_enq ;
  assign dp1_wci_reqF$DEQ = dp1_wci_reqF_r_deq$whas ;
  assign dp1_wci_reqF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_dhF
  assign dp1_wmi_wmi_dhF$D_IN = dp1_wmi_wmi_wmiDh$wget ;
  assign dp1_wmi_wmi_dhF$ENQ =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_mFlagF
  assign dp1_wmi_wmi_mFlagF$D_IN = wmiS1_arg_mFlag ;
  assign dp1_wmi_wmi_mFlagF$ENQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_reqF
  assign dp1_wmi_wmi_reqF$D_IN = dp1_wmi_wmi_wmiReq$wget ;
  assign dp1_wmi_wmi_reqF$ENQ =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule itc0_now
  assign itc0_now$sD_IN = cp$cpNow ;
  assign itc0_now$sEN = itc0_now$sRDY ;

  // submodule itc1_now
  assign itc1_now$sD_IN = cp$cpNow ;
  assign itc1_now$sEN = itc1_now$sRDY ;

  // submodule sm0
  assign sm0$c0_response_put = cp$server_response_get ;
  assign sm0$c1_response_put = sm1$s_response_get ;
  assign sm0$s_request_put = server_request_put ;
  assign sm0$EN_s_request_put = EN_server_request_put ;
  assign sm0$EN_s_response_get = EN_server_response_get ;
  assign sm0$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign sm0$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse ;
  assign sm0$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm0$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_1 ;

  // submodule sm1
  assign sm1$c0_response_put = dp0_tlp_outF$D_OUT ;
  assign sm1$c1_response_put = sm2$s_response_get ;
  assign sm1$s_request_put = sm0$c1_request_get ;
  assign sm1$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm1$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign sm1$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign sm1$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign sm1$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm1$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_3 ;

  // submodule sm2
  assign sm2$c0_response_put = dp1_tlp_outF$D_OUT ;
  assign sm2$c1_response_put = 153'h0 ;
  assign sm2$s_request_put = sm1$c1_request_get ;
  assign sm2$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm2$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign sm2$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign sm2$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign sm2$EN_c1_request_get = sm2$RDY_c1_request_get ;
  assign sm2$EN_c1_response_put = 1'b0 ;

  // remaining internal signals
  assign IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1190 =
	     (IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167 ||
	      dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552) &&
	     (IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177 ||
	      dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136) &&
	     (IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187 ||
	      dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137) ;
  assign IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3376 =
	     (IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353 ||
	      dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139) &&
	     (IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363 ||
	      dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140) &&
	     (IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373 ||
	      dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141) ;
  assign IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1508 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1513 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1397 =
	     (dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1389 &&
	       CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 ;
  assign IF_dp0_wmi_p4B_806_EQ_0_807_THEN_dp0_bram_serv_ETC___d1820 =
	     (dp0_wmi_p4B == 2'd0) ?
	       (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterB_outData_enqData$whas) &&
	       dp0_bram_serverAdapterB_outData_outData$whas :
	       IF_dp0_wmi_p4B_806_EQ_1_809_THEN_dp0_bram_serv_ETC___d1815 &&
	       CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 ;
  assign IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3694 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3699 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3583 =
	     (dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3575 &&
	       CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 ;
  assign IF_dp1_wmi_p4B_992_EQ_0_993_THEN_dp1_bram_serv_ETC___d4006 =
	     (dp1_wmi_p4B == 2'd0) ?
	       (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterB_outData_enqData$whas) &&
	       dp1_bram_serverAdapterB_outData_outData$whas :
	       IF_dp1_wmi_p4B_992_EQ_1_995_THEN_dp1_bram_serv_ETC___d4001 &&
	       CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 ;
  assign NOT_dp0_bml_lclBufDone_944_011_AND_IF_dp0_bml__ETC___d2024 =
	     !dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 ;
  assign NOT_dp0_tlp_mReqF_first__108_BITS_28_TO_19_285_ETC___d1299 =
	     (dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp0_tlp_mReqF$EMPTY_N) &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 ;
  assign NOT_dp0_wmi_wrActive_724_725_OR_NOT_dp0_wmi_rd_ETC___d1734 =
	     (!dp0_wmi_wrActive || !dp0_wmi_rdActive) &&
	     !dp0_wmi_wrFinalize &&
	     (dp0_wmi_mesgBufReady || dp0_wmi_mesgBusy) ;
  assign NOT_dp1_bml_lclBufDone_130_197_AND_IF_dp1_bml__ETC___d4210 =
	     !dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 ;
  assign NOT_dp1_tlp_mReqF_first__294_BITS_28_TO_19_471_ETC___d3485 =
	     (dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp1_tlp_mReqF$EMPTY_N) &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 ;
  assign NOT_dp1_wmi_wrActive_910_911_OR_NOT_dp1_wmi_rd_ETC___d3920 =
	     (!dp1_wmi_wrActive || !dp1_wmi_rdActive) &&
	     !dp1_wmi_wrFinalize &&
	     (dp1_wmi_mesgBufReady || dp1_wmi_mesgBusy) ;
  assign _dfoo15 =
	     dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign _dfoo5 =
	     dp0_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h10947 =
	     (MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h12477 =
	     (MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h13874 =
	     (MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h3694 =
	     (MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h5093 =
	     (MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h6623 =
	     (MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h8020 =
	     (MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h82792 =
	     (MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h84191 =
	     (MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h85721 =
	     (MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h87118 =
	     (MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h88648 =
	     (MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h90045 =
	     (MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h91575 =
	     (MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h92972 =
	     (MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h9550 =
	     (MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign byteCount__h133795 = x__h133906 - y__h133907 ;
  assign byteCount__h54732 = x__h54843 - y__h54844 ;
  assign dp0_bml_crdBuf_value_902_EQ_dp0_bml_crdBuf_mod_ETC___d5255 =
	     dp0_bml_crdBuf_value == dp0_bml_crdBuf_modulus ;
  assign dp0_bml_fabBuf_value_887_EQ_dp0_bml_fabBuf_mod_ETC___d5256 =
	     dp0_bml_fabBuf_value == dp0_bml_fabBuf_modulus ;
  assign dp0_bml_fabFlowAddr_959_PLUS_dp0_bml_fabFlowSi_ETC___d5130 =
	     dp0_bml_fabFlowAddr + dp0_bml_fabFlowSize ;
  assign dp0_bml_lclBufDone_944_AND_IF_dp0_bml_dpContro_ETC___d4580 =
	     dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 ;
  assign dp0_bml_lclBuf_value_857_EQ_dp0_bml_lclBuf_mod_ETC___d5271 =
	     dp0_bml_lclBuf_value == dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_value_872_EQ_dp0_bml_remBuf_mod_ETC___d4622 =
	     dp0_bml_remBuf_value == dp0_bml_remBuf_modulus ;
  assign dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_dp0_b_ETC___d150 =
	     dp0_bram_serverAdapterA_1_cnt +
	     (dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552 =
	     (dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_dp0_b_ETC___d268 =
	     dp0_bram_serverAdapterA_2_cnt +
	     (dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136 =
	     (dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1468 =
	     (dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1466 ;
  assign dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_dp0_b_ETC___d386 =
	     dp0_bram_serverAdapterA_3_cnt +
	     (dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137 =
	     (dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_6_PLUS_IF_dp0_bram_ETC___d32 =
	     dp0_bram_serverAdapterA_cnt +
	     (dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135 =
	     (dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_outDataCore_notEmpty_O_ETC___d1470 =
	     (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1468 ;
  assign dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1466 =
	     dp0_bram_serverAdapterA_outData_outData$whas &&
	     dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     dp0_tlp_mRespF$FULL_N &&
	     (!dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ||
	      dp0_tlp_readReq$EMPTY_N) ;
  assign dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_dp0_b_ETC___d209 =
	     dp0_bram_serverAdapterB_1_cnt +
	     (dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 =
	     (dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1693 =
	     dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_dp0_b_ETC___d327 =
	     dp0_bram_serverAdapterB_2_cnt +
	     (dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 =
	     (dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_dp0_b_ETC___d445 =
	     dp0_bram_serverAdapterB_3_cnt +
	     (dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 =
	     (dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_5_PLUS_IF_dp0_bram_ETC___d91 =
	     dp0_bram_serverAdapterB_cnt +
	     (dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 =
	     (dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_tlp_dmaPullRemainDWLen_001_ULE_dp0_tlp_dma_ETC___d5132 =
	     dp0_tlp_dmaPullRemainDWLen <= dp0_tlp_dmaPullRemainDWSub ;
  assign dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 =
	     dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_1_ETC___d654 =
	     dp0_dpControl[3:2] == 2'd1 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpRcvBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d1040 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_dmaDoTailEvent &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_mesgComplReceived == dp0_tlp_fabMeta[112:96] ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d877 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33_EQ_2_ETC___d910 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     tagm__h40255 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ_pciD_ETC___d908 ;
  assign dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ_pciD_ETC___d908 =
	     dp0_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     dp0_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     dp0_tlp_inF$D_OUT[50:48] == 3'd0 ;
  assign dp0_tlp_inF_first__96_BIT_152_043_AND_NOT_dp0__ETC___d1068 =
	     dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inF$D_OUT[110] &&
	     !dp0_tlp_inF$D_OUT[125] &&
	     dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inIgnorePkt ;
  assign dp0_tlp_mReqF_RDY_deq__107_AND_IF_dp0_tlp_mReq_ETC___d1123 =
	     dp0_tlp_mReqF$EMPTY_N &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 ;
  assign dp0_tlp_mRespF_first__64_BITS_71_TO_62_54_ULE_1___d4519 =
	     dp0_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp0_tlp_outDwRemain_81_ULE_4___d4818 = dp0_tlp_outDwRemain <= 10'd4 ;
  assign dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 =
	     dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_1__q16 = dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_2__q17 = dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_3__q15 = dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign dp0_tlp_readRemainDWLen_314_ULE_4___d1315 =
	     dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign dp0_tlp_writeDWAddr_PLUS_1__q13 = dp0_tlp_writeDWAddr + 13'd1 ;
  assign dp0_tlp_writeDWAddr_PLUS_2__q14 = dp0_tlp_writeDWAddr + 13'd2 ;
  assign dp0_tlp_writeDWAddr_PLUS_3__q12 = dp0_tlp_writeDWAddr + 13'd3 ;
  assign dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 =
	     dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp0_tlp_writeRemainDWLen_144_ULE_2___d4510 =
	     dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 =
	     dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp0_wmi_dpControl_whas__651_AND_dp0_bram_serve_ETC___d1697 =
	     (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1693 ;
  assign dp1_bml_crdBuf_value_088_EQ_dp1_bml_crdBuf_mod_ETC___d5323 =
	     dp1_bml_crdBuf_value == dp1_bml_crdBuf_modulus ;
  assign dp1_bml_fabBuf_value_073_EQ_dp1_bml_fabBuf_mod_ETC___d5324 =
	     dp1_bml_fabBuf_value == dp1_bml_fabBuf_modulus ;
  assign dp1_bml_fabFlowAddr_145_PLUS_dp1_bml_fabFlowSi_ETC___d5131 =
	     dp1_bml_fabFlowAddr + dp1_bml_fabFlowSize ;
  assign dp1_bml_lclBufDone_130_AND_IF_dp1_bml_dpContro_ETC___d4606 =
	     dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 ;
  assign dp1_bml_lclBuf_value_043_EQ_dp1_bml_lclBuf_mod_ETC___d5339 =
	     dp1_bml_lclBuf_value == dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_value_058_EQ_dp1_bml_remBuf_mod_ETC___d5340 =
	     dp1_bml_remBuf_value == dp1_bml_remBuf_modulus ;
  assign dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF_dp1__ETC___d2342 =
	     dp1_bram_serverAdapterA_1_cnt +
	     (dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139 =
	     (dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF_dp1__ETC___d2460 =
	     dp1_bram_serverAdapterA_2_cnt +
	     (dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140 =
	     (dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3654 =
	     (dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3652 ;
  assign dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF_dp1__ETC___d2578 =
	     dp1_bram_serverAdapterA_3_cnt +
	     (dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141 =
	     (dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_218_PLUS_IF_dp1_br_ETC___d2224 =
	     dp1_bram_serverAdapterA_cnt +
	     (dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138 =
	     (dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3656 =
	     (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3654 ;
  assign dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3652 =
	     dp1_bram_serverAdapterA_outData_outData$whas &&
	     dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     dp1_tlp_mRespF$FULL_N &&
	     (!dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ||
	      dp1_tlp_readReq$EMPTY_N) ;
  assign dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF_dp1__ETC___d2401 =
	     dp1_bram_serverAdapterB_1_cnt +
	     (dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 =
	     (dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3879 =
	     dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF_dp1__ETC___d2519 =
	     dp1_bram_serverAdapterB_2_cnt +
	     (dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 =
	     (dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF_dp1__ETC___d2637 =
	     dp1_bram_serverAdapterB_3_cnt +
	     (dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 =
	     (dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_277_PLUS_IF_dp1_br_ETC___d2283 =
	     dp1_bram_serverAdapterB_cnt +
	     (dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 =
	     (dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_tlp_dmaPullRemainDWLen_187_ULE_dp1_tlp_dma_ETC___d5133 =
	     dp1_tlp_dmaPullRemainDWLen <= dp1_tlp_dmaPullRemainDWSub ;
  assign dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 =
	     dp1_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d2845 =
	     dp1_dpControl[3:2] == 2'd1 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpRcvBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3065 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady ;
  assign dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3096 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_tlpRcvBusy &&
	     tagm__h119318 == dp1_tlp_inF$D_OUT[47:40] &&
	     dp1_tlp_inF_first__084_BITS_63_TO_56_087_EQ_pc_ETC___d3094 ;
  assign dp1_tlp_dpControl_wget__823_BITS_3_TO_2_824_EQ_ETC___d3226 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_dmaDoTailEvent &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_mesgComplReceived == dp1_tlp_fabMeta[112:96] ;
  assign dp1_tlp_inF_first__084_BITS_63_TO_56_087_EQ_pc_ETC___d3094 =
	     dp1_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     dp1_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     dp1_tlp_inF$D_OUT[50:48] == 3'd1 ;
  assign dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_dp1_ETC___d3254 =
	     dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inF$D_OUT[110] &&
	     !dp1_tlp_inF$D_OUT[125] &&
	     dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inIgnorePkt ;
  assign dp1_tlp_mReqF_RDY_deq__293_AND_IF_dp1_tlp_mReq_ETC___d3309 =
	     dp1_tlp_mReqF$EMPTY_N &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 ;
  assign dp1_tlp_mRespF_first__854_BITS_71_TO_62_944_ULE_1___d4513 =
	     dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp1_tlp_outDwRemain_970_ULE_4___d4824 =
	     dp1_tlp_outDwRemain <= 10'd4 ;
  assign dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 =
	     dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_1__q24 = dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_2__q25 = dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_3__q23 = dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign dp1_tlp_readRemainDWLen_500_ULE_4___d3501 =
	     dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign dp1_tlp_writeDWAddr_PLUS_1__q21 = dp1_tlp_writeDWAddr + 13'd1 ;
  assign dp1_tlp_writeDWAddr_PLUS_2__q22 = dp1_tlp_writeDWAddr + 13'd2 ;
  assign dp1_tlp_writeDWAddr_PLUS_3__q20 = dp1_tlp_writeDWAddr + 13'd3 ;
  assign dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 =
	     dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp1_tlp_writeRemainDWLen_330_ULE_2___d4520 =
	     dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 =
	     dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp1_wmi_dpControl_whas__837_AND_dp1_bram_serve_ETC___d3883 =
	     (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3879 ;
  assign idx__h124616 = 2'd0 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h126839 = 2'd1 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h128135 = 2'd2 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h129431 = 2'd3 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131679 = 2'd0 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132147 = 2'd1 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132520 = 2'd2 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132893 = 2'd3 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h45553 = 2'd0 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h47776 = 2'd1 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h49072 = 2'd2 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h50368 = 2'd3 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h52616 = 2'd0 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53084 = 2'd1 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53457 = 2'd2 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53830 = 2'd3 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign lastBE__h106515 =
	     dp1_tlp_mRespF_first__854_BITS_71_TO_62_944_ULE_1___d4513 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h119219 =
	     (thisRequestLength__h118917[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lastBE__h27444 =
	     dp0_tlp_mRespF_first__64_BITS_71_TO_62_54_ULE_1___d4519 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h40156 =
	     (thisRequestLength__h39854[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h133794 =
	     { dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h133793 } ;
  assign lowAddr__h54731 =
	     { dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h54730 } ;
  assign mesgMeta_opcode__h149996 =
	     { 24'h800000, dp1_wmi_wmi_mFlagReg[31:24] } ;
  assign mesgMeta_opcode__h70933 =
	     { 24'h800000, dp0_wmi_wmi_mFlagReg[31:24] } ;
  assign nowLS__h102873 =
	     { dp1_tlp_mRespF$D_OUT[39:32],
	       dp1_tlp_mRespF$D_OUT[47:40],
	       dp1_tlp_mRespF$D_OUT[55:48],
	       dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h115707 =
	     { dp1_tlp_inF$D_OUT[39:32],
	       dp1_tlp_inF$D_OUT[47:40],
	       dp1_tlp_inF$D_OUT[55:48],
	       dp1_tlp_inF$D_OUT[63:56] } ;
  assign nowLS__h23802 =
	     { dp0_tlp_mRespF$D_OUT[39:32],
	       dp0_tlp_mRespF$D_OUT[47:40],
	       dp0_tlp_mRespF$D_OUT[55:48],
	       dp0_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h36644 =
	     { dp0_tlp_inF$D_OUT[39:32],
	       dp0_tlp_inF$D_OUT[47:40],
	       dp0_tlp_inF$D_OUT[55:48],
	       dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h102872 =
	     { dp1_tlp_mRespF$D_OUT[71:64],
	       dp1_tlp_mRespF$D_OUT[79:72],
	       dp1_tlp_mRespF$D_OUT[87:80],
	       dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h115706 =
	     { dp1_tlp_inF$D_OUT[71:64],
	       dp1_tlp_inF$D_OUT[79:72],
	       dp1_tlp_inF$D_OUT[87:80],
	       dp1_tlp_inF$D_OUT[95:88] } ;
  assign nowMS__h23801 =
	     { dp0_tlp_mRespF$D_OUT[71:64],
	       dp0_tlp_mRespF$D_OUT[79:72],
	       dp0_tlp_mRespF$D_OUT[87:80],
	       dp0_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h36643 =
	     { dp0_tlp_inF$D_OUT[71:64],
	       dp0_tlp_inF$D_OUT[79:72],
	       dp0_tlp_inF$D_OUT[87:80],
	       dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h102871 =
	     { dp1_tlp_mRespF$D_OUT[103:96],
	       dp1_tlp_mRespF$D_OUT[111:104],
	       dp1_tlp_mRespF$D_OUT[119:112],
	       dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h115705 =
	     { dp1_tlp_inF$D_OUT[103:96],
	       dp1_tlp_inF$D_OUT[111:104],
	       dp1_tlp_inF$D_OUT[119:112],
	       dp1_tlp_inF$D_OUT[127:120] } ;
  assign opcode__h23800 =
	     { dp0_tlp_mRespF$D_OUT[103:96],
	       dp0_tlp_mRespF$D_OUT[111:104],
	       dp0_tlp_mRespF$D_OUT[119:112],
	       dp0_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h36642 =
	     { dp0_tlp_inF$D_OUT[103:96],
	       dp0_tlp_inF$D_OUT[111:104],
	       dp0_tlp_inF$D_OUT[119:112],
	       dp0_tlp_inF$D_OUT[127:120] } ;
  assign pkt__h122275 =
	     { 9'd148,
	       dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd16,
	       dp1_tlp_mRespF$D_OUT[54:43],
	       dp1_tlp_mRespF$D_OUT[87:72],
	       dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp1_tlp_mRespF$D_OUT[61:55],
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h43212 =
	     { 9'd148,
	       dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd0,
	       dp0_tlp_mRespF$D_OUT[54:43],
	       dp0_tlp_mRespF$D_OUT[87:72],
	       dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp0_tlp_mRespF$D_OUT[61:55],
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h158593 = { 16'd0, dp1_bml_lclNumBufs } ;
  assign rdat__h158601 = { 16'd0, dp1_bml_fabNumBufs } ;
  assign rdat__h158609 = { 16'd0, dp1_bml_mesgBase } ;
  assign rdat__h158617 = { 16'd0, dp1_bml_metaBase } ;
  assign rdat__h158625 = { 16'd0, dp1_bml_mesgSize } ;
  assign rdat__h158633 = { 16'd0, dp1_bml_metaSize } ;
  assign rdat__h158641 = { 16'd0, dp1_bml_lclBufsCF } ;
  assign rdat__h158662 = { dp1_bml_lclBufsAR, dp1_bml_fabBufsAvail } ;
  assign rdat__h158667 = { dp1_bml_remBuf_value, dp1_bml_lclBuf_value } ;
  assign rdat__h158678 = { dp1_bml_lclStarts, dp1_bml_lclDones } ;
  assign rdat__h158683 = { dp1_bml_remStarts, dp1_bml_remDones } ;
  assign rdat__h158744 = { 28'd0, dp1_dpControl } ;
  assign rdat__h79535 = { 16'd0, dp0_bml_lclNumBufs } ;
  assign rdat__h79543 = { 16'd0, dp0_bml_fabNumBufs } ;
  assign rdat__h79551 = { 16'd0, dp0_bml_mesgBase } ;
  assign rdat__h79559 = { 16'd0, dp0_bml_metaBase } ;
  assign rdat__h79567 = { 16'd0, dp0_bml_mesgSize } ;
  assign rdat__h79575 = { 16'd0, dp0_bml_metaSize } ;
  assign rdat__h79583 = { 16'd0, dp0_bml_lclBufsCF } ;
  assign rdat__h79604 = { dp0_bml_lclBufsAR, dp0_bml_fabBufsAvail } ;
  assign rdat__h79609 = { dp0_bml_remBuf_value, dp0_bml_lclBuf_value } ;
  assign rdat__h79620 = { dp0_bml_lclStarts, dp0_bml_lclDones } ;
  assign rdat__h79625 = { dp0_bml_remStarts, dp0_bml_remDones } ;
  assign rdat__h79686 = { 28'd0, dp0_dpControl } ;
  assign rdata__h139163 =
	     dp1_tlp_readNxtDWAddr[1] ?
	       IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3694 :
	       IF_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THEN_dp_ETC___d3699 ;
  assign rdata__h60100 =
	     dp0_tlp_readNxtDWAddr[1] ?
	       IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1508 :
	       IF_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THEN_dp_ETC___d1513 ;
  assign rreq_tag__h106316 =
	     (y__h106127 == dp1_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rreq_tag__h27245 =
	     (y__h27056 == dp0_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h133837 =
	     { IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682[7:0],
	       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682[15:8],
	       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682[23:16],
	       IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682[31:24] } ;
  assign rresp_data__h54774 =
	     { IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677[7:0],
	       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677[15:8],
	       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677[23:16],
	       IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677[31:24] } ;
  assign spanToNextPage__h106086 =
	     13'd4096 - { 1'd0, dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h118916 =
	     13'd4096 - { 1'd0, dp1_tlp_fabMesgAccu[11:0] } ;
  assign spanToNextPage__h27015 =
	     13'd4096 - { 1'd0, dp0_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h39853 =
	     13'd4096 - { 1'd0, dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h119192 = { 3'd0, dp1_tlp_dmaTag } ;
  assign tag__h40129 = { 3'd0, dp0_tlp_dmaTag } ;
  assign tagm__h119318 = { 3'd0, dp1_tlp_dmaReqTag } ;
  assign tagm__h40255 = { 3'd0, dp0_tlp_dmaReqTag } ;
  assign thisRequestLength__h106087 =
	     (x__h106140[12:0] <= spanToNextPage__h106086) ?
	       x__h106140[12:0] :
	       spanToNextPage__h106086 ;
  assign thisRequestLength__h118917 =
	     (x__h118950[12:0] <= spanToNextPage__h118916) ?
	       x__h118950[12:0] :
	       spanToNextPage__h118916 ;
  assign thisRequestLength__h27016 =
	     (x__h27069[12:0] <= spanToNextPage__h27015) ?
	       x__h27069[12:0] :
	       spanToNextPage__h27015 ;
  assign thisRequestLength__h39854 =
	     (x__h39887[12:0] <= spanToNextPage__h39853) ?
	       x__h39887[12:0] :
	       spanToNextPage__h39853 ;
  assign w_be__h107043 =
	     dp1_tlp_outDwRemain_970_ULE_4___d4824 ?
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 :
	       16'd65535 ;
  assign w_be__h27972 =
	     dp0_tlp_outDwRemain_81_ULE_4___d4818 ?
	       CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 :
	       16'd65535 ;
  assign w_data__h106491 =
	     { 22'd1048580,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd256,
	       lastBE__h106515,
	       4'd15,
	       dp1_tlp_fabMesgAccu,
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h107469 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd65791,
	       dp1_tlp_fabMetaAddr,
	       dp1_tlp_fabMeta[103:96],
	       dp1_tlp_fabMeta[111:104],
	       dp1_tlp_fabMeta[119:112],
	       dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h108531 =
	     { dp1_tlp_fabMeta[71:64],
	       dp1_tlp_fabMeta[79:72],
	       dp1_tlp_fabMeta[87:80],
	       dp1_tlp_fabMeta[95:88],
	       dp1_tlp_fabMeta[39:32],
	       dp1_tlp_fabMeta[47:40],
	       dp1_tlp_fabMeta[55:48],
	       dp1_tlp_fabMeta[63:56],
	       dp1_tlp_fabMeta[7:0],
	       dp1_tlp_fabMeta[15:8],
	       dp1_tlp_fabMeta[23:16],
	       dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h111251 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd65551,
	       dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h113435 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd1,
	       tag__h119192,
	       8'd255,
	       dp1_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h119198 =
	     { 22'd4,
	       thisRequestLength__h118917[11:2],
	       pciDevice[15:3],
	       3'd1,
	       tag__h119192,
	       lastBE__h119219,
	       4'd15,
	       dp1_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h27420 =
	     { 22'd1048580,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd0,
	       lastBE__h27444,
	       4'd15,
	       dp0_tlp_fabMesgAccu,
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h28398 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd255,
	       dp0_tlp_fabMetaAddr,
	       dp0_tlp_fabMeta[103:96],
	       dp0_tlp_fabMeta[111:104],
	       dp0_tlp_fabMeta[119:112],
	       dp0_tlp_fabMeta[127:120] } ;
  assign w_data__h29460 =
	     { dp0_tlp_fabMeta[71:64],
	       dp0_tlp_fabMeta[79:72],
	       dp0_tlp_fabMeta[87:80],
	       dp0_tlp_fabMeta[95:88],
	       dp0_tlp_fabMeta[39:32],
	       dp0_tlp_fabMeta[47:40],
	       dp0_tlp_fabMeta[55:48],
	       dp0_tlp_fabMeta[63:56],
	       dp0_tlp_fabMeta[7:0],
	       dp0_tlp_fabMeta[15:8],
	       dp0_tlp_fabMeta[23:16],
	       dp0_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h32180 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd15,
	       dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h34364 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd0,
	       tag__h40129,
	       8'd255,
	       dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h40135 =
	     { 22'd4,
	       thisRequestLength__h39854[11:2],
	       pciDevice[15:3],
	       3'd0,
	       tag__h40129,
	       lastBE__h40156,
	       4'd15,
	       dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign x3__h149956 = { 8'd0, dp1_wmi_wmi_mFlagReg[23:0] } ;
  assign x3__h70893 = { 8'd0, dp0_wmi_wmi_mFlagReg[23:0] } ;
  assign x__h102934 = { 15'd0, dp1_tlp_mesgLengthRemainPush } ;
  assign x__h106140 =
	     (dp1_tlp_mesgLengthRemainPush <= y__h106142) ?
	       dp1_tlp_mesgLengthRemainPush :
	       y__h106142 ;
  assign x__h106641 = { dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h115737 = { 15'd0, dp1_tlp_mesgLengthRemainPull } ;
  assign x__h118950 =
	     (dp1_tlp_mesgLengthRemainPull <= y__h118952) ?
	       dp1_tlp_mesgLengthRemainPull :
	       y__h118952 ;
  assign x__h119527 = { dp1_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h120205 = { dp1_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h133906 = x__h133908 - y__h133909 ;
  assign x__h133908 = { dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h155737 =
	     (dp1_dpControl[1:0] == 2'd1) ? dp1_bml_fabNumBufs : 16'd0 ;
  assign x__h156861 = dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h156866 = dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h156938 = dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h156943 = dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h156980 = dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h156985 = dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h157018 = dp1_bml_lclCredit + 16'd1 ;
  assign x__h157023 = dp1_bml_lclCredit - 16'd1 ;
  assign x__h23863 = { 15'd0, dp0_tlp_mesgLengthRemainPush } ;
  assign x__h27069 =
	     (dp0_tlp_mesgLengthRemainPush <= y__h27071) ?
	       dp0_tlp_mesgLengthRemainPush :
	       y__h27071 ;
  assign x__h27570 = { dp0_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h36674 = { 15'd0, dp0_tlp_mesgLengthRemainPull } ;
  assign x__h39887 =
	     (dp0_tlp_mesgLengthRemainPull <= y__h39889) ?
	       dp0_tlp_mesgLengthRemainPull :
	       y__h39889 ;
  assign x__h40464 = { dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h41142 = { dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h54843 = x__h54845 - y__h54846 ;
  assign x__h54845 = { dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h76677 =
	     (dp0_dpControl[1:0] == 2'd1) ? dp0_bml_fabNumBufs : 16'd0 ;
  assign x__h77801 = dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h77806 = dp0_bml_lclBufsAR - 16'd1 ;
  assign x__h77878 = dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h77883 = dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h77920 = dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h77925 = dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h77958 = dp0_bml_lclCredit + 16'd1 ;
  assign x__h77963 = dp0_bml_lclCredit - 16'd1 ;
  assign y__h106127 = { 4'd0, thisRequestLength__h106087 } ;
  assign y__h106142 = { 4'd0, dp1_tlp_maxPayloadSize } ;
  assign y__h106221 = { 19'd0, thisRequestLength__h106087 } ;
  assign y__h106269 = { 3'd0, thisRequestLength__h106087 } ;
  assign y__h106638 = { 22'd0, x__h106641 } ;
  assign y__h118942 = { 4'd0, thisRequestLength__h118917 } ;
  assign y__h118952 = { 4'd0, dp1_tlp_maxReadReqSize } ;
  assign y__h119013 = { 19'd0, thisRequestLength__h118917 } ;
  assign y__h119524 = { 6'd0, x__h119527 } ;
  assign y__h120202 =
	     dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d5134 ?
	       { 7'd0, x__h120205 } :
	       17'd16 ;
  assign y__h133907 =
	     (dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h133938 } ;
  assign y__h133909 = { 10'd0, x__h133915 } ;
  assign y__h27056 = { 4'd0, thisRequestLength__h27016 } ;
  assign y__h27071 = { 4'd0, dp0_tlp_maxPayloadSize } ;
  assign y__h27150 = { 19'd0, thisRequestLength__h27016 } ;
  assign y__h27198 = { 3'd0, thisRequestLength__h27016 } ;
  assign y__h27567 = { 22'd0, x__h27570 } ;
  assign y__h39879 = { 4'd0, thisRequestLength__h39854 } ;
  assign y__h39889 = { 4'd0, dp0_tlp_maxReadReqSize } ;
  assign y__h39950 = { 19'd0, thisRequestLength__h39854 } ;
  assign y__h40461 = { 6'd0, x__h40464 } ;
  assign y__h41139 =
	     dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d4497 ?
	       { 7'd0, x__h41142 } :
	       17'd16 ;
  assign y__h54844 =
	     (dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h54875 } ;
  assign y__h54846 = { 10'd0, x__h54852 } ;
  assign y_avValue__h151552 =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       dp1_bram_memory$DOB ;
  assign y_avValue__h151572 =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOB ;
  assign y_avValue__h151592 =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOB ;
  assign y_avValue__h151612 =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOB ;
  assign y_avValue__h72489 =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       dp0_bram_memory$DOB ;
  assign y_avValue__h72509 =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOB ;
  assign y_avValue__h72529 =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOB ;
  assign y_avValue__h72549 =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOB ;
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h54875 = 2'b10;
      4'b1110: x__h54875 = 2'b01;
      4'b1111: x__h54875 = 2'b0;
      default: x__h54875 = 2'b11;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h54852 = 2'b10;
      4'b1110: x__h54852 = 2'b01;
      4'b1111: x__h54852 = 2'b0;
      default: x__h54852 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h133915 = 2'b10;
      4'b1110: x__h133915 = 2'b01;
      4'b1111: x__h133915 = 2'b0;
      default: x__h133915 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h133938 = 2'b10;
      4'b1110: x__h133938 = 2'b01;
      4'b1111: x__h133938 = 2'b0;
      default: x__h133938 = 2'b11;
    endcase
  end
  always@(dp0_wmi_p4B or
	  y_avValue__h72549 or
	  y_avValue__h72489 or y_avValue__h72509 or y_avValue__h72529)
  begin
    case (dp0_wmi_p4B)
      2'd0: rdata__h72653 = y_avValue__h72489;
      2'd1: rdata__h72653 = y_avValue__h72509;
      2'd2: rdata__h72653 = y_avValue__h72529;
      2'd3: rdata__h72653 = y_avValue__h72549;
    endcase
  end
  always@(dp1_wmi_p4B or
	  y_avValue__h151612 or
	  y_avValue__h151552 or y_avValue__h151572 or y_avValue__h151592)
  begin
    case (dp1_wmi_p4B)
      2'd0: rdata__h151716 = y_avValue__h151552;
      2'd1: rdata__h151716 = y_avValue__h151572;
      2'd2: rdata__h151716 = y_avValue__h151592;
      2'd3: rdata__h151716 = y_avValue__h151612;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h54730 = 2'b11;
      4'b1100: lowAddr10__h54730 = 2'b10;
      4'b1110: lowAddr10__h54730 = 2'b01;
      default: lowAddr10__h54730 = 2'b0;
    endcase
  end
  always@(dp0_wci_reqF$D_OUT or
	  rdat__h79535 or
	  rdat__h79543 or
	  rdat__h79551 or
	  rdat__h79559 or
	  rdat__h79567 or
	  rdat__h79575 or
	  rdat__h79583 or
	  rdat__h79604 or
	  rdat__h79609 or
	  rdat__h79620 or
	  rdat__h79625 or
	  dp0_bml_fabMesgBase or
	  dp0_bml_fabMetaBase or
	  dp0_bml_fabMesgSize or
	  dp0_bml_fabMetaSize or
	  dp0_bml_fabFlowBase or dp0_bml_fabFlowSize or rdat__h79686)
  begin
    case (dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h79456 = rdat__h79535;
      8'h04: _theResult____h79456 = rdat__h79543;
      8'h08: _theResult____h79456 = rdat__h79551;
      8'h0C: _theResult____h79456 = rdat__h79559;
      8'h10: _theResult____h79456 = rdat__h79567;
      8'h14: _theResult____h79456 = rdat__h79575;
      8'h20: _theResult____h79456 = rdat__h79583;
      8'h24: _theResult____h79456 = 32'hF00DFACE;
      8'h28: _theResult____h79456 = rdat__h79604;
      8'h2C: _theResult____h79456 = rdat__h79609;
      8'h30: _theResult____h79456 = rdat__h79620;
      8'h34: _theResult____h79456 = rdat__h79625;
      8'h48: _theResult____h79456 = 32'hDADEBABE;
      8'h4C: _theResult____h79456 = 32'h00008000;
      8'h50: _theResult____h79456 = dp0_bml_fabMesgBase;
      8'h54: _theResult____h79456 = dp0_bml_fabMetaBase;
      8'h58: _theResult____h79456 = dp0_bml_fabMesgSize;
      8'h5C: _theResult____h79456 = dp0_bml_fabMetaSize;
      8'h60: _theResult____h79456 = dp0_bml_fabFlowBase;
      8'h64: _theResult____h79456 = dp0_bml_fabFlowSize;
      8'h68: _theResult____h79456 = rdat__h79686;
      default: _theResult____h79456 = 32'd0;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h133793 = 2'b11;
      4'b1100: lowAddr10__h133793 = 2'b10;
      4'b1110: lowAddr10__h133793 = 2'b01;
      default: lowAddr10__h133793 = 2'b0;
    endcase
  end
  always@(dp1_wci_reqF$D_OUT or
	  rdat__h158593 or
	  rdat__h158601 or
	  rdat__h158609 or
	  rdat__h158617 or
	  rdat__h158625 or
	  rdat__h158633 or
	  rdat__h158641 or
	  rdat__h158662 or
	  rdat__h158667 or
	  rdat__h158678 or
	  rdat__h158683 or
	  dp1_bml_fabMesgBase or
	  dp1_bml_fabMetaBase or
	  dp1_bml_fabMesgSize or
	  dp1_bml_fabMetaSize or
	  dp1_bml_fabFlowBase or dp1_bml_fabFlowSize or rdat__h158744)
  begin
    case (dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h158514 = rdat__h158593;
      8'h04: _theResult____h158514 = rdat__h158601;
      8'h08: _theResult____h158514 = rdat__h158609;
      8'h0C: _theResult____h158514 = rdat__h158617;
      8'h10: _theResult____h158514 = rdat__h158625;
      8'h14: _theResult____h158514 = rdat__h158633;
      8'h20: _theResult____h158514 = rdat__h158641;
      8'h24: _theResult____h158514 = 32'hF00DFACE;
      8'h28: _theResult____h158514 = rdat__h158662;
      8'h2C: _theResult____h158514 = rdat__h158667;
      8'h30: _theResult____h158514 = rdat__h158678;
      8'h34: _theResult____h158514 = rdat__h158683;
      8'h48: _theResult____h158514 = 32'hDADEBABE;
      8'h4C: _theResult____h158514 = 32'h00008000;
      8'h50: _theResult____h158514 = dp1_bml_fabMesgBase;
      8'h54: _theResult____h158514 = dp1_bml_fabMetaBase;
      8'h58: _theResult____h158514 = dp1_bml_fabMesgSize;
      8'h5C: _theResult____h158514 = dp1_bml_fabMetaSize;
      8'h60: _theResult____h158514 = dp1_bml_fabFlowBase;
      8'h64: _theResult____h158514 = dp1_bml_fabFlowSize;
      8'h68: _theResult____h158514 = rdat__h158744;
      default: _theResult____h158514 = 32'd0;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997 =
	      dp0_bml_fabDone;
      2'd1:
	  IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997 =
	      dp0_bml_remDone;
      default: IF_dp0_bml_dpControl_wget__920_BITS_1_TO_0_926_ETC___d1997 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183 =
	      dp1_bml_fabDone;
      2'd1:
	  IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183 =
	      dp1_bml_remDone;
      default: IF_dp1_bml_dpControl_wget__106_BITS_1_TO_0_112_ETC___d4183 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
	      dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		dp0_bml_remDone :
		dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
	      dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		dp1_bml_remDone :
		dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_outDwRemain)
  begin
    case (dp0_tlp_outDwRemain[1:0])
      2'b0: CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFFFF;
      2'b01:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hF000;
      2'b10:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFF00;
      2'd3: CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFFF0;
    endcase
  end
  always@(dp1_tlp_outDwRemain)
  begin
    case (dp1_tlp_outDwRemain[1:0])
      2'b0: CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFFFF;
      2'b01:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hF000;
      2'b10:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFF00;
      2'd3: CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFFF0;
    endcase
  end
  always@(idx__h45553 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h45553)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157 =
	      dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157 =
	      dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1157 =
	      dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h47776 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h47776)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167 =
	      dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167 =
	      dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1167 =
	      dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h49072 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h49072)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h50368 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h50368)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h124616 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h124616)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343 =
	      dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343 =
	      dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3343 =
	      dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h126839 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h126839)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353 =
	      dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353 =
	      dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3353 =
	      dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h129431 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h129431)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373 =
	      dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373 =
	      dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3373 =
	      dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h128135 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h128135)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363 =
	      dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363 =
	      dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d3363 =
	      dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137 or
	  dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135 or
	  dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552 or
	  dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136)
  begin
    case (dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137 or
	  dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135 or
	  dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552 or
	  dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136)
  begin
    case (dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_cnt_6_SLT_3___d5135;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d4552;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d5136;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d5137;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141 or
	  dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138 or
	  dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139 or
	  dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140)
  begin
    case (dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141 or
	  dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138 or
	  dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139 or
	  dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140)
  begin
    case (dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_cnt_218_SLT_3___d5138;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d5139;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d5140;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d5141;
    endcase
  end
  always@(dp0_wmi_addr or
	  dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 or
	  dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 or
	  dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 or
	  dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666)
  begin
    case (dp0_wmi_addr[3:2])
      2'd0:
	  IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 =
	      dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664;
      2'd1:
	  IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 =
	      dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665;
      2'd2:
	  IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 =
	      dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666;
      2'd3:
	  IF_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_754_T_ETC___d5382 =
	      dp0_wmi_addr[3:2] != 2'd3 ||
	      dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		!dp0_bml_remDone :
		!dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_wmi_addr or
	  dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 or
	  dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 or
	  dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 or
	  dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852)
  begin
    case (dp1_wmi_addr[3:2])
      2'd0:
	  IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 =
	      dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850;
      2'd1:
	  IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 =
	      dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851;
      2'd2:
	  IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 =
	      dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852;
      2'd3:
	  IF_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_940_T_ETC___d5397 =
	      dp1_wmi_addr[3:2] != 2'd3 ||
	      dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		!dp1_bml_remDone :
		!dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(idx__h45553 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h45553)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4613 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h47776 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h47776)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4579 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h49072 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h49072)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4578 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h50368 or
	  dp0_tlp_writeRemainDWLen_144_ULE_3___d4509 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_144_ULE_1___d4512 or
	  dp0_tlp_writeRemainDWLen_144_ULE_2___d4510)
  begin
    case (idx__h50368)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_1___d4512;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_2___d4510;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4612 =
	      !dp0_tlp_writeRemainDWLen_144_ULE_3___d4509;
    endcase
  end
  always@(idx__h124616 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h124616)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h126839 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h126839)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4603 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h128135 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h128135)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4604 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h129431 or
	  dp1_tlp_writeRemainDWLen_330_ULE_3___d4522 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_330_ULE_1___d4528 or
	  dp1_tlp_writeRemainDWLen_330_ULE_2___d4520)
  begin
    case (idx__h129431)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_1___d4528;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_2___d4520;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4605 =
	      !dp1_tlp_writeRemainDWLen_330_ULE_3___d4522;
    endcase
  end
  always@(idx__h45553 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h45553)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4673 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h47776 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h47776)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4674 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h49072 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h49072)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4675 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h50368 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h50368)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_140_BITS_1_TO_0_ETC___d4676 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h124616 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h124616)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4678 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h126839 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h126839)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4679 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h128135 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h128135)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4680 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h129431 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h129431)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_326_BITS_1_TO_0_ETC___d4681 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
	      !dp0_bml_remDone;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
	      !dp1_bml_remDone;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$wget or
	  dp0_bram_serverAdapterA_outData_outData$wget or
	  dp0_bram_serverAdapterA_1_outData_outData$wget or
	  dp0_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677 =
	      dp0_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677 =
	      dp0_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677 =
	      dp0_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d4677 =
	      dp0_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1389 =
	      dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1389 =
	      dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp0_tlp_readReq_first__374_BITS_30_TO_29_37_ETC___d1389 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$whas or
	  dp0_bram_serverAdapterA_1_outData_outData$whas or
	  dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
	      dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
	      dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_3_outData_enqData$whas or
	  dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_1_outData_enqData$whas or
	  dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  IF_dp0_wmi_p4B_806_EQ_1_809_THEN_dp0_bram_serv_ETC___d1815 =
	      dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_wmi_p4B_806_EQ_1_809_THEN_dp0_bram_serv_ETC___d1815 =
	      dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp0_wmi_p4B_806_EQ_1_809_THEN_dp0_bram_serv_ETC___d1815 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outData_outData$whas or
	  dp0_bram_serverAdapterB_1_outData_outData$whas or
	  dp0_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
	      dp0_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
	      dp0_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3575 =
	      dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3575 =
	      dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d3575 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$wget or
	  dp1_bram_serverAdapterA_outData_outData$wget or
	  dp1_bram_serverAdapterA_1_outData_outData$wget or
	  dp1_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682 =
	      dp1_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682 =
	      dp1_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682 =
	      dp1_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp1_tlp_readReq_first__560_BITS_30_TO_29_56_ETC___d4682 =
	      dp1_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$whas or
	  dp1_bram_serverAdapterA_1_outData_outData$whas or
	  dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
	      dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
	      dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_3_outData_enqData$whas or
	  dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_1_outData_enqData$whas or
	  dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  IF_dp1_wmi_p4B_992_EQ_1_995_THEN_dp1_bram_serv_ETC___d4001 =
	      dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_wmi_p4B_992_EQ_1_995_THEN_dp1_bram_serv_ETC___d4001 =
	      dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp1_wmi_p4B_992_EQ_1_995_THEN_dp1_bram_serv_ETC___d4001 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outData_outData$whas or
	  dp1_bram_serverAdapterB_1_outData_outData$whas or
	  dp1_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
	      dp1_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
	      dp1_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (chompCnt$EN) chompCnt <= `BSV_ASSIGNMENT_DELAY chompCnt$D_IN;
	if (itc0_wti_nowReq$EN)
	  itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc0_wti_nowReq$D_IN;
	if (itc0_wti_sThreadBusy_d$EN)
	  itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc0_wti_sThreadBusy_d$D_IN;
	if (itc1_wti_nowReq$EN)
	  itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc1_wti_nowReq$D_IN;
	if (itc1_wti_sThreadBusy_d$EN)
	  itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc1_wti_sThreadBusy_d$D_IN;
      end
    if (!cp$RST_N_wci_Vm_14)
      begin
        dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp1_bml_crdBuf_modulus$EN)
	  dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_modulus$D_IN;
	if (dp1_bml_crdBuf_value$EN)
	  dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_value$D_IN;
	if (dp1_bml_fabAvail$EN)
	  dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabAvail$D_IN;
	if (dp1_bml_fabBuf_modulus$EN)
	  dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_modulus$D_IN;
	if (dp1_bml_fabBuf_value$EN)
	  dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_value$D_IN;
	if (dp1_bml_fabDone$EN)
	  dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabDone$D_IN;
	if (dp1_bml_fabFlowBase$EN)
	  dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowBase$D_IN;
	if (dp1_bml_fabFlowSize$EN)
	  dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowSize$D_IN;
	if (dp1_bml_fabMesgBase$EN)
	  dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgBase$D_IN;
	if (dp1_bml_fabMesgSize$EN)
	  dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgSize$D_IN;
	if (dp1_bml_fabMetaBase$EN)
	  dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaBase$D_IN;
	if (dp1_bml_fabMetaSize$EN)
	  dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaSize$D_IN;
	if (dp1_bml_fabNumBufs$EN)
	  dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabNumBufs$D_IN;
	if (dp1_bml_lclBufDone$EN)
	  dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufDone$D_IN;
	if (dp1_bml_lclBufStart$EN)
	  dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBufStart$D_IN;
	if (dp1_bml_lclBuf_modulus$EN)
	  dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_modulus$D_IN;
	if (dp1_bml_lclBuf_value$EN)
	  dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_value$D_IN;
	if (dp1_bml_lclDones$EN)
	  dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclDones$D_IN;
	if (dp1_bml_lclNumBufs$EN)
	  dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclNumBufs$D_IN;
	if (dp1_bml_lclStarts$EN)
	  dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclStarts$D_IN;
	if (dp1_bml_mesgBase$EN)
	  dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgBase$D_IN;
	if (dp1_bml_mesgSize$EN)
	  dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgSize$D_IN;
	if (dp1_bml_metaBase$EN)
	  dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaBase$D_IN;
	if (dp1_bml_metaSize$EN)
	  dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaSize$D_IN;
	if (dp1_bml_remBuf_modulus$EN)
	  dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_modulus$D_IN;
	if (dp1_bml_remBuf_value$EN)
	  dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_value$D_IN;
	if (dp1_bml_remDone$EN)
	  dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDone$D_IN;
	if (dp1_bml_remDones$EN)
	  dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDones$D_IN;
	if (dp1_bml_remStart$EN)
	  dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStart$D_IN;
	if (dp1_bml_remStarts$EN)
	  dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStarts$D_IN;
	if (dp1_bram_serverAdapterA_1_cnt$EN)
	  dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (dp1_bram_serverAdapterA_1_s1$EN)
	  dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_s1$D_IN;
	if (dp1_bram_serverAdapterA_2_cnt$EN)
	  dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (dp1_bram_serverAdapterA_2_s1$EN)
	  dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_s1$D_IN;
	if (dp1_bram_serverAdapterA_3_cnt$EN)
	  dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (dp1_bram_serverAdapterA_3_s1$EN)
	  dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_s1$D_IN;
	if (dp1_bram_serverAdapterA_cnt$EN)
	  dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_cnt$D_IN;
	if (dp1_bram_serverAdapterA_s1$EN)
	  dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_s1$D_IN;
	if (dp1_bram_serverAdapterB_1_cnt$EN)
	  dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (dp1_bram_serverAdapterB_1_s1$EN)
	  dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_s1$D_IN;
	if (dp1_bram_serverAdapterB_2_cnt$EN)
	  dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (dp1_bram_serverAdapterB_2_s1$EN)
	  dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_s1$D_IN;
	if (dp1_bram_serverAdapterB_3_cnt$EN)
	  dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (dp1_bram_serverAdapterB_3_s1$EN)
	  dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_s1$D_IN;
	if (dp1_bram_serverAdapterB_cnt$EN)
	  dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_cnt$D_IN;
	if (dp1_bram_serverAdapterB_s1$EN)
	  dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_s1$D_IN;
	if (dp1_dpControl$EN)
	  dp1_dpControl <= `BSV_ASSIGNMENT_DELAY dp1_dpControl$D_IN;
	if (dp1_tlp_creditReady$EN)
	  dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_creditReady$D_IN;
	if (dp1_tlp_debugBdata$EN)
	  dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp1_tlp_debugBdata$D_IN;
	if (dp1_tlp_dmaDoTailEvent$EN)
	  dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_dmaDoTailEvent$D_IN;
	if (dp1_tlp_dmaTag$EN)
	  dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaTag$D_IN;
	if (dp1_tlp_doXmtMetaBody$EN)
	  dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_doXmtMetaBody$D_IN;
	if (dp1_tlp_fabMeta$EN)
	  dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMeta$D_IN;
	if (dp1_tlp_farBufReady$EN)
	  dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_farBufReady$D_IN;
	if (dp1_tlp_flowDiagCount$EN)
	  dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_flowDiagCount$D_IN;
	if (dp1_tlp_gotResponseHeader$EN)
	  dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_gotResponseHeader$D_IN;
	if (dp1_tlp_maxPayloadSize$EN)
	  dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxPayloadSize$D_IN;
	if (dp1_tlp_maxReadReqSize$EN)
	  dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxReadReqSize$D_IN;
	if (dp1_tlp_nearBufReady$EN)
	  dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_nearBufReady$D_IN;
	if (dp1_tlp_postSeqDwell$EN)
	  dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_postSeqDwell$D_IN;
	if (dp1_tlp_pullTagMatch$EN)
	  dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_pullTagMatch$D_IN;
	if (dp1_tlp_readHeaderSent$EN)
	  dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readHeaderSent$D_IN;
	if (dp1_tlp_readStarted$EN)
	  dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readStarted$D_IN;
	if (dp1_tlp_remDone$EN)
	  dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remDone$D_IN;
	if (dp1_tlp_remStart$EN)
	  dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remStart$D_IN;
	if (dp1_tlp_reqMesgInFlight$EN)
	  dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMesgInFlight$D_IN;
	if (dp1_tlp_reqMetaBodyInFlight$EN)
	  dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (dp1_tlp_reqMetaInFlight$EN)
	  dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaInFlight$D_IN;
	if (dp1_tlp_tlpMetaSent$EN)
	  dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_tlpMetaSent$D_IN;
	if (dp1_tlp_tlpRcvBusy$EN)
	  dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpRcvBusy$D_IN;
	if (dp1_tlp_tlpXmtBusy$EN)
	  dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpXmtBusy$D_IN;
	if (dp1_tlp_xmtMetaInFlight$EN)
	  dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_xmtMetaInFlight$D_IN;
	if (dp1_tlp_xmtMetaOK$EN)
	  dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp1_tlp_xmtMetaOK$D_IN;
	if (dp1_wci_cEdge$EN)
	  dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp1_wci_cEdge$D_IN;
	if (dp1_wci_cState$EN)
	  dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY dp1_wci_cState$D_IN;
	if (dp1_wci_ctlAckReg$EN)
	  dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_ctlAckReg$D_IN;
	if (dp1_wci_ctlOpActive$EN)
	  dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_ctlOpActive$D_IN;
	if (dp1_wci_illegalEdge$EN)
	  dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_illegalEdge$D_IN;
	if (dp1_wci_nState$EN)
	  dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY dp1_wci_nState$D_IN;
	if (dp1_wci_reqF_countReg$EN)
	  dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_reqF_countReg$D_IN;
	if (dp1_wci_respF_c_r$EN)
	  dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_c_r$D_IN;
	if (dp1_wci_respF_q_0$EN)
	  dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_0$D_IN;
	if (dp1_wci_respF_q_1$EN)
	  dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_1$D_IN;
	if (dp1_wci_sFlagReg$EN)
	  dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_sFlagReg$D_IN;
	if (dp1_wci_sThreadBusy_d$EN)
	  dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_sThreadBusy_d$D_IN;
	if (dp1_wmi_bufDwell$EN)
	  dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp1_wmi_bufDwell$D_IN;
	if (dp1_wmi_bytesRemainResp$EN)
	  dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_bytesRemainResp$D_IN;
	if (dp1_wmi_doneWithMesg$EN)
	  dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_doneWithMesg$D_IN;
	if (dp1_wmi_lastMesg$EN)
	  dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lastMesg$D_IN;
	if (dp1_wmi_mesgBufReady$EN)
	  dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_mesgBufReady$D_IN;
	if (dp1_wmi_mesgBusy$EN)
	  dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgBusy$D_IN;
	if (dp1_wmi_mesgCount$EN)
	  dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgCount$D_IN;
	if (dp1_wmi_mesgDone$EN)
	  dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgDone$D_IN;
	if (dp1_wmi_mesgMeta$EN)
	  dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgMeta$D_IN;
	if (dp1_wmi_mesgStart$EN)
	  dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgStart$D_IN;
	if (dp1_wmi_metaBusy$EN)
	  dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_metaBusy$D_IN;
	if (dp1_wmi_p4B$EN)
	  dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp1_wmi_p4B$D_IN;
	if (dp1_wmi_rdActive$EN)
	  dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_rdActive$D_IN;
	if (dp1_wmi_reqCount$EN)
	  dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_reqCount$D_IN;
	if (dp1_wmi_thisMesg$EN)
	  dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_thisMesg$D_IN;
	if (dp1_wmi_wmi_blockReq$EN)
	  dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_blockReq$D_IN;
	if (dp1_wmi_wmi_dhF_countReg$EN)
	  dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_countReg$D_IN;
	if (dp1_wmi_wmi_dhF_levelsValid$EN)
	  dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp1_wmi_wmi_errorSticky$EN)
	  dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_errorSticky$D_IN;
	if (dp1_wmi_wmi_mFlagF_countReg$EN)
	  dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp1_wmi_wmi_mFlagReg$EN)
	  dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagReg$D_IN;
	if (dp1_wmi_wmi_operateD$EN)
	  dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_operateD$D_IN;
	if (dp1_wmi_wmi_peerIsReady$EN)
	  dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_peerIsReady$D_IN;
	if (dp1_wmi_wmi_reqF_countReg$EN)
	  dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_countReg$D_IN;
	if (dp1_wmi_wmi_reqF_levelsValid$EN)
	  dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp1_wmi_wmi_respF_c_r$EN)
	  dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_c_r$D_IN;
	if (dp1_wmi_wmi_respF_q_0$EN)
	  dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_0$D_IN;
	if (dp1_wmi_wmi_respF_q_1$EN)
	  dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_1$D_IN;
	if (dp1_wmi_wmi_sFlagReg$EN)
	  dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_sFlagReg$D_IN;
	if (dp1_wmi_wmi_trafficSticky$EN)
	  dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_trafficSticky$D_IN;
	if (dp1_wmi_wrActive$EN)
	  dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrActive$D_IN;
	if (dp1_wmi_wrFinalize$EN)
	  dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrFinalize$D_IN;
	if (dp1_wmi_wrtCount$EN)
	  dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrtCount$D_IN;
	if (dp1_wti_nowReq$EN)
	  dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp1_wti_nowReq$D_IN;
      end
    if (!cp$RST_N_wci_Vm_13)
      begin
        dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp0_bml_crdBuf_modulus$EN)
	  dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_modulus$D_IN;
	if (dp0_bml_crdBuf_value$EN)
	  dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_value$D_IN;
	if (dp0_bml_fabAvail$EN)
	  dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabAvail$D_IN;
	if (dp0_bml_fabBuf_modulus$EN)
	  dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_modulus$D_IN;
	if (dp0_bml_fabBuf_value$EN)
	  dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_value$D_IN;
	if (dp0_bml_fabDone$EN)
	  dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabDone$D_IN;
	if (dp0_bml_fabFlowBase$EN)
	  dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowBase$D_IN;
	if (dp0_bml_fabFlowSize$EN)
	  dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowSize$D_IN;
	if (dp0_bml_fabMesgBase$EN)
	  dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgBase$D_IN;
	if (dp0_bml_fabMesgSize$EN)
	  dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgSize$D_IN;
	if (dp0_bml_fabMetaBase$EN)
	  dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaBase$D_IN;
	if (dp0_bml_fabMetaSize$EN)
	  dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaSize$D_IN;
	if (dp0_bml_fabNumBufs$EN)
	  dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabNumBufs$D_IN;
	if (dp0_bml_lclBufDone$EN)
	  dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufDone$D_IN;
	if (dp0_bml_lclBufStart$EN)
	  dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBufStart$D_IN;
	if (dp0_bml_lclBuf_modulus$EN)
	  dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_modulus$D_IN;
	if (dp0_bml_lclBuf_value$EN)
	  dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_value$D_IN;
	if (dp0_bml_lclDones$EN)
	  dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclDones$D_IN;
	if (dp0_bml_lclNumBufs$EN)
	  dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclNumBufs$D_IN;
	if (dp0_bml_lclStarts$EN)
	  dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclStarts$D_IN;
	if (dp0_bml_mesgBase$EN)
	  dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgBase$D_IN;
	if (dp0_bml_mesgSize$EN)
	  dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgSize$D_IN;
	if (dp0_bml_metaBase$EN)
	  dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaBase$D_IN;
	if (dp0_bml_metaSize$EN)
	  dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaSize$D_IN;
	if (dp0_bml_remBuf_modulus$EN)
	  dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_modulus$D_IN;
	if (dp0_bml_remBuf_value$EN)
	  dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_value$D_IN;
	if (dp0_bml_remDone$EN)
	  dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDone$D_IN;
	if (dp0_bml_remDones$EN)
	  dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDones$D_IN;
	if (dp0_bml_remStart$EN)
	  dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStart$D_IN;
	if (dp0_bml_remStarts$EN)
	  dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStarts$D_IN;
	if (dp0_bram_serverAdapterA_1_cnt$EN)
	  dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (dp0_bram_serverAdapterA_1_s1$EN)
	  dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_s1$D_IN;
	if (dp0_bram_serverAdapterA_2_cnt$EN)
	  dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (dp0_bram_serverAdapterA_2_s1$EN)
	  dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_s1$D_IN;
	if (dp0_bram_serverAdapterA_3_cnt$EN)
	  dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (dp0_bram_serverAdapterA_3_s1$EN)
	  dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_s1$D_IN;
	if (dp0_bram_serverAdapterA_cnt$EN)
	  dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_cnt$D_IN;
	if (dp0_bram_serverAdapterA_s1$EN)
	  dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_s1$D_IN;
	if (dp0_bram_serverAdapterB_1_cnt$EN)
	  dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (dp0_bram_serverAdapterB_1_s1$EN)
	  dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_s1$D_IN;
	if (dp0_bram_serverAdapterB_2_cnt$EN)
	  dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (dp0_bram_serverAdapterB_2_s1$EN)
	  dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_s1$D_IN;
	if (dp0_bram_serverAdapterB_3_cnt$EN)
	  dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (dp0_bram_serverAdapterB_3_s1$EN)
	  dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_s1$D_IN;
	if (dp0_bram_serverAdapterB_cnt$EN)
	  dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_cnt$D_IN;
	if (dp0_bram_serverAdapterB_s1$EN)
	  dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_s1$D_IN;
	if (dp0_dpControl$EN)
	  dp0_dpControl <= `BSV_ASSIGNMENT_DELAY dp0_dpControl$D_IN;
	if (dp0_tlp_creditReady$EN)
	  dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_creditReady$D_IN;
	if (dp0_tlp_debugBdata$EN)
	  dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp0_tlp_debugBdata$D_IN;
	if (dp0_tlp_dmaDoTailEvent$EN)
	  dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_dmaDoTailEvent$D_IN;
	if (dp0_tlp_dmaTag$EN)
	  dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaTag$D_IN;
	if (dp0_tlp_doXmtMetaBody$EN)
	  dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_doXmtMetaBody$D_IN;
	if (dp0_tlp_fabMeta$EN)
	  dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMeta$D_IN;
	if (dp0_tlp_farBufReady$EN)
	  dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_farBufReady$D_IN;
	if (dp0_tlp_flowDiagCount$EN)
	  dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_flowDiagCount$D_IN;
	if (dp0_tlp_gotResponseHeader$EN)
	  dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_gotResponseHeader$D_IN;
	if (dp0_tlp_maxPayloadSize$EN)
	  dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxPayloadSize$D_IN;
	if (dp0_tlp_maxReadReqSize$EN)
	  dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxReadReqSize$D_IN;
	if (dp0_tlp_nearBufReady$EN)
	  dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_nearBufReady$D_IN;
	if (dp0_tlp_postSeqDwell$EN)
	  dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_postSeqDwell$D_IN;
	if (dp0_tlp_pullTagMatch$EN)
	  dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_pullTagMatch$D_IN;
	if (dp0_tlp_readHeaderSent$EN)
	  dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readHeaderSent$D_IN;
	if (dp0_tlp_readStarted$EN)
	  dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readStarted$D_IN;
	if (dp0_tlp_remDone$EN)
	  dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remDone$D_IN;
	if (dp0_tlp_remStart$EN)
	  dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remStart$D_IN;
	if (dp0_tlp_reqMesgInFlight$EN)
	  dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMesgInFlight$D_IN;
	if (dp0_tlp_reqMetaBodyInFlight$EN)
	  dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (dp0_tlp_reqMetaInFlight$EN)
	  dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaInFlight$D_IN;
	if (dp0_tlp_tlpMetaSent$EN)
	  dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_tlpMetaSent$D_IN;
	if (dp0_tlp_tlpRcvBusy$EN)
	  dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpRcvBusy$D_IN;
	if (dp0_tlp_tlpXmtBusy$EN)
	  dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpXmtBusy$D_IN;
	if (dp0_tlp_xmtMetaInFlight$EN)
	  dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_xmtMetaInFlight$D_IN;
	if (dp0_tlp_xmtMetaOK$EN)
	  dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp0_tlp_xmtMetaOK$D_IN;
	if (dp0_wci_cEdge$EN)
	  dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp0_wci_cEdge$D_IN;
	if (dp0_wci_cState$EN)
	  dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY dp0_wci_cState$D_IN;
	if (dp0_wci_ctlAckReg$EN)
	  dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_ctlAckReg$D_IN;
	if (dp0_wci_ctlOpActive$EN)
	  dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_ctlOpActive$D_IN;
	if (dp0_wci_illegalEdge$EN)
	  dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_illegalEdge$D_IN;
	if (dp0_wci_nState$EN)
	  dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY dp0_wci_nState$D_IN;
	if (dp0_wci_reqF_countReg$EN)
	  dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_reqF_countReg$D_IN;
	if (dp0_wci_respF_c_r$EN)
	  dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_c_r$D_IN;
	if (dp0_wci_respF_q_0$EN)
	  dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_0$D_IN;
	if (dp0_wci_respF_q_1$EN)
	  dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_1$D_IN;
	if (dp0_wci_sFlagReg$EN)
	  dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_sFlagReg$D_IN;
	if (dp0_wci_sThreadBusy_d$EN)
	  dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_sThreadBusy_d$D_IN;
	if (dp0_wmi_bufDwell$EN)
	  dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp0_wmi_bufDwell$D_IN;
	if (dp0_wmi_bytesRemainResp$EN)
	  dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_bytesRemainResp$D_IN;
	if (dp0_wmi_doneWithMesg$EN)
	  dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_doneWithMesg$D_IN;
	if (dp0_wmi_lastMesg$EN)
	  dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lastMesg$D_IN;
	if (dp0_wmi_mesgBufReady$EN)
	  dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_mesgBufReady$D_IN;
	if (dp0_wmi_mesgBusy$EN)
	  dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgBusy$D_IN;
	if (dp0_wmi_mesgCount$EN)
	  dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgCount$D_IN;
	if (dp0_wmi_mesgDone$EN)
	  dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgDone$D_IN;
	if (dp0_wmi_mesgMeta$EN)
	  dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgMeta$D_IN;
	if (dp0_wmi_mesgStart$EN)
	  dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgStart$D_IN;
	if (dp0_wmi_metaBusy$EN)
	  dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_metaBusy$D_IN;
	if (dp0_wmi_p4B$EN)
	  dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp0_wmi_p4B$D_IN;
	if (dp0_wmi_rdActive$EN)
	  dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_rdActive$D_IN;
	if (dp0_wmi_reqCount$EN)
	  dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_reqCount$D_IN;
	if (dp0_wmi_thisMesg$EN)
	  dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_thisMesg$D_IN;
	if (dp0_wmi_wmi_blockReq$EN)
	  dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_blockReq$D_IN;
	if (dp0_wmi_wmi_dhF_countReg$EN)
	  dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_countReg$D_IN;
	if (dp0_wmi_wmi_dhF_levelsValid$EN)
	  dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp0_wmi_wmi_errorSticky$EN)
	  dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_errorSticky$D_IN;
	if (dp0_wmi_wmi_mFlagF_countReg$EN)
	  dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp0_wmi_wmi_mFlagReg$EN)
	  dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagReg$D_IN;
	if (dp0_wmi_wmi_operateD$EN)
	  dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_operateD$D_IN;
	if (dp0_wmi_wmi_peerIsReady$EN)
	  dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_peerIsReady$D_IN;
	if (dp0_wmi_wmi_reqF_countReg$EN)
	  dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_countReg$D_IN;
	if (dp0_wmi_wmi_reqF_levelsValid$EN)
	  dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp0_wmi_wmi_respF_c_r$EN)
	  dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_c_r$D_IN;
	if (dp0_wmi_wmi_respF_q_0$EN)
	  dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_0$D_IN;
	if (dp0_wmi_wmi_respF_q_1$EN)
	  dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_1$D_IN;
	if (dp0_wmi_wmi_sFlagReg$EN)
	  dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_sFlagReg$D_IN;
	if (dp0_wmi_wmi_trafficSticky$EN)
	  dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_trafficSticky$D_IN;
	if (dp0_wmi_wrActive$EN)
	  dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrActive$D_IN;
	if (dp0_wmi_wrFinalize$EN)
	  dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrFinalize$D_IN;
	if (dp0_wmi_wrtCount$EN)
	  dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrtCount$D_IN;
	if (dp0_wti_nowReq$EN)
	  dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp0_wti_nowReq$D_IN;
      end
    if (dp0_bml_fabBufsAvail$EN)
      dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabBufsAvail$D_IN;
    if (dp0_bml_fabFlowAddr$EN)
      dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabFlowAddr$D_IN;
    if (dp0_bml_fabMesgAddr$EN)
      dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMesgAddr$D_IN;
    if (dp0_bml_fabMetaAddr$EN)
      dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMetaAddr$D_IN;
    if (dp0_bml_lclBufsAR$EN)
      dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsAR$D_IN;
    if (dp0_bml_lclBufsCF$EN)
      dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsCF$D_IN;
    if (dp0_bml_lclCredit$EN)
      dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclCredit$D_IN;
    if (dp0_bml_lclMesgAddr$EN)
      dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMesgAddr$D_IN;
    if (dp0_bml_lclMetaAddr$EN)
      dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMetaAddr$D_IN;
    if (dp0_bml_remMesgAddr$EN)
      dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMesgAddr$D_IN;
    if (dp0_bml_remMetaAddr$EN)
      dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMetaAddr$D_IN;
    if (dp0_tlp_dmaPullRemainDWLen$EN)
      dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (dp0_tlp_dmaPullRemainDWSub$EN)
      dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (dp0_tlp_dmaReqTag$EN)
      dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaReqTag$D_IN;
    if (dp0_tlp_fabFlowAddr$EN)
      dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabFlowAddr$D_IN;
    if (dp0_tlp_fabMesgAccu$EN)
      dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAccu$D_IN;
    if (dp0_tlp_fabMesgAddr$EN)
      dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAddr$D_IN;
    if (dp0_tlp_fabMetaAddr$EN)
      dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMetaAddr$D_IN;
    if (dp0_tlp_inIgnorePkt$EN)
      dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp0_tlp_inIgnorePkt$D_IN;
    if (dp0_tlp_mesgComplReceived$EN)
      dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgComplReceived$D_IN;
    if (dp0_tlp_mesgLengthRemainPull$EN)
      dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPull$D_IN;
    if (dp0_tlp_mesgLengthRemainPush$EN)
      dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPush$D_IN;
    if (dp0_tlp_outDwRemain$EN)
      dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp0_tlp_outDwRemain$D_IN;
    if (dp0_tlp_rdRespDwRemain$EN)
      dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_rdRespDwRemain$D_IN;
    if (dp0_tlp_readNxtDWAddr$EN)
      dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readNxtDWAddr$D_IN;
    if (dp0_tlp_readRemainDWLen$EN)
      dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readRemainDWLen$D_IN;
    if (dp0_tlp_remMesgAccu$EN)
      dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAccu$D_IN;
    if (dp0_tlp_remMesgAddr$EN)
      dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAddr$D_IN;
    if (dp0_tlp_remMetaAddr$EN)
      dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMetaAddr$D_IN;
    if (dp0_tlp_srcMesgAccu$EN)
      dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_srcMesgAccu$D_IN;
    if (dp0_tlp_writeDWAddr$EN)
      dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeDWAddr$D_IN;
    if (dp0_tlp_writeLastBE$EN)
      dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeLastBE$D_IN;
    if (dp0_tlp_writeRemainDWLen$EN)
      dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_writeRemainDWLen$D_IN;
    if (dp0_wmi_addr$EN)
      dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_addr$D_IN;
    if (dp0_wmi_bytesRemainReq$EN)
      dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp0_wmi_bytesRemainReq$D_IN;
    if (dp0_wmi_lclMesgAddr$EN)
      dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMesgAddr$D_IN;
    if (dp0_wmi_lclMetaAddr$EN)
      dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMetaAddr$D_IN;
    if (dp0_wmi_wmi_statusR$EN)
      dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wmi_statusR$D_IN;
    if (dp1_bml_fabBufsAvail$EN)
      dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabBufsAvail$D_IN;
    if (dp1_bml_fabFlowAddr$EN)
      dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabFlowAddr$D_IN;
    if (dp1_bml_fabMesgAddr$EN)
      dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMesgAddr$D_IN;
    if (dp1_bml_fabMetaAddr$EN)
      dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMetaAddr$D_IN;
    if (dp1_bml_lclBufsAR$EN)
      dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsAR$D_IN;
    if (dp1_bml_lclBufsCF$EN)
      dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsCF$D_IN;
    if (dp1_bml_lclCredit$EN)
      dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclCredit$D_IN;
    if (dp1_bml_lclMesgAddr$EN)
      dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMesgAddr$D_IN;
    if (dp1_bml_lclMetaAddr$EN)
      dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMetaAddr$D_IN;
    if (dp1_bml_remMesgAddr$EN)
      dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMesgAddr$D_IN;
    if (dp1_bml_remMetaAddr$EN)
      dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMetaAddr$D_IN;
    if (dp1_tlp_dmaPullRemainDWLen$EN)
      dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (dp1_tlp_dmaPullRemainDWSub$EN)
      dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (dp1_tlp_dmaReqTag$EN)
      dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaReqTag$D_IN;
    if (dp1_tlp_fabFlowAddr$EN)
      dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabFlowAddr$D_IN;
    if (dp1_tlp_fabMesgAccu$EN)
      dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAccu$D_IN;
    if (dp1_tlp_fabMesgAddr$EN)
      dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAddr$D_IN;
    if (dp1_tlp_fabMetaAddr$EN)
      dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMetaAddr$D_IN;
    if (dp1_tlp_inIgnorePkt$EN)
      dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp1_tlp_inIgnorePkt$D_IN;
    if (dp1_tlp_mesgComplReceived$EN)
      dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgComplReceived$D_IN;
    if (dp1_tlp_mesgLengthRemainPull$EN)
      dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPull$D_IN;
    if (dp1_tlp_mesgLengthRemainPush$EN)
      dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPush$D_IN;
    if (dp1_tlp_outDwRemain$EN)
      dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp1_tlp_outDwRemain$D_IN;
    if (dp1_tlp_rdRespDwRemain$EN)
      dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_rdRespDwRemain$D_IN;
    if (dp1_tlp_readNxtDWAddr$EN)
      dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readNxtDWAddr$D_IN;
    if (dp1_tlp_readRemainDWLen$EN)
      dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readRemainDWLen$D_IN;
    if (dp1_tlp_remMesgAccu$EN)
      dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAccu$D_IN;
    if (dp1_tlp_remMesgAddr$EN)
      dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAddr$D_IN;
    if (dp1_tlp_remMetaAddr$EN)
      dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMetaAddr$D_IN;
    if (dp1_tlp_srcMesgAccu$EN)
      dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_srcMesgAccu$D_IN;
    if (dp1_tlp_writeDWAddr$EN)
      dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeDWAddr$D_IN;
    if (dp1_tlp_writeLastBE$EN)
      dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeLastBE$D_IN;
    if (dp1_tlp_writeRemainDWLen$EN)
      dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_writeRemainDWLen$D_IN;
    if (dp1_wmi_addr$EN)
      dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_addr$D_IN;
    if (dp1_wmi_bytesRemainReq$EN)
      dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp1_wmi_bytesRemainReq$D_IN;
    if (dp1_wmi_lclMesgAddr$EN)
      dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMesgAddr$D_IN;
    if (dp1_wmi_lclMetaAddr$EN)
      dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMetaAddr$D_IN;
    if (dp1_wmi_wmi_statusR$EN)
      dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wmi_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    chompCnt = 8'hAA;
    dp0_bml_crdBuf_modulus = 16'hAAAA;
    dp0_bml_crdBuf_value = 16'hAAAA;
    dp0_bml_fabAvail = 1'h0;
    dp0_bml_fabBuf_modulus = 16'hAAAA;
    dp0_bml_fabBuf_value = 16'hAAAA;
    dp0_bml_fabBufsAvail = 16'hAAAA;
    dp0_bml_fabDone = 1'h0;
    dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    dp0_bml_fabNumBufs = 16'hAAAA;
    dp0_bml_lclBufDone = 1'h0;
    dp0_bml_lclBufStart = 1'h0;
    dp0_bml_lclBuf_modulus = 16'hAAAA;
    dp0_bml_lclBuf_value = 16'hAAAA;
    dp0_bml_lclBufsAR = 16'hAAAA;
    dp0_bml_lclBufsCF = 16'hAAAA;
    dp0_bml_lclCredit = 16'hAAAA;
    dp0_bml_lclDones = 16'hAAAA;
    dp0_bml_lclMesgAddr = 16'hAAAA;
    dp0_bml_lclMetaAddr = 16'hAAAA;
    dp0_bml_lclNumBufs = 16'hAAAA;
    dp0_bml_lclStarts = 16'hAAAA;
    dp0_bml_mesgBase = 16'hAAAA;
    dp0_bml_mesgSize = 16'hAAAA;
    dp0_bml_metaBase = 16'hAAAA;
    dp0_bml_metaSize = 16'hAAAA;
    dp0_bml_remBuf_modulus = 16'hAAAA;
    dp0_bml_remBuf_value = 16'hAAAA;
    dp0_bml_remDone = 1'h0;
    dp0_bml_remDones = 16'hAAAA;
    dp0_bml_remMesgAddr = 16'hAAAA;
    dp0_bml_remMetaAddr = 16'hAAAA;
    dp0_bml_remStart = 1'h0;
    dp0_bml_remStarts = 16'hAAAA;
    dp0_bram_serverAdapterA_1_cnt = 3'h2;
    dp0_bram_serverAdapterA_1_s1 = 2'h2;
    dp0_bram_serverAdapterA_2_cnt = 3'h2;
    dp0_bram_serverAdapterA_2_s1 = 2'h2;
    dp0_bram_serverAdapterA_3_cnt = 3'h2;
    dp0_bram_serverAdapterA_3_s1 = 2'h2;
    dp0_bram_serverAdapterA_cnt = 3'h2;
    dp0_bram_serverAdapterA_s1 = 2'h2;
    dp0_bram_serverAdapterB_1_cnt = 3'h2;
    dp0_bram_serverAdapterB_1_s1 = 2'h2;
    dp0_bram_serverAdapterB_2_cnt = 3'h2;
    dp0_bram_serverAdapterB_2_s1 = 2'h2;
    dp0_bram_serverAdapterB_3_cnt = 3'h2;
    dp0_bram_serverAdapterB_3_s1 = 2'h2;
    dp0_bram_serverAdapterB_cnt = 3'h2;
    dp0_bram_serverAdapterB_s1 = 2'h2;
    dp0_dpControl = 4'hA;
    dp0_tlp_creditReady = 1'h0;
    dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_dmaDoTailEvent = 1'h0;
    dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp0_tlp_dmaReqTag = 5'h0A;
    dp0_tlp_dmaTag = 5'h0A;
    dp0_tlp_doXmtMetaBody = 1'h0;
    dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp0_tlp_farBufReady = 1'h0;
    dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp0_tlp_gotResponseHeader = 1'h0;
    dp0_tlp_inIgnorePkt = 1'h0;
    dp0_tlp_maxPayloadSize = 13'h0AAA;
    dp0_tlp_maxReadReqSize = 13'h0AAA;
    dp0_tlp_mesgComplReceived = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp0_tlp_nearBufReady = 1'h0;
    dp0_tlp_outDwRemain = 10'h2AA;
    dp0_tlp_postSeqDwell = 4'hA;
    dp0_tlp_pullTagMatch = 1'h0;
    dp0_tlp_rdRespDwRemain = 10'h2AA;
    dp0_tlp_readHeaderSent = 1'h0;
    dp0_tlp_readNxtDWAddr = 13'h0AAA;
    dp0_tlp_readRemainDWLen = 10'h2AA;
    dp0_tlp_readStarted = 1'h0;
    dp0_tlp_remDone = 1'h0;
    dp0_tlp_remMesgAccu = 16'hAAAA;
    dp0_tlp_remMesgAddr = 16'hAAAA;
    dp0_tlp_remMetaAddr = 16'hAAAA;
    dp0_tlp_remStart = 1'h0;
    dp0_tlp_reqMesgInFlight = 1'h0;
    dp0_tlp_reqMetaBodyInFlight = 1'h0;
    dp0_tlp_reqMetaInFlight = 1'h0;
    dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_tlpMetaSent = 1'h0;
    dp0_tlp_tlpRcvBusy = 1'h0;
    dp0_tlp_tlpXmtBusy = 1'h0;
    dp0_tlp_writeDWAddr = 13'h0AAA;
    dp0_tlp_writeLastBE = 4'hA;
    dp0_tlp_writeRemainDWLen = 10'h2AA;
    dp0_tlp_xmtMetaInFlight = 1'h0;
    dp0_tlp_xmtMetaOK = 1'h0;
    dp0_wci_cEdge = 3'h2;
    dp0_wci_cState = 3'h2;
    dp0_wci_ctlAckReg = 1'h0;
    dp0_wci_ctlOpActive = 1'h0;
    dp0_wci_illegalEdge = 1'h0;
    dp0_wci_nState = 3'h2;
    dp0_wci_reqF_countReg = 2'h2;
    dp0_wci_respF_c_r = 2'h2;
    dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wci_sFlagReg = 1'h0;
    dp0_wci_sThreadBusy_d = 1'h0;
    dp0_wmi_addr = 14'h2AAA;
    dp0_wmi_bufDwell = 2'h2;
    dp0_wmi_bytesRemainReq = 14'h2AAA;
    dp0_wmi_bytesRemainResp = 14'h2AAA;
    dp0_wmi_doneWithMesg = 1'h0;
    dp0_wmi_lastMesg = 32'hAAAAAAAA;
    dp0_wmi_lclMesgAddr = 15'h2AAA;
    dp0_wmi_lclMetaAddr = 15'h2AAA;
    dp0_wmi_mesgBufReady = 1'h0;
    dp0_wmi_mesgBusy = 1'h0;
    dp0_wmi_mesgCount = 32'hAAAAAAAA;
    dp0_wmi_mesgDone = 1'h0;
    dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_mesgStart = 1'h0;
    dp0_wmi_metaBusy = 1'h0;
    dp0_wmi_p4B = 2'h2;
    dp0_wmi_rdActive = 1'h0;
    dp0_wmi_reqCount = 16'hAAAA;
    dp0_wmi_thisMesg = 32'hAAAAAAAA;
    dp0_wmi_wmi_blockReq = 1'h0;
    dp0_wmi_wmi_dhF_countReg = 2'h2;
    dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    dp0_wmi_wmi_errorSticky = 1'h0;
    dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_operateD = 1'h0;
    dp0_wmi_wmi_peerIsReady = 1'h0;
    dp0_wmi_wmi_reqF_countReg = 2'h2;
    dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    dp0_wmi_wmi_respF_c_r = 2'h2;
    dp0_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_statusR = 8'hAA;
    dp0_wmi_wmi_trafficSticky = 1'h0;
    dp0_wmi_wrActive = 1'h0;
    dp0_wmi_wrFinalize = 1'h0;
    dp0_wmi_wrtCount = 16'hAAAA;
    dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    dp1_bml_crdBuf_modulus = 16'hAAAA;
    dp1_bml_crdBuf_value = 16'hAAAA;
    dp1_bml_fabAvail = 1'h0;
    dp1_bml_fabBuf_modulus = 16'hAAAA;
    dp1_bml_fabBuf_value = 16'hAAAA;
    dp1_bml_fabBufsAvail = 16'hAAAA;
    dp1_bml_fabDone = 1'h0;
    dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    dp1_bml_fabNumBufs = 16'hAAAA;
    dp1_bml_lclBufDone = 1'h0;
    dp1_bml_lclBufStart = 1'h0;
    dp1_bml_lclBuf_modulus = 16'hAAAA;
    dp1_bml_lclBuf_value = 16'hAAAA;
    dp1_bml_lclBufsAR = 16'hAAAA;
    dp1_bml_lclBufsCF = 16'hAAAA;
    dp1_bml_lclCredit = 16'hAAAA;
    dp1_bml_lclDones = 16'hAAAA;
    dp1_bml_lclMesgAddr = 16'hAAAA;
    dp1_bml_lclMetaAddr = 16'hAAAA;
    dp1_bml_lclNumBufs = 16'hAAAA;
    dp1_bml_lclStarts = 16'hAAAA;
    dp1_bml_mesgBase = 16'hAAAA;
    dp1_bml_mesgSize = 16'hAAAA;
    dp1_bml_metaBase = 16'hAAAA;
    dp1_bml_metaSize = 16'hAAAA;
    dp1_bml_remBuf_modulus = 16'hAAAA;
    dp1_bml_remBuf_value = 16'hAAAA;
    dp1_bml_remDone = 1'h0;
    dp1_bml_remDones = 16'hAAAA;
    dp1_bml_remMesgAddr = 16'hAAAA;
    dp1_bml_remMetaAddr = 16'hAAAA;
    dp1_bml_remStart = 1'h0;
    dp1_bml_remStarts = 16'hAAAA;
    dp1_bram_serverAdapterA_1_cnt = 3'h2;
    dp1_bram_serverAdapterA_1_s1 = 2'h2;
    dp1_bram_serverAdapterA_2_cnt = 3'h2;
    dp1_bram_serverAdapterA_2_s1 = 2'h2;
    dp1_bram_serverAdapterA_3_cnt = 3'h2;
    dp1_bram_serverAdapterA_3_s1 = 2'h2;
    dp1_bram_serverAdapterA_cnt = 3'h2;
    dp1_bram_serverAdapterA_s1 = 2'h2;
    dp1_bram_serverAdapterB_1_cnt = 3'h2;
    dp1_bram_serverAdapterB_1_s1 = 2'h2;
    dp1_bram_serverAdapterB_2_cnt = 3'h2;
    dp1_bram_serverAdapterB_2_s1 = 2'h2;
    dp1_bram_serverAdapterB_3_cnt = 3'h2;
    dp1_bram_serverAdapterB_3_s1 = 2'h2;
    dp1_bram_serverAdapterB_cnt = 3'h2;
    dp1_bram_serverAdapterB_s1 = 2'h2;
    dp1_dpControl = 4'hA;
    dp1_tlp_creditReady = 1'h0;
    dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_dmaDoTailEvent = 1'h0;
    dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp1_tlp_dmaReqTag = 5'h0A;
    dp1_tlp_dmaTag = 5'h0A;
    dp1_tlp_doXmtMetaBody = 1'h0;
    dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp1_tlp_farBufReady = 1'h0;
    dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp1_tlp_gotResponseHeader = 1'h0;
    dp1_tlp_inIgnorePkt = 1'h0;
    dp1_tlp_maxPayloadSize = 13'h0AAA;
    dp1_tlp_maxReadReqSize = 13'h0AAA;
    dp1_tlp_mesgComplReceived = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp1_tlp_nearBufReady = 1'h0;
    dp1_tlp_outDwRemain = 10'h2AA;
    dp1_tlp_postSeqDwell = 4'hA;
    dp1_tlp_pullTagMatch = 1'h0;
    dp1_tlp_rdRespDwRemain = 10'h2AA;
    dp1_tlp_readHeaderSent = 1'h0;
    dp1_tlp_readNxtDWAddr = 13'h0AAA;
    dp1_tlp_readRemainDWLen = 10'h2AA;
    dp1_tlp_readStarted = 1'h0;
    dp1_tlp_remDone = 1'h0;
    dp1_tlp_remMesgAccu = 16'hAAAA;
    dp1_tlp_remMesgAddr = 16'hAAAA;
    dp1_tlp_remMetaAddr = 16'hAAAA;
    dp1_tlp_remStart = 1'h0;
    dp1_tlp_reqMesgInFlight = 1'h0;
    dp1_tlp_reqMetaBodyInFlight = 1'h0;
    dp1_tlp_reqMetaInFlight = 1'h0;
    dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_tlpMetaSent = 1'h0;
    dp1_tlp_tlpRcvBusy = 1'h0;
    dp1_tlp_tlpXmtBusy = 1'h0;
    dp1_tlp_writeDWAddr = 13'h0AAA;
    dp1_tlp_writeLastBE = 4'hA;
    dp1_tlp_writeRemainDWLen = 10'h2AA;
    dp1_tlp_xmtMetaInFlight = 1'h0;
    dp1_tlp_xmtMetaOK = 1'h0;
    dp1_wci_cEdge = 3'h2;
    dp1_wci_cState = 3'h2;
    dp1_wci_ctlAckReg = 1'h0;
    dp1_wci_ctlOpActive = 1'h0;
    dp1_wci_illegalEdge = 1'h0;
    dp1_wci_nState = 3'h2;
    dp1_wci_reqF_countReg = 2'h2;
    dp1_wci_respF_c_r = 2'h2;
    dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wci_sFlagReg = 1'h0;
    dp1_wci_sThreadBusy_d = 1'h0;
    dp1_wmi_addr = 14'h2AAA;
    dp1_wmi_bufDwell = 2'h2;
    dp1_wmi_bytesRemainReq = 14'h2AAA;
    dp1_wmi_bytesRemainResp = 14'h2AAA;
    dp1_wmi_doneWithMesg = 1'h0;
    dp1_wmi_lastMesg = 32'hAAAAAAAA;
    dp1_wmi_lclMesgAddr = 15'h2AAA;
    dp1_wmi_lclMetaAddr = 15'h2AAA;
    dp1_wmi_mesgBufReady = 1'h0;
    dp1_wmi_mesgBusy = 1'h0;
    dp1_wmi_mesgCount = 32'hAAAAAAAA;
    dp1_wmi_mesgDone = 1'h0;
    dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_mesgStart = 1'h0;
    dp1_wmi_metaBusy = 1'h0;
    dp1_wmi_p4B = 2'h2;
    dp1_wmi_rdActive = 1'h0;
    dp1_wmi_reqCount = 16'hAAAA;
    dp1_wmi_thisMesg = 32'hAAAAAAAA;
    dp1_wmi_wmi_blockReq = 1'h0;
    dp1_wmi_wmi_dhF_countReg = 2'h2;
    dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    dp1_wmi_wmi_errorSticky = 1'h0;
    dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_operateD = 1'h0;
    dp1_wmi_wmi_peerIsReady = 1'h0;
    dp1_wmi_wmi_reqF_countReg = 2'h2;
    dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    dp1_wmi_wmi_respF_c_r = 2'h2;
    dp1_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_statusR = 8'hAA;
    dp1_wmi_wmi_trafficSticky = 1'h0;
    dp1_wmi_wrActive = 1'h0;
    dp1_wmi_wrFinalize = 1'h0;
    dp1_wmi_wrtCount = 16'hAAAA;
    dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc0_wti_sThreadBusy_d = 1'h0;
    itc1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc1_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	begin
	  v__h162724 = $time;
	  #0;
	end
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h162724,
		 $unsigned(chompCnt));
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	begin
	  v__h79472 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h79472,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 _theResult____h79456);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	begin
	  v__h17574 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h17574,
		 dp0_wci_reqF$D_OUT[36:34],
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta)
	begin
	  v__h21859 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h21859);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg)
	begin
	  v__h27311 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h27311);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead)
	begin
	  v__h22871 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h22871,
		 { dp0_tlp_mRespF$D_OUT[7:0],
		   dp0_tlp_mRespF$D_OUT[15:8],
		   dp0_tlp_mRespF$D_OUT[23:16],
		   dp0_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader)
	  begin
	    v__h27878 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h27878);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody)
	begin
	  v__h28229 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h28229);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
	  begin
	    v__h29292 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h29292);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody)
	begin
	  v__h32026 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h32026);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent)
	  begin
	    v__h33060 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h33060);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	  begin
	    v__h34107 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h34107);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h35697 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h35697,
		   { dp0_tlp_inF$D_OUT[7:0],
		     dp0_tlp_inF$D_OUT[15:8],
		     dp0_tlp_inF$D_OUT[23:16],
		     dp0_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h40846 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h40846);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h41163 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h41163);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody)
	begin
	  v__h26965 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h26965,
		 opcode__h23800,
		 nowMS__h23801,
		 nowLS__h23802);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  begin
	    v__h34446 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h34446);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h40228 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h40228);
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	  begin
	    v__h42217 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h42217);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h39801 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h39801,
		 opcode__h36642,
		 nowMS__h36643,
		 nowLS__h36644);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	begin
	  v__h71536 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h71536,
		 dp0_wmi_lclMetaAddr,
		 x3__h70893,
		 mesgMeta_opcode__h70933,
		 dp0_wmi_nowW$wget[63:32],
		 dp0_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h78936 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h78936);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	begin
	  v__h79310 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h79310,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 dp0_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && WILL_FIRE_RL_dp0_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp0_wci_cfwr and RL_dp0_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	begin
	  v__h17914 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h17914,
		 dp0_wci_cEdge,
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	begin
	  v__h17759 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h17759,
		 dp0_wci_cEdge,
		 dp0_wci_cState,
		 dp0_wci_nState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	begin
	  v__h158530 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h158530,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 _theResult____h158514);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	begin
	  v__h96663 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h96663,
		 dp1_wci_reqF$D_OUT[36:34],
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h100933 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h100933);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h106382 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h106382);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h101942 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h101942,
		 { dp1_tlp_mRespF$D_OUT[7:0],
		   dp1_tlp_mRespF$D_OUT[15:8],
		   dp1_tlp_mRespF$D_OUT[23:16],
		   dp1_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  begin
	    v__h106949 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h106949);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h107300 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h107300);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  begin
	    v__h108363 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h108363);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	  begin
	    v__h112131 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7",
		   v__h112131);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h111097 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h111097);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	  begin
	    v__h113178 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h113178);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h114760 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h114760,
		   { dp1_tlp_inF$D_OUT[7:0],
		     dp1_tlp_inF$D_OUT[15:8],
		     dp1_tlp_inF$D_OUT[23:16],
		     dp1_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader)
	begin
	  v__h119909 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h119909);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody)
	begin
	  v__h120226 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h120226);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
	  begin
	    v__h121280 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h121280);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
	begin
	  v__h118864 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h118864,
		 opcode__h115705,
		 nowMS__h115706,
		 nowLS__h115707);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h106036 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h106036,
		 opcode__h102871,
		 nowMS__h102872,
		 nowLS__h102873);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta)
	  begin
	    v__h113512 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h113512);
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h119291 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h119291);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	begin
	  v__h150599 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h150599,
		 dp1_wmi_lclMetaAddr,
		 x3__h149956,
		 mesgMeta_opcode__h149996,
		 dp1_wmi_nowW$wget[63:32],
		 dp1_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h157994 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h157994);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	begin
	  v__h158368 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h158368,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 dp1_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && WILL_FIRE_RL_dp1_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp1_wci_cfwr and RL_dp1_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	begin
	  v__h97000 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h97000,
		 dp1_wci_cEdge,
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	begin
	  v__h96845 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h96845,
		 dp1_wci_cEdge,
		 dp1_wci_cState,
		 dp1_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOCInf4B

