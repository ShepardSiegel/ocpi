//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Mon Feb  7 19:55:04 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     8
// pcie_txn                       O     8
// axi4m_AWVALID                  O     1
// axi4m_AWADDR                   O    32 reg
// axi4m_AWPROT                   O     3 reg
// axi4m_WVALID                   O     1
// axi4m_WDATA                    O    32 reg
// axi4m_WSTRB                    O     4 reg
// axi4m_BREADY                   O     1
// axi4m_ARVALID                  O     1
// axi4m_ARADDR                   O    32 reg
// axi4m_ARPROT                   O     3 reg
// axi4m_RREADY                   O     1
// axisM_dat_TVALID               O     1
// axisM_dat_TDATA                O   256 reg
// axisM_dat_TSTRB                O    32 reg
// axisM_dat_TLAST                O     1 reg
// axisM_len_TVALID               O     1
// axisM_len_TDATA                O    16 reg
// axisM_len_TSTRB                O     2 reg
// axisM_len_TLAST                O     1 reg
// axisM_spt_TVALID               O     1
// axisM_spt_TDATA                O     8 reg
// axisM_spt_TSTRB                O     1 reg
// axisM_spt_TLAST                O     1 reg
// axisM_dpt_TVALID               O     1
// axisM_dpt_TDATA                O     8 reg
// axisM_dpt_TSTRB                O     1 reg
// axisM_dpt_TLAST                O     1 reg
// axisM_err_TVALID               O     1
// axisM_err_TDATA                O     8 reg
// axisM_err_TSTRB                O     1 reg
// axisM_err_TLAST                O     1 reg
// axisS_dat_TREADY               O     1
// axisS_len_TREADY               O     1
// axisS_spt_TREADY               O     1
// axisS_dpt_TREADY               O     1
// axisS_err_TREADY               O     1
// debug                          O    32
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// RST_N_p125rst                  O     1 reset
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// RST_N_pci0_rstn                I     1 reset
// pcie_rxp_i                     I     8
// pcie_rxn_i                     I     8
// axi4m_BRESP                    I     2 reg
// axi4m_RDATA                    I    32 reg
// axi4m_RRESP                    I     2 reg
// axisS_dat_TDATA                I   256 reg
// axisS_dat_TSTRB                I    32 reg
// axisS_len_TDATA                I    16 reg
// axisS_len_TSTRB                I     2 reg
// axisS_spt_TDATA                I     8 reg
// axisS_spt_TSTRB                I     1 reg
// axisS_dpt_TDATA                I     8 reg
// axisS_dpt_TSTRB                I     1 reg
// axisS_err_TDATA                I     8 reg
// axisS_err_TSTRB                I     1 reg
// axi4m_AWREADY                  I     1
// axi4m_WREADY                   I     1
// axi4m_BVALID                   I     1
// axi4m_ARREADY                  I     1
// axi4m_RVALID                   I     1
// axisM_dat_TREADY               I     1
// axisM_len_TREADY               I     1
// axisM_spt_TREADY               I     1
// axisM_dpt_TREADY               I     1
// axisM_err_TREADY               I     1
// axisS_dat_TVALID               I     1
// axisS_dat_TLAST                I     1 reg
// axisS_len_TVALID               I     1
// axisS_len_TLAST                I     1 reg
// axisS_spt_TVALID               I     1
// axisS_spt_TLAST                I     1 reg
// axisS_dpt_TVALID               I     1
// axisS_dpt_TLAST                I     1 reg
// axisS_err_TVALID               I     1
// axisS_err_TLAST                I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOPED_v5(pci0_clkp,
		 pci0_clkn,
		 RST_N_pci0_rstn,

		 pcie_rxp_i,

		 pcie_rxn_i,

		 pcie_txp,

		 pcie_txn,

		 axi4m_AWVALID,

		 axi4m_AWREADY,

		 axi4m_AWADDR,

		 axi4m_AWPROT,

		 axi4m_WVALID,

		 axi4m_WREADY,

		 axi4m_WDATA,

		 axi4m_WSTRB,

		 axi4m_BVALID,

		 axi4m_BREADY,

		 axi4m_BRESP,

		 axi4m_ARVALID,

		 axi4m_ARREADY,

		 axi4m_ARADDR,

		 axi4m_ARPROT,

		 axi4m_RVALID,

		 axi4m_RREADY,

		 axi4m_RDATA,

		 axi4m_RRESP,

		 axisM_dat_TVALID,

		 axisM_dat_TREADY,

		 axisM_dat_TDATA,

		 axisM_dat_TSTRB,

		 axisM_dat_TLAST,

		 axisM_len_TVALID,

		 axisM_len_TREADY,

		 axisM_len_TDATA,

		 axisM_len_TSTRB,

		 axisM_len_TLAST,

		 axisM_spt_TVALID,

		 axisM_spt_TREADY,

		 axisM_spt_TDATA,

		 axisM_spt_TSTRB,

		 axisM_spt_TLAST,

		 axisM_dpt_TVALID,

		 axisM_dpt_TREADY,

		 axisM_dpt_TDATA,

		 axisM_dpt_TSTRB,

		 axisM_dpt_TLAST,

		 axisM_err_TVALID,

		 axisM_err_TREADY,

		 axisM_err_TDATA,

		 axisM_err_TSTRB,

		 axisM_err_TLAST,

		 axisS_dat_TVALID,

		 axisS_dat_TREADY,

		 axisS_dat_TDATA,

		 axisS_dat_TSTRB,

		 axisS_dat_TLAST,

		 axisS_len_TVALID,

		 axisS_len_TREADY,

		 axisS_len_TDATA,

		 axisS_len_TSTRB,

		 axisS_len_TLAST,

		 axisS_spt_TVALID,

		 axisS_spt_TREADY,

		 axisS_spt_TDATA,

		 axisS_spt_TSTRB,

		 axisS_spt_TLAST,

		 axisS_dpt_TVALID,

		 axisS_dpt_TREADY,

		 axisS_dpt_TDATA,

		 axisS_dpt_TSTRB,

		 axisS_dpt_TLAST,

		 axisS_err_TVALID,

		 axisS_err_TREADY,

		 axisS_err_TDATA,

		 axisS_err_TSTRB,

		 axisS_err_TLAST,

		 debug,

		 p125clk,
		 CLK_GATE_p125clk,

		 RST_N_p125rst);
  input  pci0_clkp;
  input  pci0_clkn;
  input  RST_N_pci0_rstn;

  // action method pcie_rxp
  input  [7 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [7 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [7 : 0] pcie_txp;

  // value method pcie_txn
  output [7 : 0] pcie_txn;

  // value method axi4m_mAWVALID
  output axi4m_AWVALID;

  // action method axi4m_sAWREADY
  input  axi4m_AWREADY;

  // value method axi4m_mAWADDR
  output [31 : 0] axi4m_AWADDR;

  // value method axi4m_mAWPROT
  output [2 : 0] axi4m_AWPROT;

  // value method axi4m_mWVALID
  output axi4m_WVALID;

  // action method axi4m_sWREADY
  input  axi4m_WREADY;

  // value method axi4m_mWDATA
  output [31 : 0] axi4m_WDATA;

  // value method axi4m_mWSTRB
  output [3 : 0] axi4m_WSTRB;

  // action method axi4m_sBVALID
  input  axi4m_BVALID;

  // value method axi4m_mBREADY
  output axi4m_BREADY;

  // action method axi4m_sBRESP
  input  [1 : 0] axi4m_BRESP;

  // value method axi4m_mARVALID
  output axi4m_ARVALID;

  // action method axi4m_sARREADY
  input  axi4m_ARREADY;

  // value method axi4m_mARADDR
  output [31 : 0] axi4m_ARADDR;

  // value method axi4m_mARPROT
  output [2 : 0] axi4m_ARPROT;

  // action method axi4m_sRVALID
  input  axi4m_RVALID;

  // value method axi4m_mRREADY
  output axi4m_RREADY;

  // action method axi4m_sRDATA
  input  [31 : 0] axi4m_RDATA;

  // action method axi4m_sRRESP
  input  [1 : 0] axi4m_RRESP;

  // value method axisM_dat_mTVALID
  output axisM_dat_TVALID;

  // action method axisM_dat_sTREADY
  input  axisM_dat_TREADY;

  // value method axisM_dat_mTDATA
  output [255 : 0] axisM_dat_TDATA;

  // value method axisM_dat_mTSTRB
  output [31 : 0] axisM_dat_TSTRB;

  // value method axisM_dat_mTKEEP

  // value method axisM_dat_mTLAST
  output axisM_dat_TLAST;

  // value method axisM_len_mTVALID
  output axisM_len_TVALID;

  // action method axisM_len_sTREADY
  input  axisM_len_TREADY;

  // value method axisM_len_mTDATA
  output [15 : 0] axisM_len_TDATA;

  // value method axisM_len_mTSTRB
  output [1 : 0] axisM_len_TSTRB;

  // value method axisM_len_mTKEEP

  // value method axisM_len_mTLAST
  output axisM_len_TLAST;

  // value method axisM_spt_mTVALID
  output axisM_spt_TVALID;

  // action method axisM_spt_sTREADY
  input  axisM_spt_TREADY;

  // value method axisM_spt_mTDATA
  output [7 : 0] axisM_spt_TDATA;

  // value method axisM_spt_mTSTRB
  output axisM_spt_TSTRB;

  // value method axisM_spt_mTKEEP

  // value method axisM_spt_mTLAST
  output axisM_spt_TLAST;

  // value method axisM_dpt_mTVALID
  output axisM_dpt_TVALID;

  // action method axisM_dpt_sTREADY
  input  axisM_dpt_TREADY;

  // value method axisM_dpt_mTDATA
  output [7 : 0] axisM_dpt_TDATA;

  // value method axisM_dpt_mTSTRB
  output axisM_dpt_TSTRB;

  // value method axisM_dpt_mTKEEP

  // value method axisM_dpt_mTLAST
  output axisM_dpt_TLAST;

  // value method axisM_err_mTVALID
  output axisM_err_TVALID;

  // action method axisM_err_sTREADY
  input  axisM_err_TREADY;

  // value method axisM_err_mTDATA
  output [7 : 0] axisM_err_TDATA;

  // value method axisM_err_mTSTRB
  output axisM_err_TSTRB;

  // value method axisM_err_mTKEEP

  // value method axisM_err_mTLAST
  output axisM_err_TLAST;

  // action method axisS_dat_mTVALID
  input  axisS_dat_TVALID;

  // value method axisS_dat_sTREADY
  output axisS_dat_TREADY;

  // action method axisS_dat_mTDATA
  input  [255 : 0] axisS_dat_TDATA;

  // action method axisS_dat_mTSTRB
  input  [31 : 0] axisS_dat_TSTRB;

  // action method axisS_dat_mTKEEP

  // action method axisS_dat_mTLAST
  input  axisS_dat_TLAST;

  // action method axisS_len_mTVALID
  input  axisS_len_TVALID;

  // value method axisS_len_sTREADY
  output axisS_len_TREADY;

  // action method axisS_len_mTDATA
  input  [15 : 0] axisS_len_TDATA;

  // action method axisS_len_mTSTRB
  input  [1 : 0] axisS_len_TSTRB;

  // action method axisS_len_mTKEEP

  // action method axisS_len_mTLAST
  input  axisS_len_TLAST;

  // action method axisS_spt_mTVALID
  input  axisS_spt_TVALID;

  // value method axisS_spt_sTREADY
  output axisS_spt_TREADY;

  // action method axisS_spt_mTDATA
  input  [7 : 0] axisS_spt_TDATA;

  // action method axisS_spt_mTSTRB
  input  axisS_spt_TSTRB;

  // action method axisS_spt_mTKEEP

  // action method axisS_spt_mTLAST
  input  axisS_spt_TLAST;

  // action method axisS_dpt_mTVALID
  input  axisS_dpt_TVALID;

  // value method axisS_dpt_sTREADY
  output axisS_dpt_TREADY;

  // action method axisS_dpt_mTDATA
  input  [7 : 0] axisS_dpt_TDATA;

  // action method axisS_dpt_mTSTRB
  input  axisS_dpt_TSTRB;

  // action method axisS_dpt_mTKEEP

  // action method axisS_dpt_mTLAST
  input  axisS_dpt_TLAST;

  // action method axisS_err_mTVALID
  input  axisS_err_TVALID;

  // value method axisS_err_sTREADY
  output axisS_err_TREADY;

  // action method axisS_err_mTDATA
  input  [7 : 0] axisS_err_TDATA;

  // action method axisS_err_mTSTRB
  input  axisS_err_TSTRB;

  // action method axisS_err_mTKEEP

  // action method axisS_err_mTLAST
  input  axisS_err_TLAST;

  // value method debug
  output [31 : 0] debug;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // output resets
  output RST_N_p125rst;

  // signals for module outputs
  wire [255 : 0] axisM_dat_TDATA;
  wire [31 : 0] axi4m_ARADDR,
		axi4m_AWADDR,
		axi4m_WDATA,
		axisM_dat_TSTRB,
		debug;
  wire [15 : 0] axisM_len_TDATA;
  wire [7 : 0] axisM_dpt_TDATA,
	       axisM_err_TDATA,
	       axisM_spt_TDATA,
	       pcie_txn,
	       pcie_txp;
  wire [3 : 0] axi4m_WSTRB;
  wire [2 : 0] axi4m_ARPROT, axi4m_AWPROT;
  wire [1 : 0] axisM_len_TSTRB;
  wire CLK_GATE_p125clk,
       RST_N_p125rst,
       axi4m_ARVALID,
       axi4m_AWVALID,
       axi4m_BREADY,
       axi4m_RREADY,
       axi4m_WVALID,
       axisM_dat_TLAST,
       axisM_dat_TVALID,
       axisM_dpt_TLAST,
       axisM_dpt_TSTRB,
       axisM_dpt_TVALID,
       axisM_err_TLAST,
       axisM_err_TSTRB,
       axisM_err_TVALID,
       axisM_len_TLAST,
       axisM_len_TVALID,
       axisM_spt_TLAST,
       axisM_spt_TSTRB,
       axisM_spt_TVALID,
       axisS_dat_TREADY,
       axisS_dpt_TREADY,
       axisS_err_TREADY,
       axisS_len_TREADY,
       axisS_spt_TREADY,
       p125clk;

  // inlined wires
  wire [71 : 0] dp0_wci_wciReq$wget, dp1_wci_wciReq$wget;
  wire [66 : 0] dp0_wti_wtiReq$wget, dp1_wti_wtiReq$wget;
  wire [63 : 0] dp0_wmi_nowW$wget,
		dp1_wmi_nowW$wget,
		pciw_pci0_wTrnTxDat$wget;
  wire [37 : 0] dp0_wmi_wmi_wmiDh$wget, dp1_wmi_wmi_wmiDh$wget;
  wire [33 : 0] dp0_wci_respF_x_wire$wget,
		dp0_wmi_wmi_respF_x_wire$wget,
		dp1_wci_respF_x_wire$wget,
		dp1_wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] a4lm_rdData_w$wget,
		dp0_bram_serverAdapterA_1_outData_enqData$wget,
		dp0_bram_serverAdapterA_1_outData_outData$wget,
		dp0_bram_serverAdapterA_2_outData_enqData$wget,
		dp0_bram_serverAdapterA_2_outData_outData$wget,
		dp0_bram_serverAdapterA_3_outData_enqData$wget,
		dp0_bram_serverAdapterA_3_outData_outData$wget,
		dp0_bram_serverAdapterA_outData_enqData$wget,
		dp0_bram_serverAdapterA_outData_outData$wget,
		dp0_bram_serverAdapterB_1_outData_enqData$wget,
		dp0_bram_serverAdapterB_1_outData_outData$wget,
		dp0_bram_serverAdapterB_2_outData_enqData$wget,
		dp0_bram_serverAdapterB_2_outData_outData$wget,
		dp0_bram_serverAdapterB_3_outData_enqData$wget,
		dp0_bram_serverAdapterB_3_outData_outData$wget,
		dp0_bram_serverAdapterB_outData_enqData$wget,
		dp0_bram_serverAdapterB_outData_outData$wget,
		dp0_wci_Es_mAddr_w$wget,
		dp0_wci_Es_mData_w$wget,
		dp0_wmi_Es_mData_w$wget,
		dp0_wmi_wmi_wmiMFlag$wget,
		dp0_wmi_wmi_wmiReq$wget,
		dp1_bram_serverAdapterA_1_outData_enqData$wget,
		dp1_bram_serverAdapterA_1_outData_outData$wget,
		dp1_bram_serverAdapterA_2_outData_enqData$wget,
		dp1_bram_serverAdapterA_2_outData_outData$wget,
		dp1_bram_serverAdapterA_3_outData_enqData$wget,
		dp1_bram_serverAdapterA_3_outData_outData$wget,
		dp1_bram_serverAdapterA_outData_enqData$wget,
		dp1_bram_serverAdapterA_outData_outData$wget,
		dp1_bram_serverAdapterB_1_outData_enqData$wget,
		dp1_bram_serverAdapterB_1_outData_outData$wget,
		dp1_bram_serverAdapterB_2_outData_enqData$wget,
		dp1_bram_serverAdapterB_2_outData_outData$wget,
		dp1_bram_serverAdapterB_3_outData_enqData$wget,
		dp1_bram_serverAdapterB_3_outData_outData$wget,
		dp1_bram_serverAdapterB_outData_enqData$wget,
		dp1_bram_serverAdapterB_outData_outData$wget,
		dp1_wci_Es_mAddr_w$wget,
		dp1_wci_Es_mData_w$wget,
		dp1_wmi_Es_mData_w$wget,
		dp1_wmi_wmi_wmiMFlag$wget,
		dp1_wmi_wmi_wmiReq$wget;
  wire [15 : 0] dp0_bml_crdBuf_modulus_bw$wget,
		dp0_bml_fabBuf_modulus_bw$wget,
		dp0_bml_lclBuf_modulus_bw$wget,
		dp0_bml_remBuf_modulus_bw$wget,
		dp1_bml_crdBuf_modulus_bw$wget,
		dp1_bml_fabBuf_modulus_bw$wget,
		dp1_bml_lclBuf_modulus_bw$wget,
		dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] dp0_wmi_Es_mAddr_w$wget, dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] dp0_wmi_Es_mBurstLength_w$wget,
		dp1_wmi_Es_mBurstLength_w$wget;
  wire [7 : 0] pciw_pci0_wTrnTxRem$wget, pciw_pcie_irq_wInterruptDo$wget;
  wire [3 : 0] dp0_bml_dpControl$wget,
	       dp0_tlp_dpControl$wget,
	       dp0_wci_Es_mByteEn_w$wget,
	       dp0_wmi_Es_mDataByteEn_w$wget,
	       dp0_wmi_dpControl$wget,
	       dp1_bml_dpControl$wget,
	       dp1_tlp_dpControl$wget,
	       dp1_wci_Es_mByteEn_w$wget,
	       dp1_wmi_Es_mDataByteEn_w$wget,
	       dp1_wmi_dpControl$wget;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_1$wget,
	       dp0_bram_serverAdapterA_1_cnt_2$wget,
	       dp0_bram_serverAdapterA_1_cnt_3$wget,
	       dp0_bram_serverAdapterA_2_cnt_1$wget,
	       dp0_bram_serverAdapterA_2_cnt_2$wget,
	       dp0_bram_serverAdapterA_2_cnt_3$wget,
	       dp0_bram_serverAdapterA_3_cnt_1$wget,
	       dp0_bram_serverAdapterA_3_cnt_2$wget,
	       dp0_bram_serverAdapterA_3_cnt_3$wget,
	       dp0_bram_serverAdapterA_cnt_1$wget,
	       dp0_bram_serverAdapterA_cnt_2$wget,
	       dp0_bram_serverAdapterA_cnt_3$wget,
	       dp0_bram_serverAdapterB_1_cnt_1$wget,
	       dp0_bram_serverAdapterB_1_cnt_2$wget,
	       dp0_bram_serverAdapterB_1_cnt_3$wget,
	       dp0_bram_serverAdapterB_2_cnt_1$wget,
	       dp0_bram_serverAdapterB_2_cnt_2$wget,
	       dp0_bram_serverAdapterB_2_cnt_3$wget,
	       dp0_bram_serverAdapterB_3_cnt_1$wget,
	       dp0_bram_serverAdapterB_3_cnt_2$wget,
	       dp0_bram_serverAdapterB_3_cnt_3$wget,
	       dp0_bram_serverAdapterB_cnt_1$wget,
	       dp0_bram_serverAdapterB_cnt_2$wget,
	       dp0_bram_serverAdapterB_cnt_3$wget,
	       dp0_wci_Es_mCmd_w$wget,
	       dp0_wci_wEdge$wget,
	       dp0_wmi_Es_mCmd_w$wget,
	       dp1_bram_serverAdapterA_1_cnt_1$wget,
	       dp1_bram_serverAdapterA_1_cnt_2$wget,
	       dp1_bram_serverAdapterA_1_cnt_3$wget,
	       dp1_bram_serverAdapterA_2_cnt_1$wget,
	       dp1_bram_serverAdapterA_2_cnt_2$wget,
	       dp1_bram_serverAdapterA_2_cnt_3$wget,
	       dp1_bram_serverAdapterA_3_cnt_1$wget,
	       dp1_bram_serverAdapterA_3_cnt_2$wget,
	       dp1_bram_serverAdapterA_3_cnt_3$wget,
	       dp1_bram_serverAdapterA_cnt_1$wget,
	       dp1_bram_serverAdapterA_cnt_2$wget,
	       dp1_bram_serverAdapterA_cnt_3$wget,
	       dp1_bram_serverAdapterB_1_cnt_1$wget,
	       dp1_bram_serverAdapterB_1_cnt_2$wget,
	       dp1_bram_serverAdapterB_1_cnt_3$wget,
	       dp1_bram_serverAdapterB_2_cnt_1$wget,
	       dp1_bram_serverAdapterB_2_cnt_2$wget,
	       dp1_bram_serverAdapterB_2_cnt_3$wget,
	       dp1_bram_serverAdapterB_3_cnt_1$wget,
	       dp1_bram_serverAdapterB_3_cnt_2$wget,
	       dp1_bram_serverAdapterB_3_cnt_3$wget,
	       dp1_bram_serverAdapterB_cnt_1$wget,
	       dp1_bram_serverAdapterB_cnt_2$wget,
	       dp1_bram_serverAdapterB_cnt_3$wget,
	       dp1_wci_Es_mCmd_w$wget,
	       dp1_wci_wEdge$wget,
	       dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] a4lm_rdResp_w$wget,
	       a4lm_wrResp_w$wget,
	       dp0_bram_serverAdapterA_1_s1_1$wget,
	       dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       dp0_bram_serverAdapterA_2_s1_1$wget,
	       dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       dp0_bram_serverAdapterA_3_s1_1$wget,
	       dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       dp0_bram_serverAdapterA_s1_1$wget,
	       dp0_bram_serverAdapterA_writeWithResp$wget,
	       dp0_bram_serverAdapterB_1_s1_1$wget,
	       dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       dp0_bram_serverAdapterB_2_s1_1$wget,
	       dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       dp0_bram_serverAdapterB_3_s1_1$wget,
	       dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       dp0_bram_serverAdapterB_s1_1$wget,
	       dp0_bram_serverAdapterB_writeWithResp$wget,
	       dp1_bram_serverAdapterA_1_s1_1$wget,
	       dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       dp1_bram_serverAdapterA_2_s1_1$wget,
	       dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       dp1_bram_serverAdapterA_3_s1_1$wget,
	       dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       dp1_bram_serverAdapterA_s1_1$wget,
	       dp1_bram_serverAdapterA_writeWithResp$wget,
	       dp1_bram_serverAdapterB_1_s1_1$wget,
	       dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       dp1_bram_serverAdapterB_2_s1_1$wget,
	       dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       dp1_bram_serverAdapterB_3_s1_1$wget,
	       dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       dp1_bram_serverAdapterB_s1_1$wget,
	       dp1_bram_serverAdapterB_writeWithResp$wget;
  wire a4lm_rdAddrRdy_w$wget,
       a4lm_rdAddrRdy_w$whas,
       a4lm_rdData_w$whas,
       a4lm_rdRespVal_w$wget,
       a4lm_rdRespVal_w$whas,
       a4lm_rdResp_w$whas,
       a4lm_wrAddrRdy_w$wget,
       a4lm_wrAddrRdy_w$whas,
       a4lm_wrDataRdy_w$wget,
       a4lm_wrDataRdy_w$whas,
       a4lm_wrRespVal_w$wget,
       a4lm_wrRespVal_w$whas,
       a4lm_wrResp_w$whas,
       dp0_bml_crdBuf_decAction$whas,
       dp0_bml_crdBuf_incAction$whas,
       dp0_bml_dpControl$whas,
       dp0_bml_fabAvail_1$wget,
       dp0_bml_fabAvail_1$whas,
       dp0_bml_fabBuf_decAction$whas,
       dp0_bml_fabBuf_incAction$whas,
       dp0_bml_fabDone_1$wget,
       dp0_bml_fabDone_1$whas,
       dp0_bml_lclBufDone_1$wget,
       dp0_bml_lclBufDone_1$whas,
       dp0_bml_lclBufStart_1$wget,
       dp0_bml_lclBufStart_1$whas,
       dp0_bml_lclBuf_decAction$whas,
       dp0_bml_lclBuf_incAction$whas,
       dp0_bml_remBuf_decAction$whas,
       dp0_bml_remBuf_incAction$whas,
       dp0_bml_remDone_1$wget,
       dp0_bml_remDone_1$whas,
       dp0_bml_remStart_1$wget,
       dp0_bml_remStart_1$whas,
       dp0_bram_serverAdapterA_1_cnt_1$whas,
       dp0_bram_serverAdapterA_1_cnt_2$whas,
       dp0_bram_serverAdapterA_1_cnt_3$whas,
       dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_1_outData_enqData$whas,
       dp0_bram_serverAdapterA_1_outData_outData$whas,
       dp0_bram_serverAdapterA_1_s1_1$whas,
       dp0_bram_serverAdapterA_1_writeWithResp$whas,
       dp0_bram_serverAdapterA_2_cnt_1$whas,
       dp0_bram_serverAdapterA_2_cnt_2$whas,
       dp0_bram_serverAdapterA_2_cnt_3$whas,
       dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_2_outData_enqData$whas,
       dp0_bram_serverAdapterA_2_outData_outData$whas,
       dp0_bram_serverAdapterA_2_s1_1$whas,
       dp0_bram_serverAdapterA_2_writeWithResp$whas,
       dp0_bram_serverAdapterA_3_cnt_1$whas,
       dp0_bram_serverAdapterA_3_cnt_2$whas,
       dp0_bram_serverAdapterA_3_cnt_3$whas,
       dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_3_outData_enqData$whas,
       dp0_bram_serverAdapterA_3_outData_outData$whas,
       dp0_bram_serverAdapterA_3_s1_1$whas,
       dp0_bram_serverAdapterA_3_writeWithResp$whas,
       dp0_bram_serverAdapterA_cnt_1$whas,
       dp0_bram_serverAdapterA_cnt_2$whas,
       dp0_bram_serverAdapterA_cnt_3$whas,
       dp0_bram_serverAdapterA_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_outData_enqData$whas,
       dp0_bram_serverAdapterA_outData_outData$whas,
       dp0_bram_serverAdapterA_s1_1$whas,
       dp0_bram_serverAdapterA_writeWithResp$whas,
       dp0_bram_serverAdapterB_1_cnt_1$whas,
       dp0_bram_serverAdapterB_1_cnt_2$whas,
       dp0_bram_serverAdapterB_1_cnt_3$whas,
       dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_1_outData_enqData$whas,
       dp0_bram_serverAdapterB_1_outData_outData$whas,
       dp0_bram_serverAdapterB_1_s1_1$whas,
       dp0_bram_serverAdapterB_1_writeWithResp$whas,
       dp0_bram_serverAdapterB_2_cnt_1$whas,
       dp0_bram_serverAdapterB_2_cnt_2$whas,
       dp0_bram_serverAdapterB_2_cnt_3$whas,
       dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_2_outData_enqData$whas,
       dp0_bram_serverAdapterB_2_outData_outData$whas,
       dp0_bram_serverAdapterB_2_s1_1$whas,
       dp0_bram_serverAdapterB_2_writeWithResp$whas,
       dp0_bram_serverAdapterB_3_cnt_1$whas,
       dp0_bram_serverAdapterB_3_cnt_2$whas,
       dp0_bram_serverAdapterB_3_cnt_3$whas,
       dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_3_outData_enqData$whas,
       dp0_bram_serverAdapterB_3_outData_outData$whas,
       dp0_bram_serverAdapterB_3_s1_1$whas,
       dp0_bram_serverAdapterB_3_writeWithResp$whas,
       dp0_bram_serverAdapterB_cnt_1$whas,
       dp0_bram_serverAdapterB_cnt_2$whas,
       dp0_bram_serverAdapterB_cnt_3$whas,
       dp0_bram_serverAdapterB_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_outData_enqData$whas,
       dp0_bram_serverAdapterB_outData_outData$whas,
       dp0_bram_serverAdapterB_s1_1$whas,
       dp0_bram_serverAdapterB_writeWithResp$whas,
       dp0_tlp_creditReady_1$wget,
       dp0_tlp_creditReady_1$whas,
       dp0_tlp_dpControl$whas,
       dp0_tlp_farBufReady_1$wget,
       dp0_tlp_farBufReady_1$whas,
       dp0_tlp_nearBufReady_1$wget,
       dp0_tlp_nearBufReady_1$whas,
       dp0_tlp_pullTagMatch_1$wget,
       dp0_tlp_pullTagMatch_1$whas,
       dp0_tlp_remDone_1$wget,
       dp0_tlp_remDone_1$whas,
       dp0_tlp_remStart_1$wget,
       dp0_tlp_remStart_1$whas,
       dp0_wci_Es_mAddrSpace_w$wget,
       dp0_wci_Es_mAddrSpace_w$whas,
       dp0_wci_Es_mAddr_w$whas,
       dp0_wci_Es_mByteEn_w$whas,
       dp0_wci_Es_mCmd_w$whas,
       dp0_wci_Es_mData_w$whas,
       dp0_wci_ctlAckReg_1$wget,
       dp0_wci_ctlAckReg_1$whas,
       dp0_wci_reqF_r_clr$whas,
       dp0_wci_reqF_r_deq$whas,
       dp0_wci_reqF_r_enq$whas,
       dp0_wci_respF_dequeueing$whas,
       dp0_wci_respF_enqueueing$whas,
       dp0_wci_respF_x_wire$whas,
       dp0_wci_sFlagReg_1$wget,
       dp0_wci_sFlagReg_1$whas,
       dp0_wci_sThreadBusy_pw$whas,
       dp0_wci_wEdge$whas,
       dp0_wci_wciReq$whas,
       dp0_wci_wci_cfrd_pw$whas,
       dp0_wci_wci_cfwr_pw$whas,
       dp0_wci_wci_ctrl_pw$whas,
       dp0_wmi_Es_mAddrSpace_w$wget,
       dp0_wmi_Es_mAddrSpace_w$whas,
       dp0_wmi_Es_mAddr_w$whas,
       dp0_wmi_Es_mBurstLength_w$whas,
       dp0_wmi_Es_mCmd_w$whas,
       dp0_wmi_Es_mDataByteEn_w$whas,
       dp0_wmi_Es_mDataInfo_w$whas,
       dp0_wmi_Es_mDataLast_w$whas,
       dp0_wmi_Es_mDataValid_w$whas,
       dp0_wmi_Es_mData_w$whas,
       dp0_wmi_Es_mReqInfo_w$wget,
       dp0_wmi_Es_mReqInfo_w$whas,
       dp0_wmi_Es_mReqLast_w$whas,
       dp0_wmi_dpControl$whas,
       dp0_wmi_mesgBufReady_1$wget,
       dp0_wmi_mesgBufReady_1$whas,
       dp0_wmi_mesgDone_1$wget,
       dp0_wmi_mesgDone_1$whas,
       dp0_wmi_mesgStart_1$wget,
       dp0_wmi_mesgStart_1$whas,
       dp0_wmi_nowW$whas,
       dp0_wmi_wmi_dhF_doResetClr$whas,
       dp0_wmi_wmi_dhF_doResetDeq$whas,
       dp0_wmi_wmi_dhF_doResetEnq$whas,
       dp0_wmi_wmi_dhF_r_clr$whas,
       dp0_wmi_wmi_dhF_r_deq$whas,
       dp0_wmi_wmi_dhF_r_enq$whas,
       dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       dp0_wmi_wmi_mFlagF_doResetClr$whas,
       dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       dp0_wmi_wmi_mFlagF_r_clr$whas,
       dp0_wmi_wmi_mFlagF_r_deq$whas,
       dp0_wmi_wmi_mFlagF_r_enq$whas,
       dp0_wmi_wmi_operateD_1$wget,
       dp0_wmi_wmi_operateD_1$whas,
       dp0_wmi_wmi_peerIsReady_1$wget,
       dp0_wmi_wmi_peerIsReady_1$whas,
       dp0_wmi_wmi_reqF_doResetClr$whas,
       dp0_wmi_wmi_reqF_doResetDeq$whas,
       dp0_wmi_wmi_reqF_doResetEnq$whas,
       dp0_wmi_wmi_reqF_r_clr$whas,
       dp0_wmi_wmi_reqF_r_deq$whas,
       dp0_wmi_wmi_reqF_r_enq$whas,
       dp0_wmi_wmi_respF_dequeueing$whas,
       dp0_wmi_wmi_respF_enqueueing$whas,
       dp0_wmi_wmi_respF_x_wire$whas,
       dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       dp0_wmi_wmi_sThreadBusy_dw$wget,
       dp0_wmi_wmi_sThreadBusy_dw$whas,
       dp0_wmi_wmi_wmiDh$whas,
       dp0_wmi_wmi_wmiMFlag$whas,
       dp0_wmi_wmi_wmiReq$whas,
       dp0_wti_wtiReq$whas,
       dp1_bml_crdBuf_decAction$whas,
       dp1_bml_crdBuf_incAction$whas,
       dp1_bml_dpControl$whas,
       dp1_bml_fabAvail_1$wget,
       dp1_bml_fabAvail_1$whas,
       dp1_bml_fabBuf_decAction$whas,
       dp1_bml_fabBuf_incAction$whas,
       dp1_bml_fabDone_1$wget,
       dp1_bml_fabDone_1$whas,
       dp1_bml_lclBufDone_1$wget,
       dp1_bml_lclBufDone_1$whas,
       dp1_bml_lclBufStart_1$wget,
       dp1_bml_lclBufStart_1$whas,
       dp1_bml_lclBuf_decAction$whas,
       dp1_bml_lclBuf_incAction$whas,
       dp1_bml_remBuf_decAction$whas,
       dp1_bml_remBuf_incAction$whas,
       dp1_bml_remDone_1$wget,
       dp1_bml_remDone_1$whas,
       dp1_bml_remStart_1$wget,
       dp1_bml_remStart_1$whas,
       dp1_bram_serverAdapterA_1_cnt_1$whas,
       dp1_bram_serverAdapterA_1_cnt_2$whas,
       dp1_bram_serverAdapterA_1_cnt_3$whas,
       dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_1_outData_enqData$whas,
       dp1_bram_serverAdapterA_1_outData_outData$whas,
       dp1_bram_serverAdapterA_1_s1_1$whas,
       dp1_bram_serverAdapterA_1_writeWithResp$whas,
       dp1_bram_serverAdapterA_2_cnt_1$whas,
       dp1_bram_serverAdapterA_2_cnt_2$whas,
       dp1_bram_serverAdapterA_2_cnt_3$whas,
       dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_2_outData_enqData$whas,
       dp1_bram_serverAdapterA_2_outData_outData$whas,
       dp1_bram_serverAdapterA_2_s1_1$whas,
       dp1_bram_serverAdapterA_2_writeWithResp$whas,
       dp1_bram_serverAdapterA_3_cnt_1$whas,
       dp1_bram_serverAdapterA_3_cnt_2$whas,
       dp1_bram_serverAdapterA_3_cnt_3$whas,
       dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_3_outData_enqData$whas,
       dp1_bram_serverAdapterA_3_outData_outData$whas,
       dp1_bram_serverAdapterA_3_s1_1$whas,
       dp1_bram_serverAdapterA_3_writeWithResp$whas,
       dp1_bram_serverAdapterA_cnt_1$whas,
       dp1_bram_serverAdapterA_cnt_2$whas,
       dp1_bram_serverAdapterA_cnt_3$whas,
       dp1_bram_serverAdapterA_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_outData_enqData$whas,
       dp1_bram_serverAdapterA_outData_outData$whas,
       dp1_bram_serverAdapterA_s1_1$whas,
       dp1_bram_serverAdapterA_writeWithResp$whas,
       dp1_bram_serverAdapterB_1_cnt_1$whas,
       dp1_bram_serverAdapterB_1_cnt_2$whas,
       dp1_bram_serverAdapterB_1_cnt_3$whas,
       dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_1_outData_enqData$whas,
       dp1_bram_serverAdapterB_1_outData_outData$whas,
       dp1_bram_serverAdapterB_1_s1_1$whas,
       dp1_bram_serverAdapterB_1_writeWithResp$whas,
       dp1_bram_serverAdapterB_2_cnt_1$whas,
       dp1_bram_serverAdapterB_2_cnt_2$whas,
       dp1_bram_serverAdapterB_2_cnt_3$whas,
       dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_2_outData_enqData$whas,
       dp1_bram_serverAdapterB_2_outData_outData$whas,
       dp1_bram_serverAdapterB_2_s1_1$whas,
       dp1_bram_serverAdapterB_2_writeWithResp$whas,
       dp1_bram_serverAdapterB_3_cnt_1$whas,
       dp1_bram_serverAdapterB_3_cnt_2$whas,
       dp1_bram_serverAdapterB_3_cnt_3$whas,
       dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_3_outData_enqData$whas,
       dp1_bram_serverAdapterB_3_outData_outData$whas,
       dp1_bram_serverAdapterB_3_s1_1$whas,
       dp1_bram_serverAdapterB_3_writeWithResp$whas,
       dp1_bram_serverAdapterB_cnt_1$whas,
       dp1_bram_serverAdapterB_cnt_2$whas,
       dp1_bram_serverAdapterB_cnt_3$whas,
       dp1_bram_serverAdapterB_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_outData_enqData$whas,
       dp1_bram_serverAdapterB_outData_outData$whas,
       dp1_bram_serverAdapterB_s1_1$whas,
       dp1_bram_serverAdapterB_writeWithResp$whas,
       dp1_tlp_creditReady_1$wget,
       dp1_tlp_creditReady_1$whas,
       dp1_tlp_dpControl$whas,
       dp1_tlp_farBufReady_1$wget,
       dp1_tlp_farBufReady_1$whas,
       dp1_tlp_nearBufReady_1$wget,
       dp1_tlp_nearBufReady_1$whas,
       dp1_tlp_pullTagMatch_1$wget,
       dp1_tlp_pullTagMatch_1$whas,
       dp1_tlp_remDone_1$wget,
       dp1_tlp_remDone_1$whas,
       dp1_tlp_remStart_1$wget,
       dp1_tlp_remStart_1$whas,
       dp1_wci_Es_mAddrSpace_w$wget,
       dp1_wci_Es_mAddrSpace_w$whas,
       dp1_wci_Es_mAddr_w$whas,
       dp1_wci_Es_mByteEn_w$whas,
       dp1_wci_Es_mCmd_w$whas,
       dp1_wci_Es_mData_w$whas,
       dp1_wci_ctlAckReg_1$wget,
       dp1_wci_ctlAckReg_1$whas,
       dp1_wci_reqF_r_clr$whas,
       dp1_wci_reqF_r_deq$whas,
       dp1_wci_reqF_r_enq$whas,
       dp1_wci_respF_dequeueing$whas,
       dp1_wci_respF_enqueueing$whas,
       dp1_wci_respF_x_wire$whas,
       dp1_wci_sFlagReg_1$wget,
       dp1_wci_sFlagReg_1$whas,
       dp1_wci_sThreadBusy_pw$whas,
       dp1_wci_wEdge$whas,
       dp1_wci_wciReq$whas,
       dp1_wci_wci_cfrd_pw$whas,
       dp1_wci_wci_cfwr_pw$whas,
       dp1_wci_wci_ctrl_pw$whas,
       dp1_wmi_Es_mAddrSpace_w$wget,
       dp1_wmi_Es_mAddrSpace_w$whas,
       dp1_wmi_Es_mAddr_w$whas,
       dp1_wmi_Es_mBurstLength_w$whas,
       dp1_wmi_Es_mCmd_w$whas,
       dp1_wmi_Es_mDataByteEn_w$whas,
       dp1_wmi_Es_mDataInfo_w$whas,
       dp1_wmi_Es_mDataLast_w$whas,
       dp1_wmi_Es_mDataValid_w$whas,
       dp1_wmi_Es_mData_w$whas,
       dp1_wmi_Es_mReqInfo_w$wget,
       dp1_wmi_Es_mReqInfo_w$whas,
       dp1_wmi_Es_mReqLast_w$whas,
       dp1_wmi_dpControl$whas,
       dp1_wmi_mesgBufReady_1$wget,
       dp1_wmi_mesgBufReady_1$whas,
       dp1_wmi_mesgDone_1$wget,
       dp1_wmi_mesgDone_1$whas,
       dp1_wmi_mesgStart_1$wget,
       dp1_wmi_mesgStart_1$whas,
       dp1_wmi_nowW$whas,
       dp1_wmi_wmi_dhF_doResetClr$whas,
       dp1_wmi_wmi_dhF_doResetDeq$whas,
       dp1_wmi_wmi_dhF_doResetEnq$whas,
       dp1_wmi_wmi_dhF_r_clr$whas,
       dp1_wmi_wmi_dhF_r_deq$whas,
       dp1_wmi_wmi_dhF_r_enq$whas,
       dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       dp1_wmi_wmi_mFlagF_doResetClr$whas,
       dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       dp1_wmi_wmi_mFlagF_r_clr$whas,
       dp1_wmi_wmi_mFlagF_r_deq$whas,
       dp1_wmi_wmi_mFlagF_r_enq$whas,
       dp1_wmi_wmi_operateD_1$wget,
       dp1_wmi_wmi_operateD_1$whas,
       dp1_wmi_wmi_peerIsReady_1$wget,
       dp1_wmi_wmi_peerIsReady_1$whas,
       dp1_wmi_wmi_reqF_doResetClr$whas,
       dp1_wmi_wmi_reqF_doResetDeq$whas,
       dp1_wmi_wmi_reqF_doResetEnq$whas,
       dp1_wmi_wmi_reqF_r_clr$whas,
       dp1_wmi_wmi_reqF_r_deq$whas,
       dp1_wmi_wmi_reqF_r_enq$whas,
       dp1_wmi_wmi_respF_dequeueing$whas,
       dp1_wmi_wmi_respF_enqueueing$whas,
       dp1_wmi_wmi_respF_x_wire$whas,
       dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       dp1_wmi_wmi_sThreadBusy_dw$wget,
       dp1_wmi_wmi_sThreadBusy_dw$whas,
       dp1_wmi_wmi_wmiDh$whas,
       dp1_wmi_wmi_wmiMFlag$whas,
       dp1_wmi_wmi_wmiReq$whas,
       dp1_wti_wtiReq$whas,
       pciw_pci0_pwTrnRx$whas,
       pciw_pci0_pwTrnTx$whas,
       pciw_pci0_wTrnRxCplS$wget,
       pciw_pci0_wTrnRxCplS$whas,
       pciw_pci0_wTrnRxNpOk$wget,
       pciw_pci0_wTrnRxNpOk$whas,
       pciw_pci0_wTrnTxDat$whas,
       pciw_pci0_wTrnTxDsc$wget,
       pciw_pci0_wTrnTxDsc$whas,
       pciw_pci0_wTrnTxEof$wget,
       pciw_pci0_wTrnTxEof$whas,
       pciw_pci0_wTrnTxRem$whas,
       pciw_pci0_wTrnTxSof$wget,
       pciw_pci0_wTrnTxSof$whas,
       pciw_pcie_irq_wInterruptDo$whas,
       pciw_pcie_irq_wInterruptRdyN$wget,
       pciw_pcie_irq_wInterruptRdyN$whas;

  // register dp0_bml_crdBuf_modulus
  reg [15 : 0] dp0_bml_crdBuf_modulus;
  wire [15 : 0] dp0_bml_crdBuf_modulus$D_IN;
  wire dp0_bml_crdBuf_modulus$EN;

  // register dp0_bml_crdBuf_value
  reg [15 : 0] dp0_bml_crdBuf_value;
  wire [15 : 0] dp0_bml_crdBuf_value$D_IN;
  wire dp0_bml_crdBuf_value$EN;

  // register dp0_bml_fabAvail
  reg dp0_bml_fabAvail;
  wire dp0_bml_fabAvail$D_IN, dp0_bml_fabAvail$EN;

  // register dp0_bml_fabBuf_modulus
  reg [15 : 0] dp0_bml_fabBuf_modulus;
  wire [15 : 0] dp0_bml_fabBuf_modulus$D_IN;
  wire dp0_bml_fabBuf_modulus$EN;

  // register dp0_bml_fabBuf_value
  reg [15 : 0] dp0_bml_fabBuf_value;
  wire [15 : 0] dp0_bml_fabBuf_value$D_IN;
  wire dp0_bml_fabBuf_value$EN;

  // register dp0_bml_fabBufsAvail
  reg [15 : 0] dp0_bml_fabBufsAvail;
  wire [15 : 0] dp0_bml_fabBufsAvail$D_IN;
  wire dp0_bml_fabBufsAvail$EN;

  // register dp0_bml_fabDone
  reg dp0_bml_fabDone;
  wire dp0_bml_fabDone$D_IN, dp0_bml_fabDone$EN;

  // register dp0_bml_fabFlowAddr
  reg [31 : 0] dp0_bml_fabFlowAddr;
  reg [31 : 0] dp0_bml_fabFlowAddr$D_IN;
  wire dp0_bml_fabFlowAddr$EN;

  // register dp0_bml_fabFlowBase
  reg [31 : 0] dp0_bml_fabFlowBase;
  wire [31 : 0] dp0_bml_fabFlowBase$D_IN;
  wire dp0_bml_fabFlowBase$EN;

  // register dp0_bml_fabFlowSize
  reg [31 : 0] dp0_bml_fabFlowSize;
  wire [31 : 0] dp0_bml_fabFlowSize$D_IN;
  wire dp0_bml_fabFlowSize$EN;

  // register dp0_bml_fabMesgAddr
  reg [31 : 0] dp0_bml_fabMesgAddr;
  wire [31 : 0] dp0_bml_fabMesgAddr$D_IN;
  wire dp0_bml_fabMesgAddr$EN;

  // register dp0_bml_fabMesgBase
  reg [31 : 0] dp0_bml_fabMesgBase;
  wire [31 : 0] dp0_bml_fabMesgBase$D_IN;
  wire dp0_bml_fabMesgBase$EN;

  // register dp0_bml_fabMesgSize
  reg [31 : 0] dp0_bml_fabMesgSize;
  wire [31 : 0] dp0_bml_fabMesgSize$D_IN;
  wire dp0_bml_fabMesgSize$EN;

  // register dp0_bml_fabMetaAddr
  reg [31 : 0] dp0_bml_fabMetaAddr;
  wire [31 : 0] dp0_bml_fabMetaAddr$D_IN;
  wire dp0_bml_fabMetaAddr$EN;

  // register dp0_bml_fabMetaBase
  reg [31 : 0] dp0_bml_fabMetaBase;
  wire [31 : 0] dp0_bml_fabMetaBase$D_IN;
  wire dp0_bml_fabMetaBase$EN;

  // register dp0_bml_fabMetaSize
  reg [31 : 0] dp0_bml_fabMetaSize;
  wire [31 : 0] dp0_bml_fabMetaSize$D_IN;
  wire dp0_bml_fabMetaSize$EN;

  // register dp0_bml_fabNumBufs
  reg [15 : 0] dp0_bml_fabNumBufs;
  wire [15 : 0] dp0_bml_fabNumBufs$D_IN;
  wire dp0_bml_fabNumBufs$EN;

  // register dp0_bml_lclBufDone
  reg dp0_bml_lclBufDone;
  wire dp0_bml_lclBufDone$D_IN, dp0_bml_lclBufDone$EN;

  // register dp0_bml_lclBufStart
  reg dp0_bml_lclBufStart;
  wire dp0_bml_lclBufStart$D_IN, dp0_bml_lclBufStart$EN;

  // register dp0_bml_lclBuf_modulus
  reg [15 : 0] dp0_bml_lclBuf_modulus;
  wire [15 : 0] dp0_bml_lclBuf_modulus$D_IN;
  wire dp0_bml_lclBuf_modulus$EN;

  // register dp0_bml_lclBuf_value
  reg [15 : 0] dp0_bml_lclBuf_value;
  wire [15 : 0] dp0_bml_lclBuf_value$D_IN;
  wire dp0_bml_lclBuf_value$EN;

  // register dp0_bml_lclBufsAR
  reg [15 : 0] dp0_bml_lclBufsAR;
  wire [15 : 0] dp0_bml_lclBufsAR$D_IN;
  wire dp0_bml_lclBufsAR$EN;

  // register dp0_bml_lclBufsCF
  reg [15 : 0] dp0_bml_lclBufsCF;
  wire [15 : 0] dp0_bml_lclBufsCF$D_IN;
  wire dp0_bml_lclBufsCF$EN;

  // register dp0_bml_lclCredit
  reg [15 : 0] dp0_bml_lclCredit;
  wire [15 : 0] dp0_bml_lclCredit$D_IN;
  wire dp0_bml_lclCredit$EN;

  // register dp0_bml_lclDones
  reg [15 : 0] dp0_bml_lclDones;
  wire [15 : 0] dp0_bml_lclDones$D_IN;
  wire dp0_bml_lclDones$EN;

  // register dp0_bml_lclMesgAddr
  reg [15 : 0] dp0_bml_lclMesgAddr;
  wire [15 : 0] dp0_bml_lclMesgAddr$D_IN;
  wire dp0_bml_lclMesgAddr$EN;

  // register dp0_bml_lclMetaAddr
  reg [15 : 0] dp0_bml_lclMetaAddr;
  wire [15 : 0] dp0_bml_lclMetaAddr$D_IN;
  wire dp0_bml_lclMetaAddr$EN;

  // register dp0_bml_lclNumBufs
  reg [15 : 0] dp0_bml_lclNumBufs;
  wire [15 : 0] dp0_bml_lclNumBufs$D_IN;
  wire dp0_bml_lclNumBufs$EN;

  // register dp0_bml_lclStarts
  reg [15 : 0] dp0_bml_lclStarts;
  wire [15 : 0] dp0_bml_lclStarts$D_IN;
  wire dp0_bml_lclStarts$EN;

  // register dp0_bml_mesgBase
  reg [15 : 0] dp0_bml_mesgBase;
  wire [15 : 0] dp0_bml_mesgBase$D_IN;
  wire dp0_bml_mesgBase$EN;

  // register dp0_bml_mesgSize
  reg [15 : 0] dp0_bml_mesgSize;
  wire [15 : 0] dp0_bml_mesgSize$D_IN;
  wire dp0_bml_mesgSize$EN;

  // register dp0_bml_metaBase
  reg [15 : 0] dp0_bml_metaBase;
  wire [15 : 0] dp0_bml_metaBase$D_IN;
  wire dp0_bml_metaBase$EN;

  // register dp0_bml_metaSize
  reg [15 : 0] dp0_bml_metaSize;
  wire [15 : 0] dp0_bml_metaSize$D_IN;
  wire dp0_bml_metaSize$EN;

  // register dp0_bml_remBuf_modulus
  reg [15 : 0] dp0_bml_remBuf_modulus;
  wire [15 : 0] dp0_bml_remBuf_modulus$D_IN;
  wire dp0_bml_remBuf_modulus$EN;

  // register dp0_bml_remBuf_value
  reg [15 : 0] dp0_bml_remBuf_value;
  wire [15 : 0] dp0_bml_remBuf_value$D_IN;
  wire dp0_bml_remBuf_value$EN;

  // register dp0_bml_remDone
  reg dp0_bml_remDone;
  wire dp0_bml_remDone$D_IN, dp0_bml_remDone$EN;

  // register dp0_bml_remDones
  reg [15 : 0] dp0_bml_remDones;
  wire [15 : 0] dp0_bml_remDones$D_IN;
  wire dp0_bml_remDones$EN;

  // register dp0_bml_remMesgAddr
  reg [15 : 0] dp0_bml_remMesgAddr;
  wire [15 : 0] dp0_bml_remMesgAddr$D_IN;
  wire dp0_bml_remMesgAddr$EN;

  // register dp0_bml_remMetaAddr
  reg [15 : 0] dp0_bml_remMetaAddr;
  wire [15 : 0] dp0_bml_remMetaAddr$D_IN;
  wire dp0_bml_remMetaAddr$EN;

  // register dp0_bml_remStart
  reg dp0_bml_remStart;
  wire dp0_bml_remStart$D_IN, dp0_bml_remStart$EN;

  // register dp0_bml_remStarts
  reg [15 : 0] dp0_bml_remStarts;
  wire [15 : 0] dp0_bml_remStarts$D_IN;
  wire dp0_bml_remStarts$EN;

  // register dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire dp0_bram_serverAdapterA_1_cnt$EN;

  // register dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1$D_IN;
  wire dp0_bram_serverAdapterA_1_s1$EN;

  // register dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire dp0_bram_serverAdapterA_2_cnt$EN;

  // register dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_2_s1$D_IN;
  wire dp0_bram_serverAdapterA_2_s1$EN;

  // register dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire dp0_bram_serverAdapterA_3_cnt$EN;

  // register dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_3_s1$D_IN;
  wire dp0_bram_serverAdapterA_3_s1$EN;

  // register dp0_bram_serverAdapterA_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_cnt$D_IN;
  wire dp0_bram_serverAdapterA_cnt$EN;

  // register dp0_bram_serverAdapterA_s1
  reg [1 : 0] dp0_bram_serverAdapterA_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_s1$D_IN;
  wire dp0_bram_serverAdapterA_s1$EN;

  // register dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire dp0_bram_serverAdapterB_1_cnt$EN;

  // register dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_1_s1$D_IN;
  wire dp0_bram_serverAdapterB_1_s1$EN;

  // register dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire dp0_bram_serverAdapterB_2_cnt$EN;

  // register dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_2_s1$D_IN;
  wire dp0_bram_serverAdapterB_2_s1$EN;

  // register dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire dp0_bram_serverAdapterB_3_cnt$EN;

  // register dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_3_s1$D_IN;
  wire dp0_bram_serverAdapterB_3_s1$EN;

  // register dp0_bram_serverAdapterB_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_cnt$D_IN;
  wire dp0_bram_serverAdapterB_cnt$EN;

  // register dp0_bram_serverAdapterB_s1
  reg [1 : 0] dp0_bram_serverAdapterB_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_s1$D_IN;
  wire dp0_bram_serverAdapterB_s1$EN;

  // register dp0_dpControl
  reg [3 : 0] dp0_dpControl;
  wire [3 : 0] dp0_dpControl$D_IN;
  wire dp0_dpControl$EN;

  // register dp0_tlp_creditReady
  reg dp0_tlp_creditReady;
  wire dp0_tlp_creditReady$D_IN, dp0_tlp_creditReady$EN;

  // register dp0_tlp_debugBdata
  reg [127 : 0] dp0_tlp_debugBdata;
  wire [127 : 0] dp0_tlp_debugBdata$D_IN;
  wire dp0_tlp_debugBdata$EN;

  // register dp0_tlp_dmaDoTailEvent
  reg dp0_tlp_dmaDoTailEvent;
  reg dp0_tlp_dmaDoTailEvent$D_IN;
  wire dp0_tlp_dmaDoTailEvent$EN;

  // register dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire dp0_tlp_dmaPullRemainDWLen$EN;

  // register dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire dp0_tlp_dmaPullRemainDWSub$EN;

  // register dp0_tlp_dmaReqTag
  reg [4 : 0] dp0_tlp_dmaReqTag;
  wire [4 : 0] dp0_tlp_dmaReqTag$D_IN;
  wire dp0_tlp_dmaReqTag$EN;

  // register dp0_tlp_dmaTag
  reg [4 : 0] dp0_tlp_dmaTag;
  wire [4 : 0] dp0_tlp_dmaTag$D_IN;
  wire dp0_tlp_dmaTag$EN;

  // register dp0_tlp_doXmtMetaBody
  reg dp0_tlp_doXmtMetaBody;
  wire dp0_tlp_doXmtMetaBody$D_IN, dp0_tlp_doXmtMetaBody$EN;

  // register dp0_tlp_fabFlowAddr
  reg [31 : 0] dp0_tlp_fabFlowAddr;
  wire [31 : 0] dp0_tlp_fabFlowAddr$D_IN;
  wire dp0_tlp_fabFlowAddr$EN;

  // register dp0_tlp_fabMesgAccu
  reg [31 : 0] dp0_tlp_fabMesgAccu;
  wire [31 : 0] dp0_tlp_fabMesgAccu$D_IN;
  wire dp0_tlp_fabMesgAccu$EN;

  // register dp0_tlp_fabMesgAddr
  reg [31 : 0] dp0_tlp_fabMesgAddr;
  wire [31 : 0] dp0_tlp_fabMesgAddr$D_IN;
  wire dp0_tlp_fabMesgAddr$EN;

  // register dp0_tlp_fabMeta
  reg [128 : 0] dp0_tlp_fabMeta;
  wire [128 : 0] dp0_tlp_fabMeta$D_IN;
  wire dp0_tlp_fabMeta$EN;

  // register dp0_tlp_fabMetaAddr
  reg [31 : 0] dp0_tlp_fabMetaAddr;
  wire [31 : 0] dp0_tlp_fabMetaAddr$D_IN;
  wire dp0_tlp_fabMetaAddr$EN;

  // register dp0_tlp_farBufReady
  reg dp0_tlp_farBufReady;
  wire dp0_tlp_farBufReady$D_IN, dp0_tlp_farBufReady$EN;

  // register dp0_tlp_flowDiagCount
  reg [31 : 0] dp0_tlp_flowDiagCount;
  wire [31 : 0] dp0_tlp_flowDiagCount$D_IN;
  wire dp0_tlp_flowDiagCount$EN;

  // register dp0_tlp_gotResponseHeader
  reg dp0_tlp_gotResponseHeader;
  reg dp0_tlp_gotResponseHeader$D_IN;
  wire dp0_tlp_gotResponseHeader$EN;

  // register dp0_tlp_inIgnorePkt
  reg dp0_tlp_inIgnorePkt;
  wire dp0_tlp_inIgnorePkt$D_IN, dp0_tlp_inIgnorePkt$EN;

  // register dp0_tlp_maxPayloadSize
  reg [12 : 0] dp0_tlp_maxPayloadSize;
  wire [12 : 0] dp0_tlp_maxPayloadSize$D_IN;
  wire dp0_tlp_maxPayloadSize$EN;

  // register dp0_tlp_maxReadReqSize
  reg [12 : 0] dp0_tlp_maxReadReqSize;
  wire [12 : 0] dp0_tlp_maxReadReqSize$D_IN;
  wire dp0_tlp_maxReadReqSize$EN;

  // register dp0_tlp_mesgComplReceived
  reg [16 : 0] dp0_tlp_mesgComplReceived;
  reg [16 : 0] dp0_tlp_mesgComplReceived$D_IN;
  wire dp0_tlp_mesgComplReceived$EN;

  // register dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPull$D_IN;
  wire dp0_tlp_mesgLengthRemainPull$EN;

  // register dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPush$D_IN;
  wire dp0_tlp_mesgLengthRemainPush$EN;

  // register dp0_tlp_nearBufReady
  reg dp0_tlp_nearBufReady;
  wire dp0_tlp_nearBufReady$D_IN, dp0_tlp_nearBufReady$EN;

  // register dp0_tlp_outDwRemain
  reg [9 : 0] dp0_tlp_outDwRemain;
  wire [9 : 0] dp0_tlp_outDwRemain$D_IN;
  wire dp0_tlp_outDwRemain$EN;

  // register dp0_tlp_postSeqDwell
  reg [3 : 0] dp0_tlp_postSeqDwell;
  wire [3 : 0] dp0_tlp_postSeqDwell$D_IN;
  wire dp0_tlp_postSeqDwell$EN;

  // register dp0_tlp_pullTagMatch
  reg dp0_tlp_pullTagMatch;
  wire dp0_tlp_pullTagMatch$D_IN, dp0_tlp_pullTagMatch$EN;

  // register dp0_tlp_rdRespDwRemain
  reg [9 : 0] dp0_tlp_rdRespDwRemain;
  wire [9 : 0] dp0_tlp_rdRespDwRemain$D_IN;
  wire dp0_tlp_rdRespDwRemain$EN;

  // register dp0_tlp_readHeaderSent
  reg dp0_tlp_readHeaderSent;
  wire dp0_tlp_readHeaderSent$D_IN, dp0_tlp_readHeaderSent$EN;

  // register dp0_tlp_readNxtDWAddr
  reg [12 : 0] dp0_tlp_readNxtDWAddr;
  wire [12 : 0] dp0_tlp_readNxtDWAddr$D_IN;
  wire dp0_tlp_readNxtDWAddr$EN;

  // register dp0_tlp_readRemainDWLen
  reg [9 : 0] dp0_tlp_readRemainDWLen;
  wire [9 : 0] dp0_tlp_readRemainDWLen$D_IN;
  wire dp0_tlp_readRemainDWLen$EN;

  // register dp0_tlp_readStarted
  reg dp0_tlp_readStarted;
  wire dp0_tlp_readStarted$D_IN, dp0_tlp_readStarted$EN;

  // register dp0_tlp_remDone
  reg dp0_tlp_remDone;
  wire dp0_tlp_remDone$D_IN, dp0_tlp_remDone$EN;

  // register dp0_tlp_remMesgAccu
  reg [15 : 0] dp0_tlp_remMesgAccu;
  wire [15 : 0] dp0_tlp_remMesgAccu$D_IN;
  wire dp0_tlp_remMesgAccu$EN;

  // register dp0_tlp_remMesgAddr
  reg [15 : 0] dp0_tlp_remMesgAddr;
  wire [15 : 0] dp0_tlp_remMesgAddr$D_IN;
  wire dp0_tlp_remMesgAddr$EN;

  // register dp0_tlp_remMetaAddr
  reg [15 : 0] dp0_tlp_remMetaAddr;
  wire [15 : 0] dp0_tlp_remMetaAddr$D_IN;
  wire dp0_tlp_remMetaAddr$EN;

  // register dp0_tlp_remStart
  reg dp0_tlp_remStart;
  wire dp0_tlp_remStart$D_IN, dp0_tlp_remStart$EN;

  // register dp0_tlp_reqMesgInFlight
  reg dp0_tlp_reqMesgInFlight;
  reg dp0_tlp_reqMesgInFlight$D_IN;
  wire dp0_tlp_reqMesgInFlight$EN;

  // register dp0_tlp_reqMetaBodyInFlight
  reg dp0_tlp_reqMetaBodyInFlight;
  wire dp0_tlp_reqMetaBodyInFlight$D_IN, dp0_tlp_reqMetaBodyInFlight$EN;

  // register dp0_tlp_reqMetaInFlight
  reg dp0_tlp_reqMetaInFlight;
  wire dp0_tlp_reqMetaInFlight$D_IN, dp0_tlp_reqMetaInFlight$EN;

  // register dp0_tlp_srcMesgAccu
  reg [31 : 0] dp0_tlp_srcMesgAccu;
  wire [31 : 0] dp0_tlp_srcMesgAccu$D_IN;
  wire dp0_tlp_srcMesgAccu$EN;

  // register dp0_tlp_tlpMetaSent
  reg dp0_tlp_tlpMetaSent;
  wire dp0_tlp_tlpMetaSent$D_IN, dp0_tlp_tlpMetaSent$EN;

  // register dp0_tlp_tlpRcvBusy
  reg dp0_tlp_tlpRcvBusy;
  reg dp0_tlp_tlpRcvBusy$D_IN;
  wire dp0_tlp_tlpRcvBusy$EN;

  // register dp0_tlp_tlpXmtBusy
  reg dp0_tlp_tlpXmtBusy;
  wire dp0_tlp_tlpXmtBusy$D_IN, dp0_tlp_tlpXmtBusy$EN;

  // register dp0_tlp_writeDWAddr
  reg [12 : 0] dp0_tlp_writeDWAddr;
  wire [12 : 0] dp0_tlp_writeDWAddr$D_IN;
  wire dp0_tlp_writeDWAddr$EN;

  // register dp0_tlp_writeLastBE
  reg [3 : 0] dp0_tlp_writeLastBE;
  wire [3 : 0] dp0_tlp_writeLastBE$D_IN;
  wire dp0_tlp_writeLastBE$EN;

  // register dp0_tlp_writeRemainDWLen
  reg [9 : 0] dp0_tlp_writeRemainDWLen;
  wire [9 : 0] dp0_tlp_writeRemainDWLen$D_IN;
  wire dp0_tlp_writeRemainDWLen$EN;

  // register dp0_tlp_xmtMetaInFlight
  reg dp0_tlp_xmtMetaInFlight;
  wire dp0_tlp_xmtMetaInFlight$D_IN, dp0_tlp_xmtMetaInFlight$EN;

  // register dp0_tlp_xmtMetaOK
  reg dp0_tlp_xmtMetaOK;
  wire dp0_tlp_xmtMetaOK$D_IN, dp0_tlp_xmtMetaOK$EN;

  // register dp0_wci_cEdge
  reg [2 : 0] dp0_wci_cEdge;
  wire [2 : 0] dp0_wci_cEdge$D_IN;
  wire dp0_wci_cEdge$EN;

  // register dp0_wci_cState
  reg [2 : 0] dp0_wci_cState;
  wire [2 : 0] dp0_wci_cState$D_IN;
  wire dp0_wci_cState$EN;

  // register dp0_wci_ctlAckReg
  reg dp0_wci_ctlAckReg;
  wire dp0_wci_ctlAckReg$D_IN, dp0_wci_ctlAckReg$EN;

  // register dp0_wci_ctlOpActive
  reg dp0_wci_ctlOpActive;
  wire dp0_wci_ctlOpActive$D_IN, dp0_wci_ctlOpActive$EN;

  // register dp0_wci_illegalEdge
  reg dp0_wci_illegalEdge;
  wire dp0_wci_illegalEdge$D_IN, dp0_wci_illegalEdge$EN;

  // register dp0_wci_nState
  reg [2 : 0] dp0_wci_nState;
  reg [2 : 0] dp0_wci_nState$D_IN;
  wire dp0_wci_nState$EN;

  // register dp0_wci_reqF_countReg
  reg [1 : 0] dp0_wci_reqF_countReg;
  wire [1 : 0] dp0_wci_reqF_countReg$D_IN;
  wire dp0_wci_reqF_countReg$EN;

  // register dp0_wci_respF_c_r
  reg [1 : 0] dp0_wci_respF_c_r;
  wire [1 : 0] dp0_wci_respF_c_r$D_IN;
  wire dp0_wci_respF_c_r$EN;

  // register dp0_wci_respF_q_0
  reg [33 : 0] dp0_wci_respF_q_0;
  reg [33 : 0] dp0_wci_respF_q_0$D_IN;
  wire dp0_wci_respF_q_0$EN;

  // register dp0_wci_respF_q_1
  reg [33 : 0] dp0_wci_respF_q_1;
  reg [33 : 0] dp0_wci_respF_q_1$D_IN;
  wire dp0_wci_respF_q_1$EN;

  // register dp0_wci_sFlagReg
  reg dp0_wci_sFlagReg;
  wire dp0_wci_sFlagReg$D_IN, dp0_wci_sFlagReg$EN;

  // register dp0_wci_sThreadBusy_d
  reg dp0_wci_sThreadBusy_d;
  wire dp0_wci_sThreadBusy_d$D_IN, dp0_wci_sThreadBusy_d$EN;

  // register dp0_wmi_addr
  reg [13 : 0] dp0_wmi_addr;
  wire [13 : 0] dp0_wmi_addr$D_IN;
  wire dp0_wmi_addr$EN;

  // register dp0_wmi_bufDwell
  reg [1 : 0] dp0_wmi_bufDwell;
  wire [1 : 0] dp0_wmi_bufDwell$D_IN;
  wire dp0_wmi_bufDwell$EN;

  // register dp0_wmi_bytesRemainReq
  reg [13 : 0] dp0_wmi_bytesRemainReq;
  wire [13 : 0] dp0_wmi_bytesRemainReq$D_IN;
  wire dp0_wmi_bytesRemainReq$EN;

  // register dp0_wmi_bytesRemainResp
  reg [13 : 0] dp0_wmi_bytesRemainResp;
  wire [13 : 0] dp0_wmi_bytesRemainResp$D_IN;
  wire dp0_wmi_bytesRemainResp$EN;

  // register dp0_wmi_doneWithMesg
  reg dp0_wmi_doneWithMesg;
  wire dp0_wmi_doneWithMesg$D_IN, dp0_wmi_doneWithMesg$EN;

  // register dp0_wmi_lastMesg
  reg [31 : 0] dp0_wmi_lastMesg;
  wire [31 : 0] dp0_wmi_lastMesg$D_IN;
  wire dp0_wmi_lastMesg$EN;

  // register dp0_wmi_lclMesgAddr
  reg [14 : 0] dp0_wmi_lclMesgAddr;
  wire [14 : 0] dp0_wmi_lclMesgAddr$D_IN;
  wire dp0_wmi_lclMesgAddr$EN;

  // register dp0_wmi_lclMetaAddr
  reg [14 : 0] dp0_wmi_lclMetaAddr;
  wire [14 : 0] dp0_wmi_lclMetaAddr$D_IN;
  wire dp0_wmi_lclMetaAddr$EN;

  // register dp0_wmi_mesgBufReady
  reg dp0_wmi_mesgBufReady;
  wire dp0_wmi_mesgBufReady$D_IN, dp0_wmi_mesgBufReady$EN;

  // register dp0_wmi_mesgBusy
  reg dp0_wmi_mesgBusy;
  wire dp0_wmi_mesgBusy$D_IN, dp0_wmi_mesgBusy$EN;

  // register dp0_wmi_mesgCount
  reg [31 : 0] dp0_wmi_mesgCount;
  wire [31 : 0] dp0_wmi_mesgCount$D_IN;
  wire dp0_wmi_mesgCount$EN;

  // register dp0_wmi_mesgDone
  reg dp0_wmi_mesgDone;
  wire dp0_wmi_mesgDone$D_IN, dp0_wmi_mesgDone$EN;

  // register dp0_wmi_mesgMeta
  reg [128 : 0] dp0_wmi_mesgMeta;
  wire [128 : 0] dp0_wmi_mesgMeta$D_IN;
  wire dp0_wmi_mesgMeta$EN;

  // register dp0_wmi_mesgStart
  reg dp0_wmi_mesgStart;
  wire dp0_wmi_mesgStart$D_IN, dp0_wmi_mesgStart$EN;

  // register dp0_wmi_metaBusy
  reg dp0_wmi_metaBusy;
  wire dp0_wmi_metaBusy$D_IN, dp0_wmi_metaBusy$EN;

  // register dp0_wmi_p4B
  reg [1 : 0] dp0_wmi_p4B;
  wire [1 : 0] dp0_wmi_p4B$D_IN;
  wire dp0_wmi_p4B$EN;

  // register dp0_wmi_rdActive
  reg dp0_wmi_rdActive;
  wire dp0_wmi_rdActive$D_IN, dp0_wmi_rdActive$EN;

  // register dp0_wmi_reqCount
  reg [15 : 0] dp0_wmi_reqCount;
  wire [15 : 0] dp0_wmi_reqCount$D_IN;
  wire dp0_wmi_reqCount$EN;

  // register dp0_wmi_thisMesg
  reg [31 : 0] dp0_wmi_thisMesg;
  wire [31 : 0] dp0_wmi_thisMesg$D_IN;
  wire dp0_wmi_thisMesg$EN;

  // register dp0_wmi_wmi_blockReq
  reg dp0_wmi_wmi_blockReq;
  wire dp0_wmi_wmi_blockReq$D_IN, dp0_wmi_wmi_blockReq$EN;

  // register dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp0_wmi_wmi_dhF_countReg$D_IN;
  wire dp0_wmi_wmi_dhF_countReg$EN;

  // register dp0_wmi_wmi_dhF_levelsValid
  reg dp0_wmi_wmi_dhF_levelsValid;
  wire dp0_wmi_wmi_dhF_levelsValid$D_IN, dp0_wmi_wmi_dhF_levelsValid$EN;

  // register dp0_wmi_wmi_errorSticky
  reg dp0_wmi_wmi_errorSticky;
  wire dp0_wmi_wmi_errorSticky$D_IN, dp0_wmi_wmi_errorSticky$EN;

  // register dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp0_wmi_wmi_mFlagF_countReg$EN;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  reg dp0_wmi_wmi_mFlagF_levelsValid;
  wire dp0_wmi_wmi_mFlagF_levelsValid$D_IN, dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp0_wmi_wmi_mFlagReg
  reg [31 : 0] dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] dp0_wmi_wmi_mFlagReg$D_IN;
  wire dp0_wmi_wmi_mFlagReg$EN;

  // register dp0_wmi_wmi_operateD
  reg dp0_wmi_wmi_operateD;
  wire dp0_wmi_wmi_operateD$D_IN, dp0_wmi_wmi_operateD$EN;

  // register dp0_wmi_wmi_peerIsReady
  reg dp0_wmi_wmi_peerIsReady;
  wire dp0_wmi_wmi_peerIsReady$D_IN, dp0_wmi_wmi_peerIsReady$EN;

  // register dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp0_wmi_wmi_reqF_countReg$D_IN;
  wire dp0_wmi_wmi_reqF_countReg$EN;

  // register dp0_wmi_wmi_reqF_levelsValid
  reg dp0_wmi_wmi_reqF_levelsValid;
  wire dp0_wmi_wmi_reqF_levelsValid$D_IN, dp0_wmi_wmi_reqF_levelsValid$EN;

  // register dp0_wmi_wmi_respF_c_r
  reg [1 : 0] dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] dp0_wmi_wmi_respF_c_r$D_IN;
  wire dp0_wmi_wmi_respF_c_r$EN;

  // register dp0_wmi_wmi_respF_q_0
  reg [33 : 0] dp0_wmi_wmi_respF_q_0;
  reg [33 : 0] dp0_wmi_wmi_respF_q_0$D_IN;
  wire dp0_wmi_wmi_respF_q_0$EN;

  // register dp0_wmi_wmi_respF_q_1
  reg [33 : 0] dp0_wmi_wmi_respF_q_1;
  reg [33 : 0] dp0_wmi_wmi_respF_q_1$D_IN;
  wire dp0_wmi_wmi_respF_q_1$EN;

  // register dp0_wmi_wmi_sFlagReg
  reg [31 : 0] dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] dp0_wmi_wmi_sFlagReg$D_IN;
  wire dp0_wmi_wmi_sFlagReg$EN;

  // register dp0_wmi_wmi_statusR
  reg [7 : 0] dp0_wmi_wmi_statusR;
  wire [7 : 0] dp0_wmi_wmi_statusR$D_IN;
  wire dp0_wmi_wmi_statusR$EN;

  // register dp0_wmi_wmi_trafficSticky
  reg dp0_wmi_wmi_trafficSticky;
  wire dp0_wmi_wmi_trafficSticky$D_IN, dp0_wmi_wmi_trafficSticky$EN;

  // register dp0_wmi_wrActive
  reg dp0_wmi_wrActive;
  wire dp0_wmi_wrActive$D_IN, dp0_wmi_wrActive$EN;

  // register dp0_wmi_wrFinalize
  reg dp0_wmi_wrFinalize;
  wire dp0_wmi_wrFinalize$D_IN, dp0_wmi_wrFinalize$EN;

  // register dp0_wmi_wrtCount
  reg [15 : 0] dp0_wmi_wrtCount;
  wire [15 : 0] dp0_wmi_wrtCount$D_IN;
  wire dp0_wmi_wrtCount$EN;

  // register dp0_wti_nowReq
  reg [66 : 0] dp0_wti_nowReq;
  wire [66 : 0] dp0_wti_nowReq$D_IN;
  wire dp0_wti_nowReq$EN;

  // register dp1_bml_crdBuf_modulus
  reg [15 : 0] dp1_bml_crdBuf_modulus;
  wire [15 : 0] dp1_bml_crdBuf_modulus$D_IN;
  wire dp1_bml_crdBuf_modulus$EN;

  // register dp1_bml_crdBuf_value
  reg [15 : 0] dp1_bml_crdBuf_value;
  wire [15 : 0] dp1_bml_crdBuf_value$D_IN;
  wire dp1_bml_crdBuf_value$EN;

  // register dp1_bml_fabAvail
  reg dp1_bml_fabAvail;
  wire dp1_bml_fabAvail$D_IN, dp1_bml_fabAvail$EN;

  // register dp1_bml_fabBuf_modulus
  reg [15 : 0] dp1_bml_fabBuf_modulus;
  wire [15 : 0] dp1_bml_fabBuf_modulus$D_IN;
  wire dp1_bml_fabBuf_modulus$EN;

  // register dp1_bml_fabBuf_value
  reg [15 : 0] dp1_bml_fabBuf_value;
  wire [15 : 0] dp1_bml_fabBuf_value$D_IN;
  wire dp1_bml_fabBuf_value$EN;

  // register dp1_bml_fabBufsAvail
  reg [15 : 0] dp1_bml_fabBufsAvail;
  wire [15 : 0] dp1_bml_fabBufsAvail$D_IN;
  wire dp1_bml_fabBufsAvail$EN;

  // register dp1_bml_fabDone
  reg dp1_bml_fabDone;
  wire dp1_bml_fabDone$D_IN, dp1_bml_fabDone$EN;

  // register dp1_bml_fabFlowAddr
  reg [31 : 0] dp1_bml_fabFlowAddr;
  reg [31 : 0] dp1_bml_fabFlowAddr$D_IN;
  wire dp1_bml_fabFlowAddr$EN;

  // register dp1_bml_fabFlowBase
  reg [31 : 0] dp1_bml_fabFlowBase;
  wire [31 : 0] dp1_bml_fabFlowBase$D_IN;
  wire dp1_bml_fabFlowBase$EN;

  // register dp1_bml_fabFlowSize
  reg [31 : 0] dp1_bml_fabFlowSize;
  wire [31 : 0] dp1_bml_fabFlowSize$D_IN;
  wire dp1_bml_fabFlowSize$EN;

  // register dp1_bml_fabMesgAddr
  reg [31 : 0] dp1_bml_fabMesgAddr;
  wire [31 : 0] dp1_bml_fabMesgAddr$D_IN;
  wire dp1_bml_fabMesgAddr$EN;

  // register dp1_bml_fabMesgBase
  reg [31 : 0] dp1_bml_fabMesgBase;
  wire [31 : 0] dp1_bml_fabMesgBase$D_IN;
  wire dp1_bml_fabMesgBase$EN;

  // register dp1_bml_fabMesgSize
  reg [31 : 0] dp1_bml_fabMesgSize;
  wire [31 : 0] dp1_bml_fabMesgSize$D_IN;
  wire dp1_bml_fabMesgSize$EN;

  // register dp1_bml_fabMetaAddr
  reg [31 : 0] dp1_bml_fabMetaAddr;
  wire [31 : 0] dp1_bml_fabMetaAddr$D_IN;
  wire dp1_bml_fabMetaAddr$EN;

  // register dp1_bml_fabMetaBase
  reg [31 : 0] dp1_bml_fabMetaBase;
  wire [31 : 0] dp1_bml_fabMetaBase$D_IN;
  wire dp1_bml_fabMetaBase$EN;

  // register dp1_bml_fabMetaSize
  reg [31 : 0] dp1_bml_fabMetaSize;
  wire [31 : 0] dp1_bml_fabMetaSize$D_IN;
  wire dp1_bml_fabMetaSize$EN;

  // register dp1_bml_fabNumBufs
  reg [15 : 0] dp1_bml_fabNumBufs;
  wire [15 : 0] dp1_bml_fabNumBufs$D_IN;
  wire dp1_bml_fabNumBufs$EN;

  // register dp1_bml_lclBufDone
  reg dp1_bml_lclBufDone;
  wire dp1_bml_lclBufDone$D_IN, dp1_bml_lclBufDone$EN;

  // register dp1_bml_lclBufStart
  reg dp1_bml_lclBufStart;
  wire dp1_bml_lclBufStart$D_IN, dp1_bml_lclBufStart$EN;

  // register dp1_bml_lclBuf_modulus
  reg [15 : 0] dp1_bml_lclBuf_modulus;
  wire [15 : 0] dp1_bml_lclBuf_modulus$D_IN;
  wire dp1_bml_lclBuf_modulus$EN;

  // register dp1_bml_lclBuf_value
  reg [15 : 0] dp1_bml_lclBuf_value;
  wire [15 : 0] dp1_bml_lclBuf_value$D_IN;
  wire dp1_bml_lclBuf_value$EN;

  // register dp1_bml_lclBufsAR
  reg [15 : 0] dp1_bml_lclBufsAR;
  wire [15 : 0] dp1_bml_lclBufsAR$D_IN;
  wire dp1_bml_lclBufsAR$EN;

  // register dp1_bml_lclBufsCF
  reg [15 : 0] dp1_bml_lclBufsCF;
  wire [15 : 0] dp1_bml_lclBufsCF$D_IN;
  wire dp1_bml_lclBufsCF$EN;

  // register dp1_bml_lclCredit
  reg [15 : 0] dp1_bml_lclCredit;
  wire [15 : 0] dp1_bml_lclCredit$D_IN;
  wire dp1_bml_lclCredit$EN;

  // register dp1_bml_lclDones
  reg [15 : 0] dp1_bml_lclDones;
  wire [15 : 0] dp1_bml_lclDones$D_IN;
  wire dp1_bml_lclDones$EN;

  // register dp1_bml_lclMesgAddr
  reg [15 : 0] dp1_bml_lclMesgAddr;
  wire [15 : 0] dp1_bml_lclMesgAddr$D_IN;
  wire dp1_bml_lclMesgAddr$EN;

  // register dp1_bml_lclMetaAddr
  reg [15 : 0] dp1_bml_lclMetaAddr;
  wire [15 : 0] dp1_bml_lclMetaAddr$D_IN;
  wire dp1_bml_lclMetaAddr$EN;

  // register dp1_bml_lclNumBufs
  reg [15 : 0] dp1_bml_lclNumBufs;
  wire [15 : 0] dp1_bml_lclNumBufs$D_IN;
  wire dp1_bml_lclNumBufs$EN;

  // register dp1_bml_lclStarts
  reg [15 : 0] dp1_bml_lclStarts;
  wire [15 : 0] dp1_bml_lclStarts$D_IN;
  wire dp1_bml_lclStarts$EN;

  // register dp1_bml_mesgBase
  reg [15 : 0] dp1_bml_mesgBase;
  wire [15 : 0] dp1_bml_mesgBase$D_IN;
  wire dp1_bml_mesgBase$EN;

  // register dp1_bml_mesgSize
  reg [15 : 0] dp1_bml_mesgSize;
  wire [15 : 0] dp1_bml_mesgSize$D_IN;
  wire dp1_bml_mesgSize$EN;

  // register dp1_bml_metaBase
  reg [15 : 0] dp1_bml_metaBase;
  wire [15 : 0] dp1_bml_metaBase$D_IN;
  wire dp1_bml_metaBase$EN;

  // register dp1_bml_metaSize
  reg [15 : 0] dp1_bml_metaSize;
  wire [15 : 0] dp1_bml_metaSize$D_IN;
  wire dp1_bml_metaSize$EN;

  // register dp1_bml_remBuf_modulus
  reg [15 : 0] dp1_bml_remBuf_modulus;
  wire [15 : 0] dp1_bml_remBuf_modulus$D_IN;
  wire dp1_bml_remBuf_modulus$EN;

  // register dp1_bml_remBuf_value
  reg [15 : 0] dp1_bml_remBuf_value;
  wire [15 : 0] dp1_bml_remBuf_value$D_IN;
  wire dp1_bml_remBuf_value$EN;

  // register dp1_bml_remDone
  reg dp1_bml_remDone;
  wire dp1_bml_remDone$D_IN, dp1_bml_remDone$EN;

  // register dp1_bml_remDones
  reg [15 : 0] dp1_bml_remDones;
  wire [15 : 0] dp1_bml_remDones$D_IN;
  wire dp1_bml_remDones$EN;

  // register dp1_bml_remMesgAddr
  reg [15 : 0] dp1_bml_remMesgAddr;
  wire [15 : 0] dp1_bml_remMesgAddr$D_IN;
  wire dp1_bml_remMesgAddr$EN;

  // register dp1_bml_remMetaAddr
  reg [15 : 0] dp1_bml_remMetaAddr;
  wire [15 : 0] dp1_bml_remMetaAddr$D_IN;
  wire dp1_bml_remMetaAddr$EN;

  // register dp1_bml_remStart
  reg dp1_bml_remStart;
  wire dp1_bml_remStart$D_IN, dp1_bml_remStart$EN;

  // register dp1_bml_remStarts
  reg [15 : 0] dp1_bml_remStarts;
  wire [15 : 0] dp1_bml_remStarts$D_IN;
  wire dp1_bml_remStarts$EN;

  // register dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire dp1_bram_serverAdapterA_1_cnt$EN;

  // register dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_1_s1$D_IN;
  wire dp1_bram_serverAdapterA_1_s1$EN;

  // register dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire dp1_bram_serverAdapterA_2_cnt$EN;

  // register dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_2_s1$D_IN;
  wire dp1_bram_serverAdapterA_2_s1$EN;

  // register dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire dp1_bram_serverAdapterA_3_cnt$EN;

  // register dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_3_s1$D_IN;
  wire dp1_bram_serverAdapterA_3_s1$EN;

  // register dp1_bram_serverAdapterA_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_cnt$D_IN;
  wire dp1_bram_serverAdapterA_cnt$EN;

  // register dp1_bram_serverAdapterA_s1
  reg [1 : 0] dp1_bram_serverAdapterA_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_s1$D_IN;
  wire dp1_bram_serverAdapterA_s1$EN;

  // register dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire dp1_bram_serverAdapterB_1_cnt$EN;

  // register dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_1_s1$D_IN;
  wire dp1_bram_serverAdapterB_1_s1$EN;

  // register dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire dp1_bram_serverAdapterB_2_cnt$EN;

  // register dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_2_s1$D_IN;
  wire dp1_bram_serverAdapterB_2_s1$EN;

  // register dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire dp1_bram_serverAdapterB_3_cnt$EN;

  // register dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_3_s1$D_IN;
  wire dp1_bram_serverAdapterB_3_s1$EN;

  // register dp1_bram_serverAdapterB_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_cnt$D_IN;
  wire dp1_bram_serverAdapterB_cnt$EN;

  // register dp1_bram_serverAdapterB_s1
  reg [1 : 0] dp1_bram_serverAdapterB_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_s1$D_IN;
  wire dp1_bram_serverAdapterB_s1$EN;

  // register dp1_dpControl
  reg [3 : 0] dp1_dpControl;
  wire [3 : 0] dp1_dpControl$D_IN;
  wire dp1_dpControl$EN;

  // register dp1_tlp_creditReady
  reg dp1_tlp_creditReady;
  wire dp1_tlp_creditReady$D_IN, dp1_tlp_creditReady$EN;

  // register dp1_tlp_debugBdata
  reg [127 : 0] dp1_tlp_debugBdata;
  wire [127 : 0] dp1_tlp_debugBdata$D_IN;
  wire dp1_tlp_debugBdata$EN;

  // register dp1_tlp_dmaDoTailEvent
  reg dp1_tlp_dmaDoTailEvent;
  wire dp1_tlp_dmaDoTailEvent$D_IN, dp1_tlp_dmaDoTailEvent$EN;

  // register dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire dp1_tlp_dmaPullRemainDWLen$EN;

  // register dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire dp1_tlp_dmaPullRemainDWSub$EN;

  // register dp1_tlp_dmaReqTag
  reg [4 : 0] dp1_tlp_dmaReqTag;
  wire [4 : 0] dp1_tlp_dmaReqTag$D_IN;
  wire dp1_tlp_dmaReqTag$EN;

  // register dp1_tlp_dmaTag
  reg [4 : 0] dp1_tlp_dmaTag;
  wire [4 : 0] dp1_tlp_dmaTag$D_IN;
  wire dp1_tlp_dmaTag$EN;

  // register dp1_tlp_doXmtMetaBody
  reg dp1_tlp_doXmtMetaBody;
  wire dp1_tlp_doXmtMetaBody$D_IN, dp1_tlp_doXmtMetaBody$EN;

  // register dp1_tlp_fabFlowAddr
  reg [31 : 0] dp1_tlp_fabFlowAddr;
  wire [31 : 0] dp1_tlp_fabFlowAddr$D_IN;
  wire dp1_tlp_fabFlowAddr$EN;

  // register dp1_tlp_fabMesgAccu
  reg [31 : 0] dp1_tlp_fabMesgAccu;
  wire [31 : 0] dp1_tlp_fabMesgAccu$D_IN;
  wire dp1_tlp_fabMesgAccu$EN;

  // register dp1_tlp_fabMesgAddr
  reg [31 : 0] dp1_tlp_fabMesgAddr;
  wire [31 : 0] dp1_tlp_fabMesgAddr$D_IN;
  wire dp1_tlp_fabMesgAddr$EN;

  // register dp1_tlp_fabMeta
  reg [128 : 0] dp1_tlp_fabMeta;
  wire [128 : 0] dp1_tlp_fabMeta$D_IN;
  wire dp1_tlp_fabMeta$EN;

  // register dp1_tlp_fabMetaAddr
  reg [31 : 0] dp1_tlp_fabMetaAddr;
  wire [31 : 0] dp1_tlp_fabMetaAddr$D_IN;
  wire dp1_tlp_fabMetaAddr$EN;

  // register dp1_tlp_farBufReady
  reg dp1_tlp_farBufReady;
  wire dp1_tlp_farBufReady$D_IN, dp1_tlp_farBufReady$EN;

  // register dp1_tlp_flowDiagCount
  reg [31 : 0] dp1_tlp_flowDiagCount;
  wire [31 : 0] dp1_tlp_flowDiagCount$D_IN;
  wire dp1_tlp_flowDiagCount$EN;

  // register dp1_tlp_gotResponseHeader
  reg dp1_tlp_gotResponseHeader;
  wire dp1_tlp_gotResponseHeader$D_IN, dp1_tlp_gotResponseHeader$EN;

  // register dp1_tlp_inIgnorePkt
  reg dp1_tlp_inIgnorePkt;
  wire dp1_tlp_inIgnorePkt$D_IN, dp1_tlp_inIgnorePkt$EN;

  // register dp1_tlp_maxPayloadSize
  reg [12 : 0] dp1_tlp_maxPayloadSize;
  wire [12 : 0] dp1_tlp_maxPayloadSize$D_IN;
  wire dp1_tlp_maxPayloadSize$EN;

  // register dp1_tlp_maxReadReqSize
  reg [12 : 0] dp1_tlp_maxReadReqSize;
  wire [12 : 0] dp1_tlp_maxReadReqSize$D_IN;
  wire dp1_tlp_maxReadReqSize$EN;

  // register dp1_tlp_mesgComplReceived
  reg [16 : 0] dp1_tlp_mesgComplReceived;
  wire [16 : 0] dp1_tlp_mesgComplReceived$D_IN;
  wire dp1_tlp_mesgComplReceived$EN;

  // register dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPull$D_IN;
  wire dp1_tlp_mesgLengthRemainPull$EN;

  // register dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPush$D_IN;
  wire dp1_tlp_mesgLengthRemainPush$EN;

  // register dp1_tlp_nearBufReady
  reg dp1_tlp_nearBufReady;
  wire dp1_tlp_nearBufReady$D_IN, dp1_tlp_nearBufReady$EN;

  // register dp1_tlp_outDwRemain
  reg [9 : 0] dp1_tlp_outDwRemain;
  wire [9 : 0] dp1_tlp_outDwRemain$D_IN;
  wire dp1_tlp_outDwRemain$EN;

  // register dp1_tlp_postSeqDwell
  reg [3 : 0] dp1_tlp_postSeqDwell;
  wire [3 : 0] dp1_tlp_postSeqDwell$D_IN;
  wire dp1_tlp_postSeqDwell$EN;

  // register dp1_tlp_pullTagMatch
  reg dp1_tlp_pullTagMatch;
  wire dp1_tlp_pullTagMatch$D_IN, dp1_tlp_pullTagMatch$EN;

  // register dp1_tlp_rdRespDwRemain
  reg [9 : 0] dp1_tlp_rdRespDwRemain;
  wire [9 : 0] dp1_tlp_rdRespDwRemain$D_IN;
  wire dp1_tlp_rdRespDwRemain$EN;

  // register dp1_tlp_readHeaderSent
  reg dp1_tlp_readHeaderSent;
  wire dp1_tlp_readHeaderSent$D_IN, dp1_tlp_readHeaderSent$EN;

  // register dp1_tlp_readNxtDWAddr
  reg [12 : 0] dp1_tlp_readNxtDWAddr;
  wire [12 : 0] dp1_tlp_readNxtDWAddr$D_IN;
  wire dp1_tlp_readNxtDWAddr$EN;

  // register dp1_tlp_readRemainDWLen
  reg [9 : 0] dp1_tlp_readRemainDWLen;
  wire [9 : 0] dp1_tlp_readRemainDWLen$D_IN;
  wire dp1_tlp_readRemainDWLen$EN;

  // register dp1_tlp_readStarted
  reg dp1_tlp_readStarted;
  wire dp1_tlp_readStarted$D_IN, dp1_tlp_readStarted$EN;

  // register dp1_tlp_remDone
  reg dp1_tlp_remDone;
  wire dp1_tlp_remDone$D_IN, dp1_tlp_remDone$EN;

  // register dp1_tlp_remMesgAccu
  reg [15 : 0] dp1_tlp_remMesgAccu;
  wire [15 : 0] dp1_tlp_remMesgAccu$D_IN;
  wire dp1_tlp_remMesgAccu$EN;

  // register dp1_tlp_remMesgAddr
  reg [15 : 0] dp1_tlp_remMesgAddr;
  wire [15 : 0] dp1_tlp_remMesgAddr$D_IN;
  wire dp1_tlp_remMesgAddr$EN;

  // register dp1_tlp_remMetaAddr
  reg [15 : 0] dp1_tlp_remMetaAddr;
  wire [15 : 0] dp1_tlp_remMetaAddr$D_IN;
  wire dp1_tlp_remMetaAddr$EN;

  // register dp1_tlp_remStart
  reg dp1_tlp_remStart;
  wire dp1_tlp_remStart$D_IN, dp1_tlp_remStart$EN;

  // register dp1_tlp_reqMesgInFlight
  reg dp1_tlp_reqMesgInFlight;
  wire dp1_tlp_reqMesgInFlight$D_IN, dp1_tlp_reqMesgInFlight$EN;

  // register dp1_tlp_reqMetaBodyInFlight
  reg dp1_tlp_reqMetaBodyInFlight;
  wire dp1_tlp_reqMetaBodyInFlight$D_IN, dp1_tlp_reqMetaBodyInFlight$EN;

  // register dp1_tlp_reqMetaInFlight
  reg dp1_tlp_reqMetaInFlight;
  wire dp1_tlp_reqMetaInFlight$D_IN, dp1_tlp_reqMetaInFlight$EN;

  // register dp1_tlp_srcMesgAccu
  reg [31 : 0] dp1_tlp_srcMesgAccu;
  wire [31 : 0] dp1_tlp_srcMesgAccu$D_IN;
  wire dp1_tlp_srcMesgAccu$EN;

  // register dp1_tlp_tlpMetaSent
  reg dp1_tlp_tlpMetaSent;
  wire dp1_tlp_tlpMetaSent$D_IN, dp1_tlp_tlpMetaSent$EN;

  // register dp1_tlp_tlpRcvBusy
  reg dp1_tlp_tlpRcvBusy;
  wire dp1_tlp_tlpRcvBusy$D_IN, dp1_tlp_tlpRcvBusy$EN;

  // register dp1_tlp_tlpXmtBusy
  reg dp1_tlp_tlpXmtBusy;
  reg dp1_tlp_tlpXmtBusy$D_IN;
  wire dp1_tlp_tlpXmtBusy$EN;

  // register dp1_tlp_writeDWAddr
  reg [12 : 0] dp1_tlp_writeDWAddr;
  wire [12 : 0] dp1_tlp_writeDWAddr$D_IN;
  wire dp1_tlp_writeDWAddr$EN;

  // register dp1_tlp_writeLastBE
  reg [3 : 0] dp1_tlp_writeLastBE;
  wire [3 : 0] dp1_tlp_writeLastBE$D_IN;
  wire dp1_tlp_writeLastBE$EN;

  // register dp1_tlp_writeRemainDWLen
  reg [9 : 0] dp1_tlp_writeRemainDWLen;
  wire [9 : 0] dp1_tlp_writeRemainDWLen$D_IN;
  wire dp1_tlp_writeRemainDWLen$EN;

  // register dp1_tlp_xmtMetaInFlight
  reg dp1_tlp_xmtMetaInFlight;
  wire dp1_tlp_xmtMetaInFlight$D_IN, dp1_tlp_xmtMetaInFlight$EN;

  // register dp1_tlp_xmtMetaOK
  reg dp1_tlp_xmtMetaOK;
  reg dp1_tlp_xmtMetaOK$D_IN;
  wire dp1_tlp_xmtMetaOK$EN;

  // register dp1_wci_cEdge
  reg [2 : 0] dp1_wci_cEdge;
  wire [2 : 0] dp1_wci_cEdge$D_IN;
  wire dp1_wci_cEdge$EN;

  // register dp1_wci_cState
  reg [2 : 0] dp1_wci_cState;
  wire [2 : 0] dp1_wci_cState$D_IN;
  wire dp1_wci_cState$EN;

  // register dp1_wci_ctlAckReg
  reg dp1_wci_ctlAckReg;
  wire dp1_wci_ctlAckReg$D_IN, dp1_wci_ctlAckReg$EN;

  // register dp1_wci_ctlOpActive
  reg dp1_wci_ctlOpActive;
  wire dp1_wci_ctlOpActive$D_IN, dp1_wci_ctlOpActive$EN;

  // register dp1_wci_illegalEdge
  reg dp1_wci_illegalEdge;
  wire dp1_wci_illegalEdge$D_IN, dp1_wci_illegalEdge$EN;

  // register dp1_wci_nState
  reg [2 : 0] dp1_wci_nState;
  reg [2 : 0] dp1_wci_nState$D_IN;
  wire dp1_wci_nState$EN;

  // register dp1_wci_reqF_countReg
  reg [1 : 0] dp1_wci_reqF_countReg;
  wire [1 : 0] dp1_wci_reqF_countReg$D_IN;
  wire dp1_wci_reqF_countReg$EN;

  // register dp1_wci_respF_c_r
  reg [1 : 0] dp1_wci_respF_c_r;
  wire [1 : 0] dp1_wci_respF_c_r$D_IN;
  wire dp1_wci_respF_c_r$EN;

  // register dp1_wci_respF_q_0
  reg [33 : 0] dp1_wci_respF_q_0;
  reg [33 : 0] dp1_wci_respF_q_0$D_IN;
  wire dp1_wci_respF_q_0$EN;

  // register dp1_wci_respF_q_1
  reg [33 : 0] dp1_wci_respF_q_1;
  reg [33 : 0] dp1_wci_respF_q_1$D_IN;
  wire dp1_wci_respF_q_1$EN;

  // register dp1_wci_sFlagReg
  reg dp1_wci_sFlagReg;
  wire dp1_wci_sFlagReg$D_IN, dp1_wci_sFlagReg$EN;

  // register dp1_wci_sThreadBusy_d
  reg dp1_wci_sThreadBusy_d;
  wire dp1_wci_sThreadBusy_d$D_IN, dp1_wci_sThreadBusy_d$EN;

  // register dp1_wmi_addr
  reg [13 : 0] dp1_wmi_addr;
  wire [13 : 0] dp1_wmi_addr$D_IN;
  wire dp1_wmi_addr$EN;

  // register dp1_wmi_bufDwell
  reg [1 : 0] dp1_wmi_bufDwell;
  wire [1 : 0] dp1_wmi_bufDwell$D_IN;
  wire dp1_wmi_bufDwell$EN;

  // register dp1_wmi_bytesRemainReq
  reg [13 : 0] dp1_wmi_bytesRemainReq;
  wire [13 : 0] dp1_wmi_bytesRemainReq$D_IN;
  wire dp1_wmi_bytesRemainReq$EN;

  // register dp1_wmi_bytesRemainResp
  reg [13 : 0] dp1_wmi_bytesRemainResp;
  wire [13 : 0] dp1_wmi_bytesRemainResp$D_IN;
  wire dp1_wmi_bytesRemainResp$EN;

  // register dp1_wmi_doneWithMesg
  reg dp1_wmi_doneWithMesg;
  wire dp1_wmi_doneWithMesg$D_IN, dp1_wmi_doneWithMesg$EN;

  // register dp1_wmi_lastMesg
  reg [31 : 0] dp1_wmi_lastMesg;
  wire [31 : 0] dp1_wmi_lastMesg$D_IN;
  wire dp1_wmi_lastMesg$EN;

  // register dp1_wmi_lclMesgAddr
  reg [14 : 0] dp1_wmi_lclMesgAddr;
  wire [14 : 0] dp1_wmi_lclMesgAddr$D_IN;
  wire dp1_wmi_lclMesgAddr$EN;

  // register dp1_wmi_lclMetaAddr
  reg [14 : 0] dp1_wmi_lclMetaAddr;
  wire [14 : 0] dp1_wmi_lclMetaAddr$D_IN;
  wire dp1_wmi_lclMetaAddr$EN;

  // register dp1_wmi_mesgBufReady
  reg dp1_wmi_mesgBufReady;
  wire dp1_wmi_mesgBufReady$D_IN, dp1_wmi_mesgBufReady$EN;

  // register dp1_wmi_mesgBusy
  reg dp1_wmi_mesgBusy;
  wire dp1_wmi_mesgBusy$D_IN, dp1_wmi_mesgBusy$EN;

  // register dp1_wmi_mesgCount
  reg [31 : 0] dp1_wmi_mesgCount;
  wire [31 : 0] dp1_wmi_mesgCount$D_IN;
  wire dp1_wmi_mesgCount$EN;

  // register dp1_wmi_mesgDone
  reg dp1_wmi_mesgDone;
  wire dp1_wmi_mesgDone$D_IN, dp1_wmi_mesgDone$EN;

  // register dp1_wmi_mesgMeta
  reg [128 : 0] dp1_wmi_mesgMeta;
  wire [128 : 0] dp1_wmi_mesgMeta$D_IN;
  wire dp1_wmi_mesgMeta$EN;

  // register dp1_wmi_mesgStart
  reg dp1_wmi_mesgStart;
  wire dp1_wmi_mesgStart$D_IN, dp1_wmi_mesgStart$EN;

  // register dp1_wmi_metaBusy
  reg dp1_wmi_metaBusy;
  wire dp1_wmi_metaBusy$D_IN, dp1_wmi_metaBusy$EN;

  // register dp1_wmi_p4B
  reg [1 : 0] dp1_wmi_p4B;
  wire [1 : 0] dp1_wmi_p4B$D_IN;
  wire dp1_wmi_p4B$EN;

  // register dp1_wmi_rdActive
  reg dp1_wmi_rdActive;
  wire dp1_wmi_rdActive$D_IN, dp1_wmi_rdActive$EN;

  // register dp1_wmi_reqCount
  reg [15 : 0] dp1_wmi_reqCount;
  wire [15 : 0] dp1_wmi_reqCount$D_IN;
  wire dp1_wmi_reqCount$EN;

  // register dp1_wmi_thisMesg
  reg [31 : 0] dp1_wmi_thisMesg;
  wire [31 : 0] dp1_wmi_thisMesg$D_IN;
  wire dp1_wmi_thisMesg$EN;

  // register dp1_wmi_wmi_blockReq
  reg dp1_wmi_wmi_blockReq;
  wire dp1_wmi_wmi_blockReq$D_IN, dp1_wmi_wmi_blockReq$EN;

  // register dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp1_wmi_wmi_dhF_countReg$D_IN;
  wire dp1_wmi_wmi_dhF_countReg$EN;

  // register dp1_wmi_wmi_dhF_levelsValid
  reg dp1_wmi_wmi_dhF_levelsValid;
  wire dp1_wmi_wmi_dhF_levelsValid$D_IN, dp1_wmi_wmi_dhF_levelsValid$EN;

  // register dp1_wmi_wmi_errorSticky
  reg dp1_wmi_wmi_errorSticky;
  wire dp1_wmi_wmi_errorSticky$D_IN, dp1_wmi_wmi_errorSticky$EN;

  // register dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp1_wmi_wmi_mFlagF_countReg$EN;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  reg dp1_wmi_wmi_mFlagF_levelsValid;
  wire dp1_wmi_wmi_mFlagF_levelsValid$D_IN, dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp1_wmi_wmi_mFlagReg
  reg [31 : 0] dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] dp1_wmi_wmi_mFlagReg$D_IN;
  wire dp1_wmi_wmi_mFlagReg$EN;

  // register dp1_wmi_wmi_operateD
  reg dp1_wmi_wmi_operateD;
  wire dp1_wmi_wmi_operateD$D_IN, dp1_wmi_wmi_operateD$EN;

  // register dp1_wmi_wmi_peerIsReady
  reg dp1_wmi_wmi_peerIsReady;
  wire dp1_wmi_wmi_peerIsReady$D_IN, dp1_wmi_wmi_peerIsReady$EN;

  // register dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp1_wmi_wmi_reqF_countReg$D_IN;
  wire dp1_wmi_wmi_reqF_countReg$EN;

  // register dp1_wmi_wmi_reqF_levelsValid
  reg dp1_wmi_wmi_reqF_levelsValid;
  wire dp1_wmi_wmi_reqF_levelsValid$D_IN, dp1_wmi_wmi_reqF_levelsValid$EN;

  // register dp1_wmi_wmi_respF_c_r
  reg [1 : 0] dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] dp1_wmi_wmi_respF_c_r$D_IN;
  wire dp1_wmi_wmi_respF_c_r$EN;

  // register dp1_wmi_wmi_respF_q_0
  reg [33 : 0] dp1_wmi_wmi_respF_q_0;
  reg [33 : 0] dp1_wmi_wmi_respF_q_0$D_IN;
  wire dp1_wmi_wmi_respF_q_0$EN;

  // register dp1_wmi_wmi_respF_q_1
  reg [33 : 0] dp1_wmi_wmi_respF_q_1;
  reg [33 : 0] dp1_wmi_wmi_respF_q_1$D_IN;
  wire dp1_wmi_wmi_respF_q_1$EN;

  // register dp1_wmi_wmi_sFlagReg
  reg [31 : 0] dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] dp1_wmi_wmi_sFlagReg$D_IN;
  wire dp1_wmi_wmi_sFlagReg$EN;

  // register dp1_wmi_wmi_statusR
  reg [7 : 0] dp1_wmi_wmi_statusR;
  wire [7 : 0] dp1_wmi_wmi_statusR$D_IN;
  wire dp1_wmi_wmi_statusR$EN;

  // register dp1_wmi_wmi_trafficSticky
  reg dp1_wmi_wmi_trafficSticky;
  wire dp1_wmi_wmi_trafficSticky$D_IN, dp1_wmi_wmi_trafficSticky$EN;

  // register dp1_wmi_wrActive
  reg dp1_wmi_wrActive;
  wire dp1_wmi_wrActive$D_IN, dp1_wmi_wrActive$EN;

  // register dp1_wmi_wrFinalize
  reg dp1_wmi_wrFinalize;
  wire dp1_wmi_wrFinalize$D_IN, dp1_wmi_wrFinalize$EN;

  // register dp1_wmi_wrtCount
  reg [15 : 0] dp1_wmi_wrtCount;
  wire [15 : 0] dp1_wmi_wrtCount$D_IN;
  wire dp1_wmi_wrtCount$EN;

  // register dp1_wti_nowReq
  reg [66 : 0] dp1_wti_nowReq;
  wire [66 : 0] dp1_wti_nowReq$D_IN;
  wire dp1_wti_nowReq$EN;

  // register noc_chompCnt
  reg [7 : 0] noc_chompCnt;
  wire [7 : 0] noc_chompCnt$D_IN;
  wire noc_chompCnt$EN;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi$D_IN;
  wire pciw_pcie_irq_rInterruptDi$EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN$D_IN, pciw_pcie_irq_rInterruptN$EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting$D_IN, pciw_pcie_irq_rInterrupting$EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled$D_IN;
  wire pciw_pcie_irq_rMMEnabled$EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled$D_IN, pciw_pcie_irq_rMSIEnabled$EN;

  // register pciw_rg
  reg [81 : 0] pciw_rg;
  wire [81 : 0] pciw_rg$D_IN;
  wire pciw_rg$EN;

  // register pciw_rg_1
  reg [81 : 0] pciw_rg_1;
  wire [81 : 0] pciw_rg_1$D_IN;
  wire pciw_rg_1$EN;

  // ports of submodule appW2
  wire [31 : 0] appW2$wciS0_MAddr,
		appW2$wciS0_MData,
		appW2$wciS0_SData,
		appW2$wmiM0_MData,
		appW2$wmiM0_MFlag,
		appW2$wmiM0_SData,
		appW2$wmiM0_SFlag,
		appW2$wsiM0_MData,
		appW2$wsiS0_MData;
  wire [13 : 0] appW2$wmiM0_MAddr;
  wire [11 : 0] appW2$wmiM0_MBurstLength,
		appW2$wsiM0_MBurstLength,
		appW2$wsiS0_MBurstLength;
  wire [7 : 0] appW2$wsiM0_MReqInfo, appW2$wsiS0_MReqInfo;
  wire [3 : 0] appW2$wciS0_MByteEn,
	       appW2$wmiM0_MDataByteEn,
	       appW2$wsiM0_MByteEn,
	       appW2$wsiS0_MByteEn;
  wire [2 : 0] appW2$wciS0_MCmd,
	       appW2$wmiM0_MCmd,
	       appW2$wsiM0_MCmd,
	       appW2$wsiS0_MCmd;
  wire [1 : 0] appW2$wciS0_MFlag,
	       appW2$wciS0_SFlag,
	       appW2$wciS0_SResp,
	       appW2$wmiM0_SResp;
  wire appW2$wciS0_MAddrSpace,
       appW2$wciS0_SThreadBusy,
       appW2$wmiM0_MAddrSpace,
       appW2$wmiM0_MDataLast,
       appW2$wmiM0_MDataValid,
       appW2$wmiM0_MReqInfo,
       appW2$wmiM0_MReqLast,
       appW2$wmiM0_MReset_n,
       appW2$wmiM0_SDataThreadBusy,
       appW2$wmiM0_SReset_n,
       appW2$wmiM0_SRespLast,
       appW2$wmiM0_SThreadBusy,
       appW2$wsiM0_MBurstPrecise,
       appW2$wsiM0_MReqLast,
       appW2$wsiM0_MReset_n,
       appW2$wsiM0_SReset_n,
       appW2$wsiM0_SThreadBusy,
       appW2$wsiS0_MBurstPrecise,
       appW2$wsiS0_MReqLast,
       appW2$wsiS0_MReset_n;

  // ports of submodule appW3
  wire [31 : 0] appW3$wciS0_MAddr,
		appW3$wciS0_MData,
		appW3$wciS0_SData,
		appW3$wsiS0_MData;
  wire [11 : 0] appW3$wsiS0_MBurstLength;
  wire [7 : 0] appW3$wsiS0_MReqInfo;
  wire [3 : 0] appW3$wciS0_MByteEn, appW3$wsiS0_MByteEn;
  wire [2 : 0] appW3$wciS0_MCmd, appW3$wsiS0_MCmd;
  wire [1 : 0] appW3$wciS0_MFlag, appW3$wciS0_SFlag, appW3$wciS0_SResp;
  wire appW3$wciS0_MAddrSpace,
       appW3$wciS0_SThreadBusy,
       appW3$wsiM0_SReset_n,
       appW3$wsiM0_SThreadBusy,
       appW3$wsiS0_MBurstPrecise,
       appW3$wsiS0_MReqLast,
       appW3$wsiS0_MReset_n;

  // ports of submodule appW4
  wire [31 : 0] appW4$wciS0_MAddr,
		appW4$wciS0_MData,
		appW4$wciS0_SData,
		appW4$wmiM0_MData,
		appW4$wmiM0_MFlag,
		appW4$wmiM0_SData,
		appW4$wmiM0_SFlag,
		appW4$wsiS0_MData;
  wire [13 : 0] appW4$wmiM0_MAddr;
  wire [11 : 0] appW4$wmiM0_MBurstLength, appW4$wsiS0_MBurstLength;
  wire [7 : 0] appW4$wsiS0_MReqInfo;
  wire [3 : 0] appW4$wciS0_MByteEn,
	       appW4$wmiM0_MDataByteEn,
	       appW4$wsiS0_MByteEn;
  wire [2 : 0] appW4$wciS0_MCmd, appW4$wmiM0_MCmd, appW4$wsiS0_MCmd;
  wire [1 : 0] appW4$wciS0_MFlag,
	       appW4$wciS0_SFlag,
	       appW4$wciS0_SResp,
	       appW4$wmiM0_SResp;
  wire appW4$wciS0_MAddrSpace,
       appW4$wciS0_SThreadBusy,
       appW4$wmiM0_MAddrSpace,
       appW4$wmiM0_MDataLast,
       appW4$wmiM0_MDataValid,
       appW4$wmiM0_MReqInfo,
       appW4$wmiM0_MReqLast,
       appW4$wmiM0_MReset_n,
       appW4$wmiM0_SDataThreadBusy,
       appW4$wmiM0_SReset_n,
       appW4$wmiM0_SRespLast,
       appW4$wmiM0_SThreadBusy,
       appW4$wsiM0_SReset_n,
       appW4$wsiM0_SThreadBusy,
       appW4$wsiS0_MBurstPrecise,
       appW4$wsiS0_MReqLast,
       appW4$wsiS0_MReset_n,
       appW4$wsiS0_SReset_n,
       appW4$wsiS0_SThreadBusy;

  // ports of submodule axis2wsi
  wire [255 : 0] axis2wsi$axi_dat_TDATA;
  wire [31 : 0] axis2wsi$axi_dat_TSTRB, axis2wsi$wsi_MData;
  wire [15 : 0] axis2wsi$axi_len_TDATA;
  wire [11 : 0] axis2wsi$wsi_MBurstLength;
  wire [7 : 0] axis2wsi$axi_dpt_TDATA,
	       axis2wsi$axi_err_TDATA,
	       axis2wsi$axi_spt_TDATA,
	       axis2wsi$wsi_MReqInfo;
  wire [3 : 0] axis2wsi$wsi_MByteEn;
  wire [2 : 0] axis2wsi$wsi_MCmd;
  wire [1 : 0] axis2wsi$axi_len_TSTRB;
  wire axis2wsi$axi_dat_TLAST,
       axis2wsi$axi_dat_TREADY,
       axis2wsi$axi_dat_TVALID,
       axis2wsi$axi_dpt_TLAST,
       axis2wsi$axi_dpt_TREADY,
       axis2wsi$axi_dpt_TSTRB,
       axis2wsi$axi_dpt_TVALID,
       axis2wsi$axi_err_TLAST,
       axis2wsi$axi_err_TREADY,
       axis2wsi$axi_err_TSTRB,
       axis2wsi$axi_err_TVALID,
       axis2wsi$axi_len_TLAST,
       axis2wsi$axi_len_TREADY,
       axis2wsi$axi_len_TVALID,
       axis2wsi$axi_spt_TLAST,
       axis2wsi$axi_spt_TREADY,
       axis2wsi$axi_spt_TSTRB,
       axis2wsi$axi_spt_TVALID,
       axis2wsi$wsi_MBurstPrecise,
       axis2wsi$wsi_MReqLast,
       axis2wsi$wsi_MReset_n,
       axis2wsi$wsi_SReset_n,
       axis2wsi$wsi_SThreadBusy;

  // ports of submodule cp
  wire [511 : 0] cp$uuid_arg;
  wire [152 : 0] cp$server_request_put, cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_MAddr,
		cp$wci_Vm_0_MData,
		cp$wci_Vm_0_SData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_MAddr,
		cp$wci_Vm_14_MData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_SData;
  wire [3 : 0] cp$wci_Vm_0_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_3_MByteEn,
	       cp$wci_Vm_4_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_0_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd;
  wire [1 : 0] cp$wci_Vm_0_MFlag,
	       cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_MFlag,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_MFlag,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_0,
       cp$RST_N_wci_Vm_13,
       cp$RST_N_wci_Vm_14,
       cp$RST_N_wci_Vm_2,
       cp$RST_N_wci_Vm_3,
       cp$RST_N_wci_Vm_4,
       cp$gps_ppsSyncIn_x,
       cp$wci_Vm_0_MAddrSpace,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_MAddrSpace,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule dp0_bram_memory
  reg [31 : 0] dp0_bram_memory$DIA, dp0_bram_memory$DIB;
  reg [10 : 0] dp0_bram_memory$ADDRA, dp0_bram_memory$ADDRB;
  wire [31 : 0] dp0_bram_memory$DOA, dp0_bram_memory$DOB;
  wire dp0_bram_memory$ENA,
       dp0_bram_memory$ENB,
       dp0_bram_memory$WEA,
       dp0_bram_memory$WEB;

  // ports of submodule dp0_bram_memory_1
  reg [31 : 0] dp0_bram_memory_1$DIA, dp0_bram_memory_1$DIB;
  reg [10 : 0] dp0_bram_memory_1$ADDRA, dp0_bram_memory_1$ADDRB;
  wire [31 : 0] dp0_bram_memory_1$DOA, dp0_bram_memory_1$DOB;
  wire dp0_bram_memory_1$ENA,
       dp0_bram_memory_1$ENB,
       dp0_bram_memory_1$WEA,
       dp0_bram_memory_1$WEB;

  // ports of submodule dp0_bram_memory_2
  reg [31 : 0] dp0_bram_memory_2$DIA, dp0_bram_memory_2$DIB;
  reg [10 : 0] dp0_bram_memory_2$ADDRA, dp0_bram_memory_2$ADDRB;
  wire [31 : 0] dp0_bram_memory_2$DOA, dp0_bram_memory_2$DOB;
  wire dp0_bram_memory_2$ENA,
       dp0_bram_memory_2$ENB,
       dp0_bram_memory_2$WEA,
       dp0_bram_memory_2$WEB;

  // ports of submodule dp0_bram_memory_3
  reg [31 : 0] dp0_bram_memory_3$DIA, dp0_bram_memory_3$DIB;
  reg [10 : 0] dp0_bram_memory_3$ADDRA, dp0_bram_memory_3$ADDRB;
  wire [31 : 0] dp0_bram_memory_3$DOA, dp0_bram_memory_3$DOB;
  wire dp0_bram_memory_3$ENA,
       dp0_bram_memory_3$ENB,
       dp0_bram_memory_3$WEA,
       dp0_bram_memory_3$WEB;

  // ports of submodule dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_1_outDataCore$CLR,
       dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_2_outDataCore$CLR,
       dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_3_outDataCore$CLR,
       dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_outDataCore$D_IN,
		dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_outDataCore$CLR,
       dp0_bram_serverAdapterA_outDataCore$DEQ,
       dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_outDataCore$ENQ,
       dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_1_outDataCore$CLR,
       dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_2_outDataCore$CLR,
       dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_3_outDataCore$CLR,
       dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_outDataCore$D_IN,
		dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_outDataCore$CLR,
       dp0_bram_serverAdapterB_outDataCore$DEQ,
       dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_outDataCore$ENQ,
       dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp0_tlp_inF
  wire [152 : 0] dp0_tlp_inF$D_IN, dp0_tlp_inF$D_OUT;
  wire dp0_tlp_inF$CLR,
       dp0_tlp_inF$DEQ,
       dp0_tlp_inF$EMPTY_N,
       dp0_tlp_inF$ENQ,
       dp0_tlp_inF$FULL_N;

  // ports of submodule dp0_tlp_mReqF
  reg [129 : 0] dp0_tlp_mReqF$D_IN;
  wire [129 : 0] dp0_tlp_mReqF$D_OUT;
  wire dp0_tlp_mReqF$CLR,
       dp0_tlp_mReqF$DEQ,
       dp0_tlp_mReqF$EMPTY_N,
       dp0_tlp_mReqF$ENQ,
       dp0_tlp_mReqF$FULL_N;

  // ports of submodule dp0_tlp_mRespF
  wire [138 : 0] dp0_tlp_mRespF$D_IN, dp0_tlp_mRespF$D_OUT;
  wire dp0_tlp_mRespF$CLR,
       dp0_tlp_mRespF$DEQ,
       dp0_tlp_mRespF$EMPTY_N,
       dp0_tlp_mRespF$ENQ,
       dp0_tlp_mRespF$FULL_N;

  // ports of submodule dp0_tlp_outF
  reg [152 : 0] dp0_tlp_outF$D_IN;
  wire [152 : 0] dp0_tlp_outF$D_OUT;
  wire dp0_tlp_outF$CLR,
       dp0_tlp_outF$DEQ,
       dp0_tlp_outF$EMPTY_N,
       dp0_tlp_outF$ENQ,
       dp0_tlp_outF$FULL_N;

  // ports of submodule dp0_tlp_readReq
  wire [59 : 0] dp0_tlp_readReq$D_IN, dp0_tlp_readReq$D_OUT;
  wire dp0_tlp_readReq$CLR,
       dp0_tlp_readReq$DEQ,
       dp0_tlp_readReq$EMPTY_N,
       dp0_tlp_readReq$ENQ,
       dp0_tlp_readReq$FULL_N;

  // ports of submodule dp0_tlp_tailEventF
  wire dp0_tlp_tailEventF$CLR,
       dp0_tlp_tailEventF$DEQ,
       dp0_tlp_tailEventF$EMPTY_N,
       dp0_tlp_tailEventF$ENQ,
       dp0_tlp_tailEventF$FULL_N;

  // ports of submodule dp0_wci_isReset
  wire dp0_wci_isReset$VAL;

  // ports of submodule dp0_wci_reqF
  wire [71 : 0] dp0_wci_reqF$D_IN, dp0_wci_reqF$D_OUT;
  wire dp0_wci_reqF$CLR,
       dp0_wci_reqF$DEQ,
       dp0_wci_reqF$EMPTY_N,
       dp0_wci_reqF$ENQ;

  // ports of submodule dp0_wmi_wmi_dhF
  wire [37 : 0] dp0_wmi_wmi_dhF$D_IN, dp0_wmi_wmi_dhF$D_OUT;
  wire dp0_wmi_wmi_dhF$CLR,
       dp0_wmi_wmi_dhF$DEQ,
       dp0_wmi_wmi_dhF$EMPTY_N,
       dp0_wmi_wmi_dhF$ENQ,
       dp0_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp0_wmi_wmi_isReset
  wire dp0_wmi_wmi_isReset$VAL;

  // ports of submodule dp0_wmi_wmi_mFlagF
  wire [31 : 0] dp0_wmi_wmi_mFlagF$D_IN, dp0_wmi_wmi_mFlagF$D_OUT;
  wire dp0_wmi_wmi_mFlagF$CLR,
       dp0_wmi_wmi_mFlagF$DEQ,
       dp0_wmi_wmi_mFlagF$EMPTY_N,
       dp0_wmi_wmi_mFlagF$ENQ,
       dp0_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp0_wmi_wmi_reqF
  wire [31 : 0] dp0_wmi_wmi_reqF$D_IN, dp0_wmi_wmi_reqF$D_OUT;
  wire dp0_wmi_wmi_reqF$CLR,
       dp0_wmi_wmi_reqF$DEQ,
       dp0_wmi_wmi_reqF$EMPTY_N,
       dp0_wmi_wmi_reqF$ENQ,
       dp0_wmi_wmi_reqF$FULL_N;

  // ports of submodule dp1_bram_memory
  reg [31 : 0] dp1_bram_memory$DIA, dp1_bram_memory$DIB;
  reg [10 : 0] dp1_bram_memory$ADDRA, dp1_bram_memory$ADDRB;
  wire [31 : 0] dp1_bram_memory$DOA, dp1_bram_memory$DOB;
  wire dp1_bram_memory$ENA,
       dp1_bram_memory$ENB,
       dp1_bram_memory$WEA,
       dp1_bram_memory$WEB;

  // ports of submodule dp1_bram_memory_1
  reg [31 : 0] dp1_bram_memory_1$DIA, dp1_bram_memory_1$DIB;
  reg [10 : 0] dp1_bram_memory_1$ADDRA, dp1_bram_memory_1$ADDRB;
  wire [31 : 0] dp1_bram_memory_1$DOA, dp1_bram_memory_1$DOB;
  wire dp1_bram_memory_1$ENA,
       dp1_bram_memory_1$ENB,
       dp1_bram_memory_1$WEA,
       dp1_bram_memory_1$WEB;

  // ports of submodule dp1_bram_memory_2
  reg [31 : 0] dp1_bram_memory_2$DIA, dp1_bram_memory_2$DIB;
  reg [10 : 0] dp1_bram_memory_2$ADDRA, dp1_bram_memory_2$ADDRB;
  wire [31 : 0] dp1_bram_memory_2$DOA, dp1_bram_memory_2$DOB;
  wire dp1_bram_memory_2$ENA,
       dp1_bram_memory_2$ENB,
       dp1_bram_memory_2$WEA,
       dp1_bram_memory_2$WEB;

  // ports of submodule dp1_bram_memory_3
  reg [31 : 0] dp1_bram_memory_3$DIA, dp1_bram_memory_3$DIB;
  reg [10 : 0] dp1_bram_memory_3$ADDRA, dp1_bram_memory_3$ADDRB;
  wire [31 : 0] dp1_bram_memory_3$DOA, dp1_bram_memory_3$DOB;
  wire dp1_bram_memory_3$ENA,
       dp1_bram_memory_3$ENB,
       dp1_bram_memory_3$WEA,
       dp1_bram_memory_3$WEB;

  // ports of submodule dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_1_outDataCore$CLR,
       dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_2_outDataCore$CLR,
       dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_3_outDataCore$CLR,
       dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_outDataCore$D_IN,
		dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_outDataCore$CLR,
       dp1_bram_serverAdapterA_outDataCore$DEQ,
       dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_outDataCore$ENQ,
       dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_1_outDataCore$CLR,
       dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_2_outDataCore$CLR,
       dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_3_outDataCore$CLR,
       dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_outDataCore$D_IN,
		dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_outDataCore$CLR,
       dp1_bram_serverAdapterB_outDataCore$DEQ,
       dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_outDataCore$ENQ,
       dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp1_tlp_inF
  wire [152 : 0] dp1_tlp_inF$D_IN, dp1_tlp_inF$D_OUT;
  wire dp1_tlp_inF$CLR,
       dp1_tlp_inF$DEQ,
       dp1_tlp_inF$EMPTY_N,
       dp1_tlp_inF$ENQ,
       dp1_tlp_inF$FULL_N;

  // ports of submodule dp1_tlp_mReqF
  reg [129 : 0] dp1_tlp_mReqF$D_IN;
  wire [129 : 0] dp1_tlp_mReqF$D_OUT;
  wire dp1_tlp_mReqF$CLR,
       dp1_tlp_mReqF$DEQ,
       dp1_tlp_mReqF$EMPTY_N,
       dp1_tlp_mReqF$ENQ,
       dp1_tlp_mReqF$FULL_N;

  // ports of submodule dp1_tlp_mRespF
  wire [138 : 0] dp1_tlp_mRespF$D_IN, dp1_tlp_mRespF$D_OUT;
  wire dp1_tlp_mRespF$CLR,
       dp1_tlp_mRespF$DEQ,
       dp1_tlp_mRespF$EMPTY_N,
       dp1_tlp_mRespF$ENQ,
       dp1_tlp_mRespF$FULL_N;

  // ports of submodule dp1_tlp_outF
  reg [152 : 0] dp1_tlp_outF$D_IN;
  wire [152 : 0] dp1_tlp_outF$D_OUT;
  wire dp1_tlp_outF$CLR,
       dp1_tlp_outF$DEQ,
       dp1_tlp_outF$EMPTY_N,
       dp1_tlp_outF$ENQ,
       dp1_tlp_outF$FULL_N;

  // ports of submodule dp1_tlp_readReq
  wire [59 : 0] dp1_tlp_readReq$D_IN, dp1_tlp_readReq$D_OUT;
  wire dp1_tlp_readReq$CLR,
       dp1_tlp_readReq$DEQ,
       dp1_tlp_readReq$EMPTY_N,
       dp1_tlp_readReq$ENQ,
       dp1_tlp_readReq$FULL_N;

  // ports of submodule dp1_tlp_tailEventF
  wire dp1_tlp_tailEventF$CLR,
       dp1_tlp_tailEventF$DEQ,
       dp1_tlp_tailEventF$EMPTY_N,
       dp1_tlp_tailEventF$ENQ,
       dp1_tlp_tailEventF$FULL_N;

  // ports of submodule dp1_wci_isReset
  wire dp1_wci_isReset$VAL;

  // ports of submodule dp1_wci_reqF
  wire [71 : 0] dp1_wci_reqF$D_IN, dp1_wci_reqF$D_OUT;
  wire dp1_wci_reqF$CLR,
       dp1_wci_reqF$DEQ,
       dp1_wci_reqF$EMPTY_N,
       dp1_wci_reqF$ENQ;

  // ports of submodule dp1_wmi_wmi_dhF
  wire [37 : 0] dp1_wmi_wmi_dhF$D_IN, dp1_wmi_wmi_dhF$D_OUT;
  wire dp1_wmi_wmi_dhF$CLR,
       dp1_wmi_wmi_dhF$DEQ,
       dp1_wmi_wmi_dhF$EMPTY_N,
       dp1_wmi_wmi_dhF$ENQ,
       dp1_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp1_wmi_wmi_isReset
  wire dp1_wmi_wmi_isReset$VAL;

  // ports of submodule dp1_wmi_wmi_mFlagF
  wire [31 : 0] dp1_wmi_wmi_mFlagF$D_IN, dp1_wmi_wmi_mFlagF$D_OUT;
  wire dp1_wmi_wmi_mFlagF$CLR,
       dp1_wmi_wmi_mFlagF$DEQ,
       dp1_wmi_wmi_mFlagF$EMPTY_N,
       dp1_wmi_wmi_mFlagF$ENQ,
       dp1_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp1_wmi_wmi_reqF
  wire [31 : 0] dp1_wmi_wmi_reqF$D_IN, dp1_wmi_wmi_reqF$D_OUT;
  wire dp1_wmi_wmi_reqF$CLR,
       dp1_wmi_wmi_reqF$DEQ,
       dp1_wmi_wmi_reqF$EMPTY_N,
       dp1_wmi_wmi_reqF$ENQ,
       dp1_wmi_wmi_reqF$FULL_N;

  // ports of submodule noc_sm0
  wire [152 : 0] noc_sm0$c0_request_get,
		 noc_sm0$c0_response_put,
		 noc_sm0$c1_request_get,
		 noc_sm0$c1_response_put,
		 noc_sm0$s_request_put,
		 noc_sm0$s_response_get;
  wire noc_sm0$EN_c0_request_get,
       noc_sm0$EN_c0_response_put,
       noc_sm0$EN_c1_request_get,
       noc_sm0$EN_c1_response_put,
       noc_sm0$EN_s_request_put,
       noc_sm0$EN_s_response_get,
       noc_sm0$RDY_c0_request_get,
       noc_sm0$RDY_c0_response_put,
       noc_sm0$RDY_c1_request_get,
       noc_sm0$RDY_c1_response_put,
       noc_sm0$RDY_s_request_put,
       noc_sm0$RDY_s_response_get;

  // ports of submodule noc_sm1
  wire [152 : 0] noc_sm1$c0_request_get,
		 noc_sm1$c0_response_put,
		 noc_sm1$c1_request_get,
		 noc_sm1$c1_response_put,
		 noc_sm1$s_request_put,
		 noc_sm1$s_response_get;
  wire noc_sm1$EN_c0_request_get,
       noc_sm1$EN_c0_response_put,
       noc_sm1$EN_c1_request_get,
       noc_sm1$EN_c1_response_put,
       noc_sm1$EN_s_request_put,
       noc_sm1$EN_s_response_get,
       noc_sm1$RDY_c0_request_get,
       noc_sm1$RDY_c0_response_put,
       noc_sm1$RDY_c1_request_get,
       noc_sm1$RDY_c1_response_put,
       noc_sm1$RDY_s_request_put,
       noc_sm1$RDY_s_response_get;

  // ports of submodule noc_sm2
  wire [152 : 0] noc_sm2$c0_request_get,
		 noc_sm2$c0_response_put,
		 noc_sm2$c1_response_put,
		 noc_sm2$s_request_put,
		 noc_sm2$s_response_get;
  wire noc_sm2$EN_c0_request_get,
       noc_sm2$EN_c0_response_put,
       noc_sm2$EN_c1_request_get,
       noc_sm2$EN_c1_response_put,
       noc_sm2$EN_s_request_put,
       noc_sm2$EN_s_response_get,
       noc_sm2$RDY_c0_request_get,
       noc_sm2$RDY_c0_response_put,
       noc_sm2$RDY_c1_request_get,
       noc_sm2$RDY_s_request_put,
       noc_sm2$RDY_s_response_get;

  // ports of submodule pciw_inFifo
  wire [80 : 0] pciw_inFifo$D_IN, pciw_inFifo$D_OUT;
  wire pciw_inFifo$CLR,
       pciw_inFifo$DEQ,
       pciw_inFifo$EMPTY_N,
       pciw_inFifo$ENQ,
       pciw_inFifo$FULL_N;

  // ports of submodule pciw_outFifo
  wire [80 : 0] pciw_outFifo$D_IN, pciw_outFifo$D_OUT;
  wire pciw_outFifo$CLR,
       pciw_outFifo$DEQ,
       pciw_outFifo$EMPTY_N,
       pciw_outFifo$ENQ,
       pciw_outFifo$FULL_N;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst$OUT_RST_N;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk$O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep$cfg_dsn,
		pciw_pci0_pcie_ep$trn_rd,
		pciw_pci0_pcie_ep$trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep$cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_di,
	       pciw_pci0_pcie_ep$cfg_interrupt_do,
	       pciw_pci0_pcie_ep$pci_exp_rxn,
	       pciw_pci0_pcie_ep$pci_exp_rxp,
	       pciw_pci0_pcie_ep$pci_exp_txn,
	       pciw_pci0_pcie_ep$pci_exp_txp,
	       pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_trem_n;
  wire [6 : 0] pciw_pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep$cfg_byte_en_n;
  wire [2 : 0] pciw_pci0_pcie_ep$cfg_function_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_mmenable;
  wire pciw_pci0_pcie_ep$cfg_err_cor_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep$cfg_err_ecrc_n,
       pciw_pci0_pcie_ep$cfg_err_locked_n,
       pciw_pci0_pcie_ep$cfg_err_posted_n,
       pciw_pci0_pcie_ep$cfg_err_ur_n,
       pciw_pci0_pcie_ep$cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep$cfg_interrupt_msienable,
       pciw_pci0_pcie_ep$cfg_interrupt_n,
       pciw_pci0_pcie_ep$cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep$cfg_pm_wake_n,
       pciw_pci0_pcie_ep$cfg_rd_en_n,
       pciw_pci0_pcie_ep$cfg_trn_pending_n,
       pciw_pci0_pcie_ep$cfg_wr_en_n,
       pciw_pci0_pcie_ep$trn_clk,
       pciw_pci0_pcie_ep$trn_lnk_up_n,
       pciw_pci0_pcie_ep$trn_rcpl_streaming_n,
       pciw_pci0_pcie_ep$trn_rdst_rdy_n,
       pciw_pci0_pcie_ep$trn_reof_n,
       pciw_pci0_pcie_ep$trn_reset_n,
       pciw_pci0_pcie_ep$trn_rnp_ok_n,
       pciw_pci0_pcie_ep$trn_rsof_n,
       pciw_pci0_pcie_ep$trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tdst_rdy_n,
       pciw_pci0_pcie_ep$trn_teof_n,
       pciw_pci0_pcie_ep$trn_terrfwd_n,
       pciw_pci0_pcie_ep$trn_tsof_n,
       pciw_pci0_pcie_ep$trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep$trn_tsrc_rdy_n;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice$dD_OUT, pciw_pciDevice$sD_IN;
  wire pciw_pciDevice$sEN, pciw_pciDevice$sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp$dD_OUT, pciw_pciLinkUp$sD_IN, pciw_pciLinkUp$sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert$dD_OUT,
	       pciw_pcie_irq_fifoAssert$sD_IN;
  wire pciw_pcie_irq_fifoAssert$dDEQ,
       pciw_pcie_irq_fifoAssert$dEMPTY_N,
       pciw_pcie_irq_fifoAssert$sENQ;

  // ports of submodule pciw_uI2PF
  wire [152 : 0] pciw_uI2PF$D_IN, pciw_uI2PF$D_OUT;
  wire pciw_uI2PF$CLR,
       pciw_uI2PF$DEQ,
       pciw_uI2PF$EMPTY_N,
       pciw_uI2PF$ENQ,
       pciw_uI2PF$FULL_N;

  // ports of submodule pciw_uP2IF
  wire [152 : 0] pciw_uP2IF$D_IN, pciw_uP2IF$D_OUT;
  wire pciw_uP2IF$CLR,
       pciw_uP2IF$DEQ,
       pciw_uP2IF$EMPTY_N,
       pciw_uP2IF$ENQ,
       pciw_uP2IF$FULL_N;

  // ports of submodule wci2axi
  wire [35 : 0] wci2axi$axiM0_wrData_data;
  wire [34 : 0] wci2axi$axiM0_rdAddr_data, wci2axi$axiM0_wrAddr_data;
  wire [33 : 0] wci2axi$axiM0_rdResp_data_value;
  wire [31 : 0] wci2axi$wciS0_MAddr, wci2axi$wciS0_MData, wci2axi$wciS0_SData;
  wire [3 : 0] wci2axi$wciS0_MByteEn;
  wire [2 : 0] wci2axi$wciS0_MCmd;
  wire [1 : 0] wci2axi$axiM0_wrResp_data_value,
	       wci2axi$wciS0_MFlag,
	       wci2axi$wciS0_SFlag,
	       wci2axi$wciS0_SResp;
  wire wci2axi$axiM0_rdAddr_ready_value,
       wci2axi$axiM0_rdAddr_valid,
       wci2axi$axiM0_rdResp_ready,
       wci2axi$axiM0_rdResp_valid_value,
       wci2axi$axiM0_wrAddr_ready_value,
       wci2axi$axiM0_wrAddr_valid,
       wci2axi$axiM0_wrData_ready_value,
       wci2axi$axiM0_wrData_valid,
       wci2axi$axiM0_wrResp_ready,
       wci2axi$axiM0_wrResp_valid_value,
       wci2axi$wciS0_MAddrSpace,
       wci2axi$wciS0_SThreadBusy;

  // ports of submodule wsi2axis
  wire [255 : 0] wsi2axis$axi_dat_TDATA;
  wire [31 : 0] wsi2axis$axi_dat_TSTRB, wsi2axis$wsi_MData;
  wire [15 : 0] wsi2axis$axi_len_TDATA;
  wire [11 : 0] wsi2axis$wsi_MBurstLength;
  wire [7 : 0] wsi2axis$axi_dpt_TDATA,
	       wsi2axis$axi_err_TDATA,
	       wsi2axis$axi_spt_TDATA,
	       wsi2axis$wsi_MReqInfo;
  wire [3 : 0] wsi2axis$wsi_MByteEn;
  wire [2 : 0] wsi2axis$wsi_MCmd;
  wire [1 : 0] wsi2axis$axi_len_TSTRB;
  wire wsi2axis$axi_dat_TLAST,
       wsi2axis$axi_dat_TREADY,
       wsi2axis$axi_dat_TVALID,
       wsi2axis$axi_dpt_TLAST,
       wsi2axis$axi_dpt_TREADY,
       wsi2axis$axi_dpt_TSTRB,
       wsi2axis$axi_dpt_TVALID,
       wsi2axis$axi_err_TLAST,
       wsi2axis$axi_err_TREADY,
       wsi2axis$axi_err_TSTRB,
       wsi2axis$axi_err_TVALID,
       wsi2axis$axi_len_TLAST,
       wsi2axis$axi_len_TREADY,
       wsi2axis$axi_len_TVALID,
       wsi2axis$axi_spt_TLAST,
       wsi2axis$axi_spt_TREADY,
       wsi2axis$axi_spt_TSTRB,
       wsi2axis$axi_spt_TVALID,
       wsi2axis$wsi_MBurstPrecise,
       wsi2axis$wsi_MReqLast,
       wsi2axis$wsi_MReset_n,
       wsi2axis$wsi_SReset_n,
       wsi2axis$wsi_SThreadBusy;

  // rule scheduling signals
  wire CAN_FIRE_RL_dp0_bml_remAdvance,
       CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_dp0_wmi_getRequest,
       CAN_FIRE_RL_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_dp0_wmi_respMetadata,
       CAN_FIRE_RL_dp1_bml_remAdvance,
       CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_dp1_wmi_getRequest,
       CAN_FIRE_RL_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_dp1_wmi_respMetadata,
       WILL_FIRE_RL_dp0_bml_crdAdvance,
       WILL_FIRE_RL_dp0_bml_fba,
       WILL_FIRE_RL_dp0_bml_initAccumulators,
       WILL_FIRE_RL_dp0_bml_lclAdvance,
       WILL_FIRE_RL_dp0_bml_lcredit,
       WILL_FIRE_RL_dp0_bml_remAdvance,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaTailEventSender,
       WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_dp0_tlp_writeData,
       WILL_FIRE_RL_dp0_tlp_writeReq,
       WILL_FIRE_RL_dp0_wci_cfrd,
       WILL_FIRE_RL_dp0_wci_cfwr,
       WILL_FIRE_RL_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_dp0_wci_respF_both,
       WILL_FIRE_RL_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_dp0_wmi_doReadReq,
       WILL_FIRE_RL_dp0_wmi_doReadResp,
       WILL_FIRE_RL_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_dp0_wmi_getRequest,
       WILL_FIRE_RL_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_dp0_wmi_respMetadata,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_dp1_bml_crdAdvance,
       WILL_FIRE_RL_dp1_bml_fba,
       WILL_FIRE_RL_dp1_bml_initAccumulators,
       WILL_FIRE_RL_dp1_bml_lclAdvance,
       WILL_FIRE_RL_dp1_bml_lcredit,
       WILL_FIRE_RL_dp1_bml_remAdvance,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaTailEventSender,
       WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_dp1_tlp_writeData,
       WILL_FIRE_RL_dp1_tlp_writeReq,
       WILL_FIRE_RL_dp1_wci_cfrd,
       WILL_FIRE_RL_dp1_wci_cfwr,
       WILL_FIRE_RL_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_dp1_wci_respF_both,
       WILL_FIRE_RL_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_dp1_wmi_doReadReq,
       WILL_FIRE_RL_dp1_wmi_doReadResp,
       WILL_FIRE_RL_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_dp1_wmi_getRequest,
       WILL_FIRE_RL_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_dp1_wmi_respMetadata,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_pciw_connect_1,
       WILL_FIRE_RL_pciw_downconv_connect1,
       WILL_FIRE_RL_pciw_downconv_connect2,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pciw_upconv_connect1,
       WILL_FIRE_RL_pciw_upconv_connect2;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_1,
	       MUX_dp1_wci_respF_q_0$write_1__VAL_1;
  reg [10 : 0] MUX_dp0_bram_memory$a_put_2__VAL_3,
	       MUX_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_dp1_bram_memory$a_put_2__VAL_3,
	       MUX_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_pciw_uP2IF$enq_1__VAL_1,
		 MUX_pciw_uP2IF$enq_1__VAL_2;
  wire [138 : 0] MUX_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_3;
  wire [128 : 0] MUX_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [81 : 0] MUX_pciw_rg$write_1__VAL_1, MUX_pciw_rg_1$write_1__VAL_1;
  wire [80 : 0] MUX_pciw_outFifo$enq_1__VAL_1;
  wire [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_2,
		MUX_dp0_wci_respF_q_1$write_1__VAL_2,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_2,
		MUX_dp1_wci_respF_q_0$write_1__VAL_2,
		MUX_dp1_wci_respF_q_1$write_1__VAL_2,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_2;
  wire [31 : 0] MUX_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_3,
		MUX_dp0_bram_memory_1$a_put_3__VAL_3,
		MUX_dp0_bram_memory_2$a_put_3__VAL_3,
		MUX_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_3,
		MUX_dp1_bram_memory_1$a_put_3__VAL_3,
		MUX_dp1_bram_memory_2$a_put_3__VAL_3,
		MUX_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [16 : 0] MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_dp0_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp0_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp0_bml_remBuf_value$write_1__VAL_3,
		MUX_dp0_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp1_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp1_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp1_bml_remBuf_value$write_1__VAL_3,
		MUX_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_2;
  wire [13 : 0] MUX_dp0_wmi_addr$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_dp1_wmi_addr$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [10 : 0] MUX_dp0_bram_memory$b_put_2__VAL_1,
		MUX_dp1_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [3 : 0] MUX_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp0_wmi_p4B$write_1__VAL_2,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp1_wmi_p4B$write_1__VAL_2,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_2,
       MUX_dp0_bram_memory$a_put_1__SEL_3,
       MUX_dp0_bram_memory$b_put_1__SEL_1,
       MUX_dp0_bram_memory$b_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_dp0_bram_memory_1$b_put_1__SEL_1,
       MUX_dp0_bram_memory_1$b_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_dp0_bram_memory_2$b_put_1__SEL_1,
       MUX_dp0_bram_memory_2$b_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_dp0_bram_memory_3$b_put_1__SEL_1,
       MUX_dp0_bram_memory_3$b_put_1__SEL_2,
       MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_4,
       MUX_dp0_tlp_postSeqDwell$write_1__SEL_2,
       MUX_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_dp0_wci_respF_q_0$write_1__SEL_1,
       MUX_dp0_wci_respF_q_1$write_1__SEL_1,
       MUX_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_1,
       MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_1,
       MUX_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_2,
       MUX_dp1_bram_memory$a_put_1__SEL_3,
       MUX_dp1_bram_memory$b_put_1__SEL_1,
       MUX_dp1_bram_memory$b_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_dp1_bram_memory_1$b_put_1__SEL_1,
       MUX_dp1_bram_memory_1$b_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_3,
       MUX_dp1_bram_memory_2$b_put_1__SEL_1,
       MUX_dp1_bram_memory_2$b_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_dp1_bram_memory_3$b_put_1__SEL_1,
       MUX_dp1_bram_memory_3$b_put_1__SEL_2,
       MUX_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp1_tlp_postSeqDwell$write_1__SEL_2,
       MUX_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_dp1_wci_respF_q_0$write_1__SEL_1,
       MUX_dp1_wci_respF_q_1$write_1__SEL_1,
       MUX_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_1,
       MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_1,
       MUX_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_dp1_wmi_wrFinalize$write_1__SEL_1,
       MUX_pciw_rg$write_1__SEL_1,
       MUX_pciw_rg_1$write_1__SEL_1,
       MUX_pciw_uP2IF$enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h100989,
	       v__h101163,
	       v__h101307,
	       v__h105327,
	       v__h106336,
	       v__h110430,
	       v__h110776,
	       v__h111344,
	       v__h111695,
	       v__h112758,
	       v__h115492,
	       v__h115677,
	       v__h115843,
	       v__h123802,
	       v__h153112,
	       v__h160507,
	       v__h160881,
	       v__h161035,
	       v__h23660,
	       v__h23834,
	       v__h23978,
	       v__h38339,
	       v__h38691,
	       v__h39944,
	       v__h44048,
	       v__h44477,
	       v__h45095,
	       v__h45412,
	       v__h45611,
	       v__h46566,
	       v__h5925,
	       v__h75875,
	       v__h83275,
	       v__h83649,
	       v__h83803;
  reg [31 : 0] IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494,
	       IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499,
	       IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495,
	       IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500,
	       IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496,
	       IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501,
	       IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497,
	       IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502,
	       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498,
	       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503,
	       _theResult____h161019,
	       _theResult____h83787,
	       rdata__h154229,
	       rdata__h76992;
  reg [15 : 0] CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3,
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4;
  reg [1 : 0] lowAddr10__h136306,
	      lowAddr10__h59069,
	      x__h136428,
	      x__h136451,
	      x__h59191,
	      x__h59214;
  reg CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11,
      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9,
      CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1,
      CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6,
      CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5,
      CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27,
      CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19,
      CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2,
      CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8,
      CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7,
      CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29,
      CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30,
      IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181,
      IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283,
      IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212,
      IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314,
      IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191,
      IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284,
      IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222,
      IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315,
      IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201,
      IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285,
      IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232,
      IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316,
      IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211,
      IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286,
      IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242,
      IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317,
      IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021,
      IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1413,
      IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243,
      IF_dp0_wmi_p4B_830_EQ_1_833_THEN_dp0_bram_serv_ETC___d1839,
      IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052,
      IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3444,
      IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256,
      IF_dp1_wmi_p4B_861_EQ_1_864_THEN_dp1_bram_serv_ETC___d3870;
  wire [127 : 0] IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1532,
		 IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1537,
		 IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3563,
		 IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3568,
		 pkt__h124788,
		 pkt__h47551,
		 rdata__h141676,
		 rdata__h64439,
		 wOut_data__h3152,
		 w_data__h110885,
		 w_data__h111864,
		 w_data__h112926,
		 w_data__h122934,
		 w_data__h38609,
		 w_data__h44384,
		 w_data__h45698,
		 x_data__h3073;
  wire [31 : 0] dp0_bml_fabFlowAddr_983_PLUS_dp0_bml_fabFlowSi_ETC___d4938,
		dp1_bml_fabFlowAddr_014_PLUS_dp1_bml_fabFlowSi_ETC___d4939,
		mesgMeta_opcode__h152509,
		mesgMeta_opcode__h75272,
		nowLS__h107267,
		nowLS__h40891,
		nowMS__h107266,
		nowMS__h40890,
		opcode__h107265,
		opcode__h40889,
		rdat__h161098,
		rdat__h161106,
		rdat__h161114,
		rdat__h161122,
		rdat__h161130,
		rdat__h161138,
		rdat__h161146,
		rdat__h161167,
		rdat__h161172,
		rdat__h161183,
		rdat__h161188,
		rdat__h161249,
		rdat__h83866,
		rdat__h83874,
		rdat__h83882,
		rdat__h83890,
		rdat__h83898,
		rdat__h83906,
		rdat__h83914,
		rdat__h83935,
		rdat__h83940,
		rdat__h83951,
		rdat__h83956,
		rdat__h84017,
		rresp_data__h136350,
		rresp_data__h59113,
		x3__h152469,
		x3__h75232,
		x__h107328,
		x__h40921,
		y__h110615,
		y__h111033,
		y__h44199,
		y_avValue__h154065,
		y_avValue__h154085,
		y_avValue__h154105,
		y_avValue__h154125,
		y_avValue__h76828,
		y_avValue__h76848,
		y_avValue__h76868,
		y_avValue__h76888;
  wire [16 : 0] x__h110534,
		x__h44136,
		y__h110521,
		y__h110536,
		y__h44128,
		y__h44138,
		y__h45388;
  wire [15 : 0] wOut_be__h3151,
		w_be__h111438,
		w_be__h33913,
		x__h158250,
		x__h159374,
		x__h159379,
		x__h159451,
		x__h159456,
		x__h159493,
		x__h159498,
		x__h159531,
		x__h159536,
		x__h81016,
		x__h82140,
		x__h82145,
		x__h82217,
		x__h82222,
		x__h82259,
		x__h82264,
		x__h82297,
		x__h82302,
		x_be__h3072,
		y__h110663,
		y__h44710;
  wire [12 : 0] dp0_tlp_readNxtDWAddr_PLUS_1__q16,
		dp0_tlp_readNxtDWAddr_PLUS_2__q17,
		dp0_tlp_readNxtDWAddr_PLUS_3__q15,
		dp0_tlp_writeDWAddr_PLUS_1__q13,
		dp0_tlp_writeDWAddr_PLUS_2__q14,
		dp0_tlp_writeDWAddr_PLUS_3__q12,
		dp1_tlp_readNxtDWAddr_PLUS_1__q24,
		dp1_tlp_readNxtDWAddr_PLUS_2__q25,
		dp1_tlp_readNxtDWAddr_PLUS_3__q23,
		dp1_tlp_writeDWAddr_PLUS_1__q21,
		dp1_tlp_writeDWAddr_PLUS_2__q22,
		dp1_tlp_writeDWAddr_PLUS_3__q20,
		spanToNextPage__h110480,
		spanToNextPage__h44102,
		thisRequestLength__h110481,
		thisRequestLength__h44103;
  wire [11 : 0] byteCount__h136308,
		byteCount__h59071,
		x__h136419,
		x__h136421,
		x__h59182,
		x__h59184,
		y__h136420,
		y__h136422,
		y__h59183,
		y__h59185;
  wire [9 : 0] x__h111036, x__h44713, x__h45391;
  wire [7 : 0] rreq_tag__h110710, tag__h44378, tagm__h44504;
  wire [6 : 0] lowAddr__h136307, lowAddr__h59070;
  wire [3 : 0] lastBE__h110909, lastBE__h44405;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_24_PLUS_IF_dp0_b_ETC___d330,
	       dp0_bram_serverAdapterA_2_cnt_42_PLUS_IF_dp0_b_ETC___d448,
	       dp0_bram_serverAdapterA_3_cnt_60_PLUS_IF_dp0_b_ETC___d566,
	       dp0_bram_serverAdapterA_cnt_06_PLUS_IF_dp0_bra_ETC___d212,
	       dp0_bram_serverAdapterB_1_cnt_83_PLUS_IF_dp0_b_ETC___d389,
	       dp0_bram_serverAdapterB_2_cnt_01_PLUS_IF_dp0_b_ETC___d507,
	       dp0_bram_serverAdapterB_3_cnt_19_PLUS_IF_dp0_b_ETC___d625,
	       dp0_bram_serverAdapterB_cnt_65_PLUS_IF_dp0_bra_ETC___d271,
	       dp1_bram_serverAdapterA_1_cnt_360_PLUS_IF_dp1__ETC___d2366,
	       dp1_bram_serverAdapterA_2_cnt_478_PLUS_IF_dp1__ETC___d2484,
	       dp1_bram_serverAdapterA_3_cnt_596_PLUS_IF_dp1__ETC___d2602,
	       dp1_bram_serverAdapterA_cnt_242_PLUS_IF_dp1_br_ETC___d2248,
	       dp1_bram_serverAdapterB_1_cnt_419_PLUS_IF_dp1__ETC___d2425,
	       dp1_bram_serverAdapterB_2_cnt_537_PLUS_IF_dp1__ETC___d2543,
	       dp1_bram_serverAdapterB_3_cnt_655_PLUS_IF_dp1__ETC___d2661,
	       dp1_bram_serverAdapterB_cnt_301_PLUS_IF_dp1_br_ETC___d2307;
  wire [1 : 0] ab__h11179,
	       ab__h12709,
	       ab__h14106,
	       ab__h15636,
	       ab__h17033,
	       ab__h18563,
	       ab__h19960,
	       ab__h87118,
	       ab__h88517,
	       ab__h90047,
	       ab__h91444,
	       ab__h92974,
	       ab__h94371,
	       ab__h95901,
	       ab__h97298,
	       ab__h9780,
	       idx__h127129,
	       idx__h129352,
	       idx__h130648,
	       idx__h131944,
	       idx__h134192,
	       idx__h134660,
	       idx__h135033,
	       idx__h135406,
	       idx__h49892,
	       idx__h52115,
	       idx__h53411,
	       idx__h54707,
	       idx__h56955,
	       idx__h57423,
	       idx__h57796,
	       idx__h58169;
  wire IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1214,
       IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3245,
       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1421,
       IF_dp0_wmi_p4B_830_EQ_0_831_THEN_dp0_bram_serv_ETC___d1844,
       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3452,
       IF_dp1_wmi_p4B_861_EQ_0_862_THEN_dp1_bram_serv_ETC___d3875,
       NOT_dp0_bml_lclBufDone_968_035_AND_IF_dp0_bml__ETC___d2048,
       NOT_dp0_tlp_mReqF_first__132_BITS_28_TO_19_309_ETC___d1323,
       NOT_dp0_tlp_mRespF_first__087_BITS_71_TO_62_09_ETC___d1111,
       NOT_dp0_wmi_wrActive_748_749_OR_NOT_dp0_wmi_rd_ETC___d1758,
       NOT_dp1_bml_lclBufDone_999_066_AND_IF_dp1_bml__ETC___d4079,
       NOT_dp1_tlp_mReqF_first__163_BITS_28_TO_19_340_ETC___d3354,
       NOT_dp1_wmi_wrActive_779_780_OR_NOT_dp1_wmi_rd_ETC___d3789,
       _dfoo13,
       dp0_bml_crdBuf_value_926_EQ_dp0_bml_crdBuf_mod_ETC___d5073,
       dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074,
       dp0_bml_lclBufDone_968_AND_IF_dp0_bml_dpContro_ETC___d5288,
       dp0_bml_lclBuf_value_881_EQ_dp0_bml_lclBuf_mod_ETC___d5089,
       dp0_bml_remBuf_value_896_EQ_dp0_bml_remBuf_mod_ETC___d5090,
       dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943,
       dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944,
       dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1492,
       dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945,
       dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942,
       dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1494,
       dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1490,
       dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689,
       dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1717,
       dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690,
       dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691,
       dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688,
       dp0_tlp_dmaPullRemainDWLen_91_ULE_dp0_tlp_dmaP_ETC___d4940,
       dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941,
       dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d1030,
       dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d849,
       dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d890,
       dp0_tlp_inF_first__76_BITS_63_TO_56_79_EQ_pciD_ETC___d888,
       dp0_tlp_inF_first__76_BIT_152_041_AND_NOT_dp0__ETC___d1066,
       dp0_tlp_mReqF_RDY_deq__131_AND_IF_dp0_tlp_mReq_ETC___d1147,
       dp0_tlp_outDwRemain_116_ULE_4___d4601,
       dp0_tlp_rdRespDwRemain_482_ULE_4___d1483,
       dp0_tlp_readRemainDWLen_338_ULE_4___d1339,
       dp0_tlp_writeRemainDWLen_168_ULE_1___d5205,
       dp0_tlp_writeRemainDWLen_168_ULE_2___d5206,
       dp0_tlp_writeRemainDWLen_168_ULE_3___d5207,
       dp0_wmi_dpControl_whas__675_AND_dp0_bram_serve_ETC___d1721,
       dp1_bml_crdBuf_value_957_EQ_dp1_bml_crdBuf_mod_ETC___d5141,
       dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142,
       dp1_bml_lclBufDone_999_AND_IF_dp1_bml_dpContro_ETC___d5319,
       dp1_bml_lclBuf_value_912_EQ_dp1_bml_lclBuf_mod_ETC___d5157,
       dp1_bml_remBuf_value_927_EQ_dp1_bml_remBuf_mod_ETC___d5158,
       dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947,
       dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948,
       dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3523,
       dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949,
       dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946,
       dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3525,
       dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3521,
       dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720,
       dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3748,
       dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721,
       dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722,
       dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719,
       dp1_tlp_dpControl_wget__847_BITS_3_TO_2_848_EQ_ETC___d2869,
       dp1_tlp_inF_first__088_BIT_152_089_AND_NOT_dp1_ETC___d3118,
       dp1_tlp_mReqF_RDY_deq__162_AND_IF_dp1_tlp_mReq_ETC___d3178,
       dp1_tlp_mRespF_first__879_BITS_71_TO_62_969_ULE_1___d5209,
       dp1_tlp_outDwRemain_995_ULE_4___d4606,
       dp1_tlp_rdRespDwRemain_513_ULE_4___d3514,
       dp1_tlp_readRemainDWLen_369_ULE_4___d3370,
       dp1_tlp_writeRemainDWLen_199_ULE_1___d5212,
       dp1_tlp_writeRemainDWLen_199_ULE_2___d5211,
       dp1_tlp_writeRemainDWLen_199_ULE_3___d5213,
       dp1_wmi_dpControl_whas__706_AND_dp1_bram_serve_ETC___d3752;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep$trn_clk ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // output resets
  assign RST_N_p125rst = pciw_p125rst$OUT_RST_N ;

  // value method pcie_txp
  assign pcie_txp = pciw_pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pciw_pci0_pcie_ep$pci_exp_txn ;

  // value method axi4m_mAWVALID
  assign axi4m_AWVALID = wci2axi$axiM0_wrAddr_valid ;

  // value method axi4m_mAWADDR
  assign axi4m_AWADDR = wci2axi$axiM0_wrAddr_data[31:0] ;

  // value method axi4m_mAWPROT
  assign axi4m_AWPROT = wci2axi$axiM0_wrAddr_data[34:32] ;

  // value method axi4m_mWVALID
  assign axi4m_WVALID = wci2axi$axiM0_wrData_valid ;

  // value method axi4m_mWDATA
  assign axi4m_WDATA = wci2axi$axiM0_wrData_data[31:0] ;

  // value method axi4m_mWSTRB
  assign axi4m_WSTRB = wci2axi$axiM0_wrData_data[35:32] ;

  // value method axi4m_mBREADY
  assign axi4m_BREADY = wci2axi$axiM0_wrResp_ready ;

  // value method axi4m_mARVALID
  assign axi4m_ARVALID = wci2axi$axiM0_rdAddr_valid ;

  // value method axi4m_mARADDR
  assign axi4m_ARADDR = wci2axi$axiM0_rdAddr_data[31:0] ;

  // value method axi4m_mARPROT
  assign axi4m_ARPROT = wci2axi$axiM0_rdAddr_data[34:32] ;

  // value method axi4m_mRREADY
  assign axi4m_RREADY = wci2axi$axiM0_rdResp_ready ;

  // value method axisM_dat_mTVALID
  assign axisM_dat_TVALID = wsi2axis$axi_dat_TVALID ;

  // value method axisM_dat_mTDATA
  assign axisM_dat_TDATA = wsi2axis$axi_dat_TDATA ;

  // value method axisM_dat_mTSTRB
  assign axisM_dat_TSTRB = wsi2axis$axi_dat_TSTRB ;

  // value method axisM_dat_mTLAST
  assign axisM_dat_TLAST = wsi2axis$axi_dat_TLAST ;

  // value method axisM_len_mTVALID
  assign axisM_len_TVALID = wsi2axis$axi_len_TVALID ;

  // value method axisM_len_mTDATA
  assign axisM_len_TDATA = wsi2axis$axi_len_TDATA ;

  // value method axisM_len_mTSTRB
  assign axisM_len_TSTRB = wsi2axis$axi_len_TSTRB ;

  // value method axisM_len_mTLAST
  assign axisM_len_TLAST = wsi2axis$axi_len_TLAST ;

  // value method axisM_spt_mTVALID
  assign axisM_spt_TVALID = wsi2axis$axi_spt_TVALID ;

  // value method axisM_spt_mTDATA
  assign axisM_spt_TDATA = wsi2axis$axi_spt_TDATA ;

  // value method axisM_spt_mTSTRB
  assign axisM_spt_TSTRB = wsi2axis$axi_spt_TSTRB ;

  // value method axisM_spt_mTLAST
  assign axisM_spt_TLAST = wsi2axis$axi_spt_TLAST ;

  // value method axisM_dpt_mTVALID
  assign axisM_dpt_TVALID = wsi2axis$axi_dpt_TVALID ;

  // value method axisM_dpt_mTDATA
  assign axisM_dpt_TDATA = wsi2axis$axi_dpt_TDATA ;

  // value method axisM_dpt_mTSTRB
  assign axisM_dpt_TSTRB = wsi2axis$axi_dpt_TSTRB ;

  // value method axisM_dpt_mTLAST
  assign axisM_dpt_TLAST = wsi2axis$axi_dpt_TLAST ;

  // value method axisM_err_mTVALID
  assign axisM_err_TVALID = wsi2axis$axi_err_TVALID ;

  // value method axisM_err_mTDATA
  assign axisM_err_TDATA = wsi2axis$axi_err_TDATA ;

  // value method axisM_err_mTSTRB
  assign axisM_err_TSTRB = wsi2axis$axi_err_TSTRB ;

  // value method axisM_err_mTLAST
  assign axisM_err_TLAST = wsi2axis$axi_err_TLAST ;

  // value method axisS_dat_sTREADY
  assign axisS_dat_TREADY = axis2wsi$axi_dat_TREADY ;

  // value method axisS_len_sTREADY
  assign axisS_len_TREADY = axis2wsi$axi_len_TREADY ;

  // value method axisS_spt_sTREADY
  assign axisS_spt_TREADY = axis2wsi$axi_spt_TREADY ;

  // value method axisS_dpt_sTREADY
  assign axisS_dpt_TREADY = axis2wsi$axi_dpt_TREADY ;

  // value method axisS_err_sTREADY
  assign axisS_err_TREADY = axis2wsi$axi_err_TREADY ;

  // value method debug
  assign debug = { 31'd0, pciw_pciLinkUp$dD_OUT } ;

  // submodule appW2
  mkSMAdapter4B #(.smaCtrlInit(32'h00000001),
		  .hasDebugLogic(1'd1)) appW2(.wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
					      .wciS0_MReset_n(cp$RST_N_wci_Vm_2),
					      .wciS0_MAddr(appW2$wciS0_MAddr),
					      .wciS0_MAddrSpace(appW2$wciS0_MAddrSpace),
					      .wciS0_MByteEn(appW2$wciS0_MByteEn),
					      .wciS0_MCmd(appW2$wciS0_MCmd),
					      .wciS0_MData(appW2$wciS0_MData),
					      .wciS0_MFlag(appW2$wciS0_MFlag),
					      .wmiM0_SData(appW2$wmiM0_SData),
					      .wmiM0_SFlag(appW2$wmiM0_SFlag),
					      .wmiM0_SResp(appW2$wmiM0_SResp),
					      .wsiS0_MBurstLength(appW2$wsiS0_MBurstLength),
					      .wsiS0_MByteEn(appW2$wsiS0_MByteEn),
					      .wsiS0_MCmd(appW2$wsiS0_MCmd),
					      .wsiS0_MData(appW2$wsiS0_MData),
					      .wsiS0_MReqInfo(appW2$wsiS0_MReqInfo),
					      .wmiM0_SThreadBusy(appW2$wmiM0_SThreadBusy),
					      .wmiM0_SDataThreadBusy(appW2$wmiM0_SDataThreadBusy),
					      .wmiM0_SRespLast(appW2$wmiM0_SRespLast),
					      .wmiM0_SReset_n(appW2$wmiM0_SReset_n),
					      .wsiM0_SThreadBusy(appW2$wsiM0_SThreadBusy),
					      .wsiM0_SReset_n(appW2$wsiM0_SReset_n),
					      .wsiS0_MReqLast(appW2$wsiS0_MReqLast),
					      .wsiS0_MBurstPrecise(appW2$wsiS0_MBurstPrecise),
					      .wsiS0_MReset_n(appW2$wsiS0_MReset_n),
					      .wciS0_SResp(appW2$wciS0_SResp),
					      .wciS0_SData(appW2$wciS0_SData),
					      .wciS0_SThreadBusy(appW2$wciS0_SThreadBusy),
					      .wciS0_SFlag(appW2$wciS0_SFlag),
					      .wmiM0_MCmd(appW2$wmiM0_MCmd),
					      .wmiM0_MReqLast(appW2$wmiM0_MReqLast),
					      .wmiM0_MReqInfo(appW2$wmiM0_MReqInfo),
					      .wmiM0_MAddrSpace(appW2$wmiM0_MAddrSpace),
					      .wmiM0_MAddr(appW2$wmiM0_MAddr),
					      .wmiM0_MBurstLength(appW2$wmiM0_MBurstLength),
					      .wmiM0_MDataValid(appW2$wmiM0_MDataValid),
					      .wmiM0_MDataLast(appW2$wmiM0_MDataLast),
					      .wmiM0_MData(appW2$wmiM0_MData),
					      .wmiM0_MDataByteEn(appW2$wmiM0_MDataByteEn),
					      .wmiM0_MFlag(appW2$wmiM0_MFlag),
					      .wmiM0_MReset_n(appW2$wmiM0_MReset_n),
					      .wsiM0_MCmd(appW2$wsiM0_MCmd),
					      .wsiM0_MReqLast(appW2$wsiM0_MReqLast),
					      .wsiM0_MBurstPrecise(appW2$wsiM0_MBurstPrecise),
					      .wsiM0_MBurstLength(appW2$wsiM0_MBurstLength),
					      .wsiM0_MData(appW2$wsiM0_MData),
					      .wsiM0_MByteEn(appW2$wsiM0_MByteEn),
					      .wsiM0_MReqInfo(appW2$wsiM0_MReqInfo),
					      .wsiM0_MReset_n(appW2$wsiM0_MReset_n),
					      .wsiS0_SThreadBusy(),
					      .wsiS0_SReset_n());

  // submodule appW3
  mkBiasWorker4B #(.hasDebugLogic(1'd1)) appW3(.wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
					       .wciS0_MReset_n(cp$RST_N_wci_Vm_3),
					       .wciS0_MAddr(appW3$wciS0_MAddr),
					       .wciS0_MAddrSpace(appW3$wciS0_MAddrSpace),
					       .wciS0_MByteEn(appW3$wciS0_MByteEn),
					       .wciS0_MCmd(appW3$wciS0_MCmd),
					       .wciS0_MData(appW3$wciS0_MData),
					       .wciS0_MFlag(appW3$wciS0_MFlag),
					       .wsiS0_MBurstLength(appW3$wsiS0_MBurstLength),
					       .wsiS0_MByteEn(appW3$wsiS0_MByteEn),
					       .wsiS0_MCmd(appW3$wsiS0_MCmd),
					       .wsiS0_MData(appW3$wsiS0_MData),
					       .wsiS0_MReqInfo(appW3$wsiS0_MReqInfo),
					       .wsiS0_MReqLast(appW3$wsiS0_MReqLast),
					       .wsiS0_MBurstPrecise(appW3$wsiS0_MBurstPrecise),
					       .wsiS0_MReset_n(appW3$wsiS0_MReset_n),
					       .wsiM0_SThreadBusy(appW3$wsiM0_SThreadBusy),
					       .wsiM0_SReset_n(appW3$wsiM0_SReset_n),
					       .wciS0_SResp(appW3$wciS0_SResp),
					       .wciS0_SData(appW3$wciS0_SData),
					       .wciS0_SThreadBusy(appW3$wciS0_SThreadBusy),
					       .wciS0_SFlag(appW3$wciS0_SFlag),
					       .wsiS0_SThreadBusy(),
					       .wsiS0_SReset_n(),
					       .wsiM0_MCmd(),
					       .wsiM0_MReqLast(),
					       .wsiM0_MBurstPrecise(),
					       .wsiM0_MBurstLength(),
					       .wsiM0_MData(),
					       .wsiM0_MByteEn(),
					       .wsiM0_MReqInfo(),
					       .wsiM0_MReset_n());

  // submodule appW4
  mkSMAdapter4B #(.smaCtrlInit(32'h00000002),
		  .hasDebugLogic(1'd1)) appW4(.wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
					      .wciS0_MReset_n(cp$RST_N_wci_Vm_4),
					      .wciS0_MAddr(appW4$wciS0_MAddr),
					      .wciS0_MAddrSpace(appW4$wciS0_MAddrSpace),
					      .wciS0_MByteEn(appW4$wciS0_MByteEn),
					      .wciS0_MCmd(appW4$wciS0_MCmd),
					      .wciS0_MData(appW4$wciS0_MData),
					      .wciS0_MFlag(appW4$wciS0_MFlag),
					      .wmiM0_SData(appW4$wmiM0_SData),
					      .wmiM0_SFlag(appW4$wmiM0_SFlag),
					      .wmiM0_SResp(appW4$wmiM0_SResp),
					      .wsiS0_MBurstLength(appW4$wsiS0_MBurstLength),
					      .wsiS0_MByteEn(appW4$wsiS0_MByteEn),
					      .wsiS0_MCmd(appW4$wsiS0_MCmd),
					      .wsiS0_MData(appW4$wsiS0_MData),
					      .wsiS0_MReqInfo(appW4$wsiS0_MReqInfo),
					      .wmiM0_SThreadBusy(appW4$wmiM0_SThreadBusy),
					      .wmiM0_SDataThreadBusy(appW4$wmiM0_SDataThreadBusy),
					      .wmiM0_SRespLast(appW4$wmiM0_SRespLast),
					      .wmiM0_SReset_n(appW4$wmiM0_SReset_n),
					      .wsiM0_SThreadBusy(appW4$wsiM0_SThreadBusy),
					      .wsiM0_SReset_n(appW4$wsiM0_SReset_n),
					      .wsiS0_MReqLast(appW4$wsiS0_MReqLast),
					      .wsiS0_MBurstPrecise(appW4$wsiS0_MBurstPrecise),
					      .wsiS0_MReset_n(appW4$wsiS0_MReset_n),
					      .wciS0_SResp(appW4$wciS0_SResp),
					      .wciS0_SData(appW4$wciS0_SData),
					      .wciS0_SThreadBusy(appW4$wciS0_SThreadBusy),
					      .wciS0_SFlag(appW4$wciS0_SFlag),
					      .wmiM0_MCmd(appW4$wmiM0_MCmd),
					      .wmiM0_MReqLast(appW4$wmiM0_MReqLast),
					      .wmiM0_MReqInfo(appW4$wmiM0_MReqInfo),
					      .wmiM0_MAddrSpace(appW4$wmiM0_MAddrSpace),
					      .wmiM0_MAddr(appW4$wmiM0_MAddr),
					      .wmiM0_MBurstLength(appW4$wmiM0_MBurstLength),
					      .wmiM0_MDataValid(appW4$wmiM0_MDataValid),
					      .wmiM0_MDataLast(appW4$wmiM0_MDataLast),
					      .wmiM0_MData(appW4$wmiM0_MData),
					      .wmiM0_MDataByteEn(appW4$wmiM0_MDataByteEn),
					      .wmiM0_MFlag(appW4$wmiM0_MFlag),
					      .wmiM0_MReset_n(appW4$wmiM0_MReset_n),
					      .wsiM0_MCmd(),
					      .wsiM0_MReqLast(),
					      .wsiM0_MBurstPrecise(),
					      .wsiM0_MBurstLength(),
					      .wsiM0_MData(),
					      .wsiM0_MByteEn(),
					      .wsiM0_MReqInfo(),
					      .wsiM0_MReset_n(),
					      .wsiS0_SThreadBusy(appW4$wsiS0_SThreadBusy),
					      .wsiS0_SReset_n(appW4$wsiS0_SReset_n));

  // submodule axis2wsi
  mkAXIStoWSI4B axis2wsi(.CLK(pciw_pci0_pcie_ep$trn_clk),
			 .RST_N(pciw_p125rst$OUT_RST_N),
			 .axi_dat_TDATA(axis2wsi$axi_dat_TDATA),
			 .axi_dat_TSTRB(axis2wsi$axi_dat_TSTRB),
			 .axi_dpt_TDATA(axis2wsi$axi_dpt_TDATA),
			 .axi_dpt_TSTRB(axis2wsi$axi_dpt_TSTRB),
			 .axi_err_TDATA(axis2wsi$axi_err_TDATA),
			 .axi_err_TSTRB(axis2wsi$axi_err_TSTRB),
			 .axi_len_TDATA(axis2wsi$axi_len_TDATA),
			 .axi_len_TSTRB(axis2wsi$axi_len_TSTRB),
			 .axi_spt_TDATA(axis2wsi$axi_spt_TDATA),
			 .axi_spt_TSTRB(axis2wsi$axi_spt_TSTRB),
			 .axi_dat_TVALID(axis2wsi$axi_dat_TVALID),
			 .axi_dat_TLAST(axis2wsi$axi_dat_TLAST),
			 .axi_len_TVALID(axis2wsi$axi_len_TVALID),
			 .axi_len_TLAST(axis2wsi$axi_len_TLAST),
			 .axi_spt_TVALID(axis2wsi$axi_spt_TVALID),
			 .axi_spt_TLAST(axis2wsi$axi_spt_TLAST),
			 .axi_dpt_TVALID(axis2wsi$axi_dpt_TVALID),
			 .axi_dpt_TLAST(axis2wsi$axi_dpt_TLAST),
			 .axi_err_TVALID(axis2wsi$axi_err_TVALID),
			 .axi_err_TLAST(axis2wsi$axi_err_TLAST),
			 .wsi_SThreadBusy(axis2wsi$wsi_SThreadBusy),
			 .wsi_SReset_n(axis2wsi$wsi_SReset_n),
			 .axi_dat_TREADY(axis2wsi$axi_dat_TREADY),
			 .axi_len_TREADY(axis2wsi$axi_len_TREADY),
			 .axi_spt_TREADY(axis2wsi$axi_spt_TREADY),
			 .axi_dpt_TREADY(axis2wsi$axi_dpt_TREADY),
			 .axi_err_TREADY(axis2wsi$axi_err_TREADY),
			 .wsi_MCmd(axis2wsi$wsi_MCmd),
			 .wsi_MReqLast(axis2wsi$wsi_MReqLast),
			 .wsi_MBurstPrecise(axis2wsi$wsi_MBurstPrecise),
			 .wsi_MBurstLength(axis2wsi$wsi_MBurstLength),
			 .wsi_MData(axis2wsi$wsi_MData),
			 .wsi_MByteEn(axis2wsi$wsi_MByteEn),
			 .wsi_MReqInfo(axis2wsi$wsi_MReqInfo),
			 .wsi_MReset_n(axis2wsi$wsi_MReset_n));

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_sys0_clk(pciw_pci0_pcie_ep$trn_clk),
	    .RST_N_sys0_rst(pciw_p125rst$OUT_RST_N),
	    .CLK(pciw_pci0_pcie_ep$trn_clk),
	    .RST_N(pciw_p125rst$OUT_RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .uuid_arg(cp$uuid_arg),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .wci_Vm_0_MCmd(cp$wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp$wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp$wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp$wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp$wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp$wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(),
	    .wci_Vm_1_MAddrSpace(),
	    .wci_Vm_1_MByteEn(),
	    .wci_Vm_1_MAddr(),
	    .wci_Vm_1_MData(),
	    .wci_Vm_1_MFlag(),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp$wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp$wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(),
	    .wci_Vm_5_MAddrSpace(),
	    .wci_Vm_5_MByteEn(),
	    .wci_Vm_5_MAddr(),
	    .wci_Vm_5_MData(),
	    .wci_Vm_5_MFlag(),
	    .wci_Vm_6_MCmd(),
	    .wci_Vm_6_MAddrSpace(),
	    .wci_Vm_6_MByteEn(),
	    .wci_Vm_6_MAddr(),
	    .wci_Vm_6_MData(),
	    .wci_Vm_6_MFlag(),
	    .wci_Vm_7_MCmd(),
	    .wci_Vm_7_MAddrSpace(),
	    .wci_Vm_7_MByteEn(),
	    .wci_Vm_7_MAddr(),
	    .wci_Vm_7_MData(),
	    .wci_Vm_7_MFlag(),
	    .wci_Vm_8_MCmd(),
	    .wci_Vm_8_MAddrSpace(),
	    .wci_Vm_8_MByteEn(),
	    .wci_Vm_8_MAddr(),
	    .wci_Vm_8_MData(),
	    .wci_Vm_8_MFlag(),
	    .wci_Vm_9_MCmd(),
	    .wci_Vm_9_MAddrSpace(),
	    .wci_Vm_9_MByteEn(),
	    .wci_Vm_9_MAddr(),
	    .wci_Vm_9_MData(),
	    .wci_Vm_9_MFlag(),
	    .wci_Vm_10_MCmd(),
	    .wci_Vm_10_MAddrSpace(),
	    .wci_Vm_10_MByteEn(),
	    .wci_Vm_10_MAddr(),
	    .wci_Vm_10_MData(),
	    .wci_Vm_10_MFlag(),
	    .wci_Vm_11_MCmd(),
	    .wci_Vm_11_MAddrSpace(),
	    .wci_Vm_11_MByteEn(),
	    .wci_Vm_11_MAddr(),
	    .wci_Vm_11_MData(),
	    .wci_Vm_11_MFlag(),
	    .wci_Vm_12_MCmd(),
	    .wci_Vm_12_MAddrSpace(),
	    .wci_Vm_12_MByteEn(),
	    .wci_Vm_12_MAddr(),
	    .wci_Vm_12_MData(),
	    .wci_Vm_12_MFlag(),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(cp$wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp$wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp$wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp$wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp$wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(),
	    .cpNow(),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(),
	    .led(),
	    .RST_N_wci_Vm_0(cp$RST_N_wci_Vm_0),
	    .RST_N_wci_Vm_1(),
	    .RST_N_wci_Vm_2(cp$RST_N_wci_Vm_2),
	    .RST_N_wci_Vm_3(cp$RST_N_wci_Vm_3),
	    .RST_N_wci_Vm_4(cp$RST_N_wci_Vm_4),
	    .RST_N_wci_Vm_5(),
	    .RST_N_wci_Vm_6(),
	    .RST_N_wci_Vm_7(),
	    .RST_N_wci_Vm_8(),
	    .RST_N_wci_Vm_9(),
	    .RST_N_wci_Vm_10(),
	    .RST_N_wci_Vm_11(),
	    .RST_N_wci_Vm_12(),
	    .RST_N_wci_Vm_13(cp$RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14(cp$RST_N_wci_Vm_14));

  // submodule dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory(.CLKA(pciw_pci0_pcie_ep$trn_clk),
					      .CLKB(pciw_pci0_pcie_ep$trn_clk),
					      .ADDRA(dp0_bram_memory$ADDRA),
					      .ADDRB(dp0_bram_memory$ADDRB),
					      .DIA(dp0_bram_memory$DIA),
					      .DIB(dp0_bram_memory$DIB),
					      .WEA(dp0_bram_memory$WEA),
					      .WEB(dp0_bram_memory$WEB),
					      .ENA(dp0_bram_memory$ENA),
					      .ENB(dp0_bram_memory$ENB),
					      .DOA(dp0_bram_memory$DOA),
					      .DOB(dp0_bram_memory$DOB));

  // submodule dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_1(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp0_bram_memory_1$ADDRA),
						.ADDRB(dp0_bram_memory_1$ADDRB),
						.DIA(dp0_bram_memory_1$DIA),
						.DIB(dp0_bram_memory_1$DIB),
						.WEA(dp0_bram_memory_1$WEA),
						.WEB(dp0_bram_memory_1$WEB),
						.ENA(dp0_bram_memory_1$ENA),
						.ENB(dp0_bram_memory_1$ENB),
						.DOA(dp0_bram_memory_1$DOA),
						.DOB(dp0_bram_memory_1$DOB));

  // submodule dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_2(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp0_bram_memory_2$ADDRA),
						.ADDRB(dp0_bram_memory_2$ADDRB),
						.DIA(dp0_bram_memory_2$DIA),
						.DIB(dp0_bram_memory_2$DIB),
						.WEA(dp0_bram_memory_2$WEA),
						.WEB(dp0_bram_memory_2$WEB),
						.ENA(dp0_bram_memory_2$ENA),
						.ENB(dp0_bram_memory_2$ENB),
						.DOA(dp0_bram_memory_2$DOA),
						.DOB(dp0_bram_memory_2$DOB));

  // submodule dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_3(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp0_bram_memory_3$ADDRA),
						.ADDRB(dp0_bram_memory_3$ADDRB),
						.DIA(dp0_bram_memory_3$DIA),
						.DIB(dp0_bram_memory_3$DIB),
						.WEA(dp0_bram_memory_3$WEA),
						.WEB(dp0_bram_memory_3$WEB),
						.ENA(dp0_bram_memory_3$ENA),
						.ENB(dp0_bram_memory_3$ENB),
						.DOA(dp0_bram_memory_3$DOA),
						.DOB(dp0_bram_memory_3$DOB));

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(pciw_pci0_pcie_ep$trn_clk),
								   .D_IN(dp0_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp0_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(pciw_pci0_pcie_ep$trn_clk),
								   .D_IN(dp0_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp0_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_inF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					  .RST_N(cp$RST_N_wci_Vm_13),
					  .D_IN(dp0_tlp_inF$D_IN),
					  .DEQ(dp0_tlp_inF$DEQ),
					  .ENQ(dp0_tlp_inF$ENQ),
					  .CLR(dp0_tlp_inF$CLR),
					  .D_OUT(dp0_tlp_inF$D_OUT),
					  .EMPTY_N(dp0_tlp_inF$EMPTY_N),
					  .FULL_N(dp0_tlp_inF$FULL_N));

  // submodule dp0_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_mReqF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					    .RST_N(cp$RST_N_wci_Vm_13),
					    .D_IN(dp0_tlp_mReqF$D_IN),
					    .DEQ(dp0_tlp_mReqF$DEQ),
					    .ENQ(dp0_tlp_mReqF$ENQ),
					    .CLR(dp0_tlp_mReqF$CLR),
					    .D_OUT(dp0_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp0_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp0_tlp_mReqF$FULL_N));

  // submodule dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp0_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_13),
					  .CLK(pciw_pci0_pcie_ep$trn_clk),
					  .D_IN(dp0_tlp_mRespF$D_IN),
					  .ENQ(dp0_tlp_mRespF$ENQ),
					  .DEQ(dp0_tlp_mRespF$DEQ),
					  .CLR(dp0_tlp_mRespF$CLR),
					  .D_OUT(dp0_tlp_mRespF$D_OUT),
					  .FULL_N(dp0_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp0_tlp_mRespF$EMPTY_N));

  // submodule dp0_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_outF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					   .RST_N(cp$RST_N_wci_Vm_13),
					   .D_IN(dp0_tlp_outF$D_IN),
					   .DEQ(dp0_tlp_outF$DEQ),
					   .ENQ(dp0_tlp_outF$ENQ),
					   .CLR(dp0_tlp_outF$CLR),
					   .D_OUT(dp0_tlp_outF$D_OUT),
					   .EMPTY_N(dp0_tlp_outF$EMPTY_N),
					   .FULL_N(dp0_tlp_outF$FULL_N));

  // submodule dp0_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_readReq(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .RST_N(cp$RST_N_wci_Vm_13),
					      .D_IN(dp0_tlp_readReq$D_IN),
					      .DEQ(dp0_tlp_readReq$DEQ),
					      .ENQ(dp0_tlp_readReq$ENQ),
					      .CLR(dp0_tlp_readReq$CLR),
					      .D_OUT(dp0_tlp_readReq$D_OUT),
					      .EMPTY_N(dp0_tlp_readReq$EMPTY_N),
					      .FULL_N(dp0_tlp_readReq$FULL_N));

  // submodule dp0_tlp_tailEventF
  FIFO20 #(.guarded(32'd1)) dp0_tlp_tailEventF(.RST_N(cp$RST_N_wci_Vm_13),
					       .CLK(pciw_pci0_pcie_ep$trn_clk),
					       .ENQ(dp0_tlp_tailEventF$ENQ),
					       .DEQ(dp0_tlp_tailEventF$DEQ),
					       .CLR(dp0_tlp_tailEventF$CLR),
					       .FULL_N(dp0_tlp_tailEventF$FULL_N),
					       .EMPTY_N(dp0_tlp_tailEventF$EMPTY_N));

  // submodule dp0_wci_isReset
  ResetToBool dp0_wci_isReset(.RST(cp$RST_N_wci_Vm_13),
			      .VAL(dp0_wci_isReset$VAL));

  // submodule dp0_wci_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wci_reqF(.RST_N(cp$RST_N_wci_Vm_13),
					    .CLK(pciw_pci0_pcie_ep$trn_clk),
					    .D_IN(dp0_wci_reqF$D_IN),
					    .ENQ(dp0_wci_reqF$ENQ),
					    .DEQ(dp0_wci_reqF$DEQ),
					    .CLR(dp0_wci_reqF$CLR),
					    .D_OUT(dp0_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp0_wci_reqF$EMPTY_N));

  // submodule dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_13),
					       .CLK(pciw_pci0_pcie_ep$trn_clk),
					       .D_IN(dp0_wmi_wmi_dhF$D_IN),
					       .ENQ(dp0_wmi_wmi_dhF$ENQ),
					       .DEQ(dp0_wmi_wmi_dhF$DEQ),
					       .CLR(dp0_wmi_wmi_dhF$CLR),
					       .D_OUT(dp0_wmi_wmi_dhF$D_OUT),
					       .FULL_N(dp0_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule dp0_wmi_wmi_isReset
  ResetToBool dp0_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_13),
				  .VAL(dp0_wmi_wmi_isReset$VAL));

  // submodule dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_13),
						  .CLK(pciw_pci0_pcie_ep$trn_clk),
						  .D_IN(dp0_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp0_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp0_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp0_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp0_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp0_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_13),
						.CLK(pciw_pci0_pcie_ep$trn_clk),
						.D_IN(dp0_wmi_wmi_reqF$D_IN),
						.ENQ(dp0_wmi_wmi_reqF$ENQ),
						.DEQ(dp0_wmi_wmi_reqF$DEQ),
						.CLR(dp0_wmi_wmi_reqF$CLR),
						.D_OUT(dp0_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp0_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule dp0_wti_isReset
  ResetToBool dp0_wti_isReset(.RST(cp$RST_N_wci_Vm_13), .VAL());

  // submodule dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory(.CLKA(pciw_pci0_pcie_ep$trn_clk),
					      .CLKB(pciw_pci0_pcie_ep$trn_clk),
					      .ADDRA(dp1_bram_memory$ADDRA),
					      .ADDRB(dp1_bram_memory$ADDRB),
					      .DIA(dp1_bram_memory$DIA),
					      .DIB(dp1_bram_memory$DIB),
					      .WEA(dp1_bram_memory$WEA),
					      .WEB(dp1_bram_memory$WEB),
					      .ENA(dp1_bram_memory$ENA),
					      .ENB(dp1_bram_memory$ENB),
					      .DOA(dp1_bram_memory$DOA),
					      .DOB(dp1_bram_memory$DOB));

  // submodule dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_1(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp1_bram_memory_1$ADDRA),
						.ADDRB(dp1_bram_memory_1$ADDRB),
						.DIA(dp1_bram_memory_1$DIA),
						.DIB(dp1_bram_memory_1$DIB),
						.WEA(dp1_bram_memory_1$WEA),
						.WEB(dp1_bram_memory_1$WEB),
						.ENA(dp1_bram_memory_1$ENA),
						.ENB(dp1_bram_memory_1$ENB),
						.DOA(dp1_bram_memory_1$DOA),
						.DOB(dp1_bram_memory_1$DOB));

  // submodule dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_2(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp1_bram_memory_2$ADDRA),
						.ADDRB(dp1_bram_memory_2$ADDRB),
						.DIA(dp1_bram_memory_2$DIA),
						.DIB(dp1_bram_memory_2$DIB),
						.WEA(dp1_bram_memory_2$WEA),
						.WEB(dp1_bram_memory_2$WEB),
						.ENA(dp1_bram_memory_2$ENA),
						.ENB(dp1_bram_memory_2$ENB),
						.DOA(dp1_bram_memory_2$DOA),
						.DOB(dp1_bram_memory_2$DOB));

  // submodule dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_3(.CLKA(pciw_pci0_pcie_ep$trn_clk),
						.CLKB(pciw_pci0_pcie_ep$trn_clk),
						.ADDRA(dp1_bram_memory_3$ADDRA),
						.ADDRB(dp1_bram_memory_3$ADDRB),
						.DIA(dp1_bram_memory_3$DIA),
						.DIB(dp1_bram_memory_3$DIB),
						.WEA(dp1_bram_memory_3$WEA),
						.WEB(dp1_bram_memory_3$WEB),
						.ENA(dp1_bram_memory_3$ENA),
						.ENB(dp1_bram_memory_3$ENB),
						.DOA(dp1_bram_memory_3$DOA),
						.DOB(dp1_bram_memory_3$DOB));

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(pciw_pci0_pcie_ep$trn_clk),
								   .D_IN(dp1_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn_clk),
								     .D_IN(dp1_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(pciw_pci0_pcie_ep$trn_clk),
								   .D_IN(dp1_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp1_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_inF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					  .RST_N(cp$RST_N_wci_Vm_14),
					  .D_IN(dp1_tlp_inF$D_IN),
					  .DEQ(dp1_tlp_inF$DEQ),
					  .ENQ(dp1_tlp_inF$ENQ),
					  .CLR(dp1_tlp_inF$CLR),
					  .D_OUT(dp1_tlp_inF$D_OUT),
					  .EMPTY_N(dp1_tlp_inF$EMPTY_N),
					  .FULL_N(dp1_tlp_inF$FULL_N));

  // submodule dp1_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_mReqF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					    .RST_N(cp$RST_N_wci_Vm_14),
					    .D_IN(dp1_tlp_mReqF$D_IN),
					    .DEQ(dp1_tlp_mReqF$DEQ),
					    .ENQ(dp1_tlp_mReqF$ENQ),
					    .CLR(dp1_tlp_mReqF$CLR),
					    .D_OUT(dp1_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp1_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp1_tlp_mReqF$FULL_N));

  // submodule dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp1_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_14),
					  .CLK(pciw_pci0_pcie_ep$trn_clk),
					  .D_IN(dp1_tlp_mRespF$D_IN),
					  .ENQ(dp1_tlp_mRespF$ENQ),
					  .DEQ(dp1_tlp_mRespF$DEQ),
					  .CLR(dp1_tlp_mRespF$CLR),
					  .D_OUT(dp1_tlp_mRespF$D_OUT),
					  .FULL_N(dp1_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp1_tlp_mRespF$EMPTY_N));

  // submodule dp1_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_outF(.CLK(pciw_pci0_pcie_ep$trn_clk),
					   .RST_N(cp$RST_N_wci_Vm_14),
					   .D_IN(dp1_tlp_outF$D_IN),
					   .DEQ(dp1_tlp_outF$DEQ),
					   .ENQ(dp1_tlp_outF$ENQ),
					   .CLR(dp1_tlp_outF$CLR),
					   .D_OUT(dp1_tlp_outF$D_OUT),
					   .EMPTY_N(dp1_tlp_outF$EMPTY_N),
					   .FULL_N(dp1_tlp_outF$FULL_N));

  // submodule dp1_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_readReq(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .RST_N(cp$RST_N_wci_Vm_14),
					      .D_IN(dp1_tlp_readReq$D_IN),
					      .DEQ(dp1_tlp_readReq$DEQ),
					      .ENQ(dp1_tlp_readReq$ENQ),
					      .CLR(dp1_tlp_readReq$CLR),
					      .D_OUT(dp1_tlp_readReq$D_OUT),
					      .EMPTY_N(dp1_tlp_readReq$EMPTY_N),
					      .FULL_N(dp1_tlp_readReq$FULL_N));

  // submodule dp1_tlp_tailEventF
  FIFO20 #(.guarded(32'd1)) dp1_tlp_tailEventF(.RST_N(cp$RST_N_wci_Vm_14),
					       .CLK(pciw_pci0_pcie_ep$trn_clk),
					       .ENQ(dp1_tlp_tailEventF$ENQ),
					       .DEQ(dp1_tlp_tailEventF$DEQ),
					       .CLR(dp1_tlp_tailEventF$CLR),
					       .FULL_N(dp1_tlp_tailEventF$FULL_N),
					       .EMPTY_N(dp1_tlp_tailEventF$EMPTY_N));

  // submodule dp1_wci_isReset
  ResetToBool dp1_wci_isReset(.RST(cp$RST_N_wci_Vm_14),
			      .VAL(dp1_wci_isReset$VAL));

  // submodule dp1_wci_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wci_reqF(.RST_N(cp$RST_N_wci_Vm_14),
					    .CLK(pciw_pci0_pcie_ep$trn_clk),
					    .D_IN(dp1_wci_reqF$D_IN),
					    .ENQ(dp1_wci_reqF$ENQ),
					    .DEQ(dp1_wci_reqF$DEQ),
					    .CLR(dp1_wci_reqF$CLR),
					    .D_OUT(dp1_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp1_wci_reqF$EMPTY_N));

  // submodule dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_14),
					       .CLK(pciw_pci0_pcie_ep$trn_clk),
					       .D_IN(dp1_wmi_wmi_dhF$D_IN),
					       .ENQ(dp1_wmi_wmi_dhF$ENQ),
					       .DEQ(dp1_wmi_wmi_dhF$DEQ),
					       .CLR(dp1_wmi_wmi_dhF$CLR),
					       .D_OUT(dp1_wmi_wmi_dhF$D_OUT),
					       .FULL_N(dp1_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule dp1_wmi_wmi_isReset
  ResetToBool dp1_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_14),
				  .VAL(dp1_wmi_wmi_isReset$VAL));

  // submodule dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_14),
						  .CLK(pciw_pci0_pcie_ep$trn_clk),
						  .D_IN(dp1_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp1_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp1_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp1_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp1_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp1_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_14),
						.CLK(pciw_pci0_pcie_ep$trn_clk),
						.D_IN(dp1_wmi_wmi_reqF$D_IN),
						.ENQ(dp1_wmi_wmi_reqF$ENQ),
						.DEQ(dp1_wmi_wmi_reqF$DEQ),
						.CLR(dp1_wmi_wmi_reqF$CLR),
						.D_OUT(dp1_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp1_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule dp1_wti_isReset
  ResetToBool dp1_wti_isReset(.RST(cp$RST_N_wci_Vm_14), .VAL());

  // submodule noc_sm0
  mkTLPSM noc_sm0(.pfk(14'd1360),
		  .CLK(pciw_pci0_pcie_ep$trn_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm0$c0_response_put),
		  .c1_response_put(noc_sm0$c1_response_put),
		  .s_request_put(noc_sm0$s_request_put),
		  .EN_s_request_put(noc_sm0$EN_s_request_put),
		  .EN_s_response_get(noc_sm0$EN_s_response_get),
		  .EN_c0_request_get(noc_sm0$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm0$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm0$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm0$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm0$RDY_s_request_put),
		  .s_response_get(noc_sm0$s_response_get),
		  .RDY_s_response_get(noc_sm0$RDY_s_response_get),
		  .c0_request_get(noc_sm0$c0_request_get),
		  .RDY_c0_request_get(noc_sm0$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm0$RDY_c0_response_put),
		  .c1_request_get(noc_sm0$c1_request_get),
		  .RDY_c1_request_get(noc_sm0$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm0$RDY_c1_response_put));

  // submodule noc_sm1
  mkTLPSM noc_sm1(.pfk(14'd9488),
		  .CLK(pciw_pci0_pcie_ep$trn_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm1$c0_response_put),
		  .c1_response_put(noc_sm1$c1_response_put),
		  .s_request_put(noc_sm1$s_request_put),
		  .EN_s_request_put(noc_sm1$EN_s_request_put),
		  .EN_s_response_get(noc_sm1$EN_s_response_get),
		  .EN_c0_request_get(noc_sm1$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm1$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm1$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm1$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm1$RDY_s_request_put),
		  .s_response_get(noc_sm1$s_response_get),
		  .RDY_s_response_get(noc_sm1$RDY_s_response_get),
		  .c0_request_get(noc_sm1$c0_request_get),
		  .RDY_c0_request_get(noc_sm1$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm1$RDY_c0_response_put),
		  .c1_request_get(noc_sm1$c1_request_get),
		  .RDY_c1_request_get(noc_sm1$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm1$RDY_c1_response_put));

  // submodule noc_sm2
  mkTLPSM noc_sm2(.pfk(14'd9497),
		  .CLK(pciw_pci0_pcie_ep$trn_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm2$c0_response_put),
		  .c1_response_put(noc_sm2$c1_response_put),
		  .s_request_put(noc_sm2$s_request_put),
		  .EN_s_request_put(noc_sm2$EN_s_request_put),
		  .EN_s_response_get(noc_sm2$EN_s_response_get),
		  .EN_c0_request_get(noc_sm2$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm2$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm2$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm2$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm2$RDY_s_request_put),
		  .s_response_get(noc_sm2$s_response_get),
		  .RDY_s_response_get(noc_sm2$RDY_s_response_get),
		  .c0_request_get(noc_sm2$c0_request_get),
		  .RDY_c0_request_get(noc_sm2$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm2$RDY_c0_response_put),
		  .c1_request_get(),
		  .RDY_c1_request_get(noc_sm2$RDY_c1_request_get),
		  .RDY_c1_response_put());

  // submodule pciw_inFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_inFifo(.RST_N(pciw_p125rst$OUT_RST_N),
				       .CLK(pciw_pci0_pcie_ep$trn_clk),
				       .D_IN(pciw_inFifo$D_IN),
				       .ENQ(pciw_inFifo$ENQ),
				       .DEQ(pciw_inFifo$DEQ),
				       .CLR(pciw_inFifo$CLR),
				       .D_OUT(pciw_inFifo$D_OUT),
				       .FULL_N(pciw_inFifo$FULL_N),
				       .EMPTY_N(pciw_inFifo$EMPTY_N));

  // submodule pciw_outFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_outFifo(.RST_N(pciw_p125rst$OUT_RST_N),
					.CLK(pciw_pci0_pcie_ep$trn_clk),
					.D_IN(pciw_outFifo$D_IN),
					.ENQ(pciw_outFifo$ENQ),
					.DEQ(pciw_outFifo$DEQ),
					.CLR(pciw_outFifo$CLR),
					.D_OUT(pciw_outFifo$D_OUT),
					.FULL_N(pciw_outFifo$FULL_N),
					.EMPTY_N(pciw_outFifo$EMPTY_N));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p125rst$OUT_RST_N));

  // submodule pciw_pci0_clk
  IBUFDS pciw_pci0_clk(.I(pci0_clkp), .IB(pci0_clkn), .O(pciw_pci0_clk$O));

  // submodule pciw_pci0_pcie_ep
  xilinx_v5_pcie_wrapper pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk$O),
					   .sys_reset_n(RST_N_pci0_rstn),
					   .fast_train_simulation_only(1'h0),
					   .cfg_byte_en_n(pciw_pci0_pcie_ep$cfg_byte_en_n),
					   .cfg_di(pciw_pci0_pcie_ep$cfg_di),
					   .cfg_dsn(pciw_pci0_pcie_ep$cfg_dsn),
					   .cfg_dwaddr(pciw_pci0_pcie_ep$cfg_dwaddr),
					   .cfg_err_cor_n(pciw_pci0_pcie_ep$cfg_err_cor_n),
					   .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep$cfg_err_cpl_abort_n),
					   .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n),
					   .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n),
					   .cfg_err_ecrc_n(pciw_pci0_pcie_ep$cfg_err_ecrc_n),
					   .cfg_err_locked_n(pciw_pci0_pcie_ep$cfg_err_locked_n),
					   .cfg_err_posted_n(pciw_pci0_pcie_ep$cfg_err_posted_n),
					   .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header),
					   .cfg_err_ur_n(pciw_pci0_pcie_ep$cfg_err_ur_n),
					   .cfg_interrupt_assert_n(pciw_pci0_pcie_ep$cfg_interrupt_assert_n),
					   .cfg_interrupt_di(pciw_pci0_pcie_ep$cfg_interrupt_di),
					   .cfg_interrupt_n(pciw_pci0_pcie_ep$cfg_interrupt_n),
					   .cfg_pm_wake_n(pciw_pci0_pcie_ep$cfg_pm_wake_n),
					   .cfg_rd_en_n(pciw_pci0_pcie_ep$cfg_rd_en_n),
					   .cfg_trn_pending_n(pciw_pci0_pcie_ep$cfg_trn_pending_n),
					   .cfg_wr_en_n(pciw_pci0_pcie_ep$cfg_wr_en_n),
					   .pci_exp_rxn(pciw_pci0_pcie_ep$pci_exp_rxn),
					   .pci_exp_rxp(pciw_pci0_pcie_ep$pci_exp_rxp),
					   .trn_rcpl_streaming_n(pciw_pci0_pcie_ep$trn_rcpl_streaming_n),
					   .trn_rdst_rdy_n(pciw_pci0_pcie_ep$trn_rdst_rdy_n),
					   .trn_rnp_ok_n(pciw_pci0_pcie_ep$trn_rnp_ok_n),
					   .trn_td(pciw_pci0_pcie_ep$trn_td),
					   .trn_teof_n(pciw_pci0_pcie_ep$trn_teof_n),
					   .trn_terrfwd_n(pciw_pci0_pcie_ep$trn_terrfwd_n),
					   .trn_trem_n(pciw_pci0_pcie_ep$trn_trem_n),
					   .trn_tsof_n(pciw_pci0_pcie_ep$trn_tsof_n),
					   .trn_tsrc_dsc_n(pciw_pci0_pcie_ep$trn_tsrc_dsc_n),
					   .trn_tsrc_rdy_n(pciw_pci0_pcie_ep$trn_tsrc_rdy_n),
					   .pci_exp_txp(pciw_pci0_pcie_ep$pci_exp_txp),
					   .pci_exp_txn(pciw_pci0_pcie_ep$pci_exp_txn),
					   .cfg_do(),
					   .cfg_rd_wr_done_n(),
					   .cfg_to_turnoff_n(),
					   .cfg_bus_number(pciw_pci0_pcie_ep$cfg_bus_number),
					   .cfg_device_number(pciw_pci0_pcie_ep$cfg_device_number),
					   .cfg_function_number(pciw_pci0_pcie_ep$cfg_function_number),
					   .cfg_status(),
					   .cfg_command(),
					   .cfg_dstatus(),
					   .cfg_dcommand(),
					   .cfg_lstatus(),
					   .cfg_lcommand(),
					   .cfg_pcie_link_state_n(),
					   .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep$cfg_interrupt_rdy_n),
					   .cfg_interrupt_mmenable(pciw_pci0_pcie_ep$cfg_interrupt_mmenable),
					   .cfg_interrupt_msienable(pciw_pci0_pcie_ep$cfg_interrupt_msienable),
					   .cfg_interrupt_do(pciw_pci0_pcie_ep$cfg_interrupt_do),
					   .cfg_err_cpl_rdy_n(),
					   .trn_tdst_rdy_n(pciw_pci0_pcie_ep$trn_tdst_rdy_n),
					   .trn_tdst_dsc_n(),
					   .trn_tbuf_av(),
					   .trn_rsof_n(pciw_pci0_pcie_ep$trn_rsof_n),
					   .trn_reof_n(pciw_pci0_pcie_ep$trn_reof_n),
					   .trn_rd(pciw_pci0_pcie_ep$trn_rd),
					   .trn_rrem_n(pciw_pci0_pcie_ep$trn_rrem_n),
					   .trn_rerrfwd_n(),
					   .trn_rsrc_rdy_n(pciw_pci0_pcie_ep$trn_rsrc_rdy_n),
					   .trn_rsrc_dsc_n(),
					   .trn_rbar_hit_n(pciw_pci0_pcie_ep$trn_rbar_hit_n),
					   .trn_rfc_ph_av(),
					   .trn_rfc_pd_av(),
					   .trn_rfc_nph_av(),
					   .trn_rfc_npd_av(),
					   .trn_lnk_up_n(pciw_pci0_pcie_ep$trn_lnk_up_n),
					   .trn_clk(pciw_pci0_pcie_ep$trn_clk),
					   .trn2_clk(),
					   .refclkout(),
					   .trn_reset_n(pciw_pci0_pcie_ep$trn_reset_n));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					      .dCLK(pciw_pci0_pcie_ep$trn_clk),
					      .sRST_N(pciw_p125rst$OUT_RST_N),
					      .sD_IN(pciw_pciDevice$sD_IN),
					      .sEN(pciw_pciDevice$sEN),
					      .dD_OUT(pciw_pciDevice$dD_OUT),
					      .sRDY(pciw_pciDevice$sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(32'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					 .dCLK(pciw_pci0_pcie_ep$trn_clk),
					 .sRST_N(pciw_p125rst$OUT_RST_N),
					 .sD_IN(pciw_pciLinkUp$sD_IN),
					 .sEN(pciw_pciLinkUp$sEN),
					 .dD_OUT(pciw_pciLinkUp$dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep$trn_clk),
						       .dCLK(pciw_pci0_pcie_ep$trn_clk),
						       .sRST_N(pciw_p125rst$OUT_RST_N),
						       .sD_IN(pciw_pcie_irq_fifoAssert$sD_IN),
						       .sENQ(pciw_pcie_irq_fifoAssert$sENQ),
						       .dDEQ(pciw_pcie_irq_fifoAssert$dDEQ),
						       .dD_OUT(pciw_pcie_irq_fifoAssert$dD_OUT),
						       .sFULL_N(),
						       .dEMPTY_N(pciw_pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pciw_uI2PF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uI2PF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uI2PF$D_IN),
				      .ENQ(pciw_uI2PF$ENQ),
				      .DEQ(pciw_uI2PF$DEQ),
				      .CLR(pciw_uI2PF$CLR),
				      .D_OUT(pciw_uI2PF$D_OUT),
				      .FULL_N(pciw_uI2PF$FULL_N),
				      .EMPTY_N(pciw_uI2PF$EMPTY_N));

  // submodule pciw_uP2IF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uP2IF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uP2IF$D_IN),
				      .ENQ(pciw_uP2IF$ENQ),
				      .DEQ(pciw_uP2IF$DEQ),
				      .CLR(pciw_uP2IF$CLR),
				      .D_OUT(pciw_uP2IF$D_OUT),
				      .FULL_N(pciw_uP2IF$FULL_N),
				      .EMPTY_N(pciw_uP2IF$EMPTY_N));

  // submodule wci2axi
  mkWCIS2A4LM #(.hasDebugLogic(1'd1)) wci2axi(.wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
					      .wciS0_MReset_n(cp$RST_N_wci_Vm_0),
					      .axiM0_rdAddr_ready_value(wci2axi$axiM0_rdAddr_ready_value),
					      .axiM0_rdResp_data_value(wci2axi$axiM0_rdResp_data_value),
					      .axiM0_rdResp_valid_value(wci2axi$axiM0_rdResp_valid_value),
					      .axiM0_wrAddr_ready_value(wci2axi$axiM0_wrAddr_ready_value),
					      .axiM0_wrData_ready_value(wci2axi$axiM0_wrData_ready_value),
					      .axiM0_wrResp_data_value(wci2axi$axiM0_wrResp_data_value),
					      .axiM0_wrResp_valid_value(wci2axi$axiM0_wrResp_valid_value),
					      .wciS0_MAddr(wci2axi$wciS0_MAddr),
					      .wciS0_MAddrSpace(wci2axi$wciS0_MAddrSpace),
					      .wciS0_MByteEn(wci2axi$wciS0_MByteEn),
					      .wciS0_MCmd(wci2axi$wciS0_MCmd),
					      .wciS0_MData(wci2axi$wciS0_MData),
					      .wciS0_MFlag(wci2axi$wciS0_MFlag),
					      .wciS0_SResp(wci2axi$wciS0_SResp),
					      .wciS0_SData(wci2axi$wciS0_SData),
					      .wciS0_SThreadBusy(wci2axi$wciS0_SThreadBusy),
					      .wciS0_SFlag(wci2axi$wciS0_SFlag),
					      .axiM0_wrAddr_data(wci2axi$axiM0_wrAddr_data),
					      .axiM0_wrAddr_valid(wci2axi$axiM0_wrAddr_valid),
					      .axiM0_wrData_data(wci2axi$axiM0_wrData_data),
					      .axiM0_wrData_valid(wci2axi$axiM0_wrData_valid),
					      .axiM0_wrResp_ready(wci2axi$axiM0_wrResp_ready),
					      .axiM0_rdAddr_data(wci2axi$axiM0_rdAddr_data),
					      .axiM0_rdAddr_valid(wci2axi$axiM0_rdAddr_valid),
					      .axiM0_rdResp_ready(wci2axi$axiM0_rdResp_ready));

  // submodule wsi2axis
  mkWSItoAXIS4B wsi2axis(.CLK(pciw_pci0_pcie_ep$trn_clk),
			 .RST_N(pciw_p125rst$OUT_RST_N),
			 .wsi_MBurstLength(wsi2axis$wsi_MBurstLength),
			 .wsi_MByteEn(wsi2axis$wsi_MByteEn),
			 .wsi_MCmd(wsi2axis$wsi_MCmd),
			 .wsi_MData(wsi2axis$wsi_MData),
			 .wsi_MReqInfo(wsi2axis$wsi_MReqInfo),
			 .wsi_MReqLast(wsi2axis$wsi_MReqLast),
			 .wsi_MBurstPrecise(wsi2axis$wsi_MBurstPrecise),
			 .wsi_MReset_n(wsi2axis$wsi_MReset_n),
			 .axi_dat_TREADY(wsi2axis$axi_dat_TREADY),
			 .axi_len_TREADY(wsi2axis$axi_len_TREADY),
			 .axi_spt_TREADY(wsi2axis$axi_spt_TREADY),
			 .axi_dpt_TREADY(wsi2axis$axi_dpt_TREADY),
			 .axi_err_TREADY(wsi2axis$axi_err_TREADY),
			 .wsi_SThreadBusy(wsi2axis$wsi_SThreadBusy),
			 .wsi_SReset_n(wsi2axis$wsi_SReset_n),
			 .axi_dat_TVALID(wsi2axis$axi_dat_TVALID),
			 .axi_dat_TDATA(wsi2axis$axi_dat_TDATA),
			 .axi_dat_TSTRB(wsi2axis$axi_dat_TSTRB),
			 .axi_dat_TLAST(wsi2axis$axi_dat_TLAST),
			 .axi_len_TVALID(wsi2axis$axi_len_TVALID),
			 .axi_len_TDATA(wsi2axis$axi_len_TDATA),
			 .axi_len_TSTRB(wsi2axis$axi_len_TSTRB),
			 .axi_len_TLAST(wsi2axis$axi_len_TLAST),
			 .axi_spt_TVALID(wsi2axis$axi_spt_TVALID),
			 .axi_spt_TDATA(wsi2axis$axi_spt_TDATA),
			 .axi_spt_TSTRB(wsi2axis$axi_spt_TSTRB),
			 .axi_spt_TLAST(wsi2axis$axi_spt_TLAST),
			 .axi_dpt_TVALID(wsi2axis$axi_dpt_TVALID),
			 .axi_dpt_TDATA(wsi2axis$axi_dpt_TDATA),
			 .axi_dpt_TSTRB(wsi2axis$axi_dpt_TSTRB),
			 .axi_dpt_TLAST(wsi2axis$axi_dpt_TLAST),
			 .axi_err_TVALID(wsi2axis$axi_err_TVALID),
			 .axi_err_TDATA(wsi2axis$axi_err_TDATA),
			 .axi_err_TSTRB(wsi2axis$axi_err_TSTRB),
			 .axi_err_TLAST(wsi2axis$axi_err_TLAST));

  // rule RL_pciw_upconv_connect1
  assign WILL_FIRE_RL_pciw_upconv_connect1 =
	     pciw_inFifo$EMPTY_N &&
	     (!pciw_inFifo$D_OUT[79] || pciw_uP2IF$FULL_N) &&
	     !pciw_rg[81] ;

  // rule RL_pciw_upconv_connect2
  assign WILL_FIRE_RL_pciw_upconv_connect2 =
	     pciw_inFifo$EMPTY_N && pciw_uP2IF$FULL_N && pciw_rg[81] ;

  // rule RL_pciw_connect_1
  assign WILL_FIRE_RL_pciw_connect_1 =
	     pciw_outFifo$EMPTY_N &&
	     (pciw_outFifo$D_OUT[71:64] == 8'd0 ||
	      !pciw_pci0_pcie_ep$trn_tdst_rdy_n) ;

  // rule RL_pciw_downconv_connect1
  assign WILL_FIRE_RL_pciw_downconv_connect1 =
	     pciw_uI2PF$EMPTY_N && pciw_outFifo$FULL_N && !pciw_rg_1[81] ;

  // rule RL_pciw_downconv_connect2
  assign WILL_FIRE_RL_pciw_downconv_connect2 =
	     pciw_outFifo$FULL_N && pciw_rg_1[81] ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert$dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_dp0_wci_cfrd
  assign WILL_FIRE_RL_dp0_wci_cfrd =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_start
  assign WILL_FIRE_RL_dp0_wci_ctl_op_start =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_tlp_dmaXmtDoorbell
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     dp0_tlp_tailEventF$FULL_N && dp0_dpControl[1:0] == 2'd2 &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_creditReady ;

  // rule RL_dp0_tlp_dmaRespHeadFarMeta
  assign WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d890 ;

  // rule RL_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_pullTagMatch &&
	     !dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaTailEventSender
  assign WILL_FIRE_RL_dp0_tlp_dmaTailEventSender =
	     dp0_tlp_outF$FULL_N && dp0_tlp_tailEventF$EMPTY_N &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_tlp_tlpRcv
  assign WILL_FIRE_RL_dp0_tlp_tlpRcv =
	     dp0_tlp_inF$EMPTY_N &&
	     (dp0_tlp_inF$D_OUT[152] ?
		dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
		dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp0_tlp_mReqF$FULL_N :
		dp0_tlp_inIgnorePkt || dp0_tlp_mReqF$FULL_N) &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight ;

  // rule RL_dp0_tlp_dmaRequestFarMeta
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d849 &&
	     dp0_tlp_postSeqDwell == 4'd0 ;

  // rule RL_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaPullTailEvent
  assign WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     dp0_tlp_tailEventF$FULL_N &&
	     dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d1030 &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // rule RL_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dataXmt_Header
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Header =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 &&
	     !WILL_FIRE_RL_dp0_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_tlp_dataXmt_Body
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Body =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 &&
	     !WILL_FIRE_RL_dp0_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_tlp_writeReq
  assign WILL_FIRE_RL_dp0_tlp_writeReq =
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_mReqF_RDY_deq__131_AND_IF_dp0_tlp_mReq_ETC___d1147 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;

  // rule RL_dp0_tlp_writeData
  assign WILL_FIRE_RL_dp0_tlp_writeData =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181 ||
	      dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942) &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1214 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;

  // rule RL_dp0_tlp_read_FirstResp
  assign WILL_FIRE_RL_dp0_tlp_read_FirstResp =
	     dp0_tlp_readReq$EMPTY_N && dp0_tlp_mRespF$FULL_N &&
	     IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1421 &&
	     (dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp0_tlp_readReq$EMPTY_N) &&
	     !dp0_tlp_readHeaderSent ;

  // rule RL_dp0_tlp_read_NextResp
  assign WILL_FIRE_RL_dp0_tlp_read_NextResp =
	     dp0_tlp_readReq$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1494 &&
	     dp0_tlp_readHeaderSent ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;

  // rule RL_dp0_tlp_read_FirstReq
  assign WILL_FIRE_RL_dp0_tlp_read_FirstReq =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_readReq$FULL_N &&
	     NOT_dp0_tlp_mReqF_first__132_BITS_28_TO_19_309_ETC___d1323 &&
	     !dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_dp0_tlp_read_NextReq
  assign WILL_FIRE_RL_dp0_tlp_read_NextReq =
	     dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942 &&
	     dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943 &&
	     dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944 &&
	     dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945 &&
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_dp0_wmi_reqMetadata =
	     dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688 &&
	     dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689 &&
	     dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690 &&
	     dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     !dp0_wmi_metaBusy &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doWriteFinalize
  assign WILL_FIRE_RL_dp0_wmi_doWriteFinalize =
	     dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688 &&
	     dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689 &&
	     dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690 &&
	     dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691 &&
	     dp0_wmi_wrFinalize ;

  // rule RL_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_dp0_wmi_respMetadata =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_dpControl_whas__675_AND_dp0_bram_serve_ETC___d1721 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_wmi_doReadReq
  assign WILL_FIRE_RL_dp0_wmi_doReadReq =
	     IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 &&
	     dp0_wmi_rdActive &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doReadResp
  assign WILL_FIRE_RL_dp0_wmi_doReadResp =
	     dp0_wmi_wmi_respF_c_r != 2'd2 && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     IF_dp0_wmi_p4B_830_EQ_0_831_THEN_dp0_bram_serv_ETC___d1844 &&
	     dp0_wmi_bytesRemainResp != 14'd0 ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_dp0_wmi_wmi_respF_incCtr
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr =
	     ((dp0_wmi_wmi_respF_c_r == 2'd0) ?
		WILL_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd1 ||
		WILL_FIRE_RL_dp0_wmi_doReadResp) &&
	     WILL_FIRE_RL_dp0_wmi_doReadResp &&
	     !(dp0_wmi_wmi_respF_c_r != 2'd0) ;

  // rule RL_dp0_wmi_wmi_respF_decCtr
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     !WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_wmi_wmi_respF_both
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_both =
	     ((dp0_wmi_wmi_respF_c_r == 2'd1) ?
		WILL_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd2 ||
		WILL_FIRE_RL_dp0_wmi_doReadResp) &&
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_bml_fba
  assign WILL_FIRE_RL_dp0_bml_fba =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd1 ;

  // rule RL_dp0_bml_lcredit
  assign WILL_FIRE_RL_dp0_bml_lcredit =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 ;

  // rule RL_dp0_bml_remAdvance
  assign CAN_FIRE_RL_dp0_bml_remAdvance =
	     dp0_wci_cState == 3'd2 && dp0_bml_remDone ;
  assign WILL_FIRE_RL_dp0_bml_remAdvance =
	     CAN_FIRE_RL_dp0_bml_remAdvance &&
	     !WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_crdAdvance
  assign WILL_FIRE_RL_dp0_bml_crdAdvance =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 &&
	     dp0_bml_remStart ;

  // rule RL_dp0_wmi_wmi_reqF_enq
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;

  // rule RL_dp0_wmi_getRequest
  assign CAN_FIRE_RL_dp0_wmi_getRequest =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_blockReq &&
	     dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp0_wmi_wrActive_748_749_OR_NOT_dp0_wmi_rd_ETC___d1758 &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_getRequest =
	     CAN_FIRE_RL_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_wmi_mFlagF_enq
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp0_wmi_wmi_wmiReq$wget[27] &&
	     !WILL_FIRE_RL_dp0_wmi_getRequest ;

  // rule RL_dp0_wmi_wmi_reqF_reset
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // rule RL_dp0_wmi_wmi_mFlagF_reset
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // rule RL_dp0_wmi_wmi_dhF_enq
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiDh$wget[37] ;

  // rule RL_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_dp0_wmi_doWriteReq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 &&
	     dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteReq =
	     CAN_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_wmi_dhF_reset
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_bml_lclAdvance
  assign WILL_FIRE_RL_dp0_bml_lclAdvance =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufDone ;

  // rule RL_dp0_bml_initAccumulators
  assign WILL_FIRE_RL_dp0_bml_initAccumulators =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd1 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_dp0_wci_cfwr
  assign WILL_FIRE_RL_dp0_wci_cfwr =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_complete
  assign WILL_FIRE_RL_dp0_wci_ctl_op_complete =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_ctlOpActive &&
	     dp0_wci_ctlAckReg ;

  // rule RL_dp0_wci_respF_incCtr
  assign WILL_FIRE_RL_dp0_wci_respF_incCtr =
	     ((dp0_wci_respF_c_r == 2'd0) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd1 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_enqueueing$whas &&
	     !(dp0_wci_respF_c_r != 2'd0) ;

  // rule RL_dp0_wci_respF_decCtr
  assign WILL_FIRE_RL_dp0_wci_respF_decCtr =
	     dp0_wci_respF_c_r != 2'd0 && !dp0_wci_respF_enqueueing$whas ;

  // rule RL_dp0_wci_respF_both
  assign WILL_FIRE_RL_dp0_wci_respF_both =
	     ((dp0_wci_respF_c_r == 2'd1) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd2 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_c_r != 2'd0 &&
	     dp0_wci_respF_enqueueing$whas ;

  // rule RL_dp1_wci_cfrd
  assign WILL_FIRE_RL_dp1_wci_cfrd =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_start
  assign WILL_FIRE_RL_dp1_wci_ctl_op_start =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_tlp_dmaRequestNearMeta
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__847_BITS_3_TO_2_848_EQ_ETC___d2869 ;

  // rule RL_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     dp1_tlp_mReqF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_tlp_dmaResponseNearMetaHead
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;

  // rule RL_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_xmtMetaInFlight &&
	     dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaXmtMetaBody
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_doXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     dp1_tlp_tailEventF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_tlpMetaSent &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_dmaPushResponseHeader
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;

  // rule RL_dp1_tlp_dmaPushResponseBody
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;

  // rule RL_dp1_tlp_dmaXmtDoorbell
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     dp1_tlp_tailEventF$FULL_N && dp1_dpControl[1:0] == 2'd2 &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_creditReady ;

  // rule RL_dp1_tlp_dmaTailEventSender
  assign WILL_FIRE_RL_dp1_tlp_dmaTailEventSender =
	     dp1_tlp_outF$FULL_N && dp1_tlp_tailEventF$EMPTY_N &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_dp1_tlp_tlpRcv =
	     dp1_tlp_inF$EMPTY_N &&
	     (dp1_tlp_inF$D_OUT[152] ?
		dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
		dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp1_tlp_mReqF$FULL_N :
		dp1_tlp_inIgnorePkt || dp1_tlp_mReqF$FULL_N) &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp1_tlp_tlpRcv =
	     CAN_FIRE_RL_dp1_tlp_tlpRcv &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_dp1_tlp_dmaResponseNearMetaBody
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;

  // rule RL_dp1_tlp_dataXmt_Header
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Header =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 &&
	     !WILL_FIRE_RL_dp1_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_dataXmt_Body
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Body =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 &&
	     !WILL_FIRE_RL_dp1_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_writeReq
  assign WILL_FIRE_RL_dp1_tlp_writeReq =
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_mReqF_RDY_deq__162_AND_IF_dp1_tlp_mReq_ETC___d3178 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;

  // rule RL_dp1_tlp_writeData
  assign WILL_FIRE_RL_dp1_tlp_writeData =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212 ||
	      dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946) &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3245 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;

  // rule RL_dp1_tlp_read_FirstResp
  assign WILL_FIRE_RL_dp1_tlp_read_FirstResp =
	     dp1_tlp_readReq$EMPTY_N && dp1_tlp_mRespF$FULL_N &&
	     IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3452 &&
	     (dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp1_tlp_readReq$EMPTY_N) &&
	     !dp1_tlp_readHeaderSent ;

  // rule RL_dp1_tlp_read_NextResp
  assign WILL_FIRE_RL_dp1_tlp_read_NextResp =
	     dp1_tlp_readReq$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3525 &&
	     dp1_tlp_readHeaderSent ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;

  // rule RL_dp1_tlp_read_FirstReq
  assign WILL_FIRE_RL_dp1_tlp_read_FirstReq =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_readReq$FULL_N &&
	     NOT_dp1_tlp_mReqF_first__163_BITS_28_TO_19_340_ETC___d3354 &&
	     !dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_dp1_tlp_read_NextReq
  assign WILL_FIRE_RL_dp1_tlp_read_NextReq =
	     dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946 &&
	     dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947 &&
	     dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948 &&
	     dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949 &&
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_dp1_wmi_reqMetadata =
	     dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719 &&
	     dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720 &&
	     dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721 &&
	     dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     !dp1_wmi_metaBusy &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doWriteFinalize
  assign WILL_FIRE_RL_dp1_wmi_doWriteFinalize =
	     dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719 &&
	     dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720 &&
	     dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721 &&
	     dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722 &&
	     dp1_wmi_wrFinalize ;

  // rule RL_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_dp1_wmi_respMetadata =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_dpControl_whas__706_AND_dp1_bram_serve_ETC___d3752 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_wmi_doReadReq
  assign WILL_FIRE_RL_dp1_wmi_doReadReq =
	     IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 &&
	     dp1_wmi_rdActive &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doReadResp
  assign WILL_FIRE_RL_dp1_wmi_doReadResp =
	     dp1_wmi_wmi_respF_c_r != 2'd2 && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     IF_dp1_wmi_p4B_861_EQ_0_862_THEN_dp1_bram_serv_ETC___d3875 &&
	     dp1_wmi_bytesRemainResp != 14'd0 ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_dp1_wmi_wmi_respF_incCtr
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr =
	     ((dp1_wmi_wmi_respF_c_r == 2'd0) ?
		WILL_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd1 ||
		WILL_FIRE_RL_dp1_wmi_doReadResp) &&
	     WILL_FIRE_RL_dp1_wmi_doReadResp &&
	     !(dp1_wmi_wmi_respF_c_r != 2'd0) ;

  // rule RL_dp1_wmi_wmi_respF_decCtr
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     !WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_wmi_wmi_respF_both
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_both =
	     ((dp1_wmi_wmi_respF_c_r == 2'd1) ?
		WILL_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd2 ||
		WILL_FIRE_RL_dp1_wmi_doReadResp) &&
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_bml_fba
  assign WILL_FIRE_RL_dp1_bml_fba =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd1 ;

  // rule RL_dp1_bml_lcredit
  assign WILL_FIRE_RL_dp1_bml_lcredit =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 ;

  // rule RL_dp1_bml_remAdvance
  assign CAN_FIRE_RL_dp1_bml_remAdvance =
	     dp1_wci_cState == 3'd2 && dp1_bml_remDone ;
  assign WILL_FIRE_RL_dp1_bml_remAdvance =
	     CAN_FIRE_RL_dp1_bml_remAdvance &&
	     !WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_crdAdvance
  assign WILL_FIRE_RL_dp1_bml_crdAdvance =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 &&
	     dp1_bml_remStart ;

  // rule RL_dp1_wmi_wmi_reqF_enq
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;

  // rule RL_dp1_wmi_getRequest
  assign CAN_FIRE_RL_dp1_wmi_getRequest =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_blockReq &&
	     dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp1_wmi_wrActive_779_780_OR_NOT_dp1_wmi_rd_ETC___d3789 &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_getRequest =
	     CAN_FIRE_RL_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_wmi_mFlagF_enq
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp1_wmi_wmi_wmiReq$wget[27] &&
	     !WILL_FIRE_RL_dp1_wmi_getRequest ;

  // rule RL_dp1_wmi_wmi_reqF_reset
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // rule RL_dp1_wmi_wmi_mFlagF_reset
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // rule RL_dp1_wmi_wmi_dhF_enq
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiDh$wget[37] ;

  // rule RL_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_dp1_wmi_doWriteReq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 &&
	     dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteReq =
	     CAN_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_wmi_dhF_reset
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_bml_lclAdvance
  assign WILL_FIRE_RL_dp1_bml_lclAdvance =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufDone ;

  // rule RL_dp1_bml_initAccumulators
  assign WILL_FIRE_RL_dp1_bml_initAccumulators =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd1 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_dp1_wci_cfwr
  assign WILL_FIRE_RL_dp1_wci_cfwr =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_complete
  assign WILL_FIRE_RL_dp1_wci_ctl_op_complete =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_ctlOpActive &&
	     dp1_wci_ctlAckReg ;

  // rule RL_dp1_wci_respF_incCtr
  assign WILL_FIRE_RL_dp1_wci_respF_incCtr =
	     ((dp1_wci_respF_c_r == 2'd0) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd1 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_enqueueing$whas &&
	     !(dp1_wci_respF_c_r != 2'd0) ;

  // rule RL_dp1_wci_respF_decCtr
  assign WILL_FIRE_RL_dp1_wci_respF_decCtr =
	     dp1_wci_respF_c_r != 2'd0 && !dp1_wci_respF_enqueueing$whas ;

  // rule RL_dp1_wci_respF_both
  assign WILL_FIRE_RL_dp1_wci_respF_both =
	     ((dp1_wci_respF_c_r == 2'd1) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd2 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_c_r != 2'd0 &&
	     dp1_wci_respF_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     dp0_wci_cState == 3'd2 &&
	     (IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021 &&
	      !dp0_bml_lclBufStart ||
	      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 &&
	      dp0_bml_lclBufStart) ;
  assign MUX_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     dp0_wci_cState == 3'd2 &&
	     (dp0_bml_lclBufDone_968_AND_IF_dp0_bml_dpContro_ETC___d5288 ||
	      NOT_dp0_bml_lclBufDone_968_035_AND_IF_dp0_bml__ETC___d2048) ;
  assign MUX_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__76_BIT_152_041_AND_NOT_dp0__ETC___d1066 ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_4 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;
  assign MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     NOT_dp0_tlp_mRespF_first__087_BITS_71_TO_62_09_ETC___d1111 ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState != 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 && dp0_wci_cState != 3'd1 &&
	      dp0_wci_cState != 3'd3 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState != 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 && dp0_wci_cState != 3'd3 &&
	      dp0_wci_cState != 3'd2 &&
	      dp0_wci_cState != 3'd1 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp0_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_dp0_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     dp1_wci_cState == 3'd2 &&
	     (IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052 &&
	      !dp1_bml_lclBufStart ||
	      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 &&
	      dp1_bml_lclBufStart) ;
  assign MUX_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     dp1_wci_cState == 3'd2 &&
	     (dp1_bml_lclBufDone_999_AND_IF_dp1_bml_dpContro_ETC___d5319 ||
	      NOT_dp1_bml_lclBufDone_999_066_AND_IF_dp1_bml__ETC___d4079) ;
  assign MUX_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__088_BIT_152_089_AND_NOT_dp1_ETC___d3118 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__879_BITS_71_TO_62_969_ULE_1___d5209 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_2 &&
	     dp1_tlp_outDwRemain_995_ULE_4___d4606 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo13 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_995_ULE_4___d4606 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState != 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 && dp1_wci_cState != 3'd1 &&
	      dp1_wci_cState != 3'd3 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState != 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 && dp1_wci_cState != 3'd3 &&
	      dp1_wci_cState != 3'd2 &&
	      dp1_wci_cState != 3'd1 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp1_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_dp1_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_pciw_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ;
  assign MUX_pciw_rg_1$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ;
  assign MUX_pciw_uP2IF$enq_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ;
  assign MUX_dp0_bml_crdBuf_value$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_926_EQ_dp0_bml_crdBuf_mod_ETC___d5073 ?
	       16'd0 :
	       dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBuf_value$write_1__VAL_3 =
	     dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074 ?
	       16'd0 :
	       dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp0_bml_fabAvail && !dp0_bml_remStart) ? x__h82259 : x__h82264 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? x__h81016 : 16'd0 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_983_PLUS_dp0_bml_fabFlowSi_ETC___d4938 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_926_EQ_dp0_bml_crdBuf_mod_ETC___d5073 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_983_PLUS_dp0_bml_fabFlowSi_ETC___d4938 ;
  assign MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074 ?
	       dp0_bml_fabMesgBase :
	       dp0_bml_fabMesgAddr + dp0_bml_fabMesgSize ;
  assign MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074 ?
	       dp0_bml_fabMetaBase :
	       dp0_bml_fabMetaAddr + dp0_bml_fabMetaSize ;
  assign MUX_dp0_bml_lclBuf_value$write_1__VAL_3 =
	     dp0_bml_lclBuf_value_881_EQ_dp0_bml_lclBuf_mod_ETC___d5089 ?
	       16'd0 :
	       dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021 &&
	      !dp0_bml_lclBufStart) ?
	       x__h82140 :
	       x__h82145 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? dp0_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     dp0_bml_lclBufDone_968_AND_IF_dp0_bml_dpContro_ETC___d5288 ?
	       x__h82217 :
	       x__h82222 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? 16'd0 : dp0_bml_lclNumBufs ;
  assign MUX_dp0_bml_lclCredit$write_1__VAL_1 =
	     (dp0_bml_lclBufDone && !dp0_bml_remStart) ?
	       x__h82297 :
	       x__h82302 ;
  assign MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_881_EQ_dp0_bml_lclBuf_mod_ETC___d5089 ?
	       dp0_bml_mesgBase :
	       dp0_bml_lclMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_881_EQ_dp0_bml_lclBuf_mod_ETC___d5089 ?
	       dp0_bml_metaBase :
	       dp0_bml_lclMetaAddr + dp0_bml_metaSize ;
  assign MUX_dp0_bml_remBuf_value$write_1__VAL_3 =
	     dp0_bml_remBuf_value_896_EQ_dp0_bml_remBuf_mod_ETC___d5090 ?
	       16'd0 :
	       dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_dp0_bml_remMesgAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_896_EQ_dp0_bml_remBuf_mod_ETC___d5090 ?
	       dp0_bml_mesgBase :
	       dp0_bml_remMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_896_EQ_dp0_bml_remBuf_mod_ETC___d5090 ?
	       dp0_bml_metaBase :
	       dp0_bml_remMetaAddr + dp0_bml_metaSize ;
  always@(idx__h49892 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h49892)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h56955 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h56955)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory$a_put_3__VAL_1 =
	     { dp0_tlp_mReqF$D_OUT[7:0],
	       dp0_tlp_mReqF$D_OUT[15:8],
	       dp0_tlp_mReqF$D_OUT[23:16],
	       dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp0_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494[7:0],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494[15:8],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494[23:16],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494[31:24] } ;
  assign MUX_dp0_bram_memory$b_put_2__VAL_1 =
	     dp0_wmi_lclMesgAddr[14:4] + { 1'd0, dp0_wmi_addr[13:4] } ;
  always@(idx__h52115 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h52115)
      2'd0: MUX_dp0_bram_memory_1$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h57423 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h57423)
      2'd0:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495[7:0],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495[15:8],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495[23:16],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495[31:24] } ;
  always@(idx__h53411 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h53411)
      2'd0: MUX_dp0_bram_memory_2$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h57796 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h57796)
      2'd0:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496[7:0],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496[15:8],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496[23:16],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496[31:24] } ;
  always@(idx__h54707 or
	  dp0_tlp_writeDWAddr_PLUS_3__q12 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q13 or dp0_tlp_writeDWAddr_PLUS_2__q14)
  begin
    case (idx__h54707)
      2'd0: MUX_dp0_bram_memory_3$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  always@(idx__h58169 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q15 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q16 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q17)
  begin
    case (idx__h58169)
      2'd0:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q16[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q17[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q15[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497[7:0],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497[15:8],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497[23:16],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497[31:24] } ;
  assign MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 &&
	     dp0_tlp_dmaPullRemainDWLen_91_ULE_dp0_tlp_dmaP_ETC___d4940 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 ?
	       dp0_tlp_dmaPullRemainDWLen - dp0_tlp_dmaPullRemainDWSub :
	       dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 ?
	       10'd0 :
	       dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp0_tlp_fabMesgAccu + y__h44199 ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h40921,
	       opcode__h40889,
	       nowMS__h40890,
	       nowLS__h40891 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[152] ?
	       (dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp0_tlp_inF$D_OUT[95:80],
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[79:72],
		    dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMesgAccu[14:2],
	       dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_4 = { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp0_tlp_readReq$D_OUT[59:42],
	       dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h59070,
	       byteCount__h59071,
	       dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h59113 } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp0_tlp_readReq$D_OUT[59:58],
	       dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h64439 } ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp0_tlp_mesgComplReceived + y__h45388 ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp0_tlp_inF$D_OUT[8],
	       dp0_tlp_inF$D_OUT[23:16],
	       dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPull - y__h44128 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_1 = { 25'd25362416, w_data__h38609 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_2 = { 25'd25362416, w_data__h44384 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_3 = { 25'd25296895, w_data__h45698 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_4 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h47551 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_5 =
	     { 1'd0,
	       dp0_tlp_outDwRemain_116_ULE_4___d4601,
	       7'h02,
	       w_be__h33913,
	       dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     dp0_tlp_remMesgAccu + y__h44710 ;
  assign MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 ||
	     !dp0_tlp_dmaPullRemainDWLen_91_ULE_dp0_tlp_dmaP_ETC___d4940 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp0_wci_illegalEdge$write_1__VAL_2 =
	     dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_1 = dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_2 = dp0_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_dp0_wci_ctl_op_complete or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_cfrd or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_ctl_op_complete:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_cfrd:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_cfwr:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	     (dp0_wci_respF_c_r == 2'd1) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_1 :
	       dp0_wci_respF_q_1 ;
  assign MUX_dp0_wci_respF_q_1$write_1__VAL_2 =
	     (dp0_wci_respF_c_r == 2'd2) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h83787 } ;
  assign MUX_dp0_wmi_addr$write_1__VAL_1 = dp0_wmi_addr + 14'd4 ;
  assign MUX_dp0_wmi_bufDwell$write_1__VAL_3 = dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp0_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     { dp0_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp0_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp0_wmi_mesgCount$write_1__VAL_1 = dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h76828,
	       y_avValue__h76848,
	       y_avValue__h76868,
	       y_avValue__h76888 } ;
  assign MUX_dp0_wmi_p4B$write_1__VAL_2 = dp0_wmi_p4B + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp0_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 = { 2'd1, rdata__h76992 } ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     (dp0_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 :
	       dp0_wmi_wmi_respF_q_1 ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_2 =
	     (dp0_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_bml_crdBuf_value$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_957_EQ_dp1_bml_crdBuf_mod_ETC___d5141 ?
	       16'd0 :
	       dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBuf_value$write_1__VAL_3 =
	     dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142 ?
	       16'd0 :
	       dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp1_bml_fabAvail && !dp1_bml_remStart) ?
	       x__h159493 :
	       x__h159498 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? x__h158250 : 16'd0 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_014_PLUS_dp1_bml_fabFlowSi_ETC___d4939 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_957_EQ_dp1_bml_crdBuf_mod_ETC___d5141 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_014_PLUS_dp1_bml_fabFlowSi_ETC___d4939 ;
  assign MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142 ?
	       dp1_bml_fabMesgBase :
	       dp1_bml_fabMesgAddr + dp1_bml_fabMesgSize ;
  assign MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142 ?
	       dp1_bml_fabMetaBase :
	       dp1_bml_fabMetaAddr + dp1_bml_fabMetaSize ;
  assign MUX_dp1_bml_lclBuf_value$write_1__VAL_3 =
	     dp1_bml_lclBuf_value_912_EQ_dp1_bml_lclBuf_mod_ETC___d5157 ?
	       16'd0 :
	       dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052 &&
	      !dp1_bml_lclBufStart) ?
	       x__h159374 :
	       x__h159379 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? dp1_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     dp1_bml_lclBufDone_999_AND_IF_dp1_bml_dpContro_ETC___d5319 ?
	       x__h159451 :
	       x__h159456 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? 16'd0 : dp1_bml_lclNumBufs ;
  assign MUX_dp1_bml_lclCredit$write_1__VAL_1 =
	     (dp1_bml_lclBufDone && !dp1_bml_remStart) ?
	       x__h159531 :
	       x__h159536 ;
  assign MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_912_EQ_dp1_bml_lclBuf_mod_ETC___d5157 ?
	       dp1_bml_mesgBase :
	       dp1_bml_lclMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_912_EQ_dp1_bml_lclBuf_mod_ETC___d5157 ?
	       dp1_bml_metaBase :
	       dp1_bml_lclMetaAddr + dp1_bml_metaSize ;
  assign MUX_dp1_bml_remBuf_value$write_1__VAL_3 =
	     dp1_bml_remBuf_value_927_EQ_dp1_bml_remBuf_mod_ETC___d5158 ?
	       16'd0 :
	       dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_927_EQ_dp1_bml_remBuf_mod_ETC___d5158 ?
	       dp1_bml_mesgBase :
	       dp1_bml_remMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_927_EQ_dp1_bml_remBuf_mod_ETC___d5158 ?
	       dp1_bml_metaBase :
	       dp1_bml_remMetaAddr + dp1_bml_metaSize ;
  always@(idx__h127129 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h127129)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h134192 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h134192)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory$a_put_3__VAL_1 =
	     { dp1_tlp_mReqF$D_OUT[7:0],
	       dp1_tlp_mReqF$D_OUT[15:8],
	       dp1_tlp_mReqF$D_OUT[23:16],
	       dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp1_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499[7:0],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499[15:8],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499[23:16],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499[31:24] } ;
  assign MUX_dp1_bram_memory$b_put_2__VAL_1 =
	     dp1_wmi_lclMesgAddr[14:4] + { 1'd0, dp1_wmi_addr[13:4] } ;
  always@(idx__h129352 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h129352)
      2'd0: MUX_dp1_bram_memory_1$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h134660 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h134660)
      2'd0:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500[7:0],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500[15:8],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500[23:16],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500[31:24] } ;
  always@(idx__h130648 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h130648)
      2'd0: MUX_dp1_bram_memory_2$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h135033 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h135033)
      2'd0:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501[7:0],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501[15:8],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501[23:16],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501[31:24] } ;
  always@(idx__h131944 or
	  dp1_tlp_writeDWAddr_PLUS_3__q20 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q21 or dp1_tlp_writeDWAddr_PLUS_2__q22)
  begin
    case (idx__h131944)
      2'd0: MUX_dp1_bram_memory_3$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q21[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q22[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q20[12:2];
    endcase
  end
  always@(idx__h135406 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q23 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q24 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q25)
  begin
    case (idx__h135406)
      2'd0:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q24[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q25[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q23[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502[7:0],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502[15:8],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502[23:16],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502[31:24] } ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp1_tlp_fabMesgAccu + y__h111033 ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h107328,
	       opcode__h107265,
	       nowMS__h107266,
	       nowLS__h107267 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[152] ?
	       (dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp1_tlp_inF$D_OUT[95:80],
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[79:72],
		    dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h110481[11:2],
	       8'd255,
	       rreq_tag__h110710,
	       3'h2 } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp1_tlp_readReq$D_OUT[59:42],
	       dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h136307,
	       byteCount__h136308,
	       dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h136350 } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp1_tlp_readReq$D_OUT[59:58],
	       dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h141676 } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp1_tlp_mRespF$D_OUT[8],
	       dp1_tlp_mRespF$D_OUT[23:16],
	       dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPush - y__h110521 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h110885 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_2 = { 25'd16973823, w_data__h111864 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_3 = { 25'd8585200, w_data__h112926 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_4 = { 25'd25296895, w_data__h122934 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_5 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h124788 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd0,
	       dp1_tlp_outDwRemain_995_ULE_4___d4606,
	       7'h02,
	       w_be__h111438,
	       dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     dp1_tlp_remMesgAccu + y__h110663 ;
  assign MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp1_tlp_srcMesgAccu + y__h110615 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp1_wci_illegalEdge$write_1__VAL_2 =
	     dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_1 = dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_2 = dp1_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_dp1_wci_ctl_op_complete or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_cfrd or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_ctl_op_complete:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_cfrd:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_cfwr:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	     (dp1_wci_respF_c_r == 2'd1) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_1 :
	       dp1_wci_respF_q_1 ;
  assign MUX_dp1_wci_respF_q_1$write_1__VAL_2 =
	     (dp1_wci_respF_c_r == 2'd2) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h161019 } ;
  assign MUX_dp1_wmi_addr$write_1__VAL_1 = dp1_wmi_addr + 14'd4 ;
  assign MUX_dp1_wmi_bufDwell$write_1__VAL_3 = dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp1_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 =
	     { dp1_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp1_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp1_wmi_mesgCount$write_1__VAL_1 = dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h154065,
	       y_avValue__h154085,
	       y_avValue__h154105,
	       y_avValue__h154125 } ;
  assign MUX_dp1_wmi_p4B$write_1__VAL_2 = dp1_wmi_p4B + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp1_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 = { 2'd1, rdata__h154229 } ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     (dp1_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 :
	       dp1_wmi_wmi_respF_q_1 ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_2 =
	     (dp1_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_pciw_outFifo$enq_1__VAL_1 =
	     (pciw_uI2PF$D_OUT[135:128] == 8'd0) ?
	       { pciw_uI2PF$D_OUT[152:136], pciw_uI2PF$D_OUT[127:64] } :
	       { pciw_uI2PF$D_OUT[152],
		 1'd0,
		 pciw_uI2PF$D_OUT[150:136],
		 pciw_uI2PF$D_OUT[127:64] } ;
  assign MUX_pciw_rg$write_1__VAL_1 = { 1'd1, pciw_inFifo$D_OUT } ;
  assign MUX_pciw_rg_1$write_1__VAL_1 =
	     { 2'd2,
	       pciw_uI2PF$D_OUT[151:144],
	       pciw_uI2PF$D_OUT[135:128],
	       pciw_uI2PF$D_OUT[63:0] } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_1 =
	     { pciw_inFifo$D_OUT[80:72], x_be__h3072, x_data__h3073 } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_2 =
	     { pciw_rg[80],
	       pciw_inFifo$D_OUT[79],
	       pciw_rg[78:72],
	       wOut_be__h3151,
	       wOut_data__h3152 } ;

  // inlined wires
  assign pciw_pci0_wTrnTxSof$wget = !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_wTrnTxSof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxEof$wget = !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_wTrnTxEof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDsc$wget = 1'd1 ;
  assign pciw_pci0_wTrnTxDsc$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxRem$wget = pciw_outFifo$D_OUT[71:64] ;
  assign pciw_pci0_wTrnTxRem$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDat$wget = pciw_outFifo$D_OUT[63:0] ;
  assign pciw_pci0_wTrnTxDat$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnRxNpOk$wget = 1'd0 ;
  assign pciw_pci0_wTrnRxNpOk$whas = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$wget = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptRdyN$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign dp0_bram_serverAdapterA_outData_enqData$wget = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_enqData$whas =
	     (!dp0_bram_serverAdapterA_s1[0] ||
	      dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_s1[1] &&
	     dp0_bram_serverAdapterA_s1[0] ;
  assign dp0_bram_serverAdapterA_outData_outData$wget =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_outData$whas =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_cnt_1$whas =
	     (MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	      MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	      MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) &&
	     (!ab__h9780[1] || ab__h9780[0]) ;
  assign dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_2$whas =
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_writeWithResp$wget = ab__h9780 ;
  assign dp0_bram_serverAdapterA_writeWithResp$whas =
	     MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h9780[1] || ab__h9780[0] } ;
  assign dp0_bram_serverAdapterA_s1_1$whas =
	     dp0_bram_serverAdapterA_writeWithResp$whas ;
  assign dp0_bram_serverAdapterB_outData_enqData$wget = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_enqData$whas =
	     (!dp0_bram_serverAdapterB_s1[0] ||
	      dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_s1[1] &&
	     dp0_bram_serverAdapterB_s1[0] ;
  assign dp0_bram_serverAdapterB_outData_outData$wget = y_avValue__h76828 ;
  assign dp0_bram_serverAdapterB_outData_outData$whas =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_cnt_1$whas =
	     (MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	      MUX_dp0_bram_memory$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) &&
	     (!ab__h11179[1] || ab__h11179[0]) ;
  assign dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_2$whas =
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_writeWithResp$wget = ab__h11179 ;
  assign dp0_bram_serverAdapterB_writeWithResp$whas =
	     MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h11179[1] || ab__h11179[0] } ;
  assign dp0_bram_serverAdapterB_s1_1$whas =
	     dp0_bram_serverAdapterB_writeWithResp$whas ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     (!dp0_bram_serverAdapterA_1_s1[0] ||
	      dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_1_s1[1] &&
	     dp0_bram_serverAdapterA_1_s1[0] ;
  assign dp0_bram_serverAdapterA_1_outData_outData$wget =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_outData$whas =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_1_cnt_1$whas =
	     (MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	      MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) &&
	     (!ab__h12709[1] || ab__h12709[0]) ;
  assign dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_1_cnt_2$whas =
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$wget = ab__h12709 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h12709[1] || ab__h12709[0] } ;
  assign dp0_bram_serverAdapterA_1_s1_1$whas =
	     dp0_bram_serverAdapterA_1_writeWithResp$whas ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     (!dp0_bram_serverAdapterB_1_s1[0] ||
	      dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_1_s1[1] &&
	     dp0_bram_serverAdapterB_1_s1[0] ;
  assign dp0_bram_serverAdapterB_1_outData_outData$wget = y_avValue__h76848 ;
  assign dp0_bram_serverAdapterB_1_outData_outData$whas =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_1_cnt_1$whas =
	     (MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_1$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) &&
	     (!ab__h14106[1] || ab__h14106[0]) ;
  assign dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_1_cnt_2$whas =
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$wget = ab__h14106 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h14106[1] || ab__h14106[0] } ;
  assign dp0_bram_serverAdapterB_1_s1_1$whas =
	     dp0_bram_serverAdapterB_1_writeWithResp$whas ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     (!dp0_bram_serverAdapterA_2_s1[0] ||
	      dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_2_s1[1] &&
	     dp0_bram_serverAdapterA_2_s1[0] ;
  assign dp0_bram_serverAdapterA_2_outData_outData$wget =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_outData$whas =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_2_cnt_1$whas =
	     (MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	      MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) &&
	     (!ab__h15636[1] || ab__h15636[0]) ;
  assign dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_2$whas =
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$wget = ab__h15636 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h15636[1] || ab__h15636[0] } ;
  assign dp0_bram_serverAdapterA_2_s1_1$whas =
	     dp0_bram_serverAdapterA_2_writeWithResp$whas ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     (!dp0_bram_serverAdapterB_2_s1[0] ||
	      dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_2_s1[1] &&
	     dp0_bram_serverAdapterB_2_s1[0] ;
  assign dp0_bram_serverAdapterB_2_outData_outData$wget = y_avValue__h76868 ;
  assign dp0_bram_serverAdapterB_2_outData_outData$whas =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_2_cnt_1$whas =
	     (MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_2$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) &&
	     (!ab__h17033[1] || ab__h17033[0]) ;
  assign dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_2_cnt_2$whas =
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$wget = ab__h17033 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h17033[1] || ab__h17033[0] } ;
  assign dp0_bram_serverAdapterB_2_s1_1$whas =
	     dp0_bram_serverAdapterB_2_writeWithResp$whas ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     (!dp0_bram_serverAdapterA_3_s1[0] ||
	      dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_3_s1[1] &&
	     dp0_bram_serverAdapterA_3_s1[0] ;
  assign dp0_bram_serverAdapterA_3_outData_outData$wget =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_outData$whas =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_3_cnt_1$whas =
	     (MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      MUX_dp0_bram_memory_3$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) &&
	     (!ab__h18563[1] || ab__h18563[0]) ;
  assign dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_3_cnt_2$whas =
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$wget = ab__h18563 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h18563[1] || ab__h18563[0] } ;
  assign dp0_bram_serverAdapterA_3_s1_1$whas =
	     dp0_bram_serverAdapterA_3_writeWithResp$whas ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     (!dp0_bram_serverAdapterB_3_s1[0] ||
	      dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_3_s1[1] &&
	     dp0_bram_serverAdapterB_3_s1[0] ;
  assign dp0_bram_serverAdapterB_3_outData_outData$wget = y_avValue__h76888 ;
  assign dp0_bram_serverAdapterB_3_outData_outData$whas =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_3_cnt_1$whas =
	     (MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      MUX_dp0_bram_memory_3$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) &&
	     (!ab__h19960[1] || ab__h19960[0]) ;
  assign dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_2$whas =
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$wget = ab__h19960 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h19960[1] || ab__h19960[0] } ;
  assign dp0_bram_serverAdapterB_3_s1_1$whas =
	     dp0_bram_serverAdapterB_3_writeWithResp$whas ;
  assign dp0_wci_wciReq$wget =
	     { cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_13_MAddrSpace,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_13_MAddr,
	       cp$wci_Vm_13_MData } ;
  assign dp0_wci_wciReq$whas = 1'd1 ;
  assign dp0_wci_respF_x_wire$wget = MUX_dp0_wci_respF_q_0$write_1__VAL_1 ;
  assign dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_cfrd ||
	     WILL_FIRE_RL_dp0_wci_cfwr ;
  assign dp0_wci_wEdge$wget = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_wEdge$whas = WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp0_wci_ctlAckReg_1$whas =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd2 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd3 ||
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd0 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd0 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_wti_wtiReq$wget = 67'h0 ;
  assign dp0_wti_wtiReq$whas = 1'b0 ;
  assign dp0_tlp_remStart_1$wget = 1'd1 ;
  assign dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;
  assign dp0_tlp_remDone_1$wget = 1'd1 ;
  assign dp0_tlp_remDone_1$whas = WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_nearBufReady_1$whas =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsCF != 16'd0 ;
  assign dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_farBufReady_1$whas =
	     dp0_wci_cState == 3'd2 && dp0_bml_fabBufsAvail != 16'd0 ;
  assign dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign dp0_tlp_creditReady_1$whas =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclCredit != 16'd0 ;
  assign dp0_tlp_dpControl$wget = dp0_dpControl ;
  assign dp0_tlp_dpControl$whas = 1'd1 ;
  assign dp0_tlp_pullTagMatch_1$wget =
	     tagm__h44504 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__76_BITS_63_TO_56_79_EQ_pciD_ETC___d888 ;
  assign dp0_tlp_pullTagMatch_1$whas =
	     dp0_tlp_inF$EMPTY_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign dp0_wmi_wmi_wmiReq$wget =
	     { appW2$wmiM0_MCmd,
	       appW2$wmiM0_MReqLast,
	       appW2$wmiM0_MReqInfo,
	       appW2$wmiM0_MAddrSpace,
	       appW2$wmiM0_MAddr,
	       appW2$wmiM0_MBurstLength } ;
  assign dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiMFlag$wget = appW2$wmiM0_MFlag ;
  assign dp0_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiDh$wget =
	     { appW2$wmiM0_MDataValid,
	       appW2$wmiM0_MDataLast,
	       appW2$wmiM0_MData,
	       appW2$wmiM0_MDataByteEn } ;
  assign dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp0_wmi_wmi_respF_x_wire$wget =
	     MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 ;
  assign dp0_wmi_wmi_respF_x_wire$whas = WILL_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_operateD_1$whas = dp0_wci_cState == 3'd2 ;
  assign dp0_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_peerIsReady_1$whas = appW2$wmiM0_MReset_n ;
  assign dp0_wmi_wmi_sThreadBusy_dw$wget = dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sThreadBusy_dw$whas =
	     dp0_wmi_wmi_reqF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     dp0_wmi_wmi_dhF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady ;
  assign dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp0_wmi_getRequest && !dp0_wmi_mesgBusy ;
  assign dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp0_wmi_mesgBufReady_1$whas =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsAR != 16'd0 ;
  assign dp0_wmi_dpControl$wget = dp0_dpControl ;
  assign dp0_wmi_dpControl$whas = 1'd1 ;
  assign dp0_wmi_nowW$wget = dp0_wti_nowReq[63:0] ;
  assign dp0_wmi_nowW$whas = 1'd1 ;
  assign dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp0_bml_lclBufStart_1$whas = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp0_bml_lclBufDone_1$whas = dp0_wmi_mesgDone ;
  assign dp0_bml_remStart_1$wget = 1'd1 ;
  assign dp0_bml_remStart_1$whas = dp0_tlp_remStart ;
  assign dp0_bml_remDone_1$wget = 1'd1 ;
  assign dp0_bml_remDone_1$whas = dp0_tlp_remDone ;
  assign dp0_bml_fabDone_1$wget = 1'd1 ;
  assign dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] != 2'd1 ;
  assign dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign dp0_bml_dpControl$wget = dp0_dpControl ;
  assign dp0_bml_dpControl$whas = 1'd1 ;
  assign dp0_wci_Es_mCmd_w$wget = cp$wci_Vm_13_MCmd ;
  assign dp0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_13_MAddrSpace ;
  assign dp0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddr_w$wget = cp$wci_Vm_13_MAddr ;
  assign dp0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wci_Es_mData_w$wget = cp$wci_Vm_13_MData ;
  assign dp0_wci_Es_mData_w$whas = 1'd1 ;
  assign dp0_wci_Es_mByteEn_w$wget = cp$wci_Vm_13_MByteEn ;
  assign dp0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mCmd_w$wget = appW2$wmiM0_MCmd ;
  assign dp0_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mReqInfo_w$wget = appW2$wmiM0_MReqInfo ;
  assign dp0_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mAddrSpace_w$wget = appW2$wmiM0_MAddrSpace ;
  assign dp0_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mAddr_w$wget = appW2$wmiM0_MAddr ;
  assign dp0_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mBurstLength_w$wget = appW2$wmiM0_MBurstLength ;
  assign dp0_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mData_w$wget = appW2$wmiM0_MData ;
  assign dp0_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mDataByteEn_w$wget = appW2$wmiM0_MDataByteEn ;
  assign dp0_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign dp1_bram_serverAdapterA_outData_enqData$wget = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_enqData$whas =
	     (!dp1_bram_serverAdapterA_s1[0] ||
	      dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_s1[1] &&
	     dp1_bram_serverAdapterA_s1[0] ;
  assign dp1_bram_serverAdapterA_outData_outData$wget =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_outData$whas =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_cnt_1$whas =
	     (MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	      MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	      MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) &&
	     (!ab__h87118[1] || ab__h87118[0]) ;
  assign dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_2$whas =
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_writeWithResp$wget = ab__h87118 ;
  assign dp1_bram_serverAdapterA_writeWithResp$whas =
	     MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h87118[1] || ab__h87118[0] } ;
  assign dp1_bram_serverAdapterA_s1_1$whas =
	     dp1_bram_serverAdapterA_writeWithResp$whas ;
  assign dp1_bram_serverAdapterB_outData_enqData$wget = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_enqData$whas =
	     (!dp1_bram_serverAdapterB_s1[0] ||
	      dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_s1[1] &&
	     dp1_bram_serverAdapterB_s1[0] ;
  assign dp1_bram_serverAdapterB_outData_outData$wget = y_avValue__h154065 ;
  assign dp1_bram_serverAdapterB_outData_outData$whas =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_cnt_1$whas =
	     (MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	      MUX_dp1_bram_memory$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) &&
	     (!ab__h88517[1] || ab__h88517[0]) ;
  assign dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_2$whas =
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_writeWithResp$wget = ab__h88517 ;
  assign dp1_bram_serverAdapterB_writeWithResp$whas =
	     MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h88517[1] || ab__h88517[0] } ;
  assign dp1_bram_serverAdapterB_s1_1$whas =
	     dp1_bram_serverAdapterB_writeWithResp$whas ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     (!dp1_bram_serverAdapterA_1_s1[0] ||
	      dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_1_s1[1] &&
	     dp1_bram_serverAdapterA_1_s1[0] ;
  assign dp1_bram_serverAdapterA_1_outData_outData$wget =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_outData$whas =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_1_cnt_1$whas =
	     (MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	      MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) &&
	     (!ab__h90047[1] || ab__h90047[0]) ;
  assign dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_1_cnt_2$whas =
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$wget = ab__h90047 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h90047[1] || ab__h90047[0] } ;
  assign dp1_bram_serverAdapterA_1_s1_1$whas =
	     dp1_bram_serverAdapterA_1_writeWithResp$whas ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     (!dp1_bram_serverAdapterB_1_s1[0] ||
	      dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_1_s1[1] &&
	     dp1_bram_serverAdapterB_1_s1[0] ;
  assign dp1_bram_serverAdapterB_1_outData_outData$wget = y_avValue__h154085 ;
  assign dp1_bram_serverAdapterB_1_outData_outData$whas =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_1_cnt_1$whas =
	     (MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_1$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) &&
	     (!ab__h91444[1] || ab__h91444[0]) ;
  assign dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_1_cnt_2$whas =
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$wget = ab__h91444 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h91444[1] || ab__h91444[0] } ;
  assign dp1_bram_serverAdapterB_1_s1_1$whas =
	     dp1_bram_serverAdapterB_1_writeWithResp$whas ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     (!dp1_bram_serverAdapterA_2_s1[0] ||
	      dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_2_s1[1] &&
	     dp1_bram_serverAdapterA_2_s1[0] ;
  assign dp1_bram_serverAdapterA_2_outData_outData$wget =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_outData$whas =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_2_cnt_1$whas =
	     (MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	      MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) &&
	     (!ab__h92974[1] || ab__h92974[0]) ;
  assign dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_2$whas =
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$wget = ab__h92974 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h92974[1] || ab__h92974[0] } ;
  assign dp1_bram_serverAdapterA_2_s1_1$whas =
	     dp1_bram_serverAdapterA_2_writeWithResp$whas ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     (!dp1_bram_serverAdapterB_2_s1[0] ||
	      dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_2_s1[1] &&
	     dp1_bram_serverAdapterB_2_s1[0] ;
  assign dp1_bram_serverAdapterB_2_outData_outData$wget = y_avValue__h154105 ;
  assign dp1_bram_serverAdapterB_2_outData_outData$whas =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_2_cnt_1$whas =
	     (MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_2$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) &&
	     (!ab__h94371[1] || ab__h94371[0]) ;
  assign dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_2_cnt_2$whas =
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$wget = ab__h94371 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h94371[1] || ab__h94371[0] } ;
  assign dp1_bram_serverAdapterB_2_s1_1$whas =
	     dp1_bram_serverAdapterB_2_writeWithResp$whas ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     (!dp1_bram_serverAdapterA_3_s1[0] ||
	      dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_3_s1[1] &&
	     dp1_bram_serverAdapterA_3_s1[0] ;
  assign dp1_bram_serverAdapterA_3_outData_outData$wget =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_outData$whas =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_3_cnt_1$whas =
	     (MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      MUX_dp1_bram_memory_3$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) &&
	     (!ab__h95901[1] || ab__h95901[0]) ;
  assign dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_3_cnt_2$whas =
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$wget = ab__h95901 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h95901[1] || ab__h95901[0] } ;
  assign dp1_bram_serverAdapterA_3_s1_1$whas =
	     dp1_bram_serverAdapterA_3_writeWithResp$whas ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     (!dp1_bram_serverAdapterB_3_s1[0] ||
	      dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_3_s1[1] &&
	     dp1_bram_serverAdapterB_3_s1[0] ;
  assign dp1_bram_serverAdapterB_3_outData_outData$wget = y_avValue__h154125 ;
  assign dp1_bram_serverAdapterB_3_outData_outData$whas =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_3_cnt_1$whas =
	     (MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      MUX_dp1_bram_memory_3$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) &&
	     (!ab__h97298[1] || ab__h97298[0]) ;
  assign dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_2$whas =
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$wget = ab__h97298 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h97298[1] || ab__h97298[0] } ;
  assign dp1_bram_serverAdapterB_3_s1_1$whas =
	     dp1_bram_serverAdapterB_3_writeWithResp$whas ;
  assign dp1_wci_wciReq$wget =
	     { cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_14_MAddrSpace,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_14_MAddr,
	       cp$wci_Vm_14_MData } ;
  assign dp1_wci_wciReq$whas = 1'd1 ;
  assign dp1_wci_respF_x_wire$wget = MUX_dp1_wci_respF_q_0$write_1__VAL_1 ;
  assign dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_cfrd ||
	     WILL_FIRE_RL_dp1_wci_cfwr ;
  assign dp1_wci_wEdge$wget = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_wEdge$whas = WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp1_wci_ctlAckReg_1$whas =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd2 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd3 ||
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd0 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd0 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_wti_wtiReq$wget = 67'h0 ;
  assign dp1_wti_wtiReq$whas = 1'b0 ;
  assign dp1_tlp_remStart_1$wget = 1'd1 ;
  assign dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;
  assign dp1_tlp_remDone_1$wget = 1'd1 ;
  assign dp1_tlp_remDone_1$whas = WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_nearBufReady_1$whas =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsCF != 16'd0 ;
  assign dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_farBufReady_1$whas =
	     dp1_wci_cState == 3'd2 && dp1_bml_fabBufsAvail != 16'd0 ;
  assign dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign dp1_tlp_creditReady_1$whas =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclCredit != 16'd0 ;
  assign dp1_tlp_dpControl$wget = dp1_dpControl ;
  assign dp1_tlp_dpControl$whas = 1'd1 ;
  assign dp1_tlp_pullTagMatch_1$wget = 1'b0 ;
  assign dp1_tlp_pullTagMatch_1$whas = 1'b0 ;
  assign dp1_wmi_wmi_wmiReq$wget =
	     { appW4$wmiM0_MCmd,
	       appW4$wmiM0_MReqLast,
	       appW4$wmiM0_MReqInfo,
	       appW4$wmiM0_MAddrSpace,
	       appW4$wmiM0_MAddr,
	       appW4$wmiM0_MBurstLength } ;
  assign dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiMFlag$wget = appW4$wmiM0_MFlag ;
  assign dp1_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiDh$wget =
	     { appW4$wmiM0_MDataValid,
	       appW4$wmiM0_MDataLast,
	       appW4$wmiM0_MData,
	       appW4$wmiM0_MDataByteEn } ;
  assign dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp1_wmi_wmi_respF_x_wire$wget =
	     MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 ;
  assign dp1_wmi_wmi_respF_x_wire$whas = WILL_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_operateD_1$whas = dp1_wci_cState == 3'd2 ;
  assign dp1_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_peerIsReady_1$whas = appW4$wmiM0_MReset_n ;
  assign dp1_wmi_wmi_sThreadBusy_dw$wget = dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$whas =
	     dp1_wmi_wmi_reqF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     dp1_wmi_wmi_dhF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady ;
  assign dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp1_wmi_getRequest && !dp1_wmi_mesgBusy ;
  assign dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp1_wmi_mesgBufReady_1$whas =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsAR != 16'd0 ;
  assign dp1_wmi_dpControl$wget = dp1_dpControl ;
  assign dp1_wmi_dpControl$whas = 1'd1 ;
  assign dp1_wmi_nowW$wget = dp1_wti_nowReq[63:0] ;
  assign dp1_wmi_nowW$whas = 1'd1 ;
  assign dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp1_bml_lclBufStart_1$whas = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp1_bml_lclBufDone_1$whas = dp1_wmi_mesgDone ;
  assign dp1_bml_remStart_1$wget = 1'd1 ;
  assign dp1_bml_remStart_1$whas = dp1_tlp_remStart ;
  assign dp1_bml_remDone_1$wget = 1'd1 ;
  assign dp1_bml_remDone_1$whas = dp1_tlp_remDone ;
  assign dp1_bml_fabDone_1$wget = 1'd1 ;
  assign dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] != 2'd1 ;
  assign dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign dp1_bml_dpControl$wget = dp1_dpControl ;
  assign dp1_bml_dpControl$whas = 1'd1 ;
  assign dp1_wci_Es_mCmd_w$wget = cp$wci_Vm_14_MCmd ;
  assign dp1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_14_MAddrSpace ;
  assign dp1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddr_w$wget = cp$wci_Vm_14_MAddr ;
  assign dp1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wci_Es_mData_w$wget = cp$wci_Vm_14_MData ;
  assign dp1_wci_Es_mData_w$whas = 1'd1 ;
  assign dp1_wci_Es_mByteEn_w$wget = cp$wci_Vm_14_MByteEn ;
  assign dp1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mCmd_w$wget = appW4$wmiM0_MCmd ;
  assign dp1_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mReqInfo_w$wget = appW4$wmiM0_MReqInfo ;
  assign dp1_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddrSpace_w$wget = appW4$wmiM0_MAddrSpace ;
  assign dp1_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddr_w$wget = appW4$wmiM0_MAddr ;
  assign dp1_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mBurstLength_w$wget = appW4$wmiM0_MBurstLength ;
  assign dp1_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mData_w$wget = appW4$wmiM0_MData ;
  assign dp1_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mDataByteEn_w$wget = appW4$wmiM0_MDataByteEn ;
  assign dp1_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign a4lm_wrAddrRdy_w$wget = 1'd1 ;
  assign a4lm_wrAddrRdy_w$whas = axi4m_AWREADY ;
  assign a4lm_wrDataRdy_w$wget = 1'd1 ;
  assign a4lm_wrDataRdy_w$whas = axi4m_WREADY ;
  assign a4lm_wrRespVal_w$wget = 1'd1 ;
  assign a4lm_wrRespVal_w$whas = axi4m_BVALID ;
  assign a4lm_rdAddrRdy_w$wget = 1'd1 ;
  assign a4lm_rdAddrRdy_w$whas = axi4m_ARREADY ;
  assign a4lm_rdRespVal_w$wget = 1'd1 ;
  assign a4lm_rdRespVal_w$whas = axi4m_RVALID ;
  assign a4lm_wrResp_w$wget = axi4m_BRESP ;
  assign a4lm_wrResp_w$whas = 1'd1 ;
  assign a4lm_rdData_w$wget = axi4m_RDATA ;
  assign a4lm_rdData_w$whas = 1'd1 ;
  assign a4lm_rdResp_w$wget = axi4m_RRESP ;
  assign a4lm_rdResp_w$whas = 1'd1 ;
  assign pciw_pci0_pwTrnTx$whas =
	     WILL_FIRE_RL_pciw_connect_1 &&
	     pciw_outFifo$D_OUT[71:64] != 8'd0 ;
  assign pciw_pci0_pwTrnRx$whas =
	     !pciw_pci0_pcie_ep$trn_rsrc_rdy_n && pciw_inFifo$FULL_N ;
  assign dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wci_reqF_r_enq$whas = dp0_wci_wciReq$wget[71:69] != 3'd0 ;
  assign dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_respF_dequeueing$whas = dp0_wci_respF_c_r != 2'd0 ;
  assign dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp0_wci_wci_cfwr_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[68] &&
	     dp0_wci_reqF$D_OUT[71:69] == 3'd1 ;
  assign dp0_wci_wci_cfrd_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[68] &&
	     dp0_wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign dp0_wci_wci_ctrl_pw$whas =
	     dp0_wci_reqF$EMPTY_N && !dp0_wci_reqF$D_OUT[68] &&
	     dp0_wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp0_dpControl[3:2] != 2'd1 && !dp0_wmi_mesgMeta[128] ||
	     dp0_dpControl[3:2] == 2'd1 && !dp0_wmi_mesgBufReady ;
  assign dp0_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_enqueueing$whas = WILL_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_respF_dequeueing$whas = dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp0_bml_lclBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_lclAdvance ;
  assign dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_fabBuf_incAction$whas =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_crdBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_crdAdvance ;
  assign dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp0_wmi_Es_mReqLast_w$whas = appW2$wmiM0_MReqLast ;
  assign dp0_wmi_Es_mDataValid_w$whas = appW2$wmiM0_MDataValid ;
  assign dp0_wmi_Es_mDataLast_w$whas = appW2$wmiM0_MDataLast ;
  assign dp0_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wci_reqF_r_enq$whas = dp1_wci_wciReq$wget[71:69] != 3'd0 ;
  assign dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_respF_dequeueing$whas = dp1_wci_respF_c_r != 2'd0 ;
  assign dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp1_wci_wci_cfwr_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[68] &&
	     dp1_wci_reqF$D_OUT[71:69] == 3'd1 ;
  assign dp1_wci_wci_cfrd_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[68] &&
	     dp1_wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign dp1_wci_wci_ctrl_pw$whas =
	     dp1_wci_reqF$EMPTY_N && !dp1_wci_reqF$D_OUT[68] &&
	     dp1_wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp1_dpControl[3:2] != 2'd1 && !dp1_wmi_mesgMeta[128] ||
	     dp1_dpControl[3:2] == 2'd1 && !dp1_wmi_mesgBufReady ;
  assign dp1_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_enqueueing$whas = WILL_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_respF_dequeueing$whas = dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp1_bml_lclBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_lclAdvance ;
  assign dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_fabBuf_incAction$whas =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_crdBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_crdAdvance ;
  assign dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp1_wmi_Es_mReqLast_w$whas = appW4$wmiM0_MReqLast ;
  assign dp1_wmi_Es_mDataValid_w$whas = appW4$wmiM0_MDataValid ;
  assign dp1_wmi_Es_mDataLast_w$whas = appW4$wmiM0_MDataLast ;
  assign dp1_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign dp0_bml_lclBuf_modulus_bw$wget = dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_modulus_bw$wget = dp0_bml_remBuf_modulus ;
  assign dp0_bml_fabBuf_modulus_bw$wget = dp0_bml_fabBuf_modulus ;
  assign dp0_bml_crdBuf_modulus_bw$wget = dp0_bml_crdBuf_modulus ;
  assign dp1_bml_lclBuf_modulus_bw$wget = dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_modulus_bw$wget = dp1_bml_remBuf_modulus ;
  assign dp1_bml_fabBuf_modulus_bw$wget = dp1_bml_fabBuf_modulus ;
  assign dp1_bml_crdBuf_modulus_bw$wget = dp1_bml_crdBuf_modulus ;

  // register dp0_bml_crdBuf_modulus
  assign dp0_bml_crdBuf_modulus$D_IN = dp0_bml_lclNumBufs - 16'd1 ;
  assign dp0_bml_crdBuf_modulus$EN = WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_crdBuf_value
  assign dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp0_bml_crdBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabAvail
  assign dp0_bml_fabAvail$D_IN = dp0_bml_fabAvail_1$whas ;
  assign dp0_bml_fabAvail$EN = 1'd1 ;

  // register dp0_bml_fabBuf_modulus
  assign dp0_bml_fabBuf_modulus$D_IN = dp0_bml_fabNumBufs - 16'd1 ;
  assign dp0_bml_fabBuf_modulus$EN = WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBuf_value
  assign dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp0_bml_fabBuf_value$EN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBufsAvail
  assign dp0_bml_fabBufsAvail$D_IN =
	     MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabDone
  assign dp0_bml_fabDone$D_IN = dp0_bml_fabDone_1$whas ;
  assign dp0_bml_fabDone$EN = 1'd1 ;

  // register dp0_bml_fabFlowAddr
  always@(MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_bml_initAccumulators or
	  dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_dp0_bml_crdAdvance or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp0_bml_initAccumulators:
	  dp0_bml_fabFlowAddr$D_IN = dp0_bml_fabFlowBase;
      WILL_FIRE_RL_dp0_bml_crdAdvance:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // register dp0_bml_fabFlowBase
  assign dp0_bml_fabFlowBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp0_bml_fabFlowSize
  assign dp0_bml_fabFlowSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp0_bml_fabMesgAddr
  assign dp0_bml_fabMesgAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       dp0_bml_fabMesgBase ;
  assign dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMesgBase
  assign dp0_bml_fabMesgBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp0_bml_fabMesgSize
  assign dp0_bml_fabMesgSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp0_bml_fabMetaAddr
  assign dp0_bml_fabMetaAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       dp0_bml_fabMetaBase ;
  assign dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMetaBase
  assign dp0_bml_fabMetaBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp0_bml_fabMetaSize
  assign dp0_bml_fabMetaSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp0_bml_fabNumBufs
  assign dp0_bml_fabNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp0_bml_lclBufDone
  assign dp0_bml_lclBufDone$D_IN = dp0_wmi_mesgDone ;
  assign dp0_bml_lclBufDone$EN = 1'd1 ;

  // register dp0_bml_lclBufStart
  assign dp0_bml_lclBufStart$D_IN = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufStart$EN = 1'd1 ;

  // register dp0_bml_lclBuf_modulus
  assign dp0_bml_lclBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_lclBuf_modulus$EN = WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBuf_value
  assign dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp0_bml_lclBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_lclAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsAR
  assign dp0_bml_lclBufsAR$D_IN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp0_bml_lclBufsAR$EN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsCF
  assign dp0_bml_lclBufsCF$D_IN =
	     MUX_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp0_bml_lclBufsCF$EN =
	     dp0_wci_cState == 3'd2 &&
	     (dp0_bml_lclBufDone_968_AND_IF_dp0_bml_dpContro_ETC___d5288 ||
	      NOT_dp0_bml_lclBufDone_968_035_AND_IF_dp0_bml__ETC___d2048) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclCredit
  assign dp0_bml_lclCredit$D_IN =
	     MUX_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclDones
  assign dp0_bml_lclDones$D_IN = dp0_bml_lclDones + 16'd1 ;
  assign dp0_bml_lclDones$EN = WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclMesgAddr
  assign dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclMetaAddr
  assign dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclNumBufs
  assign dp0_bml_lclNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp0_bml_lclStarts
  assign dp0_bml_lclStarts$D_IN = dp0_bml_lclStarts + 16'd1 ;
  assign dp0_bml_lclStarts$EN =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufStart ;

  // register dp0_bml_mesgBase
  assign dp0_bml_mesgBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp0_bml_mesgSize
  assign dp0_bml_mesgSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp0_bml_metaBase
  assign dp0_bml_metaBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp0_bml_metaSize
  assign dp0_bml_metaSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp0_bml_remBuf_modulus
  assign dp0_bml_remBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_remBuf_modulus$EN = WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remBuf_value
  assign dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_remBuf_value$write_1__VAL_3 ;
  assign dp0_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remDone
  assign dp0_bml_remDone$D_IN = dp0_tlp_remDone ;
  assign dp0_bml_remDone$EN = 1'd1 ;

  // register dp0_bml_remDones
  assign dp0_bml_remDones$D_IN = dp0_bml_remDones + 16'd1 ;
  assign dp0_bml_remDones$EN = CAN_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMesgAddr
  assign dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMetaAddr
  assign dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remStart
  assign dp0_bml_remStart$D_IN = dp0_tlp_remStart ;
  assign dp0_bml_remStart$EN = 1'd1 ;

  // register dp0_bml_remStarts
  assign dp0_bml_remStarts$D_IN = dp0_bml_remStarts + 16'd1 ;
  assign dp0_bml_remStarts$EN = dp0_wci_cState == 3'd2 && dp0_bml_remStart ;

  // register dp0_bram_serverAdapterA_1_cnt
  assign dp0_bram_serverAdapterA_1_cnt$D_IN =
	     dp0_bram_serverAdapterA_1_cnt_24_PLUS_IF_dp0_b_ETC___d330 ;
  assign dp0_bram_serverAdapterA_1_cnt$EN =
	     dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterA_1_s1
  assign dp0_bram_serverAdapterA_1_s1$D_IN =
	     { dp0_bram_serverAdapterA_1_writeWithResp$whas &&
	       dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_2_cnt
  assign dp0_bram_serverAdapterA_2_cnt$D_IN =
	     dp0_bram_serverAdapterA_2_cnt_42_PLUS_IF_dp0_b_ETC___d448 ;
  assign dp0_bram_serverAdapterA_2_cnt$EN =
	     dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterA_2_s1
  assign dp0_bram_serverAdapterA_2_s1$D_IN =
	     { dp0_bram_serverAdapterA_2_writeWithResp$whas &&
	       dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_3_cnt
  assign dp0_bram_serverAdapterA_3_cnt$D_IN =
	     dp0_bram_serverAdapterA_3_cnt_60_PLUS_IF_dp0_b_ETC___d566 ;
  assign dp0_bram_serverAdapterA_3_cnt$EN =
	     dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterA_3_s1
  assign dp0_bram_serverAdapterA_3_s1$D_IN =
	     { dp0_bram_serverAdapterA_3_writeWithResp$whas &&
	       dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_cnt
  assign dp0_bram_serverAdapterA_cnt$D_IN =
	     dp0_bram_serverAdapterA_cnt_06_PLUS_IF_dp0_bra_ETC___d212 ;
  assign dp0_bram_serverAdapterA_cnt$EN =
	     dp0_bram_serverAdapterA_cnt_1$whas ||
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterA_s1
  assign dp0_bram_serverAdapterA_s1$D_IN =
	     { dp0_bram_serverAdapterA_writeWithResp$whas &&
	       dp0_bram_serverAdapterA_s1_1$wget[1],
	       dp0_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_1_cnt
  assign dp0_bram_serverAdapterB_1_cnt$D_IN =
	     dp0_bram_serverAdapterB_1_cnt_83_PLUS_IF_dp0_b_ETC___d389 ;
  assign dp0_bram_serverAdapterB_1_cnt$EN =
	     dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterB_1_s1
  assign dp0_bram_serverAdapterB_1_s1$D_IN =
	     { dp0_bram_serverAdapterB_1_writeWithResp$whas &&
	       dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_2_cnt
  assign dp0_bram_serverAdapterB_2_cnt$D_IN =
	     dp0_bram_serverAdapterB_2_cnt_01_PLUS_IF_dp0_b_ETC___d507 ;
  assign dp0_bram_serverAdapterB_2_cnt$EN =
	     dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterB_2_s1
  assign dp0_bram_serverAdapterB_2_s1$D_IN =
	     { dp0_bram_serverAdapterB_2_writeWithResp$whas &&
	       dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_3_cnt
  assign dp0_bram_serverAdapterB_3_cnt$D_IN =
	     dp0_bram_serverAdapterB_3_cnt_19_PLUS_IF_dp0_b_ETC___d625 ;
  assign dp0_bram_serverAdapterB_3_cnt$EN =
	     dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterB_3_s1
  assign dp0_bram_serverAdapterB_3_s1$D_IN =
	     { dp0_bram_serverAdapterB_3_writeWithResp$whas &&
	       dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_cnt
  assign dp0_bram_serverAdapterB_cnt$D_IN =
	     dp0_bram_serverAdapterB_cnt_65_PLUS_IF_dp0_bra_ETC___d271 ;
  assign dp0_bram_serverAdapterB_cnt$EN =
	     dp0_bram_serverAdapterB_cnt_1$whas ||
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;

  // register dp0_bram_serverAdapterB_s1
  assign dp0_bram_serverAdapterB_s1$D_IN =
	     { dp0_bram_serverAdapterB_writeWithResp$whas &&
	       dp0_bram_serverAdapterB_s1_1$wget[1],
	       dp0_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp0_dpControl
  assign dp0_dpControl$D_IN = dp0_wci_reqF$D_OUT[3:0] ;
  assign dp0_dpControl$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp0_tlp_creditReady
  assign dp0_tlp_creditReady$D_IN = dp0_tlp_creditReady_1$whas ;
  assign dp0_tlp_creditReady$EN = 1'd1 ;

  // register dp0_tlp_debugBdata
  assign dp0_tlp_debugBdata$D_IN =
	     { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp0_tlp_debugBdata$EN = WILL_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent: dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_dmaPullRemainDWLen == 10'd1;
    default: dp0_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h44103 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h44103[11:2];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaPullRemainDWSub
  assign dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ?
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaReqTag
  assign dp0_tlp_dmaReqTag$D_IN = dp0_tlp_dmaTag ;
  assign dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_dmaTag
  assign dp0_tlp_dmaTag$D_IN = dp0_tlp_dmaTag + 5'd1 ;
  assign dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_doXmtMetaBody
  assign dp0_tlp_doXmtMetaBody$D_IN = 1'b0 ;
  assign dp0_tlp_doXmtMetaBody$EN = 1'b0 ;

  // register dp0_tlp_fabFlowAddr
  assign dp0_tlp_fabFlowAddr$D_IN = dp0_bml_fabFlowAddr ;
  assign dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMesgAccu
  assign dp0_tlp_fabMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       dp0_tlp_fabMesgAddr :
	       MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_fabMesgAddr
  assign dp0_tlp_fabMesgAddr$D_IN = dp0_bml_fabMesgAddr ;
  assign dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMeta
  assign dp0_tlp_fabMeta$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       MUX_dp0_tlp_fabMeta$write_1__VAL_1 :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_fabMetaAddr
  assign dp0_tlp_fabMetaAddr$D_IN = dp0_bml_fabMetaAddr ;
  assign dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_farBufReady
  assign dp0_tlp_farBufReady$D_IN = dp0_tlp_farBufReady_1$whas ;
  assign dp0_tlp_farBufReady$EN = 1'd1 ;

  // register dp0_tlp_flowDiagCount
  assign dp0_tlp_flowDiagCount$D_IN = dp0_tlp_flowDiagCount + 32'd1 ;
  assign dp0_tlp_flowDiagCount$EN = WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_gotResponseHeader$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_gotResponseHeader$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp0_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_inIgnorePkt
  assign dp0_tlp_inIgnorePkt$D_IN =
	     dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
	     dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv && dp0_tlp_inF$D_OUT[152] ;

  // register dp0_tlp_maxPayloadSize
  assign dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp0_tlp_maxReadReqSize
  assign dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp0_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	  dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;

  // register dp0_tlp_mesgLengthRemainPull
  assign dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_mesgLengthRemainPush
  assign dp0_tlp_mesgLengthRemainPush$D_IN = 17'h0 ;
  assign dp0_tlp_mesgLengthRemainPush$EN = 1'b0 ;

  // register dp0_tlp_nearBufReady
  assign dp0_tlp_nearBufReady$D_IN = dp0_tlp_nearBufReady_1$whas ;
  assign dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register dp0_tlp_outDwRemain
  assign dp0_tlp_outDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ?
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // register dp0_tlp_postSeqDwell
  assign dp0_tlp_postSeqDwell$D_IN =
	     (dp0_tlp_postSeqDwell != 4'd0) ?
	       MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd15 ;
  assign dp0_tlp_postSeqDwell$EN =
	     dp0_tlp_postSeqDwell != 4'd0 ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_pullTagMatch
  assign dp0_tlp_pullTagMatch$D_IN =
	     dp0_tlp_pullTagMatch_1$whas && dp0_tlp_pullTagMatch_1$wget ;
  assign dp0_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp0_tlp_rdRespDwRemain
  assign dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_readHeaderSent
  assign dp0_tlp_readHeaderSent$D_IN =
	     MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_482_ULE_4___d1483 ;

  // register dp0_tlp_readNxtDWAddr
  assign dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readRemainDWLen
  assign dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readStarted
  assign dp0_tlp_readStarted$D_IN = MUX_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_338_ULE_4___d1339 ;

  // register dp0_tlp_remDone
  assign dp0_tlp_remDone$D_IN = WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign dp0_tlp_remDone$EN = 1'd1 ;

  // register dp0_tlp_remMesgAccu
  assign dp0_tlp_remMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       dp0_tlp_remMesgAddr :
	       MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // register dp0_tlp_remMesgAddr
  assign dp0_tlp_remMesgAddr$D_IN = dp0_bml_remMesgAddr ;
  assign dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_remMetaAddr
  assign dp0_tlp_remMetaAddr$D_IN = dp0_bml_remMetaAddr ;
  assign dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_remStart
  assign dp0_tlp_remStart$D_IN = dp0_tlp_remStart_1$whas ;
  assign dp0_tlp_remStart$EN = 1'd1 ;

  // register dp0_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_reqMesgInFlight$D_IN = dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp0_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_reqMetaBodyInFlight
  assign dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // register dp0_tlp_reqMetaInFlight
  assign dp0_tlp_reqMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;
  assign dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_srcMesgAccu
  assign dp0_tlp_srcMesgAccu$D_IN = 32'h0 ;
  assign dp0_tlp_srcMesgAccu$EN = 1'b0 ;

  // register dp0_tlp_tlpMetaSent
  assign dp0_tlp_tlpMetaSent$D_IN = 1'b0 ;
  assign dp0_tlp_tlpMetaSent$EN = 1'b0 ;

  // register dp0_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_dp0_tlp_tlpRcv or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_tlpRcv:
	  dp0_tlp_tlpRcvBusy$D_IN = !dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_tlpRcvBusy$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_tlpRcvBusy$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941;
      default: dp0_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_tlpXmtBusy
  assign dp0_tlp_tlpXmtBusy$D_IN = MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 ;
  assign dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     NOT_dp0_tlp_mRespF_first__087_BITS_71_TO_62_09_ETC___d1111 ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body &&
	     dp0_tlp_outDwRemain_116_ULE_4___d4601 ;

  // register dp0_tlp_writeDWAddr
  assign dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_writeLastBE
  assign dp0_tlp_writeLastBE$D_IN = dp0_tlp_mReqF$D_OUT[35:32] ;
  assign dp0_tlp_writeLastBE$EN = WILL_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_writeRemainDWLen
  assign dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_xmtMetaInFlight
  assign dp0_tlp_xmtMetaInFlight$D_IN = 1'b0 ;
  assign dp0_tlp_xmtMetaInFlight$EN = 1'b0 ;

  // register dp0_tlp_xmtMetaOK
  assign dp0_tlp_xmtMetaOK$D_IN = 1'b0 ;
  assign dp0_tlp_xmtMetaOK$EN = 1'b0 ;

  // register dp0_wci_cEdge
  assign dp0_wci_cEdge$D_IN = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_cEdge$EN = WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_cState
  assign dp0_wci_cState$D_IN = dp0_wci_nState ;
  assign dp0_wci_cState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge ;

  // register dp0_wci_ctlAckReg
  assign dp0_wci_ctlAckReg$D_IN = dp0_wci_ctlAckReg_1$whas ;
  assign dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register dp0_wci_ctlOpActive
  assign dp0_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_illegalEdge
  assign dp0_wci_illegalEdge$D_IN =
	     !MUX_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ||
	     MUX_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register dp0_wci_nState
  always@(dp0_wci_reqF$D_OUT)
  begin
    case (dp0_wci_reqF$D_OUT[36:34])
      3'd0: dp0_wci_nState$D_IN = 3'd1;
      3'd1: dp0_wci_nState$D_IN = 3'd2;
      3'd2: dp0_wci_nState$D_IN = 3'd3;
      default: dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp0_wci_nState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState == 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp0_wci_cState == 3'd1 || dp0_wci_cState == 3'd3) ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState == 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp0_wci_cState == 3'd3 || dp0_wci_cState == 3'd2 ||
	       dp0_wci_cState == 3'd1)) ;

  // register dp0_wci_reqF_countReg
  assign dp0_wci_reqF_countReg$D_IN =
	     (dp0_wci_wciReq$wget[71:69] != 3'd0) ?
	       dp0_wci_reqF_countReg + 2'd1 :
	       dp0_wci_reqF_countReg - 2'd1 ;
  assign dp0_wci_reqF_countReg$EN =
	     (dp0_wci_wciReq$wget[71:69] != 3'd0) != dp0_wci_reqF_r_deq$whas ;

  // register dp0_wci_respF_c_r
  assign dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ?
	       MUX_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_0
  always@(MUX_dp0_wci_respF_q_0$write_1__SEL_1 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr or dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_wci_respF_q_0$write_1__SEL_1:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_0$D_IN = dp0_wci_respF_q_1;
      default: dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_1
  always@(MUX_dp0_wci_respF_q_1$write_1__SEL_1 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_wci_respF_q_1$write_1__SEL_1:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_sFlagReg
  assign dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp0_wci_sFlagReg$EN = 1'd1 ;

  // register dp0_wci_sThreadBusy_d
  assign dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp0_wmi_addr
  assign dp0_wmi_addr$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_addr$write_1__VAL_1 :
	       dp0_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp0_wmi_addr$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bufDwell
  assign dp0_wmi_bufDwell$D_IN =
	     (MUX_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     dp0_wmi_bufDwell != 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_bytesRemainReq
  assign dp0_wmi_bytesRemainReq$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bytesRemainResp
  assign dp0_wmi_bytesRemainResp$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_doneWithMesg
  assign dp0_wmi_doneWithMesg$D_IN =
	     !MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_dp0_wmi_doWriteReq) &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_lastMesg
  assign dp0_wmi_lastMesg$D_IN = dp0_wmi_thisMesg ;
  assign dp0_wmi_lastMesg$EN = WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_lclMesgAddr
  assign dp0_wmi_lclMesgAddr$D_IN = dp0_bml_lclMesgAddr[14:0] ;
  assign dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp0_wmi_lclMetaAddr
  assign dp0_wmi_lclMetaAddr$D_IN = dp0_bml_lclMetaAddr[14:0] ;
  assign dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp0_wmi_mesgBufReady
  assign dp0_wmi_mesgBufReady$D_IN = dp0_wmi_mesgBufReady_1$whas ;
  assign dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp0_wmi_mesgBusy
  assign dp0_wmi_mesgBusy$D_IN = dp0_wmi_bufDwell != 2'd1 ;
  assign dp0_wmi_mesgBusy$EN =
	     dp0_wmi_bufDwell == 2'd1 || WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_mesgCount
  assign dp0_wmi_mesgCount$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign dp0_wmi_mesgCount$EN = dp0_wmi_mesgDone_1$whas ;

  // register dp0_wmi_mesgDone
  assign dp0_wmi_mesgDone$D_IN = dp0_wmi_mesgDone_1$whas ;
  assign dp0_wmi_mesgDone$EN = 1'd1 ;

  // register dp0_wmi_mesgMeta
  assign dp0_wmi_mesgMeta$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_mesgStart
  assign dp0_wmi_mesgStart$D_IN = dp0_wmi_mesgStart_1$whas ;
  assign dp0_wmi_mesgStart$EN = 1'd1 ;

  // register dp0_wmi_metaBusy
  assign dp0_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ;

  // register dp0_wmi_p4B
  assign dp0_wmi_p4B$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp0_wmi_p4B$write_1__VAL_2 ;
  assign dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_rdActive
  assign dp0_wmi_rdActive$D_IN =
	     !MUX_dp0_wmi_rdActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_reqCount
  assign dp0_wmi_reqCount$D_IN = dp0_wmi_reqCount + 16'd1 ;
  assign dp0_wmi_reqCount$EN = WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_thisMesg
  assign dp0_wmi_thisMesg$D_IN =
	     { dp0_wmi_mesgCount[7:0],
	       dp0_wmi_wmi_mFlagReg[31:24],
	       dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign dp0_wmi_thisMesg$EN = WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_blockReq
  assign dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[28] &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_dhF_countReg
  assign dp0_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_dhF_countReg + 2'd1 :
	       dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_dhF_countReg$EN =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wmi_wmi_dhF_levelsValid
  assign dp0_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;
  assign dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;

  // register dp0_wmi_wmi_errorSticky
  assign dp0_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp0_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && !dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     !dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && !dp0_wmi_wmi_dhF$FULL_N ;

  // register dp0_wmi_wmi_mFlagF_countReg
  assign dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       dp0_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_mFlagF_countReg$EN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  assign dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;
  assign dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;

  // register dp0_wmi_wmi_mFlagReg
  assign dp0_wmi_wmi_mFlagReg$D_IN = dp0_wmi_wmi_mFlagF$D_OUT ;
  assign dp0_wmi_wmi_mFlagReg$EN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp0_wmi_wmi_operateD
  assign dp0_wmi_wmi_operateD$D_IN = dp0_wci_cState == 3'd2 ;
  assign dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp0_wmi_wmi_peerIsReady
  assign dp0_wmi_wmi_peerIsReady$D_IN = appW2$wmiM0_MReset_n ;
  assign dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp0_wmi_wmi_reqF_countReg
  assign dp0_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_reqF_countReg + 2'd1 :
	       dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_reqF_countReg$EN =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wmi_reqF_levelsValid
  assign dp0_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;
  assign dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;

  // register dp0_wmi_wmi_respF_c_r
  assign dp0_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ?
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp0_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_0
  always@(MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_1 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr or dp0_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_1:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_0$D_IN = dp0_wmi_wmi_respF_q_1;
      default: dp0_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_1
  always@(MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_1 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_1:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_sFlagReg
  assign dp0_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h76848[7:0], y_avValue__h76828[23:0] } ;
  assign dp0_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_wmi_statusR
  assign dp0_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp0_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp0_wmi_wmi_trafficSticky
  assign dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp0_wmi_wrActive
  assign dp0_wmi_wrActive$D_IN =
	     !MUX_dp0_wmi_wrActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wrFinalize
  assign dp0_wmi_wrFinalize$D_IN = MUX_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wrtCount
  assign dp0_wmi_wrtCount$D_IN = dp0_wmi_wrtCount + 16'd1 ;
  assign dp0_wmi_wrtCount$EN = WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wti_nowReq
  assign dp0_wti_nowReq$D_IN = 67'h0 ;
  assign dp0_wti_nowReq$EN = 1'b0 ;

  // register dp1_bml_crdBuf_modulus
  assign dp1_bml_crdBuf_modulus$D_IN = dp1_bml_lclNumBufs - 16'd1 ;
  assign dp1_bml_crdBuf_modulus$EN = WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_crdBuf_value
  assign dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp1_bml_crdBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabAvail
  assign dp1_bml_fabAvail$D_IN = dp1_bml_fabAvail_1$whas ;
  assign dp1_bml_fabAvail$EN = 1'd1 ;

  // register dp1_bml_fabBuf_modulus
  assign dp1_bml_fabBuf_modulus$D_IN = dp1_bml_fabNumBufs - 16'd1 ;
  assign dp1_bml_fabBuf_modulus$EN = WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBuf_value
  assign dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp1_bml_fabBuf_value$EN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBufsAvail
  assign dp1_bml_fabBufsAvail$D_IN =
	     MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabDone
  assign dp1_bml_fabDone$D_IN = dp1_bml_fabDone_1$whas ;
  assign dp1_bml_fabDone$EN = 1'd1 ;

  // register dp1_bml_fabFlowAddr
  always@(MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_bml_initAccumulators or
	  dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_dp1_bml_crdAdvance or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp1_bml_initAccumulators:
	  dp1_bml_fabFlowAddr$D_IN = dp1_bml_fabFlowBase;
      WILL_FIRE_RL_dp1_bml_crdAdvance:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // register dp1_bml_fabFlowBase
  assign dp1_bml_fabFlowBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp1_bml_fabFlowSize
  assign dp1_bml_fabFlowSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp1_bml_fabMesgAddr
  assign dp1_bml_fabMesgAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       dp1_bml_fabMesgBase ;
  assign dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMesgBase
  assign dp1_bml_fabMesgBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp1_bml_fabMesgSize
  assign dp1_bml_fabMesgSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp1_bml_fabMetaAddr
  assign dp1_bml_fabMetaAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       dp1_bml_fabMetaBase ;
  assign dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMetaBase
  assign dp1_bml_fabMetaBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp1_bml_fabMetaSize
  assign dp1_bml_fabMetaSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp1_bml_fabNumBufs
  assign dp1_bml_fabNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp1_bml_lclBufDone
  assign dp1_bml_lclBufDone$D_IN = dp1_wmi_mesgDone ;
  assign dp1_bml_lclBufDone$EN = 1'd1 ;

  // register dp1_bml_lclBufStart
  assign dp1_bml_lclBufStart$D_IN = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufStart$EN = 1'd1 ;

  // register dp1_bml_lclBuf_modulus
  assign dp1_bml_lclBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_lclBuf_modulus$EN = WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBuf_value
  assign dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp1_bml_lclBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_lclAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsAR
  assign dp1_bml_lclBufsAR$D_IN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp1_bml_lclBufsAR$EN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsCF
  assign dp1_bml_lclBufsCF$D_IN =
	     MUX_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp1_bml_lclBufsCF$EN =
	     dp1_wci_cState == 3'd2 &&
	     (dp1_bml_lclBufDone_999_AND_IF_dp1_bml_dpContro_ETC___d5319 ||
	      NOT_dp1_bml_lclBufDone_999_066_AND_IF_dp1_bml__ETC___d4079) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclCredit
  assign dp1_bml_lclCredit$D_IN =
	     MUX_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclDones
  assign dp1_bml_lclDones$D_IN = dp1_bml_lclDones + 16'd1 ;
  assign dp1_bml_lclDones$EN = WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclMesgAddr
  assign dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclMetaAddr
  assign dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclNumBufs
  assign dp1_bml_lclNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp1_bml_lclStarts
  assign dp1_bml_lclStarts$D_IN = dp1_bml_lclStarts + 16'd1 ;
  assign dp1_bml_lclStarts$EN =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufStart ;

  // register dp1_bml_mesgBase
  assign dp1_bml_mesgBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp1_bml_mesgSize
  assign dp1_bml_mesgSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp1_bml_metaBase
  assign dp1_bml_metaBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp1_bml_metaSize
  assign dp1_bml_metaSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp1_bml_remBuf_modulus
  assign dp1_bml_remBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_remBuf_modulus$EN = WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remBuf_value
  assign dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_remBuf_value$write_1__VAL_3 ;
  assign dp1_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remDone
  assign dp1_bml_remDone$D_IN = dp1_tlp_remDone ;
  assign dp1_bml_remDone$EN = 1'd1 ;

  // register dp1_bml_remDones
  assign dp1_bml_remDones$D_IN = dp1_bml_remDones + 16'd1 ;
  assign dp1_bml_remDones$EN = CAN_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMesgAddr
  assign dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMetaAddr
  assign dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remStart
  assign dp1_bml_remStart$D_IN = dp1_tlp_remStart ;
  assign dp1_bml_remStart$EN = 1'd1 ;

  // register dp1_bml_remStarts
  assign dp1_bml_remStarts$D_IN = dp1_bml_remStarts + 16'd1 ;
  assign dp1_bml_remStarts$EN = dp1_wci_cState == 3'd2 && dp1_bml_remStart ;

  // register dp1_bram_serverAdapterA_1_cnt
  assign dp1_bram_serverAdapterA_1_cnt$D_IN =
	     dp1_bram_serverAdapterA_1_cnt_360_PLUS_IF_dp1__ETC___d2366 ;
  assign dp1_bram_serverAdapterA_1_cnt$EN =
	     dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterA_1_s1
  assign dp1_bram_serverAdapterA_1_s1$D_IN =
	     { dp1_bram_serverAdapterA_1_writeWithResp$whas &&
	       dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_2_cnt
  assign dp1_bram_serverAdapterA_2_cnt$D_IN =
	     dp1_bram_serverAdapterA_2_cnt_478_PLUS_IF_dp1__ETC___d2484 ;
  assign dp1_bram_serverAdapterA_2_cnt$EN =
	     dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterA_2_s1
  assign dp1_bram_serverAdapterA_2_s1$D_IN =
	     { dp1_bram_serverAdapterA_2_writeWithResp$whas &&
	       dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_3_cnt
  assign dp1_bram_serverAdapterA_3_cnt$D_IN =
	     dp1_bram_serverAdapterA_3_cnt_596_PLUS_IF_dp1__ETC___d2602 ;
  assign dp1_bram_serverAdapterA_3_cnt$EN =
	     dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterA_3_s1
  assign dp1_bram_serverAdapterA_3_s1$D_IN =
	     { dp1_bram_serverAdapterA_3_writeWithResp$whas &&
	       dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_cnt
  assign dp1_bram_serverAdapterA_cnt$D_IN =
	     dp1_bram_serverAdapterA_cnt_242_PLUS_IF_dp1_br_ETC___d2248 ;
  assign dp1_bram_serverAdapterA_cnt$EN =
	     dp1_bram_serverAdapterA_cnt_1$whas ||
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterA_s1
  assign dp1_bram_serverAdapterA_s1$D_IN =
	     { dp1_bram_serverAdapterA_writeWithResp$whas &&
	       dp1_bram_serverAdapterA_s1_1$wget[1],
	       dp1_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_1_cnt
  assign dp1_bram_serverAdapterB_1_cnt$D_IN =
	     dp1_bram_serverAdapterB_1_cnt_419_PLUS_IF_dp1__ETC___d2425 ;
  assign dp1_bram_serverAdapterB_1_cnt$EN =
	     dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterB_1_s1
  assign dp1_bram_serverAdapterB_1_s1$D_IN =
	     { dp1_bram_serverAdapterB_1_writeWithResp$whas &&
	       dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_2_cnt
  assign dp1_bram_serverAdapterB_2_cnt$D_IN =
	     dp1_bram_serverAdapterB_2_cnt_537_PLUS_IF_dp1__ETC___d2543 ;
  assign dp1_bram_serverAdapterB_2_cnt$EN =
	     dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterB_2_s1
  assign dp1_bram_serverAdapterB_2_s1$D_IN =
	     { dp1_bram_serverAdapterB_2_writeWithResp$whas &&
	       dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_3_cnt
  assign dp1_bram_serverAdapterB_3_cnt$D_IN =
	     dp1_bram_serverAdapterB_3_cnt_655_PLUS_IF_dp1__ETC___d2661 ;
  assign dp1_bram_serverAdapterB_3_cnt$EN =
	     dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterB_3_s1
  assign dp1_bram_serverAdapterB_3_s1$D_IN =
	     { dp1_bram_serverAdapterB_3_writeWithResp$whas &&
	       dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_cnt
  assign dp1_bram_serverAdapterB_cnt$D_IN =
	     dp1_bram_serverAdapterB_cnt_301_PLUS_IF_dp1_br_ETC___d2307 ;
  assign dp1_bram_serverAdapterB_cnt$EN =
	     dp1_bram_serverAdapterB_cnt_1$whas ||
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;

  // register dp1_bram_serverAdapterB_s1
  assign dp1_bram_serverAdapterB_s1$D_IN =
	     { dp1_bram_serverAdapterB_writeWithResp$whas &&
	       dp1_bram_serverAdapterB_s1_1$wget[1],
	       dp1_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp1_dpControl
  assign dp1_dpControl$D_IN = dp1_wci_reqF$D_OUT[3:0] ;
  assign dp1_dpControl$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp1_tlp_creditReady
  assign dp1_tlp_creditReady$D_IN = dp1_tlp_creditReady_1$whas ;
  assign dp1_tlp_creditReady$EN = 1'd1 ;

  // register dp1_tlp_debugBdata
  assign dp1_tlp_debugBdata$D_IN =
	     { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp1_tlp_debugBdata$EN = WILL_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_dmaDoTailEvent
  assign dp1_tlp_dmaDoTailEvent$D_IN = 1'b0 ;
  assign dp1_tlp_dmaDoTailEvent$EN = 1'b0 ;

  // register dp1_tlp_dmaPullRemainDWLen
  assign dp1_tlp_dmaPullRemainDWLen$D_IN = 10'h0 ;
  assign dp1_tlp_dmaPullRemainDWLen$EN = 1'b0 ;

  // register dp1_tlp_dmaPullRemainDWSub
  assign dp1_tlp_dmaPullRemainDWSub$D_IN = 10'h0 ;
  assign dp1_tlp_dmaPullRemainDWSub$EN = 1'b0 ;

  // register dp1_tlp_dmaReqTag
  assign dp1_tlp_dmaReqTag$D_IN = 5'h0 ;
  assign dp1_tlp_dmaReqTag$EN = 1'b0 ;

  // register dp1_tlp_dmaTag
  assign dp1_tlp_dmaTag$D_IN = 5'h0 ;
  assign dp1_tlp_dmaTag$EN = 1'b0 ;

  // register dp1_tlp_doXmtMetaBody
  assign dp1_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_fabFlowAddr
  assign dp1_tlp_fabFlowAddr$D_IN = dp1_bml_fabFlowAddr ;
  assign dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMesgAccu
  assign dp1_tlp_fabMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // register dp1_tlp_fabMesgAddr
  assign dp1_tlp_fabMesgAddr$D_IN = dp1_bml_fabMesgAddr ;
  assign dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMeta
  assign dp1_tlp_fabMeta$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       MUX_dp1_tlp_fabMeta$write_1__VAL_1 :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_fabMetaAddr
  assign dp1_tlp_fabMetaAddr$D_IN = dp1_bml_fabMetaAddr ;
  assign dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_farBufReady
  assign dp1_tlp_farBufReady$D_IN = dp1_tlp_farBufReady_1$whas ;
  assign dp1_tlp_farBufReady$EN = 1'd1 ;

  // register dp1_tlp_flowDiagCount
  assign dp1_tlp_flowDiagCount$D_IN = dp1_tlp_flowDiagCount + 32'd1 ;
  assign dp1_tlp_flowDiagCount$EN = WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // register dp1_tlp_gotResponseHeader
  assign dp1_tlp_gotResponseHeader$D_IN = 1'b0 ;
  assign dp1_tlp_gotResponseHeader$EN = 1'b0 ;

  // register dp1_tlp_inIgnorePkt
  assign dp1_tlp_inIgnorePkt$D_IN =
	     dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
	     dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv && dp1_tlp_inF$D_OUT[152] ;

  // register dp1_tlp_maxPayloadSize
  assign dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp1_tlp_maxReadReqSize
  assign dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp1_tlp_mesgComplReceived
  assign dp1_tlp_mesgComplReceived$D_IN = 17'h0 ;
  assign dp1_tlp_mesgComplReceived$EN = 1'b0 ;

  // register dp1_tlp_mesgLengthRemainPull
  assign dp1_tlp_mesgLengthRemainPull$D_IN = 17'h0 ;
  assign dp1_tlp_mesgLengthRemainPull$EN = 1'b0 ;

  // register dp1_tlp_mesgLengthRemainPush
  assign dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_nearBufReady
  assign dp1_tlp_nearBufReady$D_IN = dp1_tlp_nearBufReady_1$whas ;
  assign dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register dp1_tlp_outDwRemain
  assign dp1_tlp_outDwRemain$D_IN =
	     MUX_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;

  // register dp1_tlp_postSeqDwell
  assign dp1_tlp_postSeqDwell$D_IN =
	     (dp1_tlp_postSeqDwell != 4'd0) ?
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd15 ;
  assign dp1_tlp_postSeqDwell$EN =
	     dp1_tlp_postSeqDwell != 4'd0 ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_pullTagMatch
  assign dp1_tlp_pullTagMatch$D_IN = 1'b0 ;
  assign dp1_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp1_tlp_rdRespDwRemain
  assign dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_readHeaderSent
  assign dp1_tlp_readHeaderSent$D_IN =
	     MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_513_ULE_4___d3514 ;

  // register dp1_tlp_readNxtDWAddr
  assign dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readRemainDWLen
  assign dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readStarted
  assign dp1_tlp_readStarted$D_IN = MUX_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_369_ULE_4___d3370 ;

  // register dp1_tlp_remDone
  assign dp1_tlp_remDone$D_IN = WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_remDone$EN = 1'd1 ;

  // register dp1_tlp_remMesgAccu
  assign dp1_tlp_remMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_remMesgAddr :
	       MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_remMesgAddr
  assign dp1_tlp_remMesgAddr$D_IN = dp1_bml_remMesgAddr ;
  assign dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_remMetaAddr
  assign dp1_tlp_remMetaAddr$D_IN = dp1_bml_remMetaAddr ;
  assign dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_remStart
  assign dp1_tlp_remStart$D_IN = dp1_tlp_remStart_1$whas ;
  assign dp1_tlp_remStart$EN = 1'd1 ;

  // register dp1_tlp_reqMesgInFlight
  assign dp1_tlp_reqMesgInFlight$D_IN = 1'b0 ;
  assign dp1_tlp_reqMesgInFlight$EN = 1'b0 ;

  // register dp1_tlp_reqMetaBodyInFlight
  assign dp1_tlp_reqMetaBodyInFlight$D_IN = 1'b0 ;
  assign dp1_tlp_reqMetaBodyInFlight$EN = 1'b0 ;

  // register dp1_tlp_reqMetaInFlight
  assign dp1_tlp_reqMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;
  assign dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // register dp1_tlp_srcMesgAccu
  assign dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_tlpMetaSent
  assign dp1_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;

  // register dp1_tlp_tlpRcvBusy
  assign dp1_tlp_tlpRcvBusy$D_IN = !dp1_tlp_inF$D_OUT[151] ;
  assign dp1_tlp_tlpRcvBusy$EN = WILL_FIRE_RL_dp1_tlp_tlpRcv ;

  // register dp1_tlp_tlpXmtBusy
  always@(MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  dp1_tlp_mRespF$D_OUT or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3:
	  dp1_tlp_tlpXmtBusy$D_IN = dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp1_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__879_BITS_71_TO_62_969_ULE_1___d5209 ||
	     (WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody) &&
	     dp1_tlp_outDwRemain_995_ULE_4___d4606 ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo13 ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_writeDWAddr
  assign dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_writeLastBE
  assign dp1_tlp_writeLastBE$D_IN = dp1_tlp_mReqF$D_OUT[35:32] ;
  assign dp1_tlp_writeLastBE$EN = WILL_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_writeRemainDWLen
  assign dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_xmtMetaInFlight
  assign dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  dp1_tlp_mesgLengthRemainPush or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_xmtMetaOK$D_IN = dp1_tlp_mesgLengthRemainPush == 17'd0;
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 ||
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3:
	dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead: dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    default: dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_995_ULE_4___d4606 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_wci_cEdge
  assign dp1_wci_cEdge$D_IN = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_cEdge$EN = WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_cState
  assign dp1_wci_cState$D_IN = dp1_wci_nState ;
  assign dp1_wci_cState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge ;

  // register dp1_wci_ctlAckReg
  assign dp1_wci_ctlAckReg$D_IN = dp1_wci_ctlAckReg_1$whas ;
  assign dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register dp1_wci_ctlOpActive
  assign dp1_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_illegalEdge
  assign dp1_wci_illegalEdge$D_IN =
	     !MUX_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ||
	     MUX_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register dp1_wci_nState
  always@(dp1_wci_reqF$D_OUT)
  begin
    case (dp1_wci_reqF$D_OUT[36:34])
      3'd0: dp1_wci_nState$D_IN = 3'd1;
      3'd1: dp1_wci_nState$D_IN = 3'd2;
      3'd2: dp1_wci_nState$D_IN = 3'd3;
      default: dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp1_wci_nState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState == 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp1_wci_cState == 3'd1 || dp1_wci_cState == 3'd3) ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState == 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp1_wci_cState == 3'd3 || dp1_wci_cState == 3'd2 ||
	       dp1_wci_cState == 3'd1)) ;

  // register dp1_wci_reqF_countReg
  assign dp1_wci_reqF_countReg$D_IN =
	     (dp1_wci_wciReq$wget[71:69] != 3'd0) ?
	       dp1_wci_reqF_countReg + 2'd1 :
	       dp1_wci_reqF_countReg - 2'd1 ;
  assign dp1_wci_reqF_countReg$EN =
	     (dp1_wci_wciReq$wget[71:69] != 3'd0) != dp1_wci_reqF_r_deq$whas ;

  // register dp1_wci_respF_c_r
  assign dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ?
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_0
  always@(MUX_dp1_wci_respF_q_0$write_1__SEL_1 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr or dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_wci_respF_q_0$write_1__SEL_1:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_0$D_IN = dp1_wci_respF_q_1;
      default: dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_1
  always@(MUX_dp1_wci_respF_q_1$write_1__SEL_1 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_wci_respF_q_1$write_1__SEL_1:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_sFlagReg
  assign dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp1_wci_sFlagReg$EN = 1'd1 ;

  // register dp1_wci_sThreadBusy_d
  assign dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp1_wmi_addr
  assign dp1_wmi_addr$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_addr$write_1__VAL_1 :
	       dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp1_wmi_addr$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bufDwell
  assign dp1_wmi_bufDwell$D_IN =
	     (MUX_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     dp1_wmi_bufDwell != 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_bytesRemainReq
  assign dp1_wmi_bytesRemainReq$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bytesRemainResp
  assign dp1_wmi_bytesRemainResp$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_doneWithMesg
  assign dp1_wmi_doneWithMesg$D_IN =
	     !MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_dp1_wmi_doWriteReq) &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_lastMesg
  assign dp1_wmi_lastMesg$D_IN = dp1_wmi_thisMesg ;
  assign dp1_wmi_lastMesg$EN = WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_lclMesgAddr
  assign dp1_wmi_lclMesgAddr$D_IN = dp1_bml_lclMesgAddr[14:0] ;
  assign dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp1_wmi_lclMetaAddr
  assign dp1_wmi_lclMetaAddr$D_IN = dp1_bml_lclMetaAddr[14:0] ;
  assign dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp1_wmi_mesgBufReady
  assign dp1_wmi_mesgBufReady$D_IN = dp1_wmi_mesgBufReady_1$whas ;
  assign dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp1_wmi_mesgBusy
  assign dp1_wmi_mesgBusy$D_IN = dp1_wmi_bufDwell != 2'd1 ;
  assign dp1_wmi_mesgBusy$EN =
	     dp1_wmi_bufDwell == 2'd1 || WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_mesgCount
  assign dp1_wmi_mesgCount$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign dp1_wmi_mesgCount$EN = dp1_wmi_mesgDone_1$whas ;

  // register dp1_wmi_mesgDone
  assign dp1_wmi_mesgDone$D_IN = dp1_wmi_mesgDone_1$whas ;
  assign dp1_wmi_mesgDone$EN = 1'd1 ;

  // register dp1_wmi_mesgMeta
  assign dp1_wmi_mesgMeta$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_mesgStart
  assign dp1_wmi_mesgStart$D_IN = dp1_wmi_mesgStart_1$whas ;
  assign dp1_wmi_mesgStart$EN = 1'd1 ;

  // register dp1_wmi_metaBusy
  assign dp1_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ;

  // register dp1_wmi_p4B
  assign dp1_wmi_p4B$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp1_wmi_p4B$write_1__VAL_2 ;
  assign dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_rdActive
  assign dp1_wmi_rdActive$D_IN =
	     !MUX_dp1_wmi_rdActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_reqCount
  assign dp1_wmi_reqCount$D_IN = dp1_wmi_reqCount + 16'd1 ;
  assign dp1_wmi_reqCount$EN = WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_thisMesg
  assign dp1_wmi_thisMesg$D_IN =
	     { dp1_wmi_mesgCount[7:0],
	       dp1_wmi_wmi_mFlagReg[31:24],
	       dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign dp1_wmi_thisMesg$EN = WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_blockReq
  assign dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[28] &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_dhF_countReg
  assign dp1_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_dhF_countReg + 2'd1 :
	       dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_dhF_countReg$EN =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wmi_wmi_dhF_levelsValid
  assign dp1_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;
  assign dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;

  // register dp1_wmi_wmi_errorSticky
  assign dp1_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp1_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && !dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     !dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && !dp1_wmi_wmi_dhF$FULL_N ;

  // register dp1_wmi_wmi_mFlagF_countReg
  assign dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       dp1_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_mFlagF_countReg$EN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  assign dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;
  assign dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;

  // register dp1_wmi_wmi_mFlagReg
  assign dp1_wmi_wmi_mFlagReg$D_IN = dp1_wmi_wmi_mFlagF$D_OUT ;
  assign dp1_wmi_wmi_mFlagReg$EN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp1_wmi_wmi_operateD
  assign dp1_wmi_wmi_operateD$D_IN = dp1_wci_cState == 3'd2 ;
  assign dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp1_wmi_wmi_peerIsReady
  assign dp1_wmi_wmi_peerIsReady$D_IN = appW4$wmiM0_MReset_n ;
  assign dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp1_wmi_wmi_reqF_countReg
  assign dp1_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_reqF_countReg + 2'd1 :
	       dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_reqF_countReg$EN =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wmi_reqF_levelsValid
  assign dp1_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;
  assign dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;

  // register dp1_wmi_wmi_respF_c_r
  assign dp1_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ?
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp1_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_0
  always@(MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_1 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr or dp1_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_1:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_0$D_IN = dp1_wmi_wmi_respF_q_1;
      default: dp1_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_1
  always@(MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_1 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_1:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_sFlagReg
  assign dp1_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h154085[7:0], y_avValue__h154065[23:0] } ;
  assign dp1_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_wmi_statusR
  assign dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp1_wmi_wmi_trafficSticky
  assign dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp1_wmi_wrActive
  assign dp1_wmi_wrActive$D_IN =
	     !MUX_dp1_wmi_wrActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wrFinalize
  assign dp1_wmi_wrFinalize$D_IN = MUX_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wrtCount
  assign dp1_wmi_wrtCount$D_IN = dp1_wmi_wrtCount + 16'd1 ;
  assign dp1_wmi_wrtCount$EN = WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wti_nowReq
  assign dp1_wti_nowReq$D_IN = 67'h0 ;
  assign dp1_wti_nowReq$EN = 1'b0 ;

  // register noc_chompCnt
  assign noc_chompCnt$D_IN = noc_chompCnt + 8'd1 ;
  assign noc_chompCnt$EN =
	     noc_sm2$RDY_c1_request_get && noc_chompCnt != 8'd255 ;

  // register pciDevice
  assign pciDevice$D_IN = pciw_pciDevice$dD_OUT ;
  assign pciDevice$EN = 1'd1 ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi$D_IN = pciw_pcie_irq_fifoAssert$dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register pciw_rg
  assign pciw_rg$D_IN =
	     MUX_pciw_rg$write_1__SEL_1 ?
	       MUX_pciw_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg$EN =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;

  // register pciw_rg_1
  assign pciw_rg_1$D_IN =
	     MUX_pciw_rg_1$write_1__SEL_1 ?
	       MUX_pciw_rg_1$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg_1$EN =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;

  // submodule appW2
  assign appW2$wciS0_MAddr = cp$wci_Vm_2_MAddr ;
  assign appW2$wciS0_MAddrSpace = cp$wci_Vm_2_MAddrSpace ;
  assign appW2$wciS0_MByteEn = cp$wci_Vm_2_MByteEn ;
  assign appW2$wciS0_MCmd = cp$wci_Vm_2_MCmd ;
  assign appW2$wciS0_MData = cp$wci_Vm_2_MData ;
  assign appW2$wciS0_MFlag = cp$wci_Vm_2_MFlag ;
  assign appW2$wmiM0_SData = dp0_wmi_wmi_respF_q_0[31:0] ;
  assign appW2$wmiM0_SFlag = dp0_wmi_wmi_sFlagReg ;
  assign appW2$wmiM0_SResp = dp0_wmi_wmi_respF_q_0[33:32] ;
  assign appW2$wsiS0_MBurstLength = 12'h0 ;
  assign appW2$wsiS0_MByteEn = 4'h0 ;
  assign appW2$wsiS0_MCmd = 3'h0 ;
  assign appW2$wsiS0_MData = 32'h0 ;
  assign appW2$wsiS0_MReqInfo = 8'h0 ;
  assign appW2$wmiM0_SThreadBusy =
	     !dp0_wmi_wmi_sThreadBusy_dw$whas ||
	     dp0_wmi_wmi_sThreadBusy_dw$wget ;
  assign appW2$wmiM0_SDataThreadBusy =
	     !dp0_wmi_wmi_sDataThreadBusy_dw$whas ||
	     dp0_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign appW2$wmiM0_SRespLast = 1'b0 ;
  assign appW2$wmiM0_SReset_n =
	     !dp0_wmi_wmi_isReset$VAL && dp0_wmi_wmi_operateD ;
  assign appW2$wsiM0_SThreadBusy = wsi2axis$wsi_SThreadBusy ;
  assign appW2$wsiM0_SReset_n = wsi2axis$wsi_SReset_n ;
  assign appW2$wsiS0_MReqLast = 1'b0 ;
  assign appW2$wsiS0_MBurstPrecise = 1'b0 ;
  assign appW2$wsiS0_MReset_n = 1'b0 ;

  // submodule appW3
  assign appW3$wciS0_MAddr = cp$wci_Vm_3_MAddr ;
  assign appW3$wciS0_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;
  assign appW3$wciS0_MByteEn = cp$wci_Vm_3_MByteEn ;
  assign appW3$wciS0_MCmd = cp$wci_Vm_3_MCmd ;
  assign appW3$wciS0_MData = cp$wci_Vm_3_MData ;
  assign appW3$wciS0_MFlag = cp$wci_Vm_3_MFlag ;
  assign appW3$wsiS0_MBurstLength = 12'h0 ;
  assign appW3$wsiS0_MByteEn = 4'h0 ;
  assign appW3$wsiS0_MCmd = 3'h0 ;
  assign appW3$wsiS0_MData = 32'h0 ;
  assign appW3$wsiS0_MReqInfo = 8'h0 ;
  assign appW3$wsiS0_MReqLast = 1'b0 ;
  assign appW3$wsiS0_MBurstPrecise = 1'b0 ;
  assign appW3$wsiS0_MReset_n = 1'b0 ;
  assign appW3$wsiM0_SThreadBusy = 1'b0 ;
  assign appW3$wsiM0_SReset_n = 1'b0 ;

  // submodule appW4
  assign appW4$wciS0_MAddr = cp$wci_Vm_4_MAddr ;
  assign appW4$wciS0_MAddrSpace = cp$wci_Vm_4_MAddrSpace ;
  assign appW4$wciS0_MByteEn = cp$wci_Vm_4_MByteEn ;
  assign appW4$wciS0_MCmd = cp$wci_Vm_4_MCmd ;
  assign appW4$wciS0_MData = cp$wci_Vm_4_MData ;
  assign appW4$wciS0_MFlag = cp$wci_Vm_4_MFlag ;
  assign appW4$wmiM0_SData = dp1_wmi_wmi_respF_q_0[31:0] ;
  assign appW4$wmiM0_SFlag = dp1_wmi_wmi_sFlagReg ;
  assign appW4$wmiM0_SResp = dp1_wmi_wmi_respF_q_0[33:32] ;
  assign appW4$wsiS0_MBurstLength = axis2wsi$wsi_MBurstLength ;
  assign appW4$wsiS0_MByteEn = axis2wsi$wsi_MByteEn ;
  assign appW4$wsiS0_MCmd = axis2wsi$wsi_MCmd ;
  assign appW4$wsiS0_MData = axis2wsi$wsi_MData ;
  assign appW4$wsiS0_MReqInfo = axis2wsi$wsi_MReqInfo ;
  assign appW4$wmiM0_SThreadBusy =
	     !dp1_wmi_wmi_sThreadBusy_dw$whas ||
	     dp1_wmi_wmi_sThreadBusy_dw$wget ;
  assign appW4$wmiM0_SDataThreadBusy =
	     !dp1_wmi_wmi_sDataThreadBusy_dw$whas ||
	     dp1_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign appW4$wmiM0_SRespLast = 1'b0 ;
  assign appW4$wmiM0_SReset_n =
	     !dp1_wmi_wmi_isReset$VAL && dp1_wmi_wmi_operateD ;
  assign appW4$wsiM0_SThreadBusy = 1'b0 ;
  assign appW4$wsiM0_SReset_n = 1'b0 ;
  assign appW4$wsiS0_MReqLast = axis2wsi$wsi_MReqLast ;
  assign appW4$wsiS0_MBurstPrecise = axis2wsi$wsi_MBurstPrecise ;
  assign appW4$wsiS0_MReset_n = axis2wsi$wsi_MReset_n ;

  // submodule axis2wsi
  assign axis2wsi$axi_dat_TDATA = axisS_dat_TDATA ;
  assign axis2wsi$axi_dat_TSTRB = axisS_dat_TSTRB ;
  assign axis2wsi$axi_dpt_TDATA = axisS_dpt_TDATA ;
  assign axis2wsi$axi_dpt_TSTRB = axisS_dpt_TSTRB ;
  assign axis2wsi$axi_err_TDATA = axisS_err_TDATA ;
  assign axis2wsi$axi_err_TSTRB = axisS_err_TSTRB ;
  assign axis2wsi$axi_len_TDATA = axisS_len_TDATA ;
  assign axis2wsi$axi_len_TSTRB = axisS_len_TSTRB ;
  assign axis2wsi$axi_spt_TDATA = axisS_spt_TDATA ;
  assign axis2wsi$axi_spt_TSTRB = axisS_spt_TSTRB ;
  assign axis2wsi$axi_dat_TVALID = axisS_dat_TVALID ;
  assign axis2wsi$axi_dat_TLAST = axisS_dat_TLAST ;
  assign axis2wsi$axi_len_TVALID = axisS_len_TVALID ;
  assign axis2wsi$axi_len_TLAST = axisS_len_TLAST ;
  assign axis2wsi$axi_spt_TVALID = axisS_spt_TVALID ;
  assign axis2wsi$axi_spt_TLAST = axisS_spt_TLAST ;
  assign axis2wsi$axi_dpt_TVALID = axisS_dpt_TVALID ;
  assign axis2wsi$axi_dpt_TLAST = axisS_dpt_TLAST ;
  assign axis2wsi$axi_err_TVALID = axisS_err_TVALID ;
  assign axis2wsi$axi_err_TLAST = axisS_err_TLAST ;
  assign axis2wsi$wsi_SThreadBusy = appW4$wsiS0_SThreadBusy ;
  assign axis2wsi$wsi_SReset_n = appW4$wsiS0_SReset_n ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = 1'b0 ;
  assign cp$server_request_put = noc_sm0$c0_request_get ;
  assign cp$switch_x = 3'h0 ;
  assign cp$uuid_arg = 512'h0 ;
  assign cp$wci_Vm_0_SData = wci2axi$wciS0_SData ;
  assign cp$wci_Vm_0_SFlag = wci2axi$wciS0_SFlag ;
  assign cp$wci_Vm_0_SResp = wci2axi$wciS0_SResp ;
  assign cp$wci_Vm_10_SData = 32'h0 ;
  assign cp$wci_Vm_10_SFlag = 2'h0 ;
  assign cp$wci_Vm_10_SResp = 2'h0 ;
  assign cp$wci_Vm_11_SData = 32'h0 ;
  assign cp$wci_Vm_11_SFlag = 2'h0 ;
  assign cp$wci_Vm_11_SResp = 2'h0 ;
  assign cp$wci_Vm_12_SData = 32'h0 ;
  assign cp$wci_Vm_12_SFlag = 2'h0 ;
  assign cp$wci_Vm_12_SResp = 2'h0 ;
  assign cp$wci_Vm_13_SData = dp0_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_13_SFlag = { 1'd1, dp0_wci_sFlagReg } ;
  assign cp$wci_Vm_13_SResp = dp0_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_14_SData = dp1_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_14_SFlag = { 1'd1, dp1_wci_sFlagReg } ;
  assign cp$wci_Vm_14_SResp = dp1_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_1_SData = 32'h0 ;
  assign cp$wci_Vm_1_SFlag = 2'h0 ;
  assign cp$wci_Vm_1_SResp = 2'h0 ;
  assign cp$wci_Vm_2_SData = appW2$wciS0_SData ;
  assign cp$wci_Vm_2_SFlag = appW2$wciS0_SFlag ;
  assign cp$wci_Vm_2_SResp = appW2$wciS0_SResp ;
  assign cp$wci_Vm_3_SData = appW3$wciS0_SData ;
  assign cp$wci_Vm_3_SFlag = appW3$wciS0_SFlag ;
  assign cp$wci_Vm_3_SResp = appW3$wciS0_SResp ;
  assign cp$wci_Vm_4_SData = appW4$wciS0_SData ;
  assign cp$wci_Vm_4_SFlag = appW4$wciS0_SFlag ;
  assign cp$wci_Vm_4_SResp = appW4$wciS0_SResp ;
  assign cp$wci_Vm_5_SData = 32'h0 ;
  assign cp$wci_Vm_5_SFlag = 2'h0 ;
  assign cp$wci_Vm_5_SResp = 2'h0 ;
  assign cp$wci_Vm_6_SData = 32'h0 ;
  assign cp$wci_Vm_6_SFlag = 2'h0 ;
  assign cp$wci_Vm_6_SResp = 2'h0 ;
  assign cp$wci_Vm_7_SData = 32'h0 ;
  assign cp$wci_Vm_7_SFlag = 2'h0 ;
  assign cp$wci_Vm_7_SResp = 2'h0 ;
  assign cp$wci_Vm_8_SData = 32'h0 ;
  assign cp$wci_Vm_8_SFlag = 2'h0 ;
  assign cp$wci_Vm_8_SResp = 2'h0 ;
  assign cp$wci_Vm_9_SData = 32'h0 ;
  assign cp$wci_Vm_9_SFlag = 2'h0 ;
  assign cp$wci_Vm_9_SResp = 2'h0 ;
  assign cp$EN_server_request_put =
	     noc_sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign cp$EN_server_response_get =
	     noc_sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign cp$wci_Vm_0_SThreadBusy = wci2axi$wciS0_SThreadBusy ;
  assign cp$wci_Vm_1_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_2_SThreadBusy = appW2$wciS0_SThreadBusy ;
  assign cp$wci_Vm_3_SThreadBusy = appW3$wciS0_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy = appW4$wciS0_SThreadBusy ;
  assign cp$wci_Vm_5_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_6_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_7_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_8_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_9_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_10_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_11_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_12_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_13_SThreadBusy =
	     dp0_wci_reqF_countReg > 2'd1 || dp0_wci_isReset$VAL ;
  assign cp$wci_Vm_14_SThreadBusy =
	     dp1_wci_reqF_countReg > 2'd1 || dp1_wci_isReset$VAL ;

  // submodule dp0_bram_memory
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_4;
      default: dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory$b_put_1__SEL_1:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory$a_put_1__SEL_2 || WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$DIA = 32'd0;
      default: dp0_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  x3__h75232 or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize: dp0_bram_memory$DIB = x3__h75232;
      MUX_dp0_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory$DIB = 32'd0;
      default: dp0_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory$WEA =
	     !MUX_dp0_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$WEB =
	     !MUX_dp0_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_1
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_4;
      default: dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_1$b_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_1$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory_1$a_put_3__VAL_3;
      MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$DIA = 32'd0;
      default: dp0_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  mesgMeta_opcode__h75272 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$DIB = mesgMeta_opcode__h75272;
      MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_1$DIB = 32'd0;
      default: dp0_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_1$WEA =
	     !MUX_dp0_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$WEB =
	     !MUX_dp0_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_2
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_4;
      default: dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_2$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory_2$a_put_3__VAL_3;
      MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$DIA = 32'd0;
      default: dp0_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$DIB = dp0_wmi_nowW$wget[63:32];
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_2$DIB = 32'd0;
      default: dp0_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_2$WEA =
	     !MUX_dp0_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$WEB =
	     !MUX_dp0_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_3
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_3$a_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_4;
      default: dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$DIA = 32'd0;
      default: dp0_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$DIB = dp0_wmi_nowW$wget[31:0];
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_3$DIB = 32'd0;
      default: dp0_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_3$WEA =
	     !MUX_dp0_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$WEB =
	     !MUX_dp0_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  assign dp0_bram_serverAdapterA_1_outDataCore$D_IN = dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  assign dp0_bram_serverAdapterA_2_outDataCore$D_IN = dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  assign dp0_bram_serverAdapterA_3_outDataCore$D_IN = dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_outDataCore
  assign dp0_bram_serverAdapterA_outDataCore$D_IN = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  assign dp0_bram_serverAdapterB_1_outDataCore$D_IN = dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  assign dp0_bram_serverAdapterB_2_outDataCore$D_IN = dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  assign dp0_bram_serverAdapterB_3_outDataCore$D_IN = dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_outDataCore
  assign dp0_bram_serverAdapterB_outDataCore$D_IN = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp0_tlp_inF
  assign dp0_tlp_inF$D_IN = noc_sm1$c0_request_get ;
  assign dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;
  assign dp0_tlp_inF$ENQ = dp0_tlp_inF$FULL_N && noc_sm1$RDY_c0_request_get ;
  assign dp0_tlp_inF$CLR = 1'b0 ;

  // submodule dp0_tlp_mReqF
  always@(MUX_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_3 or
	  MUX_dp0_tlp_mReqF$enq_1__SEL_4 or MUX_dp0_tlp_mReqF$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_mReqF$enq_1__SEL_1:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_3;
      MUX_dp0_tlp_mReqF$enq_1__SEL_4:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_4;
      default: dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_338_ULE_4___d1339 ||
	     WILL_FIRE_RL_dp0_tlp_writeData ||
	     WILL_FIRE_RL_dp0_tlp_writeReq ;
  assign dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__76_BIT_152_041_AND_NOT_dp0__ETC___d1066 ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp0_tlp_mRespF
  assign dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp0_tlp_mRespF$enq_1__VAL_2 ;
  assign dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ;
  assign dp0_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp0_tlp_outF
  always@(WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  MUX_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaTailEventSender or
	  MUX_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Header or
	  MUX_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Body or MUX_dp0_tlp_outF$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaTailEventSender:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Header:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Body:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_5;
      default: dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_outF$DEQ =
	     dp0_tlp_outF$EMPTY_N && noc_sm1$RDY_c0_response_put ;
  assign dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaTailEventSender ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;
  assign dp0_tlp_outF$CLR = 1'b0 ;

  // submodule dp0_tlp_readReq
  assign dp0_tlp_readReq$D_IN = dp0_tlp_mReqF$D_OUT[59:0] ;
  assign dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_482_ULE_4___d1483 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp0_tlp_readReq$ENQ = WILL_FIRE_RL_dp0_tlp_read_FirstReq ;
  assign dp0_tlp_readReq$CLR = 1'b0 ;

  // submodule dp0_tlp_tailEventF
  assign dp0_tlp_tailEventF$ENQ = MUX_dp0_tlp_postSeqDwell$write_1__SEL_2 ;
  assign dp0_tlp_tailEventF$DEQ = WILL_FIRE_RL_dp0_tlp_dmaTailEventSender ;
  assign dp0_tlp_tailEventF$CLR = 1'b0 ;

  // submodule dp0_wci_reqF
  assign dp0_wci_reqF$D_IN = dp0_wci_wciReq$wget ;
  assign dp0_wci_reqF$ENQ = dp0_wci_wciReq$wget[71:69] != 3'd0 ;
  assign dp0_wci_reqF$DEQ = dp0_wci_reqF_r_deq$whas ;
  assign dp0_wci_reqF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_dhF
  assign dp0_wmi_wmi_dhF$D_IN = dp0_wmi_wmi_wmiDh$wget ;
  assign dp0_wmi_wmi_dhF$ENQ =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_mFlagF
  assign dp0_wmi_wmi_mFlagF$D_IN = appW2$wmiM0_MFlag ;
  assign dp0_wmi_wmi_mFlagF$ENQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_reqF
  assign dp0_wmi_wmi_reqF$D_IN = dp0_wmi_wmi_wmiReq$wget ;
  assign dp0_wmi_wmi_reqF$ENQ =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule dp1_bram_memory
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_4;
      default: dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory$b_put_1__SEL_1:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory$a_put_1__SEL_2 || WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$DIA = 32'd0;
      default: dp1_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  x3__h152469 or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize: dp1_bram_memory$DIB = x3__h152469;
      MUX_dp1_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory$DIB = 32'd0;
      default: dp1_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory$WEA =
	     !MUX_dp1_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$WEB =
	     !MUX_dp1_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_1
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_4;
      default: dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_1$b_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_1$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory_1$a_put_3__VAL_3;
      MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$DIA = 32'd0;
      default: dp1_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  mesgMeta_opcode__h152509 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$DIB = mesgMeta_opcode__h152509;
      MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_1$DIB = 32'd0;
      default: dp1_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_1$WEA =
	     !MUX_dp1_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$WEB =
	     !MUX_dp1_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_2
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_2$a_put_1__SEL_3:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_4;
      default: dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_2$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_2$a_put_1__SEL_3:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory_2$a_put_3__VAL_3;
      MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$DIA = 32'd0;
      default: dp1_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$DIB = dp1_wmi_nowW$wget[63:32];
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_2$DIB = 32'd0;
      default: dp1_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_2$WEA =
	     !MUX_dp1_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$WEB =
	     !MUX_dp1_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_3
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_3$a_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_4;
      default: dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$DIA = 32'd0;
      default: dp1_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$DIB = dp1_wmi_nowW$wget[31:0];
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_3$DIB = 32'd0;
      default: dp1_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_3$WEA =
	     !MUX_dp1_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$WEB =
	     !MUX_dp1_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  assign dp1_bram_serverAdapterA_1_outDataCore$D_IN = dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  assign dp1_bram_serverAdapterA_2_outDataCore$D_IN = dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  assign dp1_bram_serverAdapterA_3_outDataCore$D_IN = dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_outDataCore
  assign dp1_bram_serverAdapterA_outDataCore$D_IN = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  assign dp1_bram_serverAdapterB_1_outDataCore$D_IN = dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  assign dp1_bram_serverAdapterB_2_outDataCore$D_IN = dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  assign dp1_bram_serverAdapterB_3_outDataCore$D_IN = dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_outDataCore
  assign dp1_bram_serverAdapterB_outDataCore$D_IN = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp1_tlp_inF
  assign dp1_tlp_inF$D_IN = noc_sm2$c0_request_get ;
  assign dp1_tlp_inF$DEQ = WILL_FIRE_RL_dp1_tlp_tlpRcv ;
  assign dp1_tlp_inF$ENQ = dp1_tlp_inF$FULL_N && noc_sm2$RDY_c0_request_get ;
  assign dp1_tlp_inF$CLR = 1'b0 ;

  // submodule dp1_tlp_mReqF
  always@(MUX_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_mReqF$enq_1__SEL_1:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_3;
      default: dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_369_ULE_4___d3370 ||
	     WILL_FIRE_RL_dp1_tlp_writeData ||
	     WILL_FIRE_RL_dp1_tlp_writeReq ;
  assign dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__088_BIT_152_089_AND_NOT_dp1_ETC___d3118 ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;
  assign dp1_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp1_tlp_mRespF
  assign dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp1_tlp_mRespF$enq_1__VAL_2 ;
  assign dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;
  assign dp1_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp1_tlp_outF
  always@(WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead or
	  MUX_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaTailEventSender or
	  MUX_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dataXmt_Header or
	  MUX_dp1_tlp_outF$enq_1__VAL_5 or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_2 or
	  MUX_dp1_tlp_outF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaTailEventSender:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dataXmt_Header:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_5;
      MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_2:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_6;
      default: dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_outF$DEQ =
	     dp1_tlp_outF$EMPTY_N && noc_sm2$RDY_c0_response_put ;
  assign dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaTailEventSender ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;
  assign dp1_tlp_outF$CLR = 1'b0 ;

  // submodule dp1_tlp_readReq
  assign dp1_tlp_readReq$D_IN = dp1_tlp_mReqF$D_OUT[59:0] ;
  assign dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_513_ULE_4___d3514 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp1_tlp_readReq$ENQ = WILL_FIRE_RL_dp1_tlp_read_FirstReq ;
  assign dp1_tlp_readReq$CLR = 1'b0 ;

  // submodule dp1_tlp_tailEventF
  assign dp1_tlp_tailEventF$ENQ = MUX_dp1_tlp_postSeqDwell$write_1__SEL_2 ;
  assign dp1_tlp_tailEventF$DEQ = WILL_FIRE_RL_dp1_tlp_dmaTailEventSender ;
  assign dp1_tlp_tailEventF$CLR = 1'b0 ;

  // submodule dp1_wci_reqF
  assign dp1_wci_reqF$D_IN = dp1_wci_wciReq$wget ;
  assign dp1_wci_reqF$ENQ = dp1_wci_wciReq$wget[71:69] != 3'd0 ;
  assign dp1_wci_reqF$DEQ = dp1_wci_reqF_r_deq$whas ;
  assign dp1_wci_reqF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_dhF
  assign dp1_wmi_wmi_dhF$D_IN = dp1_wmi_wmi_wmiDh$wget ;
  assign dp1_wmi_wmi_dhF$ENQ =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_mFlagF
  assign dp1_wmi_wmi_mFlagF$D_IN = appW4$wmiM0_MFlag ;
  assign dp1_wmi_wmi_mFlagF$ENQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_reqF
  assign dp1_wmi_wmi_reqF$D_IN = dp1_wmi_wmi_wmiReq$wget ;
  assign dp1_wmi_wmi_reqF$ENQ =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule noc_sm0
  assign noc_sm0$c0_response_put = cp$server_response_get ;
  assign noc_sm0$c1_response_put = noc_sm1$s_response_get ;
  assign noc_sm0$s_request_put = pciw_uP2IF$D_OUT ;
  assign noc_sm0$EN_s_request_put =
	     noc_sm0$RDY_s_request_put && pciw_uP2IF$EMPTY_N ;
  assign noc_sm0$EN_s_response_get =
	     noc_sm0$RDY_s_response_get && pciw_uI2PF$FULL_N ;
  assign noc_sm0$EN_c0_request_get =
	     noc_sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign noc_sm0$EN_c0_response_put =
	     noc_sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign noc_sm0$EN_c1_request_get =
	     noc_sm1$RDY_s_request_put && noc_sm0$RDY_c1_request_get ;
  assign noc_sm0$EN_c1_response_put =
	     noc_sm1$RDY_s_response_get && noc_sm0$RDY_c1_response_put ;

  // submodule noc_sm1
  assign noc_sm1$c0_response_put = dp0_tlp_outF$D_OUT ;
  assign noc_sm1$c1_response_put = noc_sm2$s_response_get ;
  assign noc_sm1$s_request_put = noc_sm0$c1_request_get ;
  assign noc_sm1$EN_s_request_put =
	     noc_sm1$RDY_s_request_put && noc_sm0$RDY_c1_request_get ;
  assign noc_sm1$EN_s_response_get =
	     noc_sm1$RDY_s_response_get && noc_sm0$RDY_c1_response_put ;
  assign noc_sm1$EN_c0_request_get =
	     dp0_tlp_inF$FULL_N && noc_sm1$RDY_c0_request_get ;
  assign noc_sm1$EN_c0_response_put =
	     dp0_tlp_outF$EMPTY_N && noc_sm1$RDY_c0_response_put ;
  assign noc_sm1$EN_c1_request_get =
	     noc_sm2$RDY_s_request_put && noc_sm1$RDY_c1_request_get ;
  assign noc_sm1$EN_c1_response_put =
	     noc_sm2$RDY_s_response_get && noc_sm1$RDY_c1_response_put ;

  // submodule noc_sm2
  assign noc_sm2$c0_response_put = dp1_tlp_outF$D_OUT ;
  assign noc_sm2$c1_response_put = 153'h0 ;
  assign noc_sm2$s_request_put = noc_sm1$c1_request_get ;
  assign noc_sm2$EN_s_request_put =
	     noc_sm2$RDY_s_request_put && noc_sm1$RDY_c1_request_get ;
  assign noc_sm2$EN_s_response_get =
	     noc_sm2$RDY_s_response_get && noc_sm1$RDY_c1_response_put ;
  assign noc_sm2$EN_c0_request_get =
	     dp1_tlp_inF$FULL_N && noc_sm2$RDY_c0_request_get ;
  assign noc_sm2$EN_c0_response_put =
	     dp1_tlp_outF$EMPTY_N && noc_sm2$RDY_c0_response_put ;
  assign noc_sm2$EN_c1_request_get = noc_sm2$RDY_c1_request_get ;
  assign noc_sm2$EN_c1_response_put = 1'b0 ;

  // submodule pciw_inFifo
  assign pciw_inFifo$D_IN =
	     { !pciw_pci0_pcie_ep$trn_rsof_n,
	       !pciw_pci0_pcie_ep$trn_reof_n,
	       ~pciw_pci0_pcie_ep$trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_rd } ;
  assign pciw_inFifo$ENQ = pciw_pci0_pwTrnRx$whas ;
  assign pciw_inFifo$DEQ =
	     WILL_FIRE_RL_pciw_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_upconv_connect1 ;
  assign pciw_inFifo$CLR = 1'b0 ;

  // submodule pciw_outFifo
  assign pciw_outFifo$D_IN =
	     WILL_FIRE_RL_pciw_downconv_connect1 ?
	       MUX_pciw_outFifo$enq_1__VAL_1 :
	       pciw_rg_1[80:0] ;
  assign pciw_outFifo$ENQ =
	     WILL_FIRE_RL_pciw_downconv_connect1 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;
  assign pciw_outFifo$DEQ = WILL_FIRE_RL_pciw_connect_1 ;
  assign pciw_outFifo$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pciw_pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pciw_pci0_pcie_ep$trn_rcpl_streaming_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_rdst_rdy_n = !pciw_pci0_pwTrnRx$whas ;
  assign pciw_pci0_pcie_ep$trn_rnp_ok_n = 1'b0 ;
  assign pciw_pci0_pcie_ep$trn_td =
	     pciw_pci0_pwTrnTx$whas ? pciw_outFifo$D_OUT[63:0] : 64'h0 ;
  assign pciw_pci0_pcie_ep$trn_teof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_trem_n =
	     pciw_pci0_pwTrnTx$whas ? ~pciw_outFifo$D_OUT[71:64] : 8'd255 ;
  assign pciw_pci0_pcie_ep$trn_tsof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_pcie_ep$trn_tsrc_dsc_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx$whas ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice$sD_IN =
	     { pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_device_number,
	       pciw_pci0_pcie_ep$cfg_function_number } ;
  assign pciw_pciDevice$sEN = pciw_pciDevice$sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp$sD_IN = !pciw_pci0_pcie_ep$trn_lnk_up_n ;
  assign pciw_pciLinkUp$sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert$dDEQ =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule pciw_uI2PF
  assign pciw_uI2PF$D_IN = noc_sm0$s_response_get ;
  assign pciw_uI2PF$ENQ = noc_sm0$RDY_s_response_get && pciw_uI2PF$FULL_N ;
  assign pciw_uI2PF$DEQ = WILL_FIRE_RL_pciw_downconv_connect1 ;
  assign pciw_uI2PF$CLR = 1'b0 ;

  // submodule pciw_uP2IF
  assign pciw_uP2IF$D_IN =
	     MUX_pciw_uP2IF$enq_1__SEL_1 ?
	       MUX_pciw_uP2IF$enq_1__VAL_1 :
	       MUX_pciw_uP2IF$enq_1__VAL_2 ;
  assign pciw_uP2IF$ENQ =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;
  assign pciw_uP2IF$DEQ = noc_sm0$RDY_s_request_put && pciw_uP2IF$EMPTY_N ;
  assign pciw_uP2IF$CLR = 1'b0 ;

  // submodule wci2axi
  assign wci2axi$axiM0_rdAddr_ready_value = axi4m_ARREADY ;
  assign wci2axi$axiM0_rdResp_data_value = { axi4m_RRESP, axi4m_RDATA } ;
  assign wci2axi$axiM0_rdResp_valid_value = axi4m_RVALID ;
  assign wci2axi$axiM0_wrAddr_ready_value = axi4m_AWREADY ;
  assign wci2axi$axiM0_wrData_ready_value = axi4m_WREADY ;
  assign wci2axi$axiM0_wrResp_data_value = axi4m_BRESP ;
  assign wci2axi$axiM0_wrResp_valid_value = axi4m_BVALID ;
  assign wci2axi$wciS0_MAddr = cp$wci_Vm_0_MAddr ;
  assign wci2axi$wciS0_MAddrSpace = cp$wci_Vm_0_MAddrSpace ;
  assign wci2axi$wciS0_MByteEn = cp$wci_Vm_0_MByteEn ;
  assign wci2axi$wciS0_MCmd = cp$wci_Vm_0_MCmd ;
  assign wci2axi$wciS0_MData = cp$wci_Vm_0_MData ;
  assign wci2axi$wciS0_MFlag = cp$wci_Vm_0_MFlag ;

  // submodule wsi2axis
  assign wsi2axis$wsi_MBurstLength = appW2$wsiM0_MBurstLength ;
  assign wsi2axis$wsi_MByteEn = appW2$wsiM0_MByteEn ;
  assign wsi2axis$wsi_MCmd = appW2$wsiM0_MCmd ;
  assign wsi2axis$wsi_MData = appW2$wsiM0_MData ;
  assign wsi2axis$wsi_MReqInfo = appW2$wsiM0_MReqInfo ;
  assign wsi2axis$wsi_MReqLast = appW2$wsiM0_MReqLast ;
  assign wsi2axis$wsi_MBurstPrecise = appW2$wsiM0_MBurstPrecise ;
  assign wsi2axis$wsi_MReset_n = appW2$wsiM0_MReset_n ;
  assign wsi2axis$axi_dat_TREADY = axisM_dat_TREADY ;
  assign wsi2axis$axi_len_TREADY = axisM_len_TREADY ;
  assign wsi2axis$axi_spt_TREADY = axisM_spt_TREADY ;
  assign wsi2axis$axi_dpt_TREADY = axisM_dpt_TREADY ;
  assign wsi2axis$axi_err_TREADY = axisM_err_TREADY ;

  // remaining internal signals
  assign IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1214 =
	     (IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191 ||
	      dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943) &&
	     (IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201 ||
	      dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944) &&
	     (IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211 ||
	      dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945) ;
  assign IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3245 =
	     (IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222 ||
	      dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947) &&
	     (IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232 ||
	      dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948) &&
	     (IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242 ||
	      dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949) ;
  assign IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1532 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1537 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1421 =
	     (dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1413 &&
	       CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 ;
  assign IF_dp0_wmi_p4B_830_EQ_0_831_THEN_dp0_bram_serv_ETC___d1844 =
	     (dp0_wmi_p4B == 2'd0) ?
	       (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterB_outData_enqData$whas) &&
	       dp0_bram_serverAdapterB_outData_outData$whas :
	       IF_dp0_wmi_p4B_830_EQ_1_833_THEN_dp0_bram_serv_ETC___d1839 &&
	       CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 ;
  assign IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3563 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3568 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3452 =
	     (dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3444 &&
	       CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 ;
  assign IF_dp1_wmi_p4B_861_EQ_0_862_THEN_dp1_bram_serv_ETC___d3875 =
	     (dp1_wmi_p4B == 2'd0) ?
	       (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterB_outData_enqData$whas) &&
	       dp1_bram_serverAdapterB_outData_outData$whas :
	       IF_dp1_wmi_p4B_861_EQ_1_864_THEN_dp1_bram_serv_ETC___d3870 &&
	       CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 ;
  assign NOT_dp0_bml_lclBufDone_968_035_AND_IF_dp0_bml__ETC___d2048 =
	     !dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 ;
  assign NOT_dp0_tlp_mReqF_first__132_BITS_28_TO_19_309_ETC___d1323 =
	     (dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp0_tlp_mReqF$EMPTY_N) &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 ;
  assign NOT_dp0_tlp_mRespF_first__087_BITS_71_TO_62_09_ETC___d1111 =
	     dp0_tlp_mRespF$D_OUT[71:62] > 10'd1 ;
  assign NOT_dp0_wmi_wrActive_748_749_OR_NOT_dp0_wmi_rd_ETC___d1758 =
	     (!dp0_wmi_wrActive || !dp0_wmi_rdActive) &&
	     !dp0_wmi_wrFinalize &&
	     (dp0_wmi_mesgBufReady || dp0_wmi_mesgBusy) ;
  assign NOT_dp1_bml_lclBufDone_999_066_AND_IF_dp1_bml__ETC___d4079 =
	     !dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 ;
  assign NOT_dp1_tlp_mReqF_first__163_BITS_28_TO_19_340_ETC___d3354 =
	     (dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp1_tlp_mReqF$EMPTY_N) &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 ;
  assign NOT_dp1_wmi_wrActive_779_780_OR_NOT_dp1_wmi_rd_ETC___d3789 =
	     (!dp1_wmi_wrActive || !dp1_wmi_rdActive) &&
	     !dp1_wmi_wrFinalize &&
	     (dp1_wmi_mesgBufReady || dp1_wmi_mesgBusy) ;
  assign _dfoo13 =
	     dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h11179 =
	     (MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h12709 =
	     (MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h14106 =
	     (MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h15636 =
	     (MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h17033 =
	     (MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h18563 =
	     (MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h19960 =
	     (MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h87118 =
	     (MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h88517 =
	     (MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h90047 =
	     (MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h91444 =
	     (MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h92974 =
	     (MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h94371 =
	     (MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h95901 =
	     (MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h97298 =
	     (MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h9780 =
	     (MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign byteCount__h136308 = x__h136419 - y__h136420 ;
  assign byteCount__h59071 = x__h59182 - y__h59183 ;
  assign dp0_bml_crdBuf_value_926_EQ_dp0_bml_crdBuf_mod_ETC___d5073 =
	     dp0_bml_crdBuf_value == dp0_bml_crdBuf_modulus ;
  assign dp0_bml_fabBuf_value_911_EQ_dp0_bml_fabBuf_mod_ETC___d5074 =
	     dp0_bml_fabBuf_value == dp0_bml_fabBuf_modulus ;
  assign dp0_bml_fabFlowAddr_983_PLUS_dp0_bml_fabFlowSi_ETC___d4938 =
	     dp0_bml_fabFlowAddr + dp0_bml_fabFlowSize ;
  assign dp0_bml_lclBufDone_968_AND_IF_dp0_bml_dpContro_ETC___d5288 =
	     dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 ;
  assign dp0_bml_lclBuf_value_881_EQ_dp0_bml_lclBuf_mod_ETC___d5089 =
	     dp0_bml_lclBuf_value == dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_value_896_EQ_dp0_bml_remBuf_mod_ETC___d5090 =
	     dp0_bml_remBuf_value == dp0_bml_remBuf_modulus ;
  assign dp0_bram_serverAdapterA_1_cnt_24_PLUS_IF_dp0_b_ETC___d330 =
	     dp0_bram_serverAdapterA_1_cnt +
	     (dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943 =
	     (dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_42_PLUS_IF_dp0_b_ETC___d448 =
	     dp0_bram_serverAdapterA_2_cnt +
	     (dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944 =
	     (dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1492 =
	     (dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1490 ;
  assign dp0_bram_serverAdapterA_3_cnt_60_PLUS_IF_dp0_b_ETC___d566 =
	     dp0_bram_serverAdapterA_3_cnt +
	     (dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945 =
	     (dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_06_PLUS_IF_dp0_bra_ETC___d212 =
	     dp0_bram_serverAdapterA_cnt +
	     (dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942 =
	     (dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1494 =
	     (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1492 ;
  assign dp0_bram_serverAdapterA_outData_outData_whas___ETC___d1490 =
	     dp0_bram_serverAdapterA_outData_outData$whas &&
	     dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     dp0_tlp_mRespF$FULL_N &&
	     (!dp0_tlp_rdRespDwRemain_482_ULE_4___d1483 ||
	      dp0_tlp_readReq$EMPTY_N) ;
  assign dp0_bram_serverAdapterB_1_cnt_83_PLUS_IF_dp0_b_ETC___d389 =
	     dp0_bram_serverAdapterB_1_cnt +
	     (dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689 =
	     (dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1717 =
	     dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_01_PLUS_IF_dp0_b_ETC___d507 =
	     dp0_bram_serverAdapterB_2_cnt +
	     (dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690 =
	     (dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_19_PLUS_IF_dp0_b_ETC___d625 =
	     dp0_bram_serverAdapterB_3_cnt +
	     (dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691 =
	     (dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_65_PLUS_IF_dp0_bra_ETC___d271 =
	     dp0_bram_serverAdapterB_cnt +
	     (dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688 =
	     (dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_tlp_dmaPullRemainDWLen_91_ULE_dp0_tlp_dmaP_ETC___d4940 =
	     dp0_tlp_dmaPullRemainDWLen <= dp0_tlp_dmaPullRemainDWSub ;
  assign dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 =
	     dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d1030 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_dmaDoTailEvent &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_mesgComplReceived == dp0_tlp_fabMeta[112:96] ;
  assign dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d849 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady ;
  assign dp0_tlp_dpControl_wget__16_BITS_3_TO_2_31_EQ_2_ETC___d890 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     tagm__h44504 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__76_BITS_63_TO_56_79_EQ_pciD_ETC___d888 ;
  assign dp0_tlp_inF_first__76_BITS_63_TO_56_79_EQ_pciD_ETC___d888 =
	     dp0_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     dp0_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     dp0_tlp_inF$D_OUT[50:48] == 3'd0 ;
  assign dp0_tlp_inF_first__76_BIT_152_041_AND_NOT_dp0__ETC___d1066 =
	     dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inF$D_OUT[110] &&
	     !dp0_tlp_inF$D_OUT[125] &&
	     dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inIgnorePkt ;
  assign dp0_tlp_mReqF_RDY_deq__131_AND_IF_dp0_tlp_mReq_ETC___d1147 =
	     dp0_tlp_mReqF$EMPTY_N &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 ;
  assign dp0_tlp_outDwRemain_116_ULE_4___d4601 =
	     dp0_tlp_outDwRemain <= 10'd4 ;
  assign dp0_tlp_rdRespDwRemain_482_ULE_4___d1483 =
	     dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_1__q16 = dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_2__q17 = dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_3__q15 = dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign dp0_tlp_readRemainDWLen_338_ULE_4___d1339 =
	     dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign dp0_tlp_writeDWAddr_PLUS_1__q13 = dp0_tlp_writeDWAddr + 13'd1 ;
  assign dp0_tlp_writeDWAddr_PLUS_2__q14 = dp0_tlp_writeDWAddr + 13'd2 ;
  assign dp0_tlp_writeDWAddr_PLUS_3__q12 = dp0_tlp_writeDWAddr + 13'd3 ;
  assign dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 =
	     dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp0_tlp_writeRemainDWLen_168_ULE_2___d5206 =
	     dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 =
	     dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp0_wmi_dpControl_whas__675_AND_dp0_bram_serve_ETC___d1721 =
	     (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1717 ;
  assign dp1_bml_crdBuf_value_957_EQ_dp1_bml_crdBuf_mod_ETC___d5141 =
	     dp1_bml_crdBuf_value == dp1_bml_crdBuf_modulus ;
  assign dp1_bml_fabBuf_value_942_EQ_dp1_bml_fabBuf_mod_ETC___d5142 =
	     dp1_bml_fabBuf_value == dp1_bml_fabBuf_modulus ;
  assign dp1_bml_fabFlowAddr_014_PLUS_dp1_bml_fabFlowSi_ETC___d4939 =
	     dp1_bml_fabFlowAddr + dp1_bml_fabFlowSize ;
  assign dp1_bml_lclBufDone_999_AND_IF_dp1_bml_dpContro_ETC___d5319 =
	     dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 ;
  assign dp1_bml_lclBuf_value_912_EQ_dp1_bml_lclBuf_mod_ETC___d5157 =
	     dp1_bml_lclBuf_value == dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_value_927_EQ_dp1_bml_remBuf_mod_ETC___d5158 =
	     dp1_bml_remBuf_value == dp1_bml_remBuf_modulus ;
  assign dp1_bram_serverAdapterA_1_cnt_360_PLUS_IF_dp1__ETC___d2366 =
	     dp1_bram_serverAdapterA_1_cnt +
	     (dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947 =
	     (dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_478_PLUS_IF_dp1__ETC___d2484 =
	     dp1_bram_serverAdapterA_2_cnt +
	     (dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948 =
	     (dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3523 =
	     (dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3521 ;
  assign dp1_bram_serverAdapterA_3_cnt_596_PLUS_IF_dp1__ETC___d2602 =
	     dp1_bram_serverAdapterA_3_cnt +
	     (dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949 =
	     (dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_242_PLUS_IF_dp1_br_ETC___d2248 =
	     dp1_bram_serverAdapterA_cnt +
	     (dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946 =
	     (dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3525 =
	     (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3523 ;
  assign dp1_bram_serverAdapterA_outData_outData_whas___ETC___d3521 =
	     dp1_bram_serverAdapterA_outData_outData$whas &&
	     dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     dp1_tlp_mRespF$FULL_N &&
	     (!dp1_tlp_rdRespDwRemain_513_ULE_4___d3514 ||
	      dp1_tlp_readReq$EMPTY_N) ;
  assign dp1_bram_serverAdapterB_1_cnt_419_PLUS_IF_dp1__ETC___d2425 =
	     dp1_bram_serverAdapterB_1_cnt +
	     (dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720 =
	     (dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3748 =
	     dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_537_PLUS_IF_dp1__ETC___d2543 =
	     dp1_bram_serverAdapterB_2_cnt +
	     (dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721 =
	     (dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_655_PLUS_IF_dp1__ETC___d2661 =
	     dp1_bram_serverAdapterB_3_cnt +
	     (dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722 =
	     (dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_301_PLUS_IF_dp1_br_ETC___d2307 =
	     dp1_bram_serverAdapterB_cnt +
	     (dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719 =
	     (dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_tlp_dpControl_wget__847_BITS_3_TO_2_848_EQ_ETC___d2869 =
	     dp1_dpControl[3:2] == 2'd1 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpRcvBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign dp1_tlp_inF_first__088_BIT_152_089_AND_NOT_dp1_ETC___d3118 =
	     dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inF$D_OUT[110] &&
	     !dp1_tlp_inF$D_OUT[125] &&
	     dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inIgnorePkt ;
  assign dp1_tlp_mReqF_RDY_deq__162_AND_IF_dp1_tlp_mReq_ETC___d3178 =
	     dp1_tlp_mReqF$EMPTY_N &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 ;
  assign dp1_tlp_mRespF_first__879_BITS_71_TO_62_969_ULE_1___d5209 =
	     dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp1_tlp_outDwRemain_995_ULE_4___d4606 =
	     dp1_tlp_outDwRemain <= 10'd4 ;
  assign dp1_tlp_rdRespDwRemain_513_ULE_4___d3514 =
	     dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_1__q24 = dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_2__q25 = dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_3__q23 = dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign dp1_tlp_readRemainDWLen_369_ULE_4___d3370 =
	     dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign dp1_tlp_writeDWAddr_PLUS_1__q21 = dp1_tlp_writeDWAddr + 13'd1 ;
  assign dp1_tlp_writeDWAddr_PLUS_2__q22 = dp1_tlp_writeDWAddr + 13'd2 ;
  assign dp1_tlp_writeDWAddr_PLUS_3__q20 = dp1_tlp_writeDWAddr + 13'd3 ;
  assign dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 =
	     dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp1_tlp_writeRemainDWLen_199_ULE_2___d5211 =
	     dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 =
	     dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp1_wmi_dpControl_whas__706_AND_dp1_bram_serve_ETC___d3752 =
	     (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3748 ;
  assign idx__h127129 = 2'd0 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h129352 = 2'd1 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h130648 = 2'd2 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131944 = 2'd3 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h134192 = 2'd0 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h134660 = 2'd1 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h135033 = 2'd2 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h135406 = 2'd3 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h49892 = 2'd0 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h52115 = 2'd1 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h53411 = 2'd2 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h54707 = 2'd3 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h56955 = 2'd0 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h57423 = 2'd1 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h57796 = 2'd2 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h58169 = 2'd3 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign lastBE__h110909 =
	     dp1_tlp_mRespF_first__879_BITS_71_TO_62_969_ULE_1___d5209 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h44405 =
	     (thisRequestLength__h44103[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h136307 =
	     { dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h136306 } ;
  assign lowAddr__h59070 =
	     { dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h59069 } ;
  assign mesgMeta_opcode__h152509 =
	     { 24'h800000, dp1_wmi_wmi_mFlagReg[31:24] } ;
  assign mesgMeta_opcode__h75272 =
	     { 24'h800000, dp0_wmi_wmi_mFlagReg[31:24] } ;
  assign nowLS__h107267 =
	     { dp1_tlp_mRespF$D_OUT[39:32],
	       dp1_tlp_mRespF$D_OUT[47:40],
	       dp1_tlp_mRespF$D_OUT[55:48],
	       dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h40891 =
	     { dp0_tlp_inF$D_OUT[39:32],
	       dp0_tlp_inF$D_OUT[47:40],
	       dp0_tlp_inF$D_OUT[55:48],
	       dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h107266 =
	     { dp1_tlp_mRespF$D_OUT[71:64],
	       dp1_tlp_mRespF$D_OUT[79:72],
	       dp1_tlp_mRespF$D_OUT[87:80],
	       dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h40890 =
	     { dp0_tlp_inF$D_OUT[71:64],
	       dp0_tlp_inF$D_OUT[79:72],
	       dp0_tlp_inF$D_OUT[87:80],
	       dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h107265 =
	     { dp1_tlp_mRespF$D_OUT[103:96],
	       dp1_tlp_mRespF$D_OUT[111:104],
	       dp1_tlp_mRespF$D_OUT[119:112],
	       dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h40889 =
	     { dp0_tlp_inF$D_OUT[103:96],
	       dp0_tlp_inF$D_OUT[111:104],
	       dp0_tlp_inF$D_OUT[119:112],
	       dp0_tlp_inF$D_OUT[127:120] } ;
  assign pkt__h124788 =
	     { 9'd148,
	       dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd16,
	       dp1_tlp_mRespF$D_OUT[54:43],
	       dp1_tlp_mRespF$D_OUT[87:72],
	       dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp1_tlp_mRespF$D_OUT[61:55],
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h47551 =
	     { 9'd148,
	       dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd0,
	       dp0_tlp_mRespF$D_OUT[54:43],
	       dp0_tlp_mRespF$D_OUT[87:72],
	       dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp0_tlp_mRespF$D_OUT[61:55],
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h161098 = { 16'd0, dp1_bml_lclNumBufs } ;
  assign rdat__h161106 = { 16'd0, dp1_bml_fabNumBufs } ;
  assign rdat__h161114 = { 16'd0, dp1_bml_mesgBase } ;
  assign rdat__h161122 = { 16'd0, dp1_bml_metaBase } ;
  assign rdat__h161130 = { 16'd0, dp1_bml_mesgSize } ;
  assign rdat__h161138 = { 16'd0, dp1_bml_metaSize } ;
  assign rdat__h161146 = { 16'd0, dp1_bml_lclBufsCF } ;
  assign rdat__h161167 = { dp1_bml_lclBufsAR, dp1_bml_fabBufsAvail } ;
  assign rdat__h161172 = { dp1_bml_remBuf_value, dp1_bml_lclBuf_value } ;
  assign rdat__h161183 = { dp1_bml_lclStarts, dp1_bml_lclDones } ;
  assign rdat__h161188 = { dp1_bml_remStarts, dp1_bml_remDones } ;
  assign rdat__h161249 = { 28'd0, dp1_dpControl } ;
  assign rdat__h83866 = { 16'd0, dp0_bml_lclNumBufs } ;
  assign rdat__h83874 = { 16'd0, dp0_bml_fabNumBufs } ;
  assign rdat__h83882 = { 16'd0, dp0_bml_mesgBase } ;
  assign rdat__h83890 = { 16'd0, dp0_bml_metaBase } ;
  assign rdat__h83898 = { 16'd0, dp0_bml_mesgSize } ;
  assign rdat__h83906 = { 16'd0, dp0_bml_metaSize } ;
  assign rdat__h83914 = { 16'd0, dp0_bml_lclBufsCF } ;
  assign rdat__h83935 = { dp0_bml_lclBufsAR, dp0_bml_fabBufsAvail } ;
  assign rdat__h83940 = { dp0_bml_remBuf_value, dp0_bml_lclBuf_value } ;
  assign rdat__h83951 = { dp0_bml_lclStarts, dp0_bml_lclDones } ;
  assign rdat__h83956 = { dp0_bml_remStarts, dp0_bml_remDones } ;
  assign rdat__h84017 = { 28'd0, dp0_dpControl } ;
  assign rdata__h141676 =
	     dp1_tlp_readNxtDWAddr[1] ?
	       IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3563 :
	       IF_dp1_tlp_readNxtDWAddr_381_BIT_0_558_THEN_dp_ETC___d3568 ;
  assign rdata__h64439 =
	     dp0_tlp_readNxtDWAddr[1] ?
	       IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1532 :
	       IF_dp0_tlp_readNxtDWAddr_350_BIT_0_527_THEN_dp_ETC___d1537 ;
  assign rreq_tag__h110710 =
	     (y__h110521 == dp1_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h136350 =
	     { IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503[7:0],
	       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503[15:8],
	       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503[23:16],
	       IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503[31:24] } ;
  assign rresp_data__h59113 =
	     { IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498[7:0],
	       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498[15:8],
	       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498[23:16],
	       IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498[31:24] } ;
  assign spanToNextPage__h110480 =
	     13'd4096 - { 1'd0, dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h44102 =
	     13'd4096 - { 1'd0, dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h44378 = { 3'd0, dp0_tlp_dmaTag } ;
  assign tagm__h44504 = { 3'd0, dp0_tlp_dmaReqTag } ;
  assign thisRequestLength__h110481 =
	     (x__h110534[12:0] <= spanToNextPage__h110480) ?
	       x__h110534[12:0] :
	       spanToNextPage__h110480 ;
  assign thisRequestLength__h44103 =
	     (x__h44136[12:0] <= spanToNextPage__h44102) ?
	       x__h44136[12:0] :
	       spanToNextPage__h44102 ;
  assign wOut_be__h3151 = { pciw_rg[71:64], pciw_inFifo$D_OUT[71:64] } ;
  assign wOut_data__h3152 = { pciw_rg[63:0], pciw_inFifo$D_OUT[63:0] } ;
  assign w_be__h111438 =
	     dp1_tlp_outDwRemain_995_ULE_4___d4606 ?
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 :
	       16'd65535 ;
  assign w_be__h33913 =
	     dp0_tlp_outDwRemain_116_ULE_4___d4601 ?
	       CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 :
	       16'd65535 ;
  assign w_data__h110885 =
	     { 22'd1048580,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd256,
	       lastBE__h110909,
	       4'd15,
	       dp1_tlp_fabMesgAccu,
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h111864 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd65791,
	       dp1_tlp_fabMetaAddr,
	       dp1_tlp_fabMeta[103:96],
	       dp1_tlp_fabMeta[111:104],
	       dp1_tlp_fabMeta[119:112],
	       dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h112926 =
	     { dp1_tlp_fabMeta[71:64],
	       dp1_tlp_fabMeta[79:72],
	       dp1_tlp_fabMeta[87:80],
	       dp1_tlp_fabMeta[95:88],
	       dp1_tlp_fabMeta[39:32],
	       dp1_tlp_fabMeta[47:40],
	       dp1_tlp_fabMeta[55:48],
	       dp1_tlp_fabMeta[63:56],
	       dp1_tlp_fabMeta[7:0],
	       dp1_tlp_fabMeta[15:8],
	       dp1_tlp_fabMeta[23:16],
	       dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h122934 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd65551,
	       dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h38609 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd0,
	       tag__h44378,
	       8'd255,
	       dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h44384 =
	     { 22'd4,
	       thisRequestLength__h44103[11:2],
	       pciDevice[15:3],
	       3'd0,
	       tag__h44378,
	       lastBE__h44405,
	       4'd15,
	       dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h45698 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd15,
	       dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign x3__h152469 = { 8'd0, dp1_wmi_wmi_mFlagReg[23:0] } ;
  assign x3__h75232 = { 8'd0, dp0_wmi_wmi_mFlagReg[23:0] } ;
  assign x__h107328 = { 15'd0, dp1_tlp_mesgLengthRemainPush } ;
  assign x__h110534 =
	     (dp1_tlp_mesgLengthRemainPush <= y__h110536) ?
	       dp1_tlp_mesgLengthRemainPush :
	       y__h110536 ;
  assign x__h111036 = { dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h136419 = x__h136421 - y__h136422 ;
  assign x__h136421 = { dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h158250 =
	     (dp1_dpControl[1:0] == 2'd1) ? dp1_bml_fabNumBufs : 16'd0 ;
  assign x__h159374 = dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h159379 = dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h159451 = dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h159456 = dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h159493 = dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h159498 = dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h159531 = dp1_bml_lclCredit + 16'd1 ;
  assign x__h159536 = dp1_bml_lclCredit - 16'd1 ;
  assign x__h40921 = { 15'd0, dp0_tlp_mesgLengthRemainPull } ;
  assign x__h44136 =
	     (dp0_tlp_mesgLengthRemainPull <= y__h44138) ?
	       dp0_tlp_mesgLengthRemainPull :
	       y__h44138 ;
  assign x__h44713 = { dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h45391 = { dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h59182 = x__h59184 - y__h59185 ;
  assign x__h59184 = { dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h81016 =
	     (dp0_dpControl[1:0] == 2'd1) ? dp0_bml_fabNumBufs : 16'd0 ;
  assign x__h82140 = dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h82145 = dp0_bml_lclBufsAR - 16'd1 ;
  assign x__h82217 = dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h82222 = dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h82259 = dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h82264 = dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h82297 = dp0_bml_lclCredit + 16'd1 ;
  assign x__h82302 = dp0_bml_lclCredit - 16'd1 ;
  assign x_be__h3072 = { pciw_inFifo$D_OUT[71:64], 8'd0 } ;
  assign x_data__h3073 = { pciw_inFifo$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign y__h110521 = { 4'd0, thisRequestLength__h110481 } ;
  assign y__h110536 = { 4'd0, dp1_tlp_maxPayloadSize } ;
  assign y__h110615 = { 19'd0, thisRequestLength__h110481 } ;
  assign y__h110663 = { 3'd0, thisRequestLength__h110481 } ;
  assign y__h111033 = { 22'd0, x__h111036 } ;
  assign y__h136420 =
	     (dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h136451 } ;
  assign y__h136422 = { 10'd0, x__h136428 } ;
  assign y__h44128 = { 4'd0, thisRequestLength__h44103 } ;
  assign y__h44138 = { 4'd0, dp0_tlp_maxReadReqSize } ;
  assign y__h44199 = { 19'd0, thisRequestLength__h44103 } ;
  assign y__h44710 = { 6'd0, x__h44713 } ;
  assign y__h45388 =
	     dp0_tlp_dmaPullRemainDWSub_005_ULE_4___d4941 ?
	       { 7'd0, x__h45391 } :
	       17'd16 ;
  assign y__h59183 =
	     (dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h59214 } ;
  assign y__h59185 = { 10'd0, x__h59191 } ;
  assign y_avValue__h154065 =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       dp1_bram_memory$DOB ;
  assign y_avValue__h154085 =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOB ;
  assign y_avValue__h154105 =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOB ;
  assign y_avValue__h154125 =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOB ;
  assign y_avValue__h76828 =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       dp0_bram_memory$DOB ;
  assign y_avValue__h76848 =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOB ;
  assign y_avValue__h76868 =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOB ;
  assign y_avValue__h76888 =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOB ;
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h59191 = 2'b10;
      4'b1110: x__h59191 = 2'b01;
      4'b1111: x__h59191 = 2'b0;
      default: x__h59191 = 2'b11;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h59214 = 2'b10;
      4'b1110: x__h59214 = 2'b01;
      4'b1111: x__h59214 = 2'b0;
      default: x__h59214 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h136428 = 2'b10;
      4'b1110: x__h136428 = 2'b01;
      4'b1111: x__h136428 = 2'b0;
      default: x__h136428 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h136451 = 2'b10;
      4'b1110: x__h136451 = 2'b01;
      4'b1111: x__h136451 = 2'b0;
      default: x__h136451 = 2'b11;
    endcase
  end
  always@(dp0_wmi_p4B or
	  y_avValue__h76888 or
	  y_avValue__h76828 or y_avValue__h76848 or y_avValue__h76868)
  begin
    case (dp0_wmi_p4B)
      2'd0: rdata__h76992 = y_avValue__h76828;
      2'd1: rdata__h76992 = y_avValue__h76848;
      2'd2: rdata__h76992 = y_avValue__h76868;
      2'd3: rdata__h76992 = y_avValue__h76888;
    endcase
  end
  always@(dp1_wmi_p4B or
	  y_avValue__h154125 or
	  y_avValue__h154065 or y_avValue__h154085 or y_avValue__h154105)
  begin
    case (dp1_wmi_p4B)
      2'd0: rdata__h154229 = y_avValue__h154065;
      2'd1: rdata__h154229 = y_avValue__h154085;
      2'd2: rdata__h154229 = y_avValue__h154105;
      2'd3: rdata__h154229 = y_avValue__h154125;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h59069 = 2'b11;
      4'b1100: lowAddr10__h59069 = 2'b10;
      4'b1110: lowAddr10__h59069 = 2'b01;
      default: lowAddr10__h59069 = 2'b0;
    endcase
  end
  always@(dp0_wci_reqF$D_OUT or
	  rdat__h83866 or
	  rdat__h83874 or
	  rdat__h83882 or
	  rdat__h83890 or
	  rdat__h83898 or
	  rdat__h83906 or
	  rdat__h83914 or
	  rdat__h83935 or
	  rdat__h83940 or
	  rdat__h83951 or
	  rdat__h83956 or
	  dp0_bml_fabMesgBase or
	  dp0_bml_fabMetaBase or
	  dp0_bml_fabMesgSize or
	  dp0_bml_fabMetaSize or
	  dp0_bml_fabFlowBase or dp0_bml_fabFlowSize or rdat__h84017)
  begin
    case (dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h83787 = rdat__h83866;
      8'h04: _theResult____h83787 = rdat__h83874;
      8'h08: _theResult____h83787 = rdat__h83882;
      8'h0C: _theResult____h83787 = rdat__h83890;
      8'h10: _theResult____h83787 = rdat__h83898;
      8'h14: _theResult____h83787 = rdat__h83906;
      8'h20: _theResult____h83787 = rdat__h83914;
      8'h24: _theResult____h83787 = 32'hF00DFACE;
      8'h28: _theResult____h83787 = rdat__h83935;
      8'h2C: _theResult____h83787 = rdat__h83940;
      8'h30: _theResult____h83787 = rdat__h83951;
      8'h34: _theResult____h83787 = rdat__h83956;
      8'h48: _theResult____h83787 = 32'hDADEBABE;
      8'h4C: _theResult____h83787 = 32'h00008000;
      8'h50: _theResult____h83787 = dp0_bml_fabMesgBase;
      8'h54: _theResult____h83787 = dp0_bml_fabMetaBase;
      8'h58: _theResult____h83787 = dp0_bml_fabMesgSize;
      8'h5C: _theResult____h83787 = dp0_bml_fabMetaSize;
      8'h60: _theResult____h83787 = dp0_bml_fabFlowBase;
      8'h64: _theResult____h83787 = dp0_bml_fabFlowSize;
      8'h68: _theResult____h83787 = rdat__h84017;
      default: _theResult____h83787 = 32'd0;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h136306 = 2'b11;
      4'b1100: lowAddr10__h136306 = 2'b10;
      4'b1110: lowAddr10__h136306 = 2'b01;
      default: lowAddr10__h136306 = 2'b0;
    endcase
  end
  always@(dp1_wci_reqF$D_OUT or
	  rdat__h161098 or
	  rdat__h161106 or
	  rdat__h161114 or
	  rdat__h161122 or
	  rdat__h161130 or
	  rdat__h161138 or
	  rdat__h161146 or
	  rdat__h161167 or
	  rdat__h161172 or
	  rdat__h161183 or
	  rdat__h161188 or
	  dp1_bml_fabMesgBase or
	  dp1_bml_fabMetaBase or
	  dp1_bml_fabMesgSize or
	  dp1_bml_fabMetaSize or
	  dp1_bml_fabFlowBase or dp1_bml_fabFlowSize or rdat__h161249)
  begin
    case (dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h161019 = rdat__h161098;
      8'h04: _theResult____h161019 = rdat__h161106;
      8'h08: _theResult____h161019 = rdat__h161114;
      8'h0C: _theResult____h161019 = rdat__h161122;
      8'h10: _theResult____h161019 = rdat__h161130;
      8'h14: _theResult____h161019 = rdat__h161138;
      8'h20: _theResult____h161019 = rdat__h161146;
      8'h24: _theResult____h161019 = 32'hF00DFACE;
      8'h28: _theResult____h161019 = rdat__h161167;
      8'h2C: _theResult____h161019 = rdat__h161172;
      8'h30: _theResult____h161019 = rdat__h161183;
      8'h34: _theResult____h161019 = rdat__h161188;
      8'h48: _theResult____h161019 = 32'hDADEBABE;
      8'h4C: _theResult____h161019 = 32'h00008000;
      8'h50: _theResult____h161019 = dp1_bml_fabMesgBase;
      8'h54: _theResult____h161019 = dp1_bml_fabMetaBase;
      8'h58: _theResult____h161019 = dp1_bml_fabMesgSize;
      8'h5C: _theResult____h161019 = dp1_bml_fabMetaSize;
      8'h60: _theResult____h161019 = dp1_bml_fabFlowBase;
      8'h64: _theResult____h161019 = dp1_bml_fabFlowSize;
      8'h68: _theResult____h161019 = rdat__h161249;
      default: _theResult____h161019 = 32'd0;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021 =
	      dp0_bml_fabDone;
      2'd1:
	  IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021 =
	      dp0_bml_remDone;
      default: IF_dp0_bml_dpControl_wget__944_BITS_1_TO_0_950_ETC___d2021 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052 =
	      dp1_bml_fabDone;
      2'd1:
	  IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052 =
	      dp1_bml_remDone;
      default: IF_dp1_bml_dpControl_wget__975_BITS_1_TO_0_981_ETC___d4052 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
	      dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		dp0_bml_remDone :
		dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q1 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
	      dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		dp1_bml_remDone :
		dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q2 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_outDwRemain)
  begin
    case (dp0_tlp_outDwRemain[1:0])
      2'b0: CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFFFF;
      2'b01:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hF000;
      2'b10:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFF00;
      2'd3: CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q3 = 16'hFFF0;
    endcase
  end
  always@(dp1_tlp_outDwRemain)
  begin
    case (dp1_tlp_outDwRemain[1:0])
      2'b0: CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFFFF;
      2'b01:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hF000;
      2'b10:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFF00;
      2'd3: CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q4 = 16'hFFF0;
    endcase
  end
  always@(idx__h49892 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h49892)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181 =
	      dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181 =
	      dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1181 =
	      dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h52115 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h52115)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191 =
	      dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191 =
	      dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1191 =
	      dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h53411 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h53411)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201 =
	      dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201 =
	      dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1201 =
	      dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h54707 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h54707)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211 =
	      dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211 =
	      dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d1211 =
	      dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h127129 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h127129)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h129352 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h129352)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h130648 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h130648)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232 =
	      dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232 =
	      dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3232 =
	      dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h131944 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h131944)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242 =
	      dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242 =
	      dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d3242 =
	      dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945 or
	  dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942 or
	  dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943 or
	  dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944)
  begin
    case (dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q5 =
	      dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945 or
	  dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942 or
	  dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943 or
	  dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944)
  begin
    case (dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_cnt_06_SLT_3___d4942;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_1_cnt_24_SLT_3___d4943;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_bram_serverAdapterA_2_cnt_42_SLT_3___d4944;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q6 =
	      dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_60_SLT_3___d4945;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949 or
	  dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946 or
	  dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947 or
	  dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948)
  begin
    case (dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q7 =
	      dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949 or
	  dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946 or
	  dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947 or
	  dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948)
  begin
    case (dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_cnt_242_SLT_3___d4946;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_1_cnt_360_SLT_3___d4947;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_bram_serverAdapterA_2_cnt_478_SLT_3___d4948;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q8 =
	      dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_596_SLT_3___d4949;
    endcase
  end
  always@(dp0_wmi_addr or
	  dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691 or
	  dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688 or
	  dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689 or
	  dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690)
  begin
    case (dp0_wmi_addr[3:2])
      2'd0:
	  IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 =
	      dp0_bram_serverAdapterB_cnt_65_SLT_3___d1688;
      2'd1:
	  IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 =
	      dp0_bram_serverAdapterB_1_cnt_83_SLT_3___d1689;
      2'd2:
	  IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 =
	      dp0_bram_serverAdapterB_2_cnt_01_SLT_3___d1690;
      2'd3:
	  IF_dp0_wmi_addr_776_BITS_3_TO_2_777_EQ_0_778_T_ETC___d5243 =
	      dp0_wmi_addr[3:2] != 2'd3 ||
	      dp0_bram_serverAdapterB_3_cnt_19_SLT_3___d1691;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		!dp0_bml_remDone :
		!dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q9 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_wmi_addr or
	  dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722 or
	  dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719 or
	  dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720 or
	  dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721)
  begin
    case (dp1_wmi_addr[3:2])
      2'd0:
	  IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 =
	      dp1_bram_serverAdapterB_cnt_301_SLT_3___d3719;
      2'd1:
	  IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 =
	      dp1_bram_serverAdapterB_1_cnt_419_SLT_3___d3720;
      2'd2:
	  IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 =
	      dp1_bram_serverAdapterB_2_cnt_537_SLT_3___d3721;
      2'd3:
	  IF_dp1_wmi_addr_807_BITS_3_TO_2_808_EQ_0_809_T_ETC___d5256 =
	      dp1_wmi_addr[3:2] != 2'd3 ||
	      dp1_bram_serverAdapterB_3_cnt_655_SLT_3___d3722;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		!dp1_bml_remDone :
		!dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q10 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(idx__h49892 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h49892)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5283 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h52115 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h52115)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5284 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h53411 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h53411)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5285 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h54707 or
	  dp0_tlp_writeRemainDWLen_168_ULE_3___d5207 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_168_ULE_1___d5205 or
	  dp0_tlp_writeRemainDWLen_168_ULE_2___d5206)
  begin
    case (idx__h54707)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_1___d5205;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_2___d5206;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d5286 =
	      !dp0_tlp_writeRemainDWLen_168_ULE_3___d5207;
    endcase
  end
  always@(idx__h127129 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h127129)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5314 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h129352 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h129352)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5315 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h130648 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h130648)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5316 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h131944 or
	  dp1_tlp_writeRemainDWLen_199_ULE_3___d5213 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_199_ULE_1___d5212 or
	  dp1_tlp_writeRemainDWLen_199_ULE_2___d5211)
  begin
    case (idx__h131944)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_1___d5212;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_2___d5211;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d5317 =
	      !dp1_tlp_writeRemainDWLen_199_ULE_3___d5213;
    endcase
  end
  always@(idx__h49892 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h49892)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4494 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h52115 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h52115)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4495 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h53411 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h53411)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4496 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h54707 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h54707)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_164_BITS_1_TO_0_ETC___d4497 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h127129 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h127129)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4499 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h130648 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h130648)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4501 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h129352 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h129352)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4500 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h131944 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h131944)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_195_BITS_1_TO_0_ETC___d4502 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
	      !dp0_bml_remDone;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q11 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
	      !dp1_bml_remDone;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q19 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1413 =
	      dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1413 =
	      dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d1413 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$wget or
	  dp0_bram_serverAdapterA_outData_outData$wget or
	  dp0_bram_serverAdapterA_1_outData_outData$wget or
	  dp0_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498 =
	      dp0_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498 =
	      dp0_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498 =
	      dp0_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp0_tlp_readReq_first__398_BITS_30_TO_29_39_ETC___d4498 =
	      dp0_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$whas or
	  dp0_bram_serverAdapterA_1_outData_outData$whas or
	  dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
	      dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
	      dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q27 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_3_outData_enqData$whas or
	  dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_1_outData_enqData$whas or
	  dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  IF_dp0_wmi_p4B_830_EQ_1_833_THEN_dp0_bram_serv_ETC___d1839 =
	      dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_wmi_p4B_830_EQ_1_833_THEN_dp0_bram_serv_ETC___d1839 =
	      dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp0_wmi_p4B_830_EQ_1_833_THEN_dp0_bram_serv_ETC___d1839 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outData_outData$whas or
	  dp0_bram_serverAdapterB_1_outData_outData$whas or
	  dp0_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
	      dp0_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
	      dp0_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q28 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3444 =
	      dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3444 =
	      dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d3444 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$wget or
	  dp1_bram_serverAdapterA_outData_outData$wget or
	  dp1_bram_serverAdapterA_1_outData_outData$wget or
	  dp1_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503 =
	      dp1_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503 =
	      dp1_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503 =
	      dp1_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp1_tlp_readReq_first__429_BITS_30_TO_29_43_ETC___d4503 =
	      dp1_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$whas or
	  dp1_bram_serverAdapterA_1_outData_outData$whas or
	  dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
	      dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
	      dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q29 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_3_outData_enqData$whas or
	  dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_1_outData_enqData$whas or
	  dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  IF_dp1_wmi_p4B_861_EQ_1_864_THEN_dp1_bram_serv_ETC___d3870 =
	      dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_wmi_p4B_861_EQ_1_864_THEN_dp1_bram_serv_ETC___d3870 =
	      dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp1_wmi_p4B_861_EQ_1_864_THEN_dp1_bram_serv_ETC___d3870 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outData_outData$whas or
	  dp1_bram_serverAdapterB_1_outData_outData$whas or
	  dp1_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
	      dp1_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
	      dp1_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q30 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end

  // handling of inlined registers

  always@(posedge pciw_pci0_pcie_ep$trn_clk)
  begin
    if (!cp$RST_N_wci_Vm_14)
      begin
        dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd512;
	dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp1_bml_crdBuf_modulus$EN)
	  dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_modulus$D_IN;
	if (dp1_bml_crdBuf_value$EN)
	  dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_value$D_IN;
	if (dp1_bml_fabAvail$EN)
	  dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabAvail$D_IN;
	if (dp1_bml_fabBuf_modulus$EN)
	  dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_modulus$D_IN;
	if (dp1_bml_fabBuf_value$EN)
	  dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_value$D_IN;
	if (dp1_bml_fabDone$EN)
	  dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabDone$D_IN;
	if (dp1_bml_fabFlowBase$EN)
	  dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowBase$D_IN;
	if (dp1_bml_fabFlowSize$EN)
	  dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowSize$D_IN;
	if (dp1_bml_fabMesgBase$EN)
	  dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgBase$D_IN;
	if (dp1_bml_fabMesgSize$EN)
	  dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgSize$D_IN;
	if (dp1_bml_fabMetaBase$EN)
	  dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaBase$D_IN;
	if (dp1_bml_fabMetaSize$EN)
	  dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaSize$D_IN;
	if (dp1_bml_fabNumBufs$EN)
	  dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabNumBufs$D_IN;
	if (dp1_bml_lclBufDone$EN)
	  dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufDone$D_IN;
	if (dp1_bml_lclBufStart$EN)
	  dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBufStart$D_IN;
	if (dp1_bml_lclBuf_modulus$EN)
	  dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_modulus$D_IN;
	if (dp1_bml_lclBuf_value$EN)
	  dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_value$D_IN;
	if (dp1_bml_lclDones$EN)
	  dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclDones$D_IN;
	if (dp1_bml_lclNumBufs$EN)
	  dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclNumBufs$D_IN;
	if (dp1_bml_lclStarts$EN)
	  dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclStarts$D_IN;
	if (dp1_bml_mesgBase$EN)
	  dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgBase$D_IN;
	if (dp1_bml_mesgSize$EN)
	  dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgSize$D_IN;
	if (dp1_bml_metaBase$EN)
	  dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaBase$D_IN;
	if (dp1_bml_metaSize$EN)
	  dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaSize$D_IN;
	if (dp1_bml_remBuf_modulus$EN)
	  dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_modulus$D_IN;
	if (dp1_bml_remBuf_value$EN)
	  dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_value$D_IN;
	if (dp1_bml_remDone$EN)
	  dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDone$D_IN;
	if (dp1_bml_remDones$EN)
	  dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDones$D_IN;
	if (dp1_bml_remStart$EN)
	  dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStart$D_IN;
	if (dp1_bml_remStarts$EN)
	  dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStarts$D_IN;
	if (dp1_bram_serverAdapterA_1_cnt$EN)
	  dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (dp1_bram_serverAdapterA_1_s1$EN)
	  dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_s1$D_IN;
	if (dp1_bram_serverAdapterA_2_cnt$EN)
	  dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (dp1_bram_serverAdapterA_2_s1$EN)
	  dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_s1$D_IN;
	if (dp1_bram_serverAdapterA_3_cnt$EN)
	  dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (dp1_bram_serverAdapterA_3_s1$EN)
	  dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_s1$D_IN;
	if (dp1_bram_serverAdapterA_cnt$EN)
	  dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_cnt$D_IN;
	if (dp1_bram_serverAdapterA_s1$EN)
	  dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_s1$D_IN;
	if (dp1_bram_serverAdapterB_1_cnt$EN)
	  dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (dp1_bram_serverAdapterB_1_s1$EN)
	  dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_s1$D_IN;
	if (dp1_bram_serverAdapterB_2_cnt$EN)
	  dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (dp1_bram_serverAdapterB_2_s1$EN)
	  dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_s1$D_IN;
	if (dp1_bram_serverAdapterB_3_cnt$EN)
	  dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (dp1_bram_serverAdapterB_3_s1$EN)
	  dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_s1$D_IN;
	if (dp1_bram_serverAdapterB_cnt$EN)
	  dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_cnt$D_IN;
	if (dp1_bram_serverAdapterB_s1$EN)
	  dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_s1$D_IN;
	if (dp1_dpControl$EN)
	  dp1_dpControl <= `BSV_ASSIGNMENT_DELAY dp1_dpControl$D_IN;
	if (dp1_tlp_creditReady$EN)
	  dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_creditReady$D_IN;
	if (dp1_tlp_debugBdata$EN)
	  dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp1_tlp_debugBdata$D_IN;
	if (dp1_tlp_dmaDoTailEvent$EN)
	  dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_dmaDoTailEvent$D_IN;
	if (dp1_tlp_dmaTag$EN)
	  dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaTag$D_IN;
	if (dp1_tlp_doXmtMetaBody$EN)
	  dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_doXmtMetaBody$D_IN;
	if (dp1_tlp_fabMeta$EN)
	  dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMeta$D_IN;
	if (dp1_tlp_farBufReady$EN)
	  dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_farBufReady$D_IN;
	if (dp1_tlp_flowDiagCount$EN)
	  dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_flowDiagCount$D_IN;
	if (dp1_tlp_gotResponseHeader$EN)
	  dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_gotResponseHeader$D_IN;
	if (dp1_tlp_maxPayloadSize$EN)
	  dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxPayloadSize$D_IN;
	if (dp1_tlp_maxReadReqSize$EN)
	  dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxReadReqSize$D_IN;
	if (dp1_tlp_nearBufReady$EN)
	  dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_nearBufReady$D_IN;
	if (dp1_tlp_postSeqDwell$EN)
	  dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_postSeqDwell$D_IN;
	if (dp1_tlp_pullTagMatch$EN)
	  dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_pullTagMatch$D_IN;
	if (dp1_tlp_readHeaderSent$EN)
	  dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readHeaderSent$D_IN;
	if (dp1_tlp_readStarted$EN)
	  dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readStarted$D_IN;
	if (dp1_tlp_remDone$EN)
	  dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remDone$D_IN;
	if (dp1_tlp_remStart$EN)
	  dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remStart$D_IN;
	if (dp1_tlp_reqMesgInFlight$EN)
	  dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMesgInFlight$D_IN;
	if (dp1_tlp_reqMetaBodyInFlight$EN)
	  dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (dp1_tlp_reqMetaInFlight$EN)
	  dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaInFlight$D_IN;
	if (dp1_tlp_tlpMetaSent$EN)
	  dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_tlpMetaSent$D_IN;
	if (dp1_tlp_tlpRcvBusy$EN)
	  dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpRcvBusy$D_IN;
	if (dp1_tlp_tlpXmtBusy$EN)
	  dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpXmtBusy$D_IN;
	if (dp1_tlp_xmtMetaInFlight$EN)
	  dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_xmtMetaInFlight$D_IN;
	if (dp1_tlp_xmtMetaOK$EN)
	  dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp1_tlp_xmtMetaOK$D_IN;
	if (dp1_wci_cEdge$EN)
	  dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp1_wci_cEdge$D_IN;
	if (dp1_wci_cState$EN)
	  dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY dp1_wci_cState$D_IN;
	if (dp1_wci_ctlAckReg$EN)
	  dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_ctlAckReg$D_IN;
	if (dp1_wci_ctlOpActive$EN)
	  dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_ctlOpActive$D_IN;
	if (dp1_wci_illegalEdge$EN)
	  dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_illegalEdge$D_IN;
	if (dp1_wci_nState$EN)
	  dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY dp1_wci_nState$D_IN;
	if (dp1_wci_reqF_countReg$EN)
	  dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_reqF_countReg$D_IN;
	if (dp1_wci_respF_c_r$EN)
	  dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_c_r$D_IN;
	if (dp1_wci_respF_q_0$EN)
	  dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_0$D_IN;
	if (dp1_wci_respF_q_1$EN)
	  dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_1$D_IN;
	if (dp1_wci_sFlagReg$EN)
	  dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_sFlagReg$D_IN;
	if (dp1_wci_sThreadBusy_d$EN)
	  dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_sThreadBusy_d$D_IN;
	if (dp1_wmi_bufDwell$EN)
	  dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp1_wmi_bufDwell$D_IN;
	if (dp1_wmi_bytesRemainResp$EN)
	  dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_bytesRemainResp$D_IN;
	if (dp1_wmi_doneWithMesg$EN)
	  dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_doneWithMesg$D_IN;
	if (dp1_wmi_lastMesg$EN)
	  dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lastMesg$D_IN;
	if (dp1_wmi_mesgBufReady$EN)
	  dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_mesgBufReady$D_IN;
	if (dp1_wmi_mesgBusy$EN)
	  dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgBusy$D_IN;
	if (dp1_wmi_mesgCount$EN)
	  dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgCount$D_IN;
	if (dp1_wmi_mesgDone$EN)
	  dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgDone$D_IN;
	if (dp1_wmi_mesgMeta$EN)
	  dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgMeta$D_IN;
	if (dp1_wmi_mesgStart$EN)
	  dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgStart$D_IN;
	if (dp1_wmi_metaBusy$EN)
	  dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_metaBusy$D_IN;
	if (dp1_wmi_p4B$EN)
	  dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp1_wmi_p4B$D_IN;
	if (dp1_wmi_rdActive$EN)
	  dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_rdActive$D_IN;
	if (dp1_wmi_reqCount$EN)
	  dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_reqCount$D_IN;
	if (dp1_wmi_thisMesg$EN)
	  dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_thisMesg$D_IN;
	if (dp1_wmi_wmi_blockReq$EN)
	  dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_blockReq$D_IN;
	if (dp1_wmi_wmi_dhF_countReg$EN)
	  dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_countReg$D_IN;
	if (dp1_wmi_wmi_dhF_levelsValid$EN)
	  dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp1_wmi_wmi_errorSticky$EN)
	  dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_errorSticky$D_IN;
	if (dp1_wmi_wmi_mFlagF_countReg$EN)
	  dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp1_wmi_wmi_mFlagReg$EN)
	  dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagReg$D_IN;
	if (dp1_wmi_wmi_operateD$EN)
	  dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_operateD$D_IN;
	if (dp1_wmi_wmi_peerIsReady$EN)
	  dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_peerIsReady$D_IN;
	if (dp1_wmi_wmi_reqF_countReg$EN)
	  dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_countReg$D_IN;
	if (dp1_wmi_wmi_reqF_levelsValid$EN)
	  dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp1_wmi_wmi_respF_c_r$EN)
	  dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_c_r$D_IN;
	if (dp1_wmi_wmi_respF_q_0$EN)
	  dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_0$D_IN;
	if (dp1_wmi_wmi_respF_q_1$EN)
	  dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_1$D_IN;
	if (dp1_wmi_wmi_sFlagReg$EN)
	  dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_sFlagReg$D_IN;
	if (dp1_wmi_wmi_trafficSticky$EN)
	  dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_trafficSticky$D_IN;
	if (dp1_wmi_wrActive$EN)
	  dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrActive$D_IN;
	if (dp1_wmi_wrFinalize$EN)
	  dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrFinalize$D_IN;
	if (dp1_wmi_wrtCount$EN)
	  dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrtCount$D_IN;
	if (dp1_wti_nowReq$EN)
	  dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp1_wti_nowReq$D_IN;
      end
    if (!cp$RST_N_wci_Vm_13)
      begin
        dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd512;
	dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp0_bml_crdBuf_modulus$EN)
	  dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_modulus$D_IN;
	if (dp0_bml_crdBuf_value$EN)
	  dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_value$D_IN;
	if (dp0_bml_fabAvail$EN)
	  dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabAvail$D_IN;
	if (dp0_bml_fabBuf_modulus$EN)
	  dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_modulus$D_IN;
	if (dp0_bml_fabBuf_value$EN)
	  dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_value$D_IN;
	if (dp0_bml_fabDone$EN)
	  dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabDone$D_IN;
	if (dp0_bml_fabFlowBase$EN)
	  dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowBase$D_IN;
	if (dp0_bml_fabFlowSize$EN)
	  dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowSize$D_IN;
	if (dp0_bml_fabMesgBase$EN)
	  dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgBase$D_IN;
	if (dp0_bml_fabMesgSize$EN)
	  dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgSize$D_IN;
	if (dp0_bml_fabMetaBase$EN)
	  dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaBase$D_IN;
	if (dp0_bml_fabMetaSize$EN)
	  dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaSize$D_IN;
	if (dp0_bml_fabNumBufs$EN)
	  dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabNumBufs$D_IN;
	if (dp0_bml_lclBufDone$EN)
	  dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufDone$D_IN;
	if (dp0_bml_lclBufStart$EN)
	  dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBufStart$D_IN;
	if (dp0_bml_lclBuf_modulus$EN)
	  dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_modulus$D_IN;
	if (dp0_bml_lclBuf_value$EN)
	  dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_value$D_IN;
	if (dp0_bml_lclDones$EN)
	  dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclDones$D_IN;
	if (dp0_bml_lclNumBufs$EN)
	  dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclNumBufs$D_IN;
	if (dp0_bml_lclStarts$EN)
	  dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclStarts$D_IN;
	if (dp0_bml_mesgBase$EN)
	  dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgBase$D_IN;
	if (dp0_bml_mesgSize$EN)
	  dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgSize$D_IN;
	if (dp0_bml_metaBase$EN)
	  dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaBase$D_IN;
	if (dp0_bml_metaSize$EN)
	  dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaSize$D_IN;
	if (dp0_bml_remBuf_modulus$EN)
	  dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_modulus$D_IN;
	if (dp0_bml_remBuf_value$EN)
	  dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_value$D_IN;
	if (dp0_bml_remDone$EN)
	  dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDone$D_IN;
	if (dp0_bml_remDones$EN)
	  dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDones$D_IN;
	if (dp0_bml_remStart$EN)
	  dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStart$D_IN;
	if (dp0_bml_remStarts$EN)
	  dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStarts$D_IN;
	if (dp0_bram_serverAdapterA_1_cnt$EN)
	  dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (dp0_bram_serverAdapterA_1_s1$EN)
	  dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_s1$D_IN;
	if (dp0_bram_serverAdapterA_2_cnt$EN)
	  dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (dp0_bram_serverAdapterA_2_s1$EN)
	  dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_s1$D_IN;
	if (dp0_bram_serverAdapterA_3_cnt$EN)
	  dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (dp0_bram_serverAdapterA_3_s1$EN)
	  dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_s1$D_IN;
	if (dp0_bram_serverAdapterA_cnt$EN)
	  dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_cnt$D_IN;
	if (dp0_bram_serverAdapterA_s1$EN)
	  dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_s1$D_IN;
	if (dp0_bram_serverAdapterB_1_cnt$EN)
	  dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (dp0_bram_serverAdapterB_1_s1$EN)
	  dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_s1$D_IN;
	if (dp0_bram_serverAdapterB_2_cnt$EN)
	  dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (dp0_bram_serverAdapterB_2_s1$EN)
	  dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_s1$D_IN;
	if (dp0_bram_serverAdapterB_3_cnt$EN)
	  dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (dp0_bram_serverAdapterB_3_s1$EN)
	  dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_s1$D_IN;
	if (dp0_bram_serverAdapterB_cnt$EN)
	  dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_cnt$D_IN;
	if (dp0_bram_serverAdapterB_s1$EN)
	  dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_s1$D_IN;
	if (dp0_dpControl$EN)
	  dp0_dpControl <= `BSV_ASSIGNMENT_DELAY dp0_dpControl$D_IN;
	if (dp0_tlp_creditReady$EN)
	  dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_creditReady$D_IN;
	if (dp0_tlp_debugBdata$EN)
	  dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp0_tlp_debugBdata$D_IN;
	if (dp0_tlp_dmaDoTailEvent$EN)
	  dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_dmaDoTailEvent$D_IN;
	if (dp0_tlp_dmaTag$EN)
	  dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaTag$D_IN;
	if (dp0_tlp_doXmtMetaBody$EN)
	  dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_doXmtMetaBody$D_IN;
	if (dp0_tlp_fabMeta$EN)
	  dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMeta$D_IN;
	if (dp0_tlp_farBufReady$EN)
	  dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_farBufReady$D_IN;
	if (dp0_tlp_flowDiagCount$EN)
	  dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_flowDiagCount$D_IN;
	if (dp0_tlp_gotResponseHeader$EN)
	  dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_gotResponseHeader$D_IN;
	if (dp0_tlp_maxPayloadSize$EN)
	  dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxPayloadSize$D_IN;
	if (dp0_tlp_maxReadReqSize$EN)
	  dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxReadReqSize$D_IN;
	if (dp0_tlp_nearBufReady$EN)
	  dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_nearBufReady$D_IN;
	if (dp0_tlp_postSeqDwell$EN)
	  dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_postSeqDwell$D_IN;
	if (dp0_tlp_pullTagMatch$EN)
	  dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_pullTagMatch$D_IN;
	if (dp0_tlp_readHeaderSent$EN)
	  dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readHeaderSent$D_IN;
	if (dp0_tlp_readStarted$EN)
	  dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readStarted$D_IN;
	if (dp0_tlp_remDone$EN)
	  dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remDone$D_IN;
	if (dp0_tlp_remStart$EN)
	  dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remStart$D_IN;
	if (dp0_tlp_reqMesgInFlight$EN)
	  dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMesgInFlight$D_IN;
	if (dp0_tlp_reqMetaBodyInFlight$EN)
	  dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (dp0_tlp_reqMetaInFlight$EN)
	  dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaInFlight$D_IN;
	if (dp0_tlp_tlpMetaSent$EN)
	  dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_tlpMetaSent$D_IN;
	if (dp0_tlp_tlpRcvBusy$EN)
	  dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpRcvBusy$D_IN;
	if (dp0_tlp_tlpXmtBusy$EN)
	  dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpXmtBusy$D_IN;
	if (dp0_tlp_xmtMetaInFlight$EN)
	  dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_xmtMetaInFlight$D_IN;
	if (dp0_tlp_xmtMetaOK$EN)
	  dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp0_tlp_xmtMetaOK$D_IN;
	if (dp0_wci_cEdge$EN)
	  dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp0_wci_cEdge$D_IN;
	if (dp0_wci_cState$EN)
	  dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY dp0_wci_cState$D_IN;
	if (dp0_wci_ctlAckReg$EN)
	  dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_ctlAckReg$D_IN;
	if (dp0_wci_ctlOpActive$EN)
	  dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_ctlOpActive$D_IN;
	if (dp0_wci_illegalEdge$EN)
	  dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_illegalEdge$D_IN;
	if (dp0_wci_nState$EN)
	  dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY dp0_wci_nState$D_IN;
	if (dp0_wci_reqF_countReg$EN)
	  dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_reqF_countReg$D_IN;
	if (dp0_wci_respF_c_r$EN)
	  dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_c_r$D_IN;
	if (dp0_wci_respF_q_0$EN)
	  dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_0$D_IN;
	if (dp0_wci_respF_q_1$EN)
	  dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_1$D_IN;
	if (dp0_wci_sFlagReg$EN)
	  dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_sFlagReg$D_IN;
	if (dp0_wci_sThreadBusy_d$EN)
	  dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_sThreadBusy_d$D_IN;
	if (dp0_wmi_bufDwell$EN)
	  dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp0_wmi_bufDwell$D_IN;
	if (dp0_wmi_bytesRemainResp$EN)
	  dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_bytesRemainResp$D_IN;
	if (dp0_wmi_doneWithMesg$EN)
	  dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_doneWithMesg$D_IN;
	if (dp0_wmi_lastMesg$EN)
	  dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lastMesg$D_IN;
	if (dp0_wmi_mesgBufReady$EN)
	  dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_mesgBufReady$D_IN;
	if (dp0_wmi_mesgBusy$EN)
	  dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgBusy$D_IN;
	if (dp0_wmi_mesgCount$EN)
	  dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgCount$D_IN;
	if (dp0_wmi_mesgDone$EN)
	  dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgDone$D_IN;
	if (dp0_wmi_mesgMeta$EN)
	  dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgMeta$D_IN;
	if (dp0_wmi_mesgStart$EN)
	  dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgStart$D_IN;
	if (dp0_wmi_metaBusy$EN)
	  dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_metaBusy$D_IN;
	if (dp0_wmi_p4B$EN)
	  dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp0_wmi_p4B$D_IN;
	if (dp0_wmi_rdActive$EN)
	  dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_rdActive$D_IN;
	if (dp0_wmi_reqCount$EN)
	  dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_reqCount$D_IN;
	if (dp0_wmi_thisMesg$EN)
	  dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_thisMesg$D_IN;
	if (dp0_wmi_wmi_blockReq$EN)
	  dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_blockReq$D_IN;
	if (dp0_wmi_wmi_dhF_countReg$EN)
	  dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_countReg$D_IN;
	if (dp0_wmi_wmi_dhF_levelsValid$EN)
	  dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp0_wmi_wmi_errorSticky$EN)
	  dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_errorSticky$D_IN;
	if (dp0_wmi_wmi_mFlagF_countReg$EN)
	  dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp0_wmi_wmi_mFlagReg$EN)
	  dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagReg$D_IN;
	if (dp0_wmi_wmi_operateD$EN)
	  dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_operateD$D_IN;
	if (dp0_wmi_wmi_peerIsReady$EN)
	  dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_peerIsReady$D_IN;
	if (dp0_wmi_wmi_reqF_countReg$EN)
	  dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_countReg$D_IN;
	if (dp0_wmi_wmi_reqF_levelsValid$EN)
	  dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp0_wmi_wmi_respF_c_r$EN)
	  dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_c_r$D_IN;
	if (dp0_wmi_wmi_respF_q_0$EN)
	  dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_0$D_IN;
	if (dp0_wmi_wmi_respF_q_1$EN)
	  dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_1$D_IN;
	if (dp0_wmi_wmi_sFlagReg$EN)
	  dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_sFlagReg$D_IN;
	if (dp0_wmi_wmi_trafficSticky$EN)
	  dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_trafficSticky$D_IN;
	if (dp0_wmi_wrActive$EN)
	  dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrActive$D_IN;
	if (dp0_wmi_wrFinalize$EN)
	  dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrFinalize$D_IN;
	if (dp0_wmi_wrtCount$EN)
	  dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrtCount$D_IN;
	if (dp0_wti_nowReq$EN)
	  dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp0_wti_nowReq$D_IN;
      end
    if (!pciw_p125rst$OUT_RST_N)
      begin
        noc_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_rg <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (noc_chompCnt$EN)
	  noc_chompCnt <= `BSV_ASSIGNMENT_DELAY noc_chompCnt$D_IN;
	if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_pcie_irq_rInterruptDi$EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi$D_IN;
	if (pciw_pcie_irq_rInterruptN$EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN$D_IN;
	if (pciw_pcie_irq_rInterrupting$EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting$D_IN;
	if (pciw_rg$EN) pciw_rg <= `BSV_ASSIGNMENT_DELAY pciw_rg$D_IN;
	if (pciw_rg_1$EN) pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY pciw_rg_1$D_IN;
      end
    if (dp0_bml_fabBufsAvail$EN)
      dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabBufsAvail$D_IN;
    if (dp0_bml_fabFlowAddr$EN)
      dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabFlowAddr$D_IN;
    if (dp0_bml_fabMesgAddr$EN)
      dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMesgAddr$D_IN;
    if (dp0_bml_fabMetaAddr$EN)
      dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMetaAddr$D_IN;
    if (dp0_bml_lclBufsAR$EN)
      dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsAR$D_IN;
    if (dp0_bml_lclBufsCF$EN)
      dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsCF$D_IN;
    if (dp0_bml_lclCredit$EN)
      dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclCredit$D_IN;
    if (dp0_bml_lclMesgAddr$EN)
      dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMesgAddr$D_IN;
    if (dp0_bml_lclMetaAddr$EN)
      dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMetaAddr$D_IN;
    if (dp0_bml_remMesgAddr$EN)
      dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMesgAddr$D_IN;
    if (dp0_bml_remMetaAddr$EN)
      dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMetaAddr$D_IN;
    if (dp0_tlp_dmaPullRemainDWLen$EN)
      dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (dp0_tlp_dmaPullRemainDWSub$EN)
      dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (dp0_tlp_dmaReqTag$EN)
      dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaReqTag$D_IN;
    if (dp0_tlp_fabFlowAddr$EN)
      dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabFlowAddr$D_IN;
    if (dp0_tlp_fabMesgAccu$EN)
      dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAccu$D_IN;
    if (dp0_tlp_fabMesgAddr$EN)
      dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAddr$D_IN;
    if (dp0_tlp_fabMetaAddr$EN)
      dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMetaAddr$D_IN;
    if (dp0_tlp_inIgnorePkt$EN)
      dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp0_tlp_inIgnorePkt$D_IN;
    if (dp0_tlp_mesgComplReceived$EN)
      dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgComplReceived$D_IN;
    if (dp0_tlp_mesgLengthRemainPull$EN)
      dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPull$D_IN;
    if (dp0_tlp_mesgLengthRemainPush$EN)
      dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPush$D_IN;
    if (dp0_tlp_outDwRemain$EN)
      dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp0_tlp_outDwRemain$D_IN;
    if (dp0_tlp_rdRespDwRemain$EN)
      dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_rdRespDwRemain$D_IN;
    if (dp0_tlp_readNxtDWAddr$EN)
      dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readNxtDWAddr$D_IN;
    if (dp0_tlp_readRemainDWLen$EN)
      dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readRemainDWLen$D_IN;
    if (dp0_tlp_remMesgAccu$EN)
      dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAccu$D_IN;
    if (dp0_tlp_remMesgAddr$EN)
      dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAddr$D_IN;
    if (dp0_tlp_remMetaAddr$EN)
      dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMetaAddr$D_IN;
    if (dp0_tlp_srcMesgAccu$EN)
      dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_srcMesgAccu$D_IN;
    if (dp0_tlp_writeDWAddr$EN)
      dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeDWAddr$D_IN;
    if (dp0_tlp_writeLastBE$EN)
      dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeLastBE$D_IN;
    if (dp0_tlp_writeRemainDWLen$EN)
      dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_writeRemainDWLen$D_IN;
    if (dp0_wmi_addr$EN)
      dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_addr$D_IN;
    if (dp0_wmi_bytesRemainReq$EN)
      dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp0_wmi_bytesRemainReq$D_IN;
    if (dp0_wmi_lclMesgAddr$EN)
      dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMesgAddr$D_IN;
    if (dp0_wmi_lclMetaAddr$EN)
      dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMetaAddr$D_IN;
    if (dp0_wmi_wmi_statusR$EN)
      dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wmi_statusR$D_IN;
    if (dp1_bml_fabBufsAvail$EN)
      dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabBufsAvail$D_IN;
    if (dp1_bml_fabFlowAddr$EN)
      dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabFlowAddr$D_IN;
    if (dp1_bml_fabMesgAddr$EN)
      dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMesgAddr$D_IN;
    if (dp1_bml_fabMetaAddr$EN)
      dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMetaAddr$D_IN;
    if (dp1_bml_lclBufsAR$EN)
      dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsAR$D_IN;
    if (dp1_bml_lclBufsCF$EN)
      dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsCF$D_IN;
    if (dp1_bml_lclCredit$EN)
      dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclCredit$D_IN;
    if (dp1_bml_lclMesgAddr$EN)
      dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMesgAddr$D_IN;
    if (dp1_bml_lclMetaAddr$EN)
      dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMetaAddr$D_IN;
    if (dp1_bml_remMesgAddr$EN)
      dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMesgAddr$D_IN;
    if (dp1_bml_remMetaAddr$EN)
      dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMetaAddr$D_IN;
    if (dp1_tlp_dmaPullRemainDWLen$EN)
      dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (dp1_tlp_dmaPullRemainDWSub$EN)
      dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (dp1_tlp_dmaReqTag$EN)
      dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaReqTag$D_IN;
    if (dp1_tlp_fabFlowAddr$EN)
      dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabFlowAddr$D_IN;
    if (dp1_tlp_fabMesgAccu$EN)
      dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAccu$D_IN;
    if (dp1_tlp_fabMesgAddr$EN)
      dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAddr$D_IN;
    if (dp1_tlp_fabMetaAddr$EN)
      dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMetaAddr$D_IN;
    if (dp1_tlp_inIgnorePkt$EN)
      dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp1_tlp_inIgnorePkt$D_IN;
    if (dp1_tlp_mesgComplReceived$EN)
      dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgComplReceived$D_IN;
    if (dp1_tlp_mesgLengthRemainPull$EN)
      dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPull$D_IN;
    if (dp1_tlp_mesgLengthRemainPush$EN)
      dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPush$D_IN;
    if (dp1_tlp_outDwRemain$EN)
      dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp1_tlp_outDwRemain$D_IN;
    if (dp1_tlp_rdRespDwRemain$EN)
      dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_rdRespDwRemain$D_IN;
    if (dp1_tlp_readNxtDWAddr$EN)
      dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readNxtDWAddr$D_IN;
    if (dp1_tlp_readRemainDWLen$EN)
      dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readRemainDWLen$D_IN;
    if (dp1_tlp_remMesgAccu$EN)
      dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAccu$D_IN;
    if (dp1_tlp_remMesgAddr$EN)
      dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAddr$D_IN;
    if (dp1_tlp_remMetaAddr$EN)
      dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMetaAddr$D_IN;
    if (dp1_tlp_srcMesgAccu$EN)
      dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_srcMesgAccu$D_IN;
    if (dp1_tlp_writeDWAddr$EN)
      dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeDWAddr$D_IN;
    if (dp1_tlp_writeLastBE$EN)
      dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeLastBE$D_IN;
    if (dp1_tlp_writeRemainDWLen$EN)
      dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_writeRemainDWLen$D_IN;
    if (dp1_wmi_addr$EN)
      dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_addr$D_IN;
    if (dp1_wmi_bytesRemainReq$EN)
      dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp1_wmi_bytesRemainReq$D_IN;
    if (dp1_wmi_lclMesgAddr$EN)
      dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMesgAddr$D_IN;
    if (dp1_wmi_lclMetaAddr$EN)
      dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMetaAddr$D_IN;
    if (dp1_wmi_wmi_statusR$EN)
      dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wmi_statusR$D_IN;
    if (pciw_pcie_irq_rMMEnabled$EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled$D_IN;
    if (pciw_pcie_irq_rMSIEnabled$EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dp0_bml_crdBuf_modulus = 16'hAAAA;
    dp0_bml_crdBuf_value = 16'hAAAA;
    dp0_bml_fabAvail = 1'h0;
    dp0_bml_fabBuf_modulus = 16'hAAAA;
    dp0_bml_fabBuf_value = 16'hAAAA;
    dp0_bml_fabBufsAvail = 16'hAAAA;
    dp0_bml_fabDone = 1'h0;
    dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    dp0_bml_fabNumBufs = 16'hAAAA;
    dp0_bml_lclBufDone = 1'h0;
    dp0_bml_lclBufStart = 1'h0;
    dp0_bml_lclBuf_modulus = 16'hAAAA;
    dp0_bml_lclBuf_value = 16'hAAAA;
    dp0_bml_lclBufsAR = 16'hAAAA;
    dp0_bml_lclBufsCF = 16'hAAAA;
    dp0_bml_lclCredit = 16'hAAAA;
    dp0_bml_lclDones = 16'hAAAA;
    dp0_bml_lclMesgAddr = 16'hAAAA;
    dp0_bml_lclMetaAddr = 16'hAAAA;
    dp0_bml_lclNumBufs = 16'hAAAA;
    dp0_bml_lclStarts = 16'hAAAA;
    dp0_bml_mesgBase = 16'hAAAA;
    dp0_bml_mesgSize = 16'hAAAA;
    dp0_bml_metaBase = 16'hAAAA;
    dp0_bml_metaSize = 16'hAAAA;
    dp0_bml_remBuf_modulus = 16'hAAAA;
    dp0_bml_remBuf_value = 16'hAAAA;
    dp0_bml_remDone = 1'h0;
    dp0_bml_remDones = 16'hAAAA;
    dp0_bml_remMesgAddr = 16'hAAAA;
    dp0_bml_remMetaAddr = 16'hAAAA;
    dp0_bml_remStart = 1'h0;
    dp0_bml_remStarts = 16'hAAAA;
    dp0_bram_serverAdapterA_1_cnt = 3'h2;
    dp0_bram_serverAdapterA_1_s1 = 2'h2;
    dp0_bram_serverAdapterA_2_cnt = 3'h2;
    dp0_bram_serverAdapterA_2_s1 = 2'h2;
    dp0_bram_serverAdapterA_3_cnt = 3'h2;
    dp0_bram_serverAdapterA_3_s1 = 2'h2;
    dp0_bram_serverAdapterA_cnt = 3'h2;
    dp0_bram_serverAdapterA_s1 = 2'h2;
    dp0_bram_serverAdapterB_1_cnt = 3'h2;
    dp0_bram_serverAdapterB_1_s1 = 2'h2;
    dp0_bram_serverAdapterB_2_cnt = 3'h2;
    dp0_bram_serverAdapterB_2_s1 = 2'h2;
    dp0_bram_serverAdapterB_3_cnt = 3'h2;
    dp0_bram_serverAdapterB_3_s1 = 2'h2;
    dp0_bram_serverAdapterB_cnt = 3'h2;
    dp0_bram_serverAdapterB_s1 = 2'h2;
    dp0_dpControl = 4'hA;
    dp0_tlp_creditReady = 1'h0;
    dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_dmaDoTailEvent = 1'h0;
    dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp0_tlp_dmaReqTag = 5'h0A;
    dp0_tlp_dmaTag = 5'h0A;
    dp0_tlp_doXmtMetaBody = 1'h0;
    dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp0_tlp_farBufReady = 1'h0;
    dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp0_tlp_gotResponseHeader = 1'h0;
    dp0_tlp_inIgnorePkt = 1'h0;
    dp0_tlp_maxPayloadSize = 13'h0AAA;
    dp0_tlp_maxReadReqSize = 13'h0AAA;
    dp0_tlp_mesgComplReceived = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp0_tlp_nearBufReady = 1'h0;
    dp0_tlp_outDwRemain = 10'h2AA;
    dp0_tlp_postSeqDwell = 4'hA;
    dp0_tlp_pullTagMatch = 1'h0;
    dp0_tlp_rdRespDwRemain = 10'h2AA;
    dp0_tlp_readHeaderSent = 1'h0;
    dp0_tlp_readNxtDWAddr = 13'h0AAA;
    dp0_tlp_readRemainDWLen = 10'h2AA;
    dp0_tlp_readStarted = 1'h0;
    dp0_tlp_remDone = 1'h0;
    dp0_tlp_remMesgAccu = 16'hAAAA;
    dp0_tlp_remMesgAddr = 16'hAAAA;
    dp0_tlp_remMetaAddr = 16'hAAAA;
    dp0_tlp_remStart = 1'h0;
    dp0_tlp_reqMesgInFlight = 1'h0;
    dp0_tlp_reqMetaBodyInFlight = 1'h0;
    dp0_tlp_reqMetaInFlight = 1'h0;
    dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_tlpMetaSent = 1'h0;
    dp0_tlp_tlpRcvBusy = 1'h0;
    dp0_tlp_tlpXmtBusy = 1'h0;
    dp0_tlp_writeDWAddr = 13'h0AAA;
    dp0_tlp_writeLastBE = 4'hA;
    dp0_tlp_writeRemainDWLen = 10'h2AA;
    dp0_tlp_xmtMetaInFlight = 1'h0;
    dp0_tlp_xmtMetaOK = 1'h0;
    dp0_wci_cEdge = 3'h2;
    dp0_wci_cState = 3'h2;
    dp0_wci_ctlAckReg = 1'h0;
    dp0_wci_ctlOpActive = 1'h0;
    dp0_wci_illegalEdge = 1'h0;
    dp0_wci_nState = 3'h2;
    dp0_wci_reqF_countReg = 2'h2;
    dp0_wci_respF_c_r = 2'h2;
    dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wci_sFlagReg = 1'h0;
    dp0_wci_sThreadBusy_d = 1'h0;
    dp0_wmi_addr = 14'h2AAA;
    dp0_wmi_bufDwell = 2'h2;
    dp0_wmi_bytesRemainReq = 14'h2AAA;
    dp0_wmi_bytesRemainResp = 14'h2AAA;
    dp0_wmi_doneWithMesg = 1'h0;
    dp0_wmi_lastMesg = 32'hAAAAAAAA;
    dp0_wmi_lclMesgAddr = 15'h2AAA;
    dp0_wmi_lclMetaAddr = 15'h2AAA;
    dp0_wmi_mesgBufReady = 1'h0;
    dp0_wmi_mesgBusy = 1'h0;
    dp0_wmi_mesgCount = 32'hAAAAAAAA;
    dp0_wmi_mesgDone = 1'h0;
    dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_mesgStart = 1'h0;
    dp0_wmi_metaBusy = 1'h0;
    dp0_wmi_p4B = 2'h2;
    dp0_wmi_rdActive = 1'h0;
    dp0_wmi_reqCount = 16'hAAAA;
    dp0_wmi_thisMesg = 32'hAAAAAAAA;
    dp0_wmi_wmi_blockReq = 1'h0;
    dp0_wmi_wmi_dhF_countReg = 2'h2;
    dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    dp0_wmi_wmi_errorSticky = 1'h0;
    dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_operateD = 1'h0;
    dp0_wmi_wmi_peerIsReady = 1'h0;
    dp0_wmi_wmi_reqF_countReg = 2'h2;
    dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    dp0_wmi_wmi_respF_c_r = 2'h2;
    dp0_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_statusR = 8'hAA;
    dp0_wmi_wmi_trafficSticky = 1'h0;
    dp0_wmi_wrActive = 1'h0;
    dp0_wmi_wrFinalize = 1'h0;
    dp0_wmi_wrtCount = 16'hAAAA;
    dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    dp1_bml_crdBuf_modulus = 16'hAAAA;
    dp1_bml_crdBuf_value = 16'hAAAA;
    dp1_bml_fabAvail = 1'h0;
    dp1_bml_fabBuf_modulus = 16'hAAAA;
    dp1_bml_fabBuf_value = 16'hAAAA;
    dp1_bml_fabBufsAvail = 16'hAAAA;
    dp1_bml_fabDone = 1'h0;
    dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    dp1_bml_fabNumBufs = 16'hAAAA;
    dp1_bml_lclBufDone = 1'h0;
    dp1_bml_lclBufStart = 1'h0;
    dp1_bml_lclBuf_modulus = 16'hAAAA;
    dp1_bml_lclBuf_value = 16'hAAAA;
    dp1_bml_lclBufsAR = 16'hAAAA;
    dp1_bml_lclBufsCF = 16'hAAAA;
    dp1_bml_lclCredit = 16'hAAAA;
    dp1_bml_lclDones = 16'hAAAA;
    dp1_bml_lclMesgAddr = 16'hAAAA;
    dp1_bml_lclMetaAddr = 16'hAAAA;
    dp1_bml_lclNumBufs = 16'hAAAA;
    dp1_bml_lclStarts = 16'hAAAA;
    dp1_bml_mesgBase = 16'hAAAA;
    dp1_bml_mesgSize = 16'hAAAA;
    dp1_bml_metaBase = 16'hAAAA;
    dp1_bml_metaSize = 16'hAAAA;
    dp1_bml_remBuf_modulus = 16'hAAAA;
    dp1_bml_remBuf_value = 16'hAAAA;
    dp1_bml_remDone = 1'h0;
    dp1_bml_remDones = 16'hAAAA;
    dp1_bml_remMesgAddr = 16'hAAAA;
    dp1_bml_remMetaAddr = 16'hAAAA;
    dp1_bml_remStart = 1'h0;
    dp1_bml_remStarts = 16'hAAAA;
    dp1_bram_serverAdapterA_1_cnt = 3'h2;
    dp1_bram_serverAdapterA_1_s1 = 2'h2;
    dp1_bram_serverAdapterA_2_cnt = 3'h2;
    dp1_bram_serverAdapterA_2_s1 = 2'h2;
    dp1_bram_serverAdapterA_3_cnt = 3'h2;
    dp1_bram_serverAdapterA_3_s1 = 2'h2;
    dp1_bram_serverAdapterA_cnt = 3'h2;
    dp1_bram_serverAdapterA_s1 = 2'h2;
    dp1_bram_serverAdapterB_1_cnt = 3'h2;
    dp1_bram_serverAdapterB_1_s1 = 2'h2;
    dp1_bram_serverAdapterB_2_cnt = 3'h2;
    dp1_bram_serverAdapterB_2_s1 = 2'h2;
    dp1_bram_serverAdapterB_3_cnt = 3'h2;
    dp1_bram_serverAdapterB_3_s1 = 2'h2;
    dp1_bram_serverAdapterB_cnt = 3'h2;
    dp1_bram_serverAdapterB_s1 = 2'h2;
    dp1_dpControl = 4'hA;
    dp1_tlp_creditReady = 1'h0;
    dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_dmaDoTailEvent = 1'h0;
    dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp1_tlp_dmaReqTag = 5'h0A;
    dp1_tlp_dmaTag = 5'h0A;
    dp1_tlp_doXmtMetaBody = 1'h0;
    dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp1_tlp_farBufReady = 1'h0;
    dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp1_tlp_gotResponseHeader = 1'h0;
    dp1_tlp_inIgnorePkt = 1'h0;
    dp1_tlp_maxPayloadSize = 13'h0AAA;
    dp1_tlp_maxReadReqSize = 13'h0AAA;
    dp1_tlp_mesgComplReceived = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp1_tlp_nearBufReady = 1'h0;
    dp1_tlp_outDwRemain = 10'h2AA;
    dp1_tlp_postSeqDwell = 4'hA;
    dp1_tlp_pullTagMatch = 1'h0;
    dp1_tlp_rdRespDwRemain = 10'h2AA;
    dp1_tlp_readHeaderSent = 1'h0;
    dp1_tlp_readNxtDWAddr = 13'h0AAA;
    dp1_tlp_readRemainDWLen = 10'h2AA;
    dp1_tlp_readStarted = 1'h0;
    dp1_tlp_remDone = 1'h0;
    dp1_tlp_remMesgAccu = 16'hAAAA;
    dp1_tlp_remMesgAddr = 16'hAAAA;
    dp1_tlp_remMetaAddr = 16'hAAAA;
    dp1_tlp_remStart = 1'h0;
    dp1_tlp_reqMesgInFlight = 1'h0;
    dp1_tlp_reqMetaBodyInFlight = 1'h0;
    dp1_tlp_reqMetaInFlight = 1'h0;
    dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_tlpMetaSent = 1'h0;
    dp1_tlp_tlpRcvBusy = 1'h0;
    dp1_tlp_tlpXmtBusy = 1'h0;
    dp1_tlp_writeDWAddr = 13'h0AAA;
    dp1_tlp_writeLastBE = 4'hA;
    dp1_tlp_writeRemainDWLen = 10'h2AA;
    dp1_tlp_xmtMetaInFlight = 1'h0;
    dp1_tlp_xmtMetaOK = 1'h0;
    dp1_wci_cEdge = 3'h2;
    dp1_wci_cState = 3'h2;
    dp1_wci_ctlAckReg = 1'h0;
    dp1_wci_ctlOpActive = 1'h0;
    dp1_wci_illegalEdge = 1'h0;
    dp1_wci_nState = 3'h2;
    dp1_wci_reqF_countReg = 2'h2;
    dp1_wci_respF_c_r = 2'h2;
    dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wci_sFlagReg = 1'h0;
    dp1_wci_sThreadBusy_d = 1'h0;
    dp1_wmi_addr = 14'h2AAA;
    dp1_wmi_bufDwell = 2'h2;
    dp1_wmi_bytesRemainReq = 14'h2AAA;
    dp1_wmi_bytesRemainResp = 14'h2AAA;
    dp1_wmi_doneWithMesg = 1'h0;
    dp1_wmi_lastMesg = 32'hAAAAAAAA;
    dp1_wmi_lclMesgAddr = 15'h2AAA;
    dp1_wmi_lclMetaAddr = 15'h2AAA;
    dp1_wmi_mesgBufReady = 1'h0;
    dp1_wmi_mesgBusy = 1'h0;
    dp1_wmi_mesgCount = 32'hAAAAAAAA;
    dp1_wmi_mesgDone = 1'h0;
    dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_mesgStart = 1'h0;
    dp1_wmi_metaBusy = 1'h0;
    dp1_wmi_p4B = 2'h2;
    dp1_wmi_rdActive = 1'h0;
    dp1_wmi_reqCount = 16'hAAAA;
    dp1_wmi_thisMesg = 32'hAAAAAAAA;
    dp1_wmi_wmi_blockReq = 1'h0;
    dp1_wmi_wmi_dhF_countReg = 2'h2;
    dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    dp1_wmi_wmi_errorSticky = 1'h0;
    dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_operateD = 1'h0;
    dp1_wmi_wmi_peerIsReady = 1'h0;
    dp1_wmi_wmi_reqF_countReg = 2'h2;
    dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    dp1_wmi_wmi_respF_c_r = 2'h2;
    dp1_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_statusR = 8'hAA;
    dp1_wmi_wmi_trafficSticky = 1'h0;
    dp1_wmi_wrActive = 1'h0;
    dp1_wmi_wrFinalize = 1'h0;
    dp1_wmi_wrtCount = 16'hAAAA;
    dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    noc_chompCnt = 8'hAA;
    pciDevice = 16'hAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
    pciw_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_rg_1 = 82'h2AAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pciw_pci0_pcie_ep$trn_clk)
  begin
    #0;
    if (pciw_p125rst$OUT_RST_N)
      if (noc_sm2$RDY_c1_request_get)
	begin
	  v__h5925 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (noc_sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h5925,
		 $unsigned(noc_chompCnt));
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterA_s1[1] &&
	  !dp0_bram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterB_s1[1] &&
	  !dp0_bram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterA_1_s1[1] &&
	  !dp0_bram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterB_1_s1[1] &&
	  !dp0_bram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterA_2_s1[1] &&
	  !dp0_bram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterB_2_s1[1] &&
	  !dp0_bram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterA_3_s1[1] &&
	  !dp0_bram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (dp0_bram_serverAdapterB_3_s1[1] &&
	  !dp0_bram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	begin
	  v__h83803 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h83803,
		 dp0_wci_reqF$D_OUT[63:32],
		 dp0_wci_reqF$D_OUT[67:64],
		 _theResult____h83787);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	begin
	  v__h23660 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h23660,
		 dp0_wci_reqF$D_OUT[36:34],
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	begin
	  v__h38339 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1", v__h38339);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h39944 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h39944,
		   { dp0_tlp_inF$D_OUT[7:0],
		     dp0_tlp_inF$D_OUT[15:8],
		     dp0_tlp_inF$D_OUT[23:16],
		     dp0_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h45095 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h45095);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h45412 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h45412);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaTailEventSender)
	  begin
	    v__h46566 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaTailEventSender)
	  $display("[%0d]: %m: dmaTailEventSender - generic", v__h46566);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  begin
	    v__h38691 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h38691);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h44477 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h44477);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	begin
	  v__h45611 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	$display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5", v__h45611);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h44048 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h44048,
		 opcode__h40889,
		 nowMS__h40890,
		 nowLS__h40891);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	begin
	  v__h75875 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h75875,
		 dp0_wmi_lclMetaAddr,
		 x3__h75232,
		 mesgMeta_opcode__h75272,
		 dp0_wmi_nowW$wget[63:32],
		 dp0_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h83275 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h83275);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	begin
	  v__h83649 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h83649,
		 dp0_wci_reqF$D_OUT[63:32],
		 dp0_wci_reqF$D_OUT[67:64],
		 dp0_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && WILL_FIRE_RL_dp0_wci_cfrd)
	$display("Error: \"bsv/inf/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp0_wci_cfwr and RL_dp0_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	begin
	  v__h23978 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h23978,
		 dp0_wci_cEdge,
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	begin
	  v__h23834 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h23834,
		 dp0_wci_cEdge,
		 dp0_wci_cState,
		 dp0_wci_nState);
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterA_s1[1] &&
	  !dp1_bram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterB_s1[1] &&
	  !dp1_bram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterA_1_s1[1] &&
	  !dp1_bram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterB_1_s1[1] &&
	  !dp1_bram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterA_2_s1[1] &&
	  !dp1_bram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterB_2_s1[1] &&
	  !dp1_bram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterA_3_s1[1] &&
	  !dp1_bram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (dp1_bram_serverAdapterB_3_s1[1] &&
	  !dp1_bram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	begin
	  v__h161035 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h161035,
		 dp1_wci_reqF$D_OUT[63:32],
		 dp1_wci_reqF$D_OUT[67:64],
		 _theResult____h161019);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	begin
	  v__h100989 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h100989,
		 dp1_wci_reqF$D_OUT[36:34],
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h105327 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h105327);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h110776 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h110776);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h106336 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h106336,
		 { dp1_tlp_mRespF$D_OUT[7:0],
		   dp1_tlp_mRespF$D_OUT[15:8],
		   dp1_tlp_mRespF$D_OUT[23:16],
		   dp1_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  begin
	    v__h112758 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h112758);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h115492 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h115492);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	begin
	  v__h115677 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	$display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h115677);
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  begin
	    v__h111344 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h111344);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h111695 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h111695);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	begin
	  v__h115843 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		 v__h115843);
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaTailEventSender)
	  begin
	    v__h123802 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaTailEventSender)
	  $display("[%0d]: %m: dmaTailEventSender - generic", v__h123802);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h110430 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h110430,
		 opcode__h107265,
		 nowMS__h107266,
		 nowLS__h107267);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	begin
	  v__h153112 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h153112,
		 dp1_wmi_lclMetaAddr,
		 x3__h152469,
		 mesgMeta_opcode__h152509,
		 dp1_wmi_nowW$wget[63:32],
		 dp1_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h160507 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h160507);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	begin
	  v__h160881 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h160881,
		 dp1_wci_reqF$D_OUT[63:32],
		 dp1_wci_reqF$D_OUT[67:64],
		 dp1_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && WILL_FIRE_RL_dp1_wci_cfrd)
	$display("Error: \"bsv/inf/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp1_wci_cfwr and RL_dp1_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	begin
	  v__h101307 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h101307,
		 dp1_wci_cEdge,
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	begin
	  v__h101163 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h101163,
		 dp1_wci_cEdge,
		 dp1_wci_cState,
		 dp1_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOPED_v5

