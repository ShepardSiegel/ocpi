//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Aug 24 09:05:11 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wtiS0_SThreadBusy              O     1 reg
// wtiS0_SReset_n                 O     1
// wmiS0_SResp                    O     2 reg
// wmiS0_SData                    O    32 reg
// wmiS0_SThreadBusy              O     1
// wmiS0_SDataThreadBusy          O     1
// wmiS0_SRespLast                O     1 const
// wmiS0_SFlag                    O    32 reg
// wmiS0_SReset_n                 O     1
// RDY_server_request_put         O     1
// server_response_get            O    10
// RDY_server_response_get        O     1
// pciDevice                      I    16 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wtiS0_req                      I    67 reg
// wmiS0_MCmd                     I     3
// wmiS0_MReqInfo                 I     1
// wmiS0_MAddrSpace               I     1
// wmiS0_MAddr                    I    14
// wmiS0_MBurstLength             I    12
// wmiS0_MData                    I    32
// wmiS0_MDataByteEn              I     4
// wmiS0_arg_mFlag                I    32 reg
// server_request_put             I    10
// wmiS0_MReqLast                 I     1
// wmiS0_MDataValid               I     1
// wmiS0_MDataLast                I     1
// wmiS0_MReset_n                 I     1 reg
// EN_server_request_put          I     1
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCEDP4B(pciDevice,
		 CLK,
		 RST_N,

		 wciS0_MCmd,

		 wciS0_MAddrSpace,

		 wciS0_MByteEn,

		 wciS0_MAddr,

		 wciS0_MData,

		 wciS0_SResp,

		 wciS0_SData,

		 wciS0_SThreadBusy,

		 wciS0_SFlag,

		 wciS0_MFlag,

		 wtiS0_req,

		 wtiS0_SThreadBusy,

		 wtiS0_SReset_n,

		 wmiS0_MCmd,

		 wmiS0_MReqLast,

		 wmiS0_MReqInfo,

		 wmiS0_MAddrSpace,

		 wmiS0_MAddr,

		 wmiS0_MBurstLength,

		 wmiS0_MDataValid,

		 wmiS0_MDataLast,

		 wmiS0_MData,

		 wmiS0_MDataByteEn,

		 wmiS0_SResp,

		 wmiS0_SData,

		 wmiS0_SThreadBusy,

		 wmiS0_SDataThreadBusy,

		 wmiS0_SRespLast,

		 wmiS0_SFlag,

		 wmiS0_arg_mFlag,

		 wmiS0_SReset_n,

		 wmiS0_MReset_n,

		 server_request_put,
		 EN_server_request_put,
		 RDY_server_request_put,

		 EN_server_response_get,
		 server_response_get,
		 RDY_server_response_get);
  parameter [0 : 0] hasPush = 1'b0;
  parameter [0 : 0] hasPull = 1'b0;
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  [15 : 0] pciDevice;
  input  CLK;
  input  RST_N;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wtiS0_put
  input  [66 : 0] wtiS0_req;

  // value method wtiS0_sThreadBusy
  output wtiS0_SThreadBusy;

  // value method wtiS0_sReset_n
  output wtiS0_SReset_n;

  // action method wmiS0_mCmd
  input  [2 : 0] wmiS0_MCmd;

  // action method wmiS0_mReqLast
  input  wmiS0_MReqLast;

  // action method wmiS0_mReqInfo
  input  wmiS0_MReqInfo;

  // action method wmiS0_mAddrSpace
  input  wmiS0_MAddrSpace;

  // action method wmiS0_mAddr
  input  [13 : 0] wmiS0_MAddr;

  // action method wmiS0_mBurstLength
  input  [11 : 0] wmiS0_MBurstLength;

  // action method wmiS0_mDataValid
  input  wmiS0_MDataValid;

  // action method wmiS0_mDataLast
  input  wmiS0_MDataLast;

  // action method wmiS0_mData
  input  [31 : 0] wmiS0_MData;

  // action method wmiS0_mDataInfo

  // action method wmiS0_mDataByteEn
  input  [3 : 0] wmiS0_MDataByteEn;

  // value method wmiS0_sResp
  output [1 : 0] wmiS0_SResp;

  // value method wmiS0_sData
  output [31 : 0] wmiS0_SData;

  // value method wmiS0_sThreadBusy
  output wmiS0_SThreadBusy;

  // value method wmiS0_sDataThreadBusy
  output wmiS0_SDataThreadBusy;

  // value method wmiS0_sRespLast
  output wmiS0_SRespLast;

  // value method wmiS0_sFlag
  output [31 : 0] wmiS0_SFlag;

  // action method wmiS0_mFlag
  input  [31 : 0] wmiS0_arg_mFlag;

  // value method wmiS0_sReset_n
  output wmiS0_SReset_n;

  // action method wmiS0_mReset_n
  input  wmiS0_MReset_n;

  // action method server_request_put
  input  [9 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [9 : 0] server_response_get;
  output RDY_server_response_get;

  // signals for module outputs
  wire [31 : 0] wciS0_SData, wmiS0_SData, wmiS0_SFlag;
  wire [9 : 0] server_response_get;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp, wmiS0_SResp;
  wire RDY_server_request_put,
       RDY_server_response_get,
       wciS0_SThreadBusy,
       wmiS0_SDataThreadBusy,
       wmiS0_SReset_n,
       wmiS0_SRespLast,
       wmiS0_SThreadBusy,
       wtiS0_SReset_n,
       wtiS0_SThreadBusy;

  // inlined wires
  reg [159 : 0] edp_dgdpTx_new_data$wget;
  reg [4 : 0] edp_dgdpTx_delta_enq$wget;
  wire [71 : 0] wci_wciReq$wget;
  wire [66 : 0] wti_wtiReq$wget;
  wire [63 : 0] edp_nowW$wget, wmi_nowW$wget;
  wire [37 : 0] wmi_wmi_wmiDh$wget;
  wire [33 : 0] wci_respF_x_wire$wget, wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] bram_serverAdapterA_1_outData_enqData$wget,
		bram_serverAdapterA_1_outData_outData$wget,
		bram_serverAdapterA_2_outData_enqData$wget,
		bram_serverAdapterA_2_outData_outData$wget,
		bram_serverAdapterA_3_outData_enqData$wget,
		bram_serverAdapterA_3_outData_outData$wget,
		bram_serverAdapterA_outData_enqData$wget,
		bram_serverAdapterA_outData_outData$wget,
		bram_serverAdapterB_1_outData_enqData$wget,
		bram_serverAdapterB_1_outData_outData$wget,
		bram_serverAdapterB_2_outData_enqData$wget,
		bram_serverAdapterB_2_outData_outData$wget,
		bram_serverAdapterB_3_outData_enqData$wget,
		bram_serverAdapterB_3_outData_outData$wget,
		bram_serverAdapterB_outData_enqData$wget,
		bram_serverAdapterB_outData_outData$wget,
		wci_Es_mAddr_w$wget,
		wci_Es_mData_w$wget,
		wmi_Es_mData_w$wget,
		wmi_wmi_wmiMFlag$wget,
		wmi_wmi_wmiReq$wget;
  wire [15 : 0] bml_crdBuf_modulus_bw$wget,
		bml_fabBuf_modulus_bw$wget,
		bml_lclBuf_modulus_bw$wget,
		bml_remBuf_modulus_bw$wget;
  wire [13 : 0] wmi_Es_mAddr_w$wget;
  wire [11 : 0] wmi_Es_mBurstLength_w$wget;
  wire [7 : 0] bml_dpControl$wget, edp_dpControl$wget, wmi_dpControl$wget;
  wire [3 : 0] wci_Es_mByteEn_w$wget, wmi_Es_mDataByteEn_w$wget;
  wire [2 : 0] bram_serverAdapterA_1_cnt_1$wget,
	       bram_serverAdapterA_1_cnt_2$wget,
	       bram_serverAdapterA_1_cnt_3$wget,
	       bram_serverAdapterA_2_cnt_1$wget,
	       bram_serverAdapterA_2_cnt_2$wget,
	       bram_serverAdapterA_2_cnt_3$wget,
	       bram_serverAdapterA_3_cnt_1$wget,
	       bram_serverAdapterA_3_cnt_2$wget,
	       bram_serverAdapterA_3_cnt_3$wget,
	       bram_serverAdapterA_cnt_1$wget,
	       bram_serverAdapterA_cnt_2$wget,
	       bram_serverAdapterA_cnt_3$wget,
	       bram_serverAdapterB_1_cnt_1$wget,
	       bram_serverAdapterB_1_cnt_2$wget,
	       bram_serverAdapterB_1_cnt_3$wget,
	       bram_serverAdapterB_2_cnt_1$wget,
	       bram_serverAdapterB_2_cnt_2$wget,
	       bram_serverAdapterB_2_cnt_3$wget,
	       bram_serverAdapterB_3_cnt_1$wget,
	       bram_serverAdapterB_3_cnt_2$wget,
	       bram_serverAdapterB_3_cnt_3$wget,
	       bram_serverAdapterB_cnt_1$wget,
	       bram_serverAdapterB_cnt_2$wget,
	       bram_serverAdapterB_cnt_3$wget,
	       wci_Es_mCmd_w$wget,
	       wci_wEdge$wget,
	       wmi_Es_mCmd_w$wget;
  wire [1 : 0] bram_serverAdapterA_1_s1_1$wget,
	       bram_serverAdapterA_1_writeWithResp$wget,
	       bram_serverAdapterA_2_s1_1$wget,
	       bram_serverAdapterA_2_writeWithResp$wget,
	       bram_serverAdapterA_3_s1_1$wget,
	       bram_serverAdapterA_3_writeWithResp$wget,
	       bram_serverAdapterA_s1_1$wget,
	       bram_serverAdapterA_writeWithResp$wget,
	       bram_serverAdapterB_1_s1_1$wget,
	       bram_serverAdapterB_1_writeWithResp$wget,
	       bram_serverAdapterB_2_s1_1$wget,
	       bram_serverAdapterB_2_writeWithResp$wget,
	       bram_serverAdapterB_3_s1_1$wget,
	       bram_serverAdapterB_3_writeWithResp$wget,
	       bram_serverAdapterB_s1_1$wget,
	       bram_serverAdapterB_writeWithResp$wget;
  wire bml_crdBuf_decAction$whas,
       bml_crdBuf_incAction$whas,
       bml_datumAReg_1$wget,
       bml_datumAReg_1$whas,
       bml_dpControl$whas,
       bml_fabAvail_1$wget,
       bml_fabAvail_1$whas,
       bml_fabBuf_decAction$whas,
       bml_fabBuf_incAction$whas,
       bml_fabDone_1$wget,
       bml_fabDone_1$whas,
       bml_lclBufDone_1$wget,
       bml_lclBufDone_1$whas,
       bml_lclBufStart_1$wget,
       bml_lclBufStart_1$whas,
       bml_lclBuf_decAction$whas,
       bml_lclBuf_incAction$whas,
       bml_remBuf_decAction$whas,
       bml_remBuf_incAction$whas,
       bml_remDone_1$wget,
       bml_remDone_1$whas,
       bml_remStart_1$wget,
       bml_remStart_1$whas,
       bram_serverAdapterA_1_cnt_1$whas,
       bram_serverAdapterA_1_cnt_2$whas,
       bram_serverAdapterA_1_cnt_3$whas,
       bram_serverAdapterA_1_outData_deqCalled$whas,
       bram_serverAdapterA_1_outData_enqData$whas,
       bram_serverAdapterA_1_outData_outData$whas,
       bram_serverAdapterA_1_s1_1$whas,
       bram_serverAdapterA_1_writeWithResp$whas,
       bram_serverAdapterA_2_cnt_1$whas,
       bram_serverAdapterA_2_cnt_2$whas,
       bram_serverAdapterA_2_cnt_3$whas,
       bram_serverAdapterA_2_outData_deqCalled$whas,
       bram_serverAdapterA_2_outData_enqData$whas,
       bram_serverAdapterA_2_outData_outData$whas,
       bram_serverAdapterA_2_s1_1$whas,
       bram_serverAdapterA_2_writeWithResp$whas,
       bram_serverAdapterA_3_cnt_1$whas,
       bram_serverAdapterA_3_cnt_2$whas,
       bram_serverAdapterA_3_cnt_3$whas,
       bram_serverAdapterA_3_outData_deqCalled$whas,
       bram_serverAdapterA_3_outData_enqData$whas,
       bram_serverAdapterA_3_outData_outData$whas,
       bram_serverAdapterA_3_s1_1$whas,
       bram_serverAdapterA_3_writeWithResp$whas,
       bram_serverAdapterA_cnt_1$whas,
       bram_serverAdapterA_cnt_2$whas,
       bram_serverAdapterA_cnt_3$whas,
       bram_serverAdapterA_outData_deqCalled$whas,
       bram_serverAdapterA_outData_enqData$whas,
       bram_serverAdapterA_outData_outData$whas,
       bram_serverAdapterA_s1_1$whas,
       bram_serverAdapterA_writeWithResp$whas,
       bram_serverAdapterB_1_cnt_1$whas,
       bram_serverAdapterB_1_cnt_2$whas,
       bram_serverAdapterB_1_cnt_3$whas,
       bram_serverAdapterB_1_outData_deqCalled$whas,
       bram_serverAdapterB_1_outData_enqData$whas,
       bram_serverAdapterB_1_outData_outData$whas,
       bram_serverAdapterB_1_s1_1$whas,
       bram_serverAdapterB_1_writeWithResp$whas,
       bram_serverAdapterB_2_cnt_1$whas,
       bram_serverAdapterB_2_cnt_2$whas,
       bram_serverAdapterB_2_cnt_3$whas,
       bram_serverAdapterB_2_outData_deqCalled$whas,
       bram_serverAdapterB_2_outData_enqData$whas,
       bram_serverAdapterB_2_outData_outData$whas,
       bram_serverAdapterB_2_s1_1$whas,
       bram_serverAdapterB_2_writeWithResp$whas,
       bram_serverAdapterB_3_cnt_1$whas,
       bram_serverAdapterB_3_cnt_2$whas,
       bram_serverAdapterB_3_cnt_3$whas,
       bram_serverAdapterB_3_outData_deqCalled$whas,
       bram_serverAdapterB_3_outData_enqData$whas,
       bram_serverAdapterB_3_outData_outData$whas,
       bram_serverAdapterB_3_s1_1$whas,
       bram_serverAdapterB_3_writeWithResp$whas,
       bram_serverAdapterB_cnt_1$whas,
       bram_serverAdapterB_cnt_2$whas,
       bram_serverAdapterB_cnt_3$whas,
       bram_serverAdapterB_outData_deqCalled$whas,
       bram_serverAdapterB_outData_enqData$whas,
       bram_serverAdapterB_outData_outData$whas,
       bram_serverAdapterB_s1_1$whas,
       bram_serverAdapterB_writeWithResp$whas,
       edp_creditReady_1$wget,
       edp_creditReady_1$whas,
       edp_dgdpTx_delta_deq$wget,
       edp_dgdpTx_delta_deq$whas,
       edp_dgdpTx_delta_enq$whas,
       edp_dgdpTx_new_data$whas,
       edp_dmaDoneMark_1$wget,
       edp_dmaDoneMark_1$whas,
       edp_dmaStartMark_1$wget,
       edp_dmaStartMark_1$whas,
       edp_dpControl$whas,
       edp_farBufReady_1$wget,
       edp_farBufReady_1$whas,
       edp_nearBufReady_1$wget,
       edp_nearBufReady_1$whas,
       edp_nowW$whas,
       edp_pullTagMatch_1$wget,
       edp_pullTagMatch_1$whas,
       edp_remDone_1$wget,
       edp_remDone_1$whas,
       edp_remStart_1$wget,
       edp_remStart_1$whas,
       wci_Es_mAddrSpace_w$wget,
       wci_Es_mAddrSpace_w$whas,
       wci_Es_mAddr_w$whas,
       wci_Es_mByteEn_w$whas,
       wci_Es_mCmd_w$whas,
       wci_Es_mData_w$whas,
       wci_ctlAckReg_1$wget,
       wci_ctlAckReg_1$whas,
       wci_reqF_r_clr$whas,
       wci_reqF_r_deq$whas,
       wci_reqF_r_enq$whas,
       wci_respF_dequeueing$whas,
       wci_respF_enqueueing$whas,
       wci_respF_x_wire$whas,
       wci_sFlagReg_1$wget,
       wci_sFlagReg_1$whas,
       wci_sThreadBusy_pw$whas,
       wci_wEdge$whas,
       wci_wciReq$whas,
       wci_wci_cfrd_pw$whas,
       wci_wci_cfwr_pw$whas,
       wci_wci_ctrl_pw$whas,
       wmi_Es_mAddrSpace_w$wget,
       wmi_Es_mAddrSpace_w$whas,
       wmi_Es_mAddr_w$whas,
       wmi_Es_mBurstLength_w$whas,
       wmi_Es_mCmd_w$whas,
       wmi_Es_mDataByteEn_w$whas,
       wmi_Es_mDataInfo_w$whas,
       wmi_Es_mDataLast_w$whas,
       wmi_Es_mDataValid_w$whas,
       wmi_Es_mData_w$whas,
       wmi_Es_mReqInfo_w$wget,
       wmi_Es_mReqInfo_w$whas,
       wmi_Es_mReqLast_w$whas,
       wmi_dpControl$whas,
       wmi_mesgBufReady_1$wget,
       wmi_mesgBufReady_1$whas,
       wmi_mesgDone_1$wget,
       wmi_mesgDone_1$whas,
       wmi_mesgStart_1$wget,
       wmi_mesgStart_1$whas,
       wmi_nowW$whas,
       wmi_wmi_dhF_doResetClr$whas,
       wmi_wmi_dhF_doResetDeq$whas,
       wmi_wmi_dhF_doResetEnq$whas,
       wmi_wmi_dhF_r_clr$whas,
       wmi_wmi_dhF_r_deq$whas,
       wmi_wmi_dhF_r_enq$whas,
       wmi_wmi_forceSThreadBusy_pw$whas,
       wmi_wmi_mFlagF_doResetClr$whas,
       wmi_wmi_mFlagF_doResetDeq$whas,
       wmi_wmi_mFlagF_doResetEnq$whas,
       wmi_wmi_mFlagF_r_clr$whas,
       wmi_wmi_mFlagF_r_deq$whas,
       wmi_wmi_mFlagF_r_enq$whas,
       wmi_wmi_operateD_1$wget,
       wmi_wmi_operateD_1$whas,
       wmi_wmi_peerIsReady_1$wget,
       wmi_wmi_peerIsReady_1$whas,
       wmi_wmi_reqF_doResetClr$whas,
       wmi_wmi_reqF_doResetDeq$whas,
       wmi_wmi_reqF_doResetEnq$whas,
       wmi_wmi_reqF_r_clr$whas,
       wmi_wmi_reqF_r_deq$whas,
       wmi_wmi_reqF_r_enq$whas,
       wmi_wmi_respF_dequeueing$whas,
       wmi_wmi_respF_enqueueing$whas,
       wmi_wmi_respF_x_wire$whas,
       wmi_wmi_sDataThreadBusy_dw$wget,
       wmi_wmi_sDataThreadBusy_dw$whas,
       wmi_wmi_sThreadBusy_dw$wget,
       wmi_wmi_sThreadBusy_dw$whas,
       wmi_wmi_wmiDh$whas,
       wmi_wmi_wmiMFlag$whas,
       wmi_wmi_wmiReq$whas,
       wti_operateD_1$wget,
       wti_operateD_1$whas,
       wti_wtiReq$whas;

  // register bml_crdBuf_modulus
  reg [15 : 0] bml_crdBuf_modulus;
  wire [15 : 0] bml_crdBuf_modulus$D_IN;
  wire bml_crdBuf_modulus$EN;

  // register bml_crdBuf_value
  reg [15 : 0] bml_crdBuf_value;
  wire [15 : 0] bml_crdBuf_value$D_IN;
  wire bml_crdBuf_value$EN;

  // register bml_datumAReg
  reg bml_datumAReg;
  wire bml_datumAReg$D_IN, bml_datumAReg$EN;

  // register bml_fabAvail
  reg bml_fabAvail;
  wire bml_fabAvail$D_IN, bml_fabAvail$EN;

  // register bml_fabBuf_modulus
  reg [15 : 0] bml_fabBuf_modulus;
  wire [15 : 0] bml_fabBuf_modulus$D_IN;
  wire bml_fabBuf_modulus$EN;

  // register bml_fabBuf_value
  reg [15 : 0] bml_fabBuf_value;
  wire [15 : 0] bml_fabBuf_value$D_IN;
  wire bml_fabBuf_value$EN;

  // register bml_fabBufsAvail
  reg [15 : 0] bml_fabBufsAvail;
  wire [15 : 0] bml_fabBufsAvail$D_IN;
  wire bml_fabBufsAvail$EN;

  // register bml_fabDone
  reg bml_fabDone;
  wire bml_fabDone$D_IN, bml_fabDone$EN;

  // register bml_fabFlowAddr
  reg [31 : 0] bml_fabFlowAddr;
  reg [31 : 0] bml_fabFlowAddr$D_IN;
  wire bml_fabFlowAddr$EN;

  // register bml_fabFlowBase
  reg [31 : 0] bml_fabFlowBase;
  wire [31 : 0] bml_fabFlowBase$D_IN;
  wire bml_fabFlowBase$EN;

  // register bml_fabFlowBaseMS
  reg [31 : 0] bml_fabFlowBaseMS;
  wire [31 : 0] bml_fabFlowBaseMS$D_IN;
  wire bml_fabFlowBaseMS$EN;

  // register bml_fabFlowSize
  reg [31 : 0] bml_fabFlowSize;
  wire [31 : 0] bml_fabFlowSize$D_IN;
  wire bml_fabFlowSize$EN;

  // register bml_fabMesgAddr
  reg [31 : 0] bml_fabMesgAddr;
  wire [31 : 0] bml_fabMesgAddr$D_IN;
  wire bml_fabMesgAddr$EN;

  // register bml_fabMesgBase
  reg [31 : 0] bml_fabMesgBase;
  wire [31 : 0] bml_fabMesgBase$D_IN;
  wire bml_fabMesgBase$EN;

  // register bml_fabMesgBaseMS
  reg [31 : 0] bml_fabMesgBaseMS;
  wire [31 : 0] bml_fabMesgBaseMS$D_IN;
  wire bml_fabMesgBaseMS$EN;

  // register bml_fabMesgSize
  reg [31 : 0] bml_fabMesgSize;
  wire [31 : 0] bml_fabMesgSize$D_IN;
  wire bml_fabMesgSize$EN;

  // register bml_fabMetaAddr
  reg [31 : 0] bml_fabMetaAddr;
  wire [31 : 0] bml_fabMetaAddr$D_IN;
  wire bml_fabMetaAddr$EN;

  // register bml_fabMetaBase
  reg [31 : 0] bml_fabMetaBase;
  wire [31 : 0] bml_fabMetaBase$D_IN;
  wire bml_fabMetaBase$EN;

  // register bml_fabMetaBaseMS
  reg [31 : 0] bml_fabMetaBaseMS;
  wire [31 : 0] bml_fabMetaBaseMS$D_IN;
  wire bml_fabMetaBaseMS$EN;

  // register bml_fabMetaSize
  reg [31 : 0] bml_fabMetaSize;
  wire [31 : 0] bml_fabMetaSize$D_IN;
  wire bml_fabMetaSize$EN;

  // register bml_fabNumBufs
  reg [15 : 0] bml_fabNumBufs;
  wire [15 : 0] bml_fabNumBufs$D_IN;
  wire bml_fabNumBufs$EN;

  // register bml_lclBufDone
  reg bml_lclBufDone;
  wire bml_lclBufDone$D_IN, bml_lclBufDone$EN;

  // register bml_lclBufStart
  reg bml_lclBufStart;
  wire bml_lclBufStart$D_IN, bml_lclBufStart$EN;

  // register bml_lclBuf_modulus
  reg [15 : 0] bml_lclBuf_modulus;
  wire [15 : 0] bml_lclBuf_modulus$D_IN;
  wire bml_lclBuf_modulus$EN;

  // register bml_lclBuf_value
  reg [15 : 0] bml_lclBuf_value;
  wire [15 : 0] bml_lclBuf_value$D_IN;
  wire bml_lclBuf_value$EN;

  // register bml_lclBufsAR
  reg [15 : 0] bml_lclBufsAR;
  wire [15 : 0] bml_lclBufsAR$D_IN;
  wire bml_lclBufsAR$EN;

  // register bml_lclBufsCF
  reg [15 : 0] bml_lclBufsCF;
  wire [15 : 0] bml_lclBufsCF$D_IN;
  wire bml_lclBufsCF$EN;

  // register bml_lclCredit
  reg [15 : 0] bml_lclCredit;
  wire [15 : 0] bml_lclCredit$D_IN;
  wire bml_lclCredit$EN;

  // register bml_lclDones
  reg [15 : 0] bml_lclDones;
  wire [15 : 0] bml_lclDones$D_IN;
  wire bml_lclDones$EN;

  // register bml_lclMesgAddr
  reg [15 : 0] bml_lclMesgAddr;
  wire [15 : 0] bml_lclMesgAddr$D_IN;
  wire bml_lclMesgAddr$EN;

  // register bml_lclMetaAddr
  reg [15 : 0] bml_lclMetaAddr;
  wire [15 : 0] bml_lclMetaAddr$D_IN;
  wire bml_lclMetaAddr$EN;

  // register bml_lclNumBufs
  reg [15 : 0] bml_lclNumBufs;
  wire [15 : 0] bml_lclNumBufs$D_IN;
  wire bml_lclNumBufs$EN;

  // register bml_lclStarts
  reg [15 : 0] bml_lclStarts;
  wire [15 : 0] bml_lclStarts$D_IN;
  wire bml_lclStarts$EN;

  // register bml_mesgBase
  reg [15 : 0] bml_mesgBase;
  wire [15 : 0] bml_mesgBase$D_IN;
  wire bml_mesgBase$EN;

  // register bml_mesgSize
  reg [15 : 0] bml_mesgSize;
  wire [15 : 0] bml_mesgSize$D_IN;
  wire bml_mesgSize$EN;

  // register bml_metaBase
  reg [15 : 0] bml_metaBase;
  wire [15 : 0] bml_metaBase$D_IN;
  wire bml_metaBase$EN;

  // register bml_metaSize
  reg [15 : 0] bml_metaSize;
  wire [15 : 0] bml_metaSize$D_IN;
  wire bml_metaSize$EN;

  // register bml_remBuf_modulus
  reg [15 : 0] bml_remBuf_modulus;
  wire [15 : 0] bml_remBuf_modulus$D_IN;
  wire bml_remBuf_modulus$EN;

  // register bml_remBuf_value
  reg [15 : 0] bml_remBuf_value;
  wire [15 : 0] bml_remBuf_value$D_IN;
  wire bml_remBuf_value$EN;

  // register bml_remDone
  reg bml_remDone;
  wire bml_remDone$D_IN, bml_remDone$EN;

  // register bml_remDones
  reg [15 : 0] bml_remDones;
  wire [15 : 0] bml_remDones$D_IN;
  wire bml_remDones$EN;

  // register bml_remMesgAddr
  reg [15 : 0] bml_remMesgAddr;
  wire [15 : 0] bml_remMesgAddr$D_IN;
  wire bml_remMesgAddr$EN;

  // register bml_remMetaAddr
  reg [15 : 0] bml_remMetaAddr;
  wire [15 : 0] bml_remMetaAddr$D_IN;
  wire bml_remMetaAddr$EN;

  // register bml_remStart
  reg bml_remStart;
  wire bml_remStart$D_IN, bml_remStart$EN;

  // register bml_remStarts
  reg [15 : 0] bml_remStarts;
  wire [15 : 0] bml_remStarts$D_IN;
  wire bml_remStarts$EN;

  // register bram_serverAdapterA_1_cnt
  reg [2 : 0] bram_serverAdapterA_1_cnt;
  wire [2 : 0] bram_serverAdapterA_1_cnt$D_IN;
  wire bram_serverAdapterA_1_cnt$EN;

  // register bram_serverAdapterA_1_s1
  reg [1 : 0] bram_serverAdapterA_1_s1;
  wire [1 : 0] bram_serverAdapterA_1_s1$D_IN;
  wire bram_serverAdapterA_1_s1$EN;

  // register bram_serverAdapterA_2_cnt
  reg [2 : 0] bram_serverAdapterA_2_cnt;
  wire [2 : 0] bram_serverAdapterA_2_cnt$D_IN;
  wire bram_serverAdapterA_2_cnt$EN;

  // register bram_serverAdapterA_2_s1
  reg [1 : 0] bram_serverAdapterA_2_s1;
  wire [1 : 0] bram_serverAdapterA_2_s1$D_IN;
  wire bram_serverAdapterA_2_s1$EN;

  // register bram_serverAdapterA_3_cnt
  reg [2 : 0] bram_serverAdapterA_3_cnt;
  wire [2 : 0] bram_serverAdapterA_3_cnt$D_IN;
  wire bram_serverAdapterA_3_cnt$EN;

  // register bram_serverAdapterA_3_s1
  reg [1 : 0] bram_serverAdapterA_3_s1;
  wire [1 : 0] bram_serverAdapterA_3_s1$D_IN;
  wire bram_serverAdapterA_3_s1$EN;

  // register bram_serverAdapterA_cnt
  reg [2 : 0] bram_serverAdapterA_cnt;
  wire [2 : 0] bram_serverAdapterA_cnt$D_IN;
  wire bram_serverAdapterA_cnt$EN;

  // register bram_serverAdapterA_s1
  reg [1 : 0] bram_serverAdapterA_s1;
  wire [1 : 0] bram_serverAdapterA_s1$D_IN;
  wire bram_serverAdapterA_s1$EN;

  // register bram_serverAdapterB_1_cnt
  reg [2 : 0] bram_serverAdapterB_1_cnt;
  wire [2 : 0] bram_serverAdapterB_1_cnt$D_IN;
  wire bram_serverAdapterB_1_cnt$EN;

  // register bram_serverAdapterB_1_s1
  reg [1 : 0] bram_serverAdapterB_1_s1;
  wire [1 : 0] bram_serverAdapterB_1_s1$D_IN;
  wire bram_serverAdapterB_1_s1$EN;

  // register bram_serverAdapterB_2_cnt
  reg [2 : 0] bram_serverAdapterB_2_cnt;
  wire [2 : 0] bram_serverAdapterB_2_cnt$D_IN;
  wire bram_serverAdapterB_2_cnt$EN;

  // register bram_serverAdapterB_2_s1
  reg [1 : 0] bram_serverAdapterB_2_s1;
  wire [1 : 0] bram_serverAdapterB_2_s1$D_IN;
  wire bram_serverAdapterB_2_s1$EN;

  // register bram_serverAdapterB_3_cnt
  reg [2 : 0] bram_serverAdapterB_3_cnt;
  wire [2 : 0] bram_serverAdapterB_3_cnt$D_IN;
  wire bram_serverAdapterB_3_cnt$EN;

  // register bram_serverAdapterB_3_s1
  reg [1 : 0] bram_serverAdapterB_3_s1;
  wire [1 : 0] bram_serverAdapterB_3_s1$D_IN;
  wire bram_serverAdapterB_3_s1$EN;

  // register bram_serverAdapterB_cnt
  reg [2 : 0] bram_serverAdapterB_cnt;
  wire [2 : 0] bram_serverAdapterB_cnt$D_IN;
  wire bram_serverAdapterB_cnt$EN;

  // register bram_serverAdapterB_s1
  reg [1 : 0] bram_serverAdapterB_s1;
  wire [1 : 0] bram_serverAdapterB_s1$D_IN;
  wire bram_serverAdapterB_s1$EN;

  // register dmaDoneTime
  reg [63 : 0] dmaDoneTime;
  wire [63 : 0] dmaDoneTime$D_IN;
  wire dmaDoneTime$EN;

  // register dmaStartTime
  reg [63 : 0] dmaStartTime;
  wire [63 : 0] dmaStartTime$D_IN;
  wire dmaStartTime$EN;

  // register dpControl
  reg [7 : 0] dpControl;
  wire [7 : 0] dpControl$D_IN;
  wire dpControl$EN;

  // register edp_complTimerCount
  reg [11 : 0] edp_complTimerCount;
  wire [11 : 0] edp_complTimerCount$D_IN;
  wire edp_complTimerCount$EN;

  // register edp_complTimerRunning
  reg edp_complTimerRunning;
  wire edp_complTimerRunning$D_IN, edp_complTimerRunning$EN;

  // register edp_creditReady
  reg edp_creditReady;
  wire edp_creditReady$D_IN, edp_creditReady$EN;

  // register edp_dbgBytesTxDeq
  reg [31 : 0] edp_dbgBytesTxDeq;
  wire [31 : 0] edp_dbgBytesTxDeq$D_IN;
  wire edp_dbgBytesTxDeq$EN;

  // register edp_dbgBytesTxEnq
  reg [31 : 0] edp_dbgBytesTxEnq;
  reg [31 : 0] edp_dbgBytesTxEnq$D_IN;
  wire edp_dbgBytesTxEnq$EN;

  // register edp_dgdpTx_num_empty
  reg [6 : 0] edp_dgdpTx_num_empty;
  wire [6 : 0] edp_dgdpTx_num_empty$D_IN;
  wire edp_dgdpTx_num_empty$EN;

  // register edp_dgdpTx_num_full
  reg [6 : 0] edp_dgdpTx_num_full;
  wire [6 : 0] edp_dgdpTx_num_full$D_IN;
  wire edp_dgdpTx_num_full$EN;

  // register edp_dgdpTx_vec
  reg [799 : 0] edp_dgdpTx_vec;
  wire [799 : 0] edp_dgdpTx_vec$D_IN;
  wire edp_dgdpTx_vec$EN;

  // register edp_dmaDoTailEvent
  reg edp_dmaDoTailEvent;
  wire edp_dmaDoTailEvent$D_IN, edp_dmaDoTailEvent$EN;

  // register edp_dmaDoneMark
  reg edp_dmaDoneMark;
  wire edp_dmaDoneMark$D_IN, edp_dmaDoneMark$EN;

  // register edp_dmaPullRemainDWLen
  reg [9 : 0] edp_dmaPullRemainDWLen;
  wire [9 : 0] edp_dmaPullRemainDWLen$D_IN;
  wire edp_dmaPullRemainDWLen$EN;

  // register edp_dmaPullRemainDWSub
  reg [9 : 0] edp_dmaPullRemainDWSub;
  wire [9 : 0] edp_dmaPullRemainDWSub$D_IN;
  wire edp_dmaPullRemainDWSub$EN;

  // register edp_dmaReqTag
  reg [4 : 0] edp_dmaReqTag;
  wire [4 : 0] edp_dmaReqTag$D_IN;
  wire edp_dmaReqTag$EN;

  // register edp_dmaStartMark
  reg edp_dmaStartMark;
  wire edp_dmaStartMark$D_IN, edp_dmaStartMark$EN;

  // register edp_dmaTag
  reg [4 : 0] edp_dmaTag;
  wire [4 : 0] edp_dmaTag$D_IN;
  wire edp_dmaTag$EN;

  // register edp_doMesgMH
  reg edp_doMesgMH;
  wire edp_doMesgMH$D_IN, edp_doMesgMH$EN;

  // register edp_doMetaMH
  reg edp_doMetaMH;
  wire edp_doMetaMH$D_IN, edp_doMetaMH$EN;

  // register edp_doXmtMetaBody
  reg edp_doXmtMetaBody;
  wire edp_doXmtMetaBody$D_IN, edp_doXmtMetaBody$EN;

  // register edp_doorSeqDwell
  reg [3 : 0] edp_doorSeqDwell;
  wire [3 : 0] edp_doorSeqDwell$D_IN;
  wire edp_doorSeqDwell$EN;

  // register edp_fabFlowAddr
  reg [31 : 0] edp_fabFlowAddr;
  wire [31 : 0] edp_fabFlowAddr$D_IN;
  wire edp_fabFlowAddr$EN;

  // register edp_fabFlowAddrMS
  reg [31 : 0] edp_fabFlowAddrMS;
  wire [31 : 0] edp_fabFlowAddrMS$D_IN;
  wire edp_fabFlowAddrMS$EN;

  // register edp_fabMesgAccu
  reg [31 : 0] edp_fabMesgAccu;
  wire [31 : 0] edp_fabMesgAccu$D_IN;
  wire edp_fabMesgAccu$EN;

  // register edp_fabMesgAddr
  reg [31 : 0] edp_fabMesgAddr;
  wire [31 : 0] edp_fabMesgAddr$D_IN;
  wire edp_fabMesgAddr$EN;

  // register edp_fabMesgAddrMS
  reg [31 : 0] edp_fabMesgAddrMS;
  wire [31 : 0] edp_fabMesgAddrMS$D_IN;
  wire edp_fabMesgAddrMS$EN;

  // register edp_fabMeta
  reg [128 : 0] edp_fabMeta;
  wire [128 : 0] edp_fabMeta$D_IN;
  wire edp_fabMeta$EN;

  // register edp_fabMetaAddr
  reg [31 : 0] edp_fabMetaAddr;
  wire [31 : 0] edp_fabMetaAddr$D_IN;
  wire edp_fabMetaAddr$EN;

  // register edp_fabMetaAddrMS
  reg [31 : 0] edp_fabMetaAddrMS;
  wire [31 : 0] edp_fabMetaAddrMS$D_IN;
  wire edp_fabMetaAddrMS$EN;

  // register edp_farBufReady
  reg edp_farBufReady;
  wire edp_farBufReady$D_IN, edp_farBufReady$EN;

  // register edp_firstMesgMH
  reg edp_firstMesgMH;
  wire edp_firstMesgMH$D_IN, edp_firstMesgMH$EN;

  // register edp_firstMetaMH
  reg edp_firstMetaMH;
  wire edp_firstMetaMH$D_IN, edp_firstMetaMH$EN;

  // register edp_flowDiagCount
  reg [31 : 0] edp_flowDiagCount;
  wire [31 : 0] edp_flowDiagCount$D_IN;
  wire edp_flowDiagCount$EN;

  // register edp_frameNumber
  reg [15 : 0] edp_frameNumber;
  wire [15 : 0] edp_frameNumber$D_IN;
  wire edp_frameNumber$EN;

  // register edp_gotResponseHeader
  reg edp_gotResponseHeader;
  wire edp_gotResponseHeader$D_IN, edp_gotResponseHeader$EN;

  // register edp_inIgnorePkt
  reg edp_inIgnorePkt;
  wire edp_inIgnorePkt$D_IN, edp_inIgnorePkt$EN;

  // register edp_lastMetaV
  reg [31 : 0] edp_lastMetaV;
  wire [31 : 0] edp_lastMetaV$D_IN;
  wire edp_lastMetaV$EN;

  // register edp_lastMetaV_1
  reg [31 : 0] edp_lastMetaV_1;
  wire [31 : 0] edp_lastMetaV_1$D_IN;
  wire edp_lastMetaV_1$EN;

  // register edp_lastMetaV_2
  reg [31 : 0] edp_lastMetaV_2;
  wire [31 : 0] edp_lastMetaV_2$D_IN;
  wire edp_lastMetaV_2$EN;

  // register edp_lastMetaV_3
  reg [31 : 0] edp_lastMetaV_3;
  wire [31 : 0] edp_lastMetaV_3$D_IN;
  wire edp_lastMetaV_3$EN;

  // register edp_lastRuleFired
  reg [3 : 0] edp_lastRuleFired;
  wire [3 : 0] edp_lastRuleFired$D_IN;
  wire edp_lastRuleFired$EN;

  // register edp_maxPayloadSize
  reg [12 : 0] edp_maxPayloadSize;
  wire [12 : 0] edp_maxPayloadSize$D_IN;
  wire edp_maxPayloadSize$EN;

  // register edp_maxReadReqSize
  reg [12 : 0] edp_maxReadReqSize;
  wire [12 : 0] edp_maxReadReqSize$D_IN;
  wire edp_maxReadReqSize$EN;

  // register edp_mesgComplReceived
  reg [16 : 0] edp_mesgComplReceived;
  wire [16 : 0] edp_mesgComplReceived$D_IN;
  wire edp_mesgComplReceived$EN;

  // register edp_mesgLengthRemainPull
  reg [16 : 0] edp_mesgLengthRemainPull;
  wire [16 : 0] edp_mesgLengthRemainPull$D_IN;
  wire edp_mesgLengthRemainPull$EN;

  // register edp_mesgLengthRemainPush
  reg [16 : 0] edp_mesgLengthRemainPush;
  reg [16 : 0] edp_mesgLengthRemainPush$D_IN;
  wire edp_mesgLengthRemainPush$EN;

  // register edp_nearBufReady
  reg edp_nearBufReady;
  wire edp_nearBufReady$D_IN, edp_nearBufReady$EN;

  // register edp_outDwRemain
  reg [9 : 0] edp_outDwRemain;
  wire [9 : 0] edp_outDwRemain$D_IN;
  wire edp_outDwRemain$EN;

  // register edp_postSeqDwell
  reg [3 : 0] edp_postSeqDwell;
  wire [3 : 0] edp_postSeqDwell$D_IN;
  wire edp_postSeqDwell$EN;

  // register edp_pullTagMatch
  reg edp_pullTagMatch;
  wire edp_pullTagMatch$D_IN, edp_pullTagMatch$EN;

  // register edp_remDone
  reg edp_remDone;
  wire edp_remDone$D_IN, edp_remDone$EN;

  // register edp_remMesgAccu
  reg [15 : 0] edp_remMesgAccu;
  wire [15 : 0] edp_remMesgAccu$D_IN;
  wire edp_remMesgAccu$EN;

  // register edp_remMesgAddr
  reg [15 : 0] edp_remMesgAddr;
  wire [15 : 0] edp_remMesgAddr$D_IN;
  wire edp_remMesgAddr$EN;

  // register edp_remMetaAddr
  reg [15 : 0] edp_remMetaAddr;
  wire [15 : 0] edp_remMetaAddr$D_IN;
  wire edp_remMetaAddr$EN;

  // register edp_remStart
  reg edp_remStart;
  wire edp_remStart$D_IN, edp_remStart$EN;

  // register edp_reqMesgInFlight
  reg edp_reqMesgInFlight;
  wire edp_reqMesgInFlight$D_IN, edp_reqMesgInFlight$EN;

  // register edp_reqMetaBodyInFlight
  reg edp_reqMetaBodyInFlight;
  wire edp_reqMetaBodyInFlight$D_IN, edp_reqMetaBodyInFlight$EN;

  // register edp_reqMetaInFlight
  reg edp_reqMetaInFlight;
  wire edp_reqMetaInFlight$D_IN, edp_reqMetaInFlight$EN;

  // register edp_sentTail4DWHeader
  reg edp_sentTail4DWHeader;
  wire edp_sentTail4DWHeader$D_IN, edp_sentTail4DWHeader$EN;

  // register edp_srcMesgAccu
  reg [31 : 0] edp_srcMesgAccu;
  wire [31 : 0] edp_srcMesgAccu$D_IN;
  wire edp_srcMesgAccu$EN;

  // register edp_tlpBRAM_debugBdata
  reg [127 : 0] edp_tlpBRAM_debugBdata;
  wire [127 : 0] edp_tlpBRAM_debugBdata$D_IN;
  wire edp_tlpBRAM_debugBdata$EN;

  // register edp_tlpBRAM_rdRespDwRemain
  reg [9 : 0] edp_tlpBRAM_rdRespDwRemain;
  wire [9 : 0] edp_tlpBRAM_rdRespDwRemain$D_IN;
  wire edp_tlpBRAM_rdRespDwRemain$EN;

  // register edp_tlpBRAM_readHeaderSent
  reg edp_tlpBRAM_readHeaderSent;
  wire edp_tlpBRAM_readHeaderSent$D_IN, edp_tlpBRAM_readHeaderSent$EN;

  // register edp_tlpBRAM_readNxtDWAddr
  reg [12 : 0] edp_tlpBRAM_readNxtDWAddr;
  wire [12 : 0] edp_tlpBRAM_readNxtDWAddr$D_IN;
  wire edp_tlpBRAM_readNxtDWAddr$EN;

  // register edp_tlpBRAM_readRemainDWLen
  reg [9 : 0] edp_tlpBRAM_readRemainDWLen;
  wire [9 : 0] edp_tlpBRAM_readRemainDWLen$D_IN;
  wire edp_tlpBRAM_readRemainDWLen$EN;

  // register edp_tlpBRAM_readStarted
  reg edp_tlpBRAM_readStarted;
  wire edp_tlpBRAM_readStarted$D_IN, edp_tlpBRAM_readStarted$EN;

  // register edp_tlpBRAM_writeDWAddr
  reg [12 : 0] edp_tlpBRAM_writeDWAddr;
  wire [12 : 0] edp_tlpBRAM_writeDWAddr$D_IN;
  wire edp_tlpBRAM_writeDWAddr$EN;

  // register edp_tlpBRAM_writeLastBE
  reg [3 : 0] edp_tlpBRAM_writeLastBE;
  wire [3 : 0] edp_tlpBRAM_writeLastBE$D_IN;
  wire edp_tlpBRAM_writeLastBE$EN;

  // register edp_tlpBRAM_writeRemainDWLen
  reg [9 : 0] edp_tlpBRAM_writeRemainDWLen;
  wire [9 : 0] edp_tlpBRAM_writeRemainDWLen$D_IN;
  wire edp_tlpBRAM_writeRemainDWLen$EN;

  // register edp_tlpMetaSent
  reg edp_tlpMetaSent;
  wire edp_tlpMetaSent$D_IN, edp_tlpMetaSent$EN;

  // register edp_tlpRcvBusy
  reg edp_tlpRcvBusy;
  wire edp_tlpRcvBusy$D_IN, edp_tlpRcvBusy$EN;

  // register edp_tlpXmtBusy
  reg edp_tlpXmtBusy;
  reg edp_tlpXmtBusy$D_IN;
  wire edp_tlpXmtBusy$EN;

  // register edp_xactionNumber
  reg [31 : 0] edp_xactionNumber;
  wire [31 : 0] edp_xactionNumber$D_IN;
  wire edp_xactionNumber$EN;

  // register edp_xmtMetaInFlight
  reg edp_xmtMetaInFlight;
  wire edp_xmtMetaInFlight$D_IN, edp_xmtMetaInFlight$EN;

  // register edp_xmtMetaOK
  reg edp_xmtMetaOK;
  reg edp_xmtMetaOK$D_IN;
  wire edp_xmtMetaOK$EN;

  // register wci_cEdge
  reg [2 : 0] wci_cEdge;
  wire [2 : 0] wci_cEdge$D_IN;
  wire wci_cEdge$EN;

  // register wci_cState
  reg [2 : 0] wci_cState;
  wire [2 : 0] wci_cState$D_IN;
  wire wci_cState$EN;

  // register wci_ctlAckReg
  reg wci_ctlAckReg;
  wire wci_ctlAckReg$D_IN, wci_ctlAckReg$EN;

  // register wci_ctlOpActive
  reg wci_ctlOpActive;
  wire wci_ctlOpActive$D_IN, wci_ctlOpActive$EN;

  // register wci_illegalEdge
  reg wci_illegalEdge;
  wire wci_illegalEdge$D_IN, wci_illegalEdge$EN;

  // register wci_isReset_isInReset
  reg wci_isReset_isInReset;
  wire wci_isReset_isInReset$D_IN, wci_isReset_isInReset$EN;

  // register wci_nState
  reg [2 : 0] wci_nState;
  reg [2 : 0] wci_nState$D_IN;
  wire wci_nState$EN;

  // register wci_reqF_countReg
  reg [1 : 0] wci_reqF_countReg;
  wire [1 : 0] wci_reqF_countReg$D_IN;
  wire wci_reqF_countReg$EN;

  // register wci_respF_c_r
  reg [1 : 0] wci_respF_c_r;
  wire [1 : 0] wci_respF_c_r$D_IN;
  wire wci_respF_c_r$EN;

  // register wci_respF_q_0
  reg [33 : 0] wci_respF_q_0;
  reg [33 : 0] wci_respF_q_0$D_IN;
  wire wci_respF_q_0$EN;

  // register wci_respF_q_1
  reg [33 : 0] wci_respF_q_1;
  reg [33 : 0] wci_respF_q_1$D_IN;
  wire wci_respF_q_1$EN;

  // register wci_sFlagReg
  reg wci_sFlagReg;
  wire wci_sFlagReg$D_IN, wci_sFlagReg$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wmi_addr
  reg [13 : 0] wmi_addr;
  wire [13 : 0] wmi_addr$D_IN;
  wire wmi_addr$EN;

  // register wmi_bufDwell
  reg [1 : 0] wmi_bufDwell;
  wire [1 : 0] wmi_bufDwell$D_IN;
  wire wmi_bufDwell$EN;

  // register wmi_bytesRemainReq
  reg [13 : 0] wmi_bytesRemainReq;
  wire [13 : 0] wmi_bytesRemainReq$D_IN;
  wire wmi_bytesRemainReq$EN;

  // register wmi_bytesRemainResp
  reg [13 : 0] wmi_bytesRemainResp;
  wire [13 : 0] wmi_bytesRemainResp$D_IN;
  wire wmi_bytesRemainResp$EN;

  // register wmi_doneWithMesg
  reg wmi_doneWithMesg;
  wire wmi_doneWithMesg$D_IN, wmi_doneWithMesg$EN;

  // register wmi_lastMesg
  reg [31 : 0] wmi_lastMesg;
  wire [31 : 0] wmi_lastMesg$D_IN;
  wire wmi_lastMesg$EN;

  // register wmi_lclMesgAddr
  reg [14 : 0] wmi_lclMesgAddr;
  wire [14 : 0] wmi_lclMesgAddr$D_IN;
  wire wmi_lclMesgAddr$EN;

  // register wmi_lclMetaAddr
  reg [14 : 0] wmi_lclMetaAddr;
  wire [14 : 0] wmi_lclMetaAddr$D_IN;
  wire wmi_lclMetaAddr$EN;

  // register wmi_mesgBufReady
  reg wmi_mesgBufReady;
  wire wmi_mesgBufReady$D_IN, wmi_mesgBufReady$EN;

  // register wmi_mesgBusy
  reg wmi_mesgBusy;
  wire wmi_mesgBusy$D_IN, wmi_mesgBusy$EN;

  // register wmi_mesgCount
  reg [31 : 0] wmi_mesgCount;
  wire [31 : 0] wmi_mesgCount$D_IN;
  wire wmi_mesgCount$EN;

  // register wmi_mesgDone
  reg wmi_mesgDone;
  wire wmi_mesgDone$D_IN, wmi_mesgDone$EN;

  // register wmi_mesgMeta
  reg [128 : 0] wmi_mesgMeta;
  wire [128 : 0] wmi_mesgMeta$D_IN;
  wire wmi_mesgMeta$EN;

  // register wmi_mesgStart
  reg wmi_mesgStart;
  wire wmi_mesgStart$D_IN, wmi_mesgStart$EN;

  // register wmi_metaBusy
  reg wmi_metaBusy;
  wire wmi_metaBusy$D_IN, wmi_metaBusy$EN;

  // register wmi_p4B
  reg [1 : 0] wmi_p4B;
  wire [1 : 0] wmi_p4B$D_IN;
  wire wmi_p4B$EN;

  // register wmi_rdActive
  reg wmi_rdActive;
  wire wmi_rdActive$D_IN, wmi_rdActive$EN;

  // register wmi_reqCount
  reg [15 : 0] wmi_reqCount;
  wire [15 : 0] wmi_reqCount$D_IN;
  wire wmi_reqCount$EN;

  // register wmi_thisMesg
  reg [31 : 0] wmi_thisMesg;
  wire [31 : 0] wmi_thisMesg$D_IN;
  wire wmi_thisMesg$EN;

  // register wmi_wmi_blockReq
  reg wmi_wmi_blockReq;
  wire wmi_wmi_blockReq$D_IN, wmi_wmi_blockReq$EN;

  // register wmi_wmi_dhF_countReg
  reg [1 : 0] wmi_wmi_dhF_countReg;
  wire [1 : 0] wmi_wmi_dhF_countReg$D_IN;
  wire wmi_wmi_dhF_countReg$EN;

  // register wmi_wmi_dhF_levelsValid
  reg wmi_wmi_dhF_levelsValid;
  wire wmi_wmi_dhF_levelsValid$D_IN, wmi_wmi_dhF_levelsValid$EN;

  // register wmi_wmi_errorSticky
  reg wmi_wmi_errorSticky;
  wire wmi_wmi_errorSticky$D_IN, wmi_wmi_errorSticky$EN;

  // register wmi_wmi_isReset_isInReset
  reg wmi_wmi_isReset_isInReset;
  wire wmi_wmi_isReset_isInReset$D_IN, wmi_wmi_isReset_isInReset$EN;

  // register wmi_wmi_mFlagF_countReg
  reg [1 : 0] wmi_wmi_mFlagF_countReg;
  wire [1 : 0] wmi_wmi_mFlagF_countReg$D_IN;
  wire wmi_wmi_mFlagF_countReg$EN;

  // register wmi_wmi_mFlagF_levelsValid
  reg wmi_wmi_mFlagF_levelsValid;
  wire wmi_wmi_mFlagF_levelsValid$D_IN, wmi_wmi_mFlagF_levelsValid$EN;

  // register wmi_wmi_operateD
  reg wmi_wmi_operateD;
  wire wmi_wmi_operateD$D_IN, wmi_wmi_operateD$EN;

  // register wmi_wmi_peerIsReady
  reg wmi_wmi_peerIsReady;
  wire wmi_wmi_peerIsReady$D_IN, wmi_wmi_peerIsReady$EN;

  // register wmi_wmi_reqF_countReg
  reg [1 : 0] wmi_wmi_reqF_countReg;
  wire [1 : 0] wmi_wmi_reqF_countReg$D_IN;
  wire wmi_wmi_reqF_countReg$EN;

  // register wmi_wmi_reqF_levelsValid
  reg wmi_wmi_reqF_levelsValid;
  wire wmi_wmi_reqF_levelsValid$D_IN, wmi_wmi_reqF_levelsValid$EN;

  // register wmi_wmi_respF_c_r
  reg [1 : 0] wmi_wmi_respF_c_r;
  wire [1 : 0] wmi_wmi_respF_c_r$D_IN;
  wire wmi_wmi_respF_c_r$EN;

  // register wmi_wmi_respF_q_0
  reg [33 : 0] wmi_wmi_respF_q_0;
  reg [33 : 0] wmi_wmi_respF_q_0$D_IN;
  wire wmi_wmi_respF_q_0$EN;

  // register wmi_wmi_respF_q_1
  reg [33 : 0] wmi_wmi_respF_q_1;
  reg [33 : 0] wmi_wmi_respF_q_1$D_IN;
  wire wmi_wmi_respF_q_1$EN;

  // register wmi_wmi_sFlagReg
  reg [31 : 0] wmi_wmi_sFlagReg;
  wire [31 : 0] wmi_wmi_sFlagReg$D_IN;
  wire wmi_wmi_sFlagReg$EN;

  // register wmi_wmi_statusR
  reg [7 : 0] wmi_wmi_statusR;
  wire [7 : 0] wmi_wmi_statusR$D_IN;
  wire wmi_wmi_statusR$EN;

  // register wmi_wmi_trafficSticky
  reg wmi_wmi_trafficSticky;
  wire wmi_wmi_trafficSticky$D_IN, wmi_wmi_trafficSticky$EN;

  // register wmi_wrActive
  reg wmi_wrActive;
  wire wmi_wrActive$D_IN, wmi_wrActive$EN;

  // register wmi_wrFinalize
  reg wmi_wrFinalize;
  wire wmi_wrFinalize$D_IN, wmi_wrFinalize$EN;

  // register wmi_wrtCount
  reg [15 : 0] wmi_wrtCount;
  wire [15 : 0] wmi_wrtCount$D_IN;
  wire wmi_wrtCount$EN;

  // register wti_isReset_isInReset
  reg wti_isReset_isInReset;
  wire wti_isReset_isInReset$D_IN, wti_isReset_isInReset$EN;

  // register wti_nowReq
  reg [66 : 0] wti_nowReq;
  wire [66 : 0] wti_nowReq$D_IN;
  wire wti_nowReq$EN;

  // register wti_operateD
  reg wti_operateD;
  wire wti_operateD$D_IN, wti_operateD$EN;

  // ports of submodule bram_memory
  reg [31 : 0] bram_memory$DIA, bram_memory$DIB;
  reg [10 : 0] bram_memory$ADDRA, bram_memory$ADDRB;
  wire [31 : 0] bram_memory$DOA, bram_memory$DOB;
  wire bram_memory$ENA, bram_memory$ENB, bram_memory$WEA, bram_memory$WEB;

  // ports of submodule bram_memory_1
  reg [31 : 0] bram_memory_1$DIA, bram_memory_1$DIB;
  reg [10 : 0] bram_memory_1$ADDRA, bram_memory_1$ADDRB;
  wire [31 : 0] bram_memory_1$DOA, bram_memory_1$DOB;
  wire bram_memory_1$ENA,
       bram_memory_1$ENB,
       bram_memory_1$WEA,
       bram_memory_1$WEB;

  // ports of submodule bram_memory_2
  reg [31 : 0] bram_memory_2$DIA, bram_memory_2$DIB;
  reg [10 : 0] bram_memory_2$ADDRA, bram_memory_2$ADDRB;
  wire [31 : 0] bram_memory_2$DOA, bram_memory_2$DOB;
  wire bram_memory_2$ENA,
       bram_memory_2$ENB,
       bram_memory_2$WEA,
       bram_memory_2$WEB;

  // ports of submodule bram_memory_3
  reg [31 : 0] bram_memory_3$DIA, bram_memory_3$DIB;
  reg [10 : 0] bram_memory_3$ADDRA, bram_memory_3$ADDRB;
  wire [31 : 0] bram_memory_3$DOA, bram_memory_3$DOB;
  wire bram_memory_3$ENA,
       bram_memory_3$ENB,
       bram_memory_3$WEA,
       bram_memory_3$WEB;

  // ports of submodule bram_serverAdapterA_1_outDataCore
  wire [31 : 0] bram_serverAdapterA_1_outDataCore$D_IN,
		bram_serverAdapterA_1_outDataCore$D_OUT;
  wire bram_serverAdapterA_1_outDataCore$CLR,
       bram_serverAdapterA_1_outDataCore$DEQ,
       bram_serverAdapterA_1_outDataCore$EMPTY_N,
       bram_serverAdapterA_1_outDataCore$ENQ,
       bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterA_2_outDataCore
  wire [31 : 0] bram_serverAdapterA_2_outDataCore$D_IN,
		bram_serverAdapterA_2_outDataCore$D_OUT;
  wire bram_serverAdapterA_2_outDataCore$CLR,
       bram_serverAdapterA_2_outDataCore$DEQ,
       bram_serverAdapterA_2_outDataCore$EMPTY_N,
       bram_serverAdapterA_2_outDataCore$ENQ,
       bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterA_3_outDataCore
  wire [31 : 0] bram_serverAdapterA_3_outDataCore$D_IN,
		bram_serverAdapterA_3_outDataCore$D_OUT;
  wire bram_serverAdapterA_3_outDataCore$CLR,
       bram_serverAdapterA_3_outDataCore$DEQ,
       bram_serverAdapterA_3_outDataCore$EMPTY_N,
       bram_serverAdapterA_3_outDataCore$ENQ,
       bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterA_outDataCore
  wire [31 : 0] bram_serverAdapterA_outDataCore$D_IN,
		bram_serverAdapterA_outDataCore$D_OUT;
  wire bram_serverAdapterA_outDataCore$CLR,
       bram_serverAdapterA_outDataCore$DEQ,
       bram_serverAdapterA_outDataCore$EMPTY_N,
       bram_serverAdapterA_outDataCore$ENQ,
       bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterB_1_outDataCore
  wire [31 : 0] bram_serverAdapterB_1_outDataCore$D_IN,
		bram_serverAdapterB_1_outDataCore$D_OUT;
  wire bram_serverAdapterB_1_outDataCore$CLR,
       bram_serverAdapterB_1_outDataCore$DEQ,
       bram_serverAdapterB_1_outDataCore$EMPTY_N,
       bram_serverAdapterB_1_outDataCore$ENQ,
       bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterB_2_outDataCore
  wire [31 : 0] bram_serverAdapterB_2_outDataCore$D_IN,
		bram_serverAdapterB_2_outDataCore$D_OUT;
  wire bram_serverAdapterB_2_outDataCore$CLR,
       bram_serverAdapterB_2_outDataCore$DEQ,
       bram_serverAdapterB_2_outDataCore$EMPTY_N,
       bram_serverAdapterB_2_outDataCore$ENQ,
       bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterB_3_outDataCore
  wire [31 : 0] bram_serverAdapterB_3_outDataCore$D_IN,
		bram_serverAdapterB_3_outDataCore$D_OUT;
  wire bram_serverAdapterB_3_outDataCore$CLR,
       bram_serverAdapterB_3_outDataCore$DEQ,
       bram_serverAdapterB_3_outDataCore$EMPTY_N,
       bram_serverAdapterB_3_outDataCore$ENQ,
       bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule bram_serverAdapterB_outDataCore
  wire [31 : 0] bram_serverAdapterB_outDataCore$D_IN,
		bram_serverAdapterB_outDataCore$D_OUT;
  wire bram_serverAdapterB_outDataCore$CLR,
       bram_serverAdapterB_outDataCore$DEQ,
       bram_serverAdapterB_outDataCore$EMPTY_N,
       bram_serverAdapterB_outDataCore$ENQ,
       bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule edp_inF
  wire [9 : 0] edp_inF$D_IN;
  wire edp_inF$CLR, edp_inF$DEQ, edp_inF$ENQ, edp_inF$FULL_N;

  // ports of submodule edp_outF
  wire [9 : 0] edp_outF$D_IN, edp_outF$D_OUT;
  wire edp_outF$CLR,
       edp_outF$DEQ,
       edp_outF$EMPTY_N,
       edp_outF$ENQ,
       edp_outF$FULL_N;

  // ports of submodule edp_tailEventF
  wire edp_tailEventF$CLR,
       edp_tailEventF$DEQ,
       edp_tailEventF$D_IN,
       edp_tailEventF$D_OUT,
       edp_tailEventF$EMPTY_N,
       edp_tailEventF$ENQ,
       edp_tailEventF$FULL_N;

  // ports of submodule edp_tlpBRAM_mReqF
  wire [129 : 0] edp_tlpBRAM_mReqF$D_IN, edp_tlpBRAM_mReqF$D_OUT;
  wire edp_tlpBRAM_mReqF$CLR,
       edp_tlpBRAM_mReqF$DEQ,
       edp_tlpBRAM_mReqF$EMPTY_N,
       edp_tlpBRAM_mReqF$ENQ,
       edp_tlpBRAM_mReqF$FULL_N;

  // ports of submodule edp_tlpBRAM_mRespF
  wire [138 : 0] edp_tlpBRAM_mRespF$D_IN, edp_tlpBRAM_mRespF$D_OUT;
  wire edp_tlpBRAM_mRespF$CLR,
       edp_tlpBRAM_mRespF$DEQ,
       edp_tlpBRAM_mRespF$EMPTY_N,
       edp_tlpBRAM_mRespF$ENQ,
       edp_tlpBRAM_mRespF$FULL_N;

  // ports of submodule edp_tlpBRAM_readReq
  wire [60 : 0] edp_tlpBRAM_readReq$D_IN, edp_tlpBRAM_readReq$D_OUT;
  wire edp_tlpBRAM_readReq$CLR,
       edp_tlpBRAM_readReq$DEQ,
       edp_tlpBRAM_readReq$EMPTY_N,
       edp_tlpBRAM_readReq$ENQ,
       edp_tlpBRAM_readReq$FULL_N;

  // ports of submodule wci_reqF
  wire [71 : 0] wci_reqF$D_IN, wci_reqF$D_OUT;
  wire wci_reqF$CLR, wci_reqF$DEQ, wci_reqF$EMPTY_N, wci_reqF$ENQ;

  // ports of submodule wmi_wmi_dhF
  wire [37 : 0] wmi_wmi_dhF$D_IN, wmi_wmi_dhF$D_OUT;
  wire wmi_wmi_dhF$CLR,
       wmi_wmi_dhF$DEQ,
       wmi_wmi_dhF$EMPTY_N,
       wmi_wmi_dhF$ENQ,
       wmi_wmi_dhF$FULL_N;

  // ports of submodule wmi_wmi_mFlagF
  wire [31 : 0] wmi_wmi_mFlagF$D_IN, wmi_wmi_mFlagF$D_OUT;
  wire wmi_wmi_mFlagF$CLR,
       wmi_wmi_mFlagF$DEQ,
       wmi_wmi_mFlagF$EMPTY_N,
       wmi_wmi_mFlagF$ENQ,
       wmi_wmi_mFlagF$FULL_N;

  // ports of submodule wmi_wmi_reqF
  wire [31 : 0] wmi_wmi_reqF$D_IN, wmi_wmi_reqF$D_OUT;
  wire wmi_wmi_reqF$CLR,
       wmi_wmi_reqF$DEQ,
       wmi_wmi_reqF$EMPTY_N,
       wmi_wmi_reqF$ENQ,
       wmi_wmi_reqF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_bml_remAdvance,
       CAN_FIRE_RL_edp_dmaPushResponseBody,
       CAN_FIRE_RL_edp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_edp_dmaTailEventSender,
       CAN_FIRE_RL_wmi_doWriteReq,
       CAN_FIRE_RL_wmi_getRequest,
       CAN_FIRE_RL_wmi_reqMetadata,
       CAN_FIRE_RL_wmi_respMetadata,
       WILL_FIRE_RL_bml_crdAdvance,
       WILL_FIRE_RL_bml_fba,
       WILL_FIRE_RL_bml_initAccumulators,
       WILL_FIRE_RL_bml_lclAdvance,
       WILL_FIRE_RL_bml_lcredit,
       WILL_FIRE_RL_bml_remAdvance,
       WILL_FIRE_RL_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_edp_dmaPushRequestMesg,
       WILL_FIRE_RL_edp_dmaPushResponseBody,
       WILL_FIRE_RL_edp_dmaPushResponseHeader,
       WILL_FIRE_RL_edp_dmaRequestNearMeta,
       WILL_FIRE_RL_edp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_edp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_edp_dmaTailEventSender,
       WILL_FIRE_RL_edp_dmaXmtDoorbell,
       WILL_FIRE_RL_edp_dmaXmtMetaBody,
       WILL_FIRE_RL_edp_dmaXmtMetaHead,
       WILL_FIRE_RL_edp_dmaXmtTailEvent,
       WILL_FIRE_RL_edp_send_mesgMH,
       WILL_FIRE_RL_edp_send_metaMH,
       WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq,
       WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp,
       WILL_FIRE_RL_edp_tlpBRAM_read_NextReq,
       WILL_FIRE_RL_edp_tlpBRAM_read_NextResp,
       WILL_FIRE_RL_edp_tlpBRAM_writeData,
       WILL_FIRE_RL_edp_tlpBRAM_writeReq,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctl_op_complete,
       WILL_FIRE_RL_wci_ctl_op_start,
       WILL_FIRE_RL_wci_respF_both,
       WILL_FIRE_RL_wci_respF_decCtr,
       WILL_FIRE_RL_wci_respF_incCtr,
       WILL_FIRE_RL_wmi_doReadReq,
       WILL_FIRE_RL_wmi_doReadResp,
       WILL_FIRE_RL_wmi_doWriteFinalize,
       WILL_FIRE_RL_wmi_doWriteReq,
       WILL_FIRE_RL_wmi_getRequest,
       WILL_FIRE_RL_wmi_reqMetadata,
       WILL_FIRE_RL_wmi_respMetadata,
       WILL_FIRE_RL_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_wmi_wmi_respF_both,
       WILL_FIRE_RL_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_wmi_wmi_respF_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_respF_q_0$write_1__VAL_2;
  reg [10 : 0] MUX_bram_memory$a_put_2__VAL_3,
	       MUX_bram_memory$a_put_2__VAL_4,
	       MUX_bram_memory_1$a_put_2__VAL_3,
	       MUX_bram_memory_1$a_put_2__VAL_4,
	       MUX_bram_memory_2$a_put_2__VAL_3,
	       MUX_bram_memory_2$a_put_2__VAL_4,
	       MUX_bram_memory_3$a_put_2__VAL_3,
	       MUX_bram_memory_3$a_put_2__VAL_4;
  wire [159 : 0] MUX_edp_dgdpTx_new_data$wset_1__VAL_1,
		 MUX_edp_dgdpTx_new_data$wset_1__VAL_2,
		 MUX_edp_dgdpTx_new_data$wset_1__VAL_3,
		 MUX_edp_dgdpTx_new_data$wset_1__VAL_4,
		 MUX_edp_dgdpTx_new_data$wset_1__VAL_5;
  wire [138 : 0] MUX_edp_tlpBRAM_mRespF$enq_1__VAL_1,
		 MUX_edp_tlpBRAM_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_edp_tlpBRAM_mReqF$enq_1__VAL_1,
		 MUX_edp_tlpBRAM_mReqF$enq_1__VAL_2;
  wire [128 : 0] MUX_edp_fabMeta$write_1__VAL_2,
		 MUX_wmi_mesgMeta$write_1__VAL_2;
  wire [33 : 0] MUX_wci_respF_q_0$write_1__VAL_1,
		MUX_wci_respF_q_1$write_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_2,
		MUX_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_wmi_wmi_respF_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_bml_fabFlowAddr$write_1__VAL_1,
		MUX_bml_fabFlowAddr$write_1__VAL_3,
		MUX_bml_fabMesgAddr$write_1__VAL_1,
		MUX_bml_fabMetaAddr$write_1__VAL_1,
		MUX_bram_memory$a_put_3__VAL_1,
		MUX_bram_memory$a_put_3__VAL_3,
		MUX_bram_memory_1$a_put_3__VAL_3,
		MUX_bram_memory_2$a_put_3__VAL_3,
		MUX_bram_memory_3$a_put_3__VAL_3,
		MUX_edp_dbgBytesTxEnq$write_1__VAL_1,
		MUX_edp_dbgBytesTxEnq$write_1__VAL_2,
		MUX_edp_dbgBytesTxEnq$write_1__VAL_3,
		MUX_edp_dbgBytesTxEnq$write_1__VAL_4,
		MUX_edp_fabMesgAccu$write_1__VAL_2,
		MUX_edp_srcMesgAccu$write_1__VAL_2,
		MUX_wmi_mesgCount$write_1__VAL_1;
  wire [16 : 0] MUX_edp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_edp_mesgLengthRemainPush$write_1__VAL_2,
		MUX_edp_mesgLengthRemainPush$write_1__VAL_3;
  wire [15 : 0] MUX_bml_crdBuf_value$write_1__VAL_3,
		MUX_bml_fabBuf_value$write_1__VAL_3,
		MUX_bml_fabBufsAvail$write_1__VAL_1,
		MUX_bml_fabBufsAvail$write_1__VAL_2,
		MUX_bml_lclBuf_value$write_1__VAL_3,
		MUX_bml_lclBufsAR$write_1__VAL_1,
		MUX_bml_lclBufsAR$write_1__VAL_2,
		MUX_bml_lclBufsCF$write_1__VAL_1,
		MUX_bml_lclBufsCF$write_1__VAL_2,
		MUX_bml_lclCredit$write_1__VAL_1,
		MUX_bml_lclMesgAddr$write_1__VAL_2,
		MUX_bml_lclMetaAddr$write_1__VAL_2,
		MUX_bml_remBuf_value$write_1__VAL_3,
		MUX_bml_remMesgAddr$write_1__VAL_2,
		MUX_bml_remMetaAddr$write_1__VAL_2,
		MUX_edp_remMesgAccu$write_1__VAL_2;
  wire [13 : 0] MUX_wmi_addr$write_1__VAL_1,
		MUX_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_1,
		MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_2,
		MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_1,
		MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_2;
  wire [10 : 0] MUX_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_edp_outDwRemain$write_1__VAL_1,
	       MUX_edp_outDwRemain$write_1__VAL_2,
	       MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_1,
	       MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_2,
	       MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_1,
	       MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_2,
	       MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_1,
	       MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_2;
  wire [4 : 0] MUX_edp_dgdpTx_delta_enq$wset_1__VAL_1,
	       MUX_edp_dgdpTx_delta_enq$wset_1__VAL_2;
  wire [3 : 0] MUX_edp_doorSeqDwell$write_1__VAL_1,
	       MUX_edp_postSeqDwell$write_1__VAL_1,
	       MUX_edp_postSeqDwell$write_1__VAL_2;
  wire [1 : 0] MUX_wci_respF_c_r$write_1__VAL_1,
	       MUX_wci_respF_c_r$write_1__VAL_2,
	       MUX_wmi_bufDwell$write_1__VAL_3,
	       MUX_wmi_p4B$write_1__VAL_2,
	       MUX_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_bml_fabBufsAvail$write_1__SEL_1,
       MUX_bml_fabFlowAddr$write_1__SEL_1,
       MUX_bml_lclBufsAR$write_1__SEL_1,
       MUX_bml_lclBufsCF$write_1__SEL_1,
       MUX_bml_lclCredit$write_1__SEL_1,
       MUX_bram_memory$a_put_1__SEL_1,
       MUX_bram_memory$a_put_1__SEL_2,
       MUX_bram_memory$a_put_1__SEL_3,
       MUX_bram_memory$b_put_1__SEL_1,
       MUX_bram_memory$b_put_1__SEL_2,
       MUX_bram_memory_1$a_put_1__SEL_1,
       MUX_bram_memory_1$a_put_1__SEL_2,
       MUX_bram_memory_1$a_put_1__SEL_3,
       MUX_bram_memory_1$b_put_1__SEL_1,
       MUX_bram_memory_1$b_put_1__SEL_2,
       MUX_bram_memory_2$a_put_1__SEL_1,
       MUX_bram_memory_2$a_put_1__SEL_2,
       MUX_bram_memory_2$a_put_1__SEL_3,
       MUX_bram_memory_2$b_put_1__SEL_1,
       MUX_bram_memory_2$b_put_1__SEL_2,
       MUX_bram_memory_3$a_put_1__SEL_1,
       MUX_bram_memory_3$a_put_1__SEL_2,
       MUX_bram_memory_3$a_put_1__SEL_3,
       MUX_bram_memory_3$b_put_1__SEL_1,
       MUX_bram_memory_3$b_put_1__SEL_2,
       MUX_edp_dbgBytesTxEnq$write_1__SEL_3,
       MUX_edp_fabMeta$write_1__SEL_1,
       MUX_edp_remDone_1$wset_1__SEL_1,
       MUX_edp_tlpBRAM_readHeaderSent$write_1__SEL_1,
       MUX_edp_tlpBRAM_readStarted$write_1__SEL_1,
       MUX_edp_tlpXmtBusy$write_1__SEL_1,
       MUX_edp_tlpXmtBusy$write_1__SEL_2,
       MUX_edp_xmtMetaOK$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_2,
       MUX_wci_illegalEdge$write_1__VAL_2,
       MUX_wci_respF_q_0$write_1__SEL_2,
       MUX_wci_respF_q_1$write_1__SEL_2,
       MUX_wmi_bufDwell$write_1__SEL_1,
       MUX_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_wmi_doneWithMesg$write_1__SEL_1,
       MUX_wmi_rdActive$write_1__SEL_1,
       MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2,
       MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2,
       MUX_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_wmi_wrActive$write_1__SEL_1,
       MUX_wmi_wrFinalize$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h140358,
	       v__h155038,
	       v__h15543,
	       v__h15717,
	       v__h15861,
	       v__h159360,
	       v__h163041,
	       v__h171677,
	       v__h175301,
	       v__h175447,
	       v__h175590,
	       v__h175710,
	       v__h175917,
	       v__h176679,
	       v__h186935,
	       v__h195037,
	       v__h195506,
	       v__h195660;
  reg [31 : 0] IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427,
	       IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428,
	       IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429,
	       IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270,
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861,
	       _theResult____h195644,
	       rdata__h188052;
  reg [3 : 0] CASE_edp_lastRuleFired_10_1_edp_lastRuleFired__ETC__q2;
  reg [1 : 0] CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q114,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q116,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q118,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q120,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q126,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q128,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q132,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q134,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q138,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q140,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q144,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q146,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q150,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q152,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q156,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q158,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q162,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q164,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q168,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q170,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q174,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q176,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q180,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q182,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q186,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q188,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q192,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q194,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q198,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q200,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q204,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q206,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q210,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q212,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q216,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q218,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q222,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q224,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q228,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q230,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q234,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q236,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q240,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q242,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q246,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q248,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q252,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q254,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q258,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q260,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q264,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q266,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q270,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q272,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q276,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q278,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q282,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q284,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q288,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q290,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q294,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q296,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q300,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q302,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q306,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q308,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q312,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q314,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q318,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q320,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q324,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q326,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q330,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q332,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q336,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q338,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q342,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q344,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q348,
	      CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q350,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q122,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q123,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q124,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q125,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q130,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q131,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q136,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q137,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q142,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q143,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q148,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q149,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q154,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q155,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q160,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q161,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q166,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q167,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q172,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q173,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q178,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q179,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q184,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q185,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q190,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q191,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q196,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q197,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q202,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q203,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q208,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q209,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q214,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q215,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q220,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q221,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q226,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q227,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q232,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q233,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q238,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q239,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q244,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q245,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q250,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q251,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q256,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q257,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q262,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q263,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q268,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q269,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q274,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q275,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q280,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q281,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q286,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q287,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q292,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q293,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q298,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q299,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q304,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q305,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q310,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q311,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q316,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q317,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q322,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q323,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q328,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q329,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q334,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q335,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q340,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q341,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q346,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q347,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q352,
	      CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q353,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q115,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q117,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q119,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q121,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q127,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q129,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q133,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q135,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q139,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q141,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q145,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q147,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q151,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q153,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q157,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q159,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q163,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q165,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q169,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q171,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q175,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q177,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q181,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q183,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q187,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q189,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q193,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q195,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q199,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q201,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q205,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q207,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q211,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q213,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q217,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q219,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q223,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q225,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q229,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q231,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q235,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q237,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q241,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q243,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q247,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q249,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q253,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q255,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q259,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q261,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q265,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q267,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q271,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q273,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q277,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q279,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q283,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q285,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q289,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q291,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q295,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q297,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q301,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q303,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q307,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q309,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q313,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q315,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q319,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q321,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q325,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q327,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q331,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q333,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q337,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q339,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q343,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q345,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q349,
	      CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q351,
	      CASE_edp_dgdpTx_new_datawget_BITS_109_TO_108__ETC__q103,
	      CASE_edp_dgdpTx_new_datawget_BITS_119_TO_118__ETC__q102,
	      CASE_edp_dgdpTx_new_datawget_BITS_129_TO_128__ETC__q101,
	      CASE_edp_dgdpTx_new_datawget_BITS_139_TO_138__ETC__q100,
	      CASE_edp_dgdpTx_new_datawget_BITS_149_TO_148__ETC__q99,
	      CASE_edp_dgdpTx_new_datawget_BITS_159_TO_158__ETC__q98,
	      CASE_edp_dgdpTx_new_datawget_BITS_19_TO_18_3__ETC__q112,
	      CASE_edp_dgdpTx_new_datawget_BITS_29_TO_28_3__ETC__q111,
	      CASE_edp_dgdpTx_new_datawget_BITS_39_TO_38_3__ETC__q110,
	      CASE_edp_dgdpTx_new_datawget_BITS_49_TO_48_3__ETC__q109,
	      CASE_edp_dgdpTx_new_datawget_BITS_59_TO_58_3__ETC__q108,
	      CASE_edp_dgdpTx_new_datawget_BITS_69_TO_68_3__ETC__q107,
	      CASE_edp_dgdpTx_new_datawget_BITS_79_TO_78_3__ETC__q106,
	      CASE_edp_dgdpTx_new_datawget_BITS_89_TO_88_3__ETC__q105,
	      CASE_edp_dgdpTx_new_datawget_BITS_99_TO_98_3__ETC__q104,
	      CASE_edp_dgdpTx_new_datawget_BITS_9_TO_8_3_0__ETC__q113,
	      CASE_edp_dgdpTx_vec_BITS_109_TO_108_3_0_edp_dg_ETC__q87,
	      CASE_edp_dgdpTx_vec_BITS_119_TO_118_3_0_edp_dg_ETC__q86,
	      CASE_edp_dgdpTx_vec_BITS_129_TO_128_3_0_edp_dg_ETC__q85,
	      CASE_edp_dgdpTx_vec_BITS_139_TO_138_3_0_edp_dg_ETC__q84,
	      CASE_edp_dgdpTx_vec_BITS_149_TO_148_3_0_edp_dg_ETC__q83,
	      CASE_edp_dgdpTx_vec_BITS_159_TO_158_3_0_edp_dg_ETC__q82,
	      CASE_edp_dgdpTx_vec_BITS_169_TO_168_3_0_edp_dg_ETC__q81,
	      CASE_edp_dgdpTx_vec_BITS_179_TO_178_3_0_edp_dg_ETC__q80,
	      CASE_edp_dgdpTx_vec_BITS_189_TO_188_3_0_edp_dg_ETC__q79,
	      CASE_edp_dgdpTx_vec_BITS_199_TO_198_3_0_edp_dg_ETC__q78,
	      CASE_edp_dgdpTx_vec_BITS_19_TO_18_3_0_edp_dgdp_ETC__q96,
	      CASE_edp_dgdpTx_vec_BITS_209_TO_208_3_0_edp_dg_ETC__q77,
	      CASE_edp_dgdpTx_vec_BITS_219_TO_218_3_0_edp_dg_ETC__q76,
	      CASE_edp_dgdpTx_vec_BITS_229_TO_228_3_0_edp_dg_ETC__q75,
	      CASE_edp_dgdpTx_vec_BITS_239_TO_238_3_0_edp_dg_ETC__q74,
	      CASE_edp_dgdpTx_vec_BITS_249_TO_248_3_0_edp_dg_ETC__q73,
	      CASE_edp_dgdpTx_vec_BITS_259_TO_258_3_0_edp_dg_ETC__q72,
	      CASE_edp_dgdpTx_vec_BITS_269_TO_268_3_0_edp_dg_ETC__q71,
	      CASE_edp_dgdpTx_vec_BITS_279_TO_278_3_0_edp_dg_ETC__q70,
	      CASE_edp_dgdpTx_vec_BITS_289_TO_288_3_0_edp_dg_ETC__q69,
	      CASE_edp_dgdpTx_vec_BITS_299_TO_298_3_0_edp_dg_ETC__q68,
	      CASE_edp_dgdpTx_vec_BITS_29_TO_28_3_0_edp_dgdp_ETC__q95,
	      CASE_edp_dgdpTx_vec_BITS_309_TO_308_3_0_edp_dg_ETC__q67,
	      CASE_edp_dgdpTx_vec_BITS_319_TO_318_3_0_edp_dg_ETC__q66,
	      CASE_edp_dgdpTx_vec_BITS_329_TO_328_3_0_edp_dg_ETC__q65,
	      CASE_edp_dgdpTx_vec_BITS_339_TO_338_3_0_edp_dg_ETC__q64,
	      CASE_edp_dgdpTx_vec_BITS_349_TO_348_3_0_edp_dg_ETC__q63,
	      CASE_edp_dgdpTx_vec_BITS_359_TO_358_3_0_edp_dg_ETC__q62,
	      CASE_edp_dgdpTx_vec_BITS_369_TO_368_3_0_edp_dg_ETC__q61,
	      CASE_edp_dgdpTx_vec_BITS_379_TO_378_3_0_edp_dg_ETC__q60,
	      CASE_edp_dgdpTx_vec_BITS_389_TO_388_3_0_edp_dg_ETC__q59,
	      CASE_edp_dgdpTx_vec_BITS_399_TO_398_3_0_edp_dg_ETC__q58,
	      CASE_edp_dgdpTx_vec_BITS_39_TO_38_3_0_edp_dgdp_ETC__q94,
	      CASE_edp_dgdpTx_vec_BITS_409_TO_408_3_0_edp_dg_ETC__q57,
	      CASE_edp_dgdpTx_vec_BITS_419_TO_418_3_0_edp_dg_ETC__q56,
	      CASE_edp_dgdpTx_vec_BITS_429_TO_428_3_0_edp_dg_ETC__q55,
	      CASE_edp_dgdpTx_vec_BITS_439_TO_438_3_0_edp_dg_ETC__q54,
	      CASE_edp_dgdpTx_vec_BITS_449_TO_448_3_0_edp_dg_ETC__q53,
	      CASE_edp_dgdpTx_vec_BITS_459_TO_458_3_0_edp_dg_ETC__q52,
	      CASE_edp_dgdpTx_vec_BITS_469_TO_468_3_0_edp_dg_ETC__q51,
	      CASE_edp_dgdpTx_vec_BITS_479_TO_478_3_0_edp_dg_ETC__q50,
	      CASE_edp_dgdpTx_vec_BITS_489_TO_488_3_0_edp_dg_ETC__q49,
	      CASE_edp_dgdpTx_vec_BITS_499_TO_498_3_0_edp_dg_ETC__q48,
	      CASE_edp_dgdpTx_vec_BITS_49_TO_48_3_0_edp_dgdp_ETC__q93,
	      CASE_edp_dgdpTx_vec_BITS_509_TO_508_3_0_edp_dg_ETC__q47,
	      CASE_edp_dgdpTx_vec_BITS_519_TO_518_3_0_edp_dg_ETC__q46,
	      CASE_edp_dgdpTx_vec_BITS_529_TO_528_3_0_edp_dg_ETC__q45,
	      CASE_edp_dgdpTx_vec_BITS_539_TO_538_3_0_edp_dg_ETC__q44,
	      CASE_edp_dgdpTx_vec_BITS_549_TO_548_3_0_edp_dg_ETC__q43,
	      CASE_edp_dgdpTx_vec_BITS_559_TO_558_3_0_edp_dg_ETC__q42,
	      CASE_edp_dgdpTx_vec_BITS_569_TO_568_3_0_edp_dg_ETC__q41,
	      CASE_edp_dgdpTx_vec_BITS_579_TO_578_3_0_edp_dg_ETC__q40,
	      CASE_edp_dgdpTx_vec_BITS_589_TO_588_3_0_edp_dg_ETC__q39,
	      CASE_edp_dgdpTx_vec_BITS_599_TO_598_3_0_edp_dg_ETC__q38,
	      CASE_edp_dgdpTx_vec_BITS_59_TO_58_3_0_edp_dgdp_ETC__q92,
	      CASE_edp_dgdpTx_vec_BITS_609_TO_608_3_0_edp_dg_ETC__q37,
	      CASE_edp_dgdpTx_vec_BITS_619_TO_618_3_0_edp_dg_ETC__q36,
	      CASE_edp_dgdpTx_vec_BITS_629_TO_628_3_0_edp_dg_ETC__q35,
	      CASE_edp_dgdpTx_vec_BITS_639_TO_638_3_0_edp_dg_ETC__q34,
	      CASE_edp_dgdpTx_vec_BITS_649_TO_648_3_0_edp_dg_ETC__q33,
	      CASE_edp_dgdpTx_vec_BITS_659_TO_658_3_0_edp_dg_ETC__q32,
	      CASE_edp_dgdpTx_vec_BITS_669_TO_668_3_0_edp_dg_ETC__q31,
	      CASE_edp_dgdpTx_vec_BITS_679_TO_678_3_0_edp_dg_ETC__q30,
	      CASE_edp_dgdpTx_vec_BITS_689_TO_688_3_0_edp_dg_ETC__q29,
	      CASE_edp_dgdpTx_vec_BITS_699_TO_698_3_0_edp_dg_ETC__q28,
	      CASE_edp_dgdpTx_vec_BITS_69_TO_68_3_0_edp_dgdp_ETC__q91,
	      CASE_edp_dgdpTx_vec_BITS_709_TO_708_3_0_edp_dg_ETC__q27,
	      CASE_edp_dgdpTx_vec_BITS_719_TO_718_3_0_edp_dg_ETC__q26,
	      CASE_edp_dgdpTx_vec_BITS_729_TO_728_3_0_edp_dg_ETC__q25,
	      CASE_edp_dgdpTx_vec_BITS_739_TO_738_3_0_edp_dg_ETC__q24,
	      CASE_edp_dgdpTx_vec_BITS_749_TO_748_3_0_edp_dg_ETC__q23,
	      CASE_edp_dgdpTx_vec_BITS_759_TO_758_3_0_edp_dg_ETC__q22,
	      CASE_edp_dgdpTx_vec_BITS_769_TO_768_3_0_edp_dg_ETC__q21,
	      CASE_edp_dgdpTx_vec_BITS_779_TO_778_3_0_edp_dg_ETC__q20,
	      CASE_edp_dgdpTx_vec_BITS_789_TO_788_3_0_edp_dg_ETC__q19,
	      CASE_edp_dgdpTx_vec_BITS_799_TO_798_3_0_edp_dg_ETC__q18,
	      CASE_edp_dgdpTx_vec_BITS_79_TO_78_3_0_edp_dgdp_ETC__q90,
	      CASE_edp_dgdpTx_vec_BITS_89_TO_88_3_0_edp_dgdp_ETC__q89,
	      CASE_edp_dgdpTx_vec_BITS_99_TO_98_3_0_edp_dgdp_ETC__q88,
	      CASE_edp_dgdpTx_vec_BITS_9_TO_8_3_0_edp_dgdpTx_ETC__q97,
	      CASE_edp_outFD_OUT_BITS_9_TO_8_3_0_edp_outFD_ETC__q1,
	      CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q354,
	      lowAddr10__h28459,
	      x__h28588,
	      x__h28611;
  reg CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q6,
      CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q7,
      CASE_dpControl_BITS_1_TO_0_bml_fabDone_0_bml_f_ETC__q3,
      CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5,
      CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4,
      CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16,
      CASE_wmi_p4B_NOT_wmi_p4B_EQ_3_OR_bram_serverAd_ETC__q17,
      IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403,
      IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675,
      IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392,
      IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685,
      IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393,
      IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695,
      IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404,
      IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705,
      IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928,
      IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912,
      IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958,
      IF_wmi_p4B_734_EQ_1_737_THEN_bram_serverAdapte_ETC___d5743;
  wire [799 : 0] IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782,
		 _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781;
  wire [779 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d5015;
  wire [759 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4943;
  wire [739 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4871;
  wire [719 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4799;
  wire [699 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4727;
  wire [679 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4655;
  wire [659 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4583;
  wire [639 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4511;
  wire [619 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4439;
  wire [599 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4367;
  wire [579 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4295;
  wire [559 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4223;
  wire [539 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4151;
  wire [519 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4079;
  wire [499 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4007;
  wire [479 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3935;
  wire [459 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3863;
  wire [439 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3791;
  wire [419 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3719;
  wire [399 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3647;
  wire [379 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3575;
  wire [359 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3503;
  wire [339 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3431;
  wire [319 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3359;
  wire [299 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3287;
  wire [279 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3215;
  wire [259 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3143;
  wire [239 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3071;
  wire [219 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2999;
  wire [199 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2927;
  wire [179 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2855;
  wire [159 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2783,
		 x__h55201;
  wire [139 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2711,
		 _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5340,
		 _0_CONCAT_IF_edp_firstMetaMH_151_THEN_2_ELSE_0__ETC___d5181;
  wire [127 : 0] IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1037,
		 IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1042,
		 rdata__h33890;
  wire [119 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2639,
		 _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5334;
  wire [99 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2567;
  wire [79 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2495;
  wire [59 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2423;
  wire [39 : 0] IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2351;
  wire [31 : 0] bml_fabFlowAddr_890_PLUS_bml_fabFlowSize_891___d6779,
		mesgMeta_opcode__h186333,
		nowLS__h158153,
		nowMS__h157210,
		opcode__h155979,
		rdat__h195723,
		rdat__h195731,
		rdat__h195739,
		rdat__h195747,
		rdat__h195755,
		rdat__h195763,
		rdat__h195771,
		rdat__h195792,
		rdat__h195799,
		rdat__h195812,
		rdat__h195819,
		rdat__h195826,
		rdat__h196090,
		rdat__h196140,
		rdat__h196240,
		rdat__h196298,
		rdat__h196320,
		rdat__h196330,
		rdat__h196452,
		rdat__h196572,
		rdat__h196601,
		rdat__h196630,
		rdat__h196659,
		rdat__h196689,
		rdat__h196723,
		rdat__h196756,
		rdat__h196790,
		rdat__h196823,
		rdat__h196833,
		rresp_data__h28506,
		x3__h186293,
		x__h154145,
		x__h159156,
		y__h152954,
		y__h162882,
		y__h171358,
		y__h171534,
		y_avValue__h187888,
		y_avValue__h187908,
		y_avValue__h187928,
		y_avValue__h187948;
  wire [23 : 0] _10_MUL_0_CONCAT_edp_dgdpTx_num_full_069_MINUS__ETC___d1321;
  wire [16 : 0] edp_mesgLengthRemainPush_PLUS_3__q15,
		x__h162816,
		y__h162806,
		y__h162818;
  wire [15 : 0] x__h192409,
		x__h193533,
		x__h193538,
		x__h193645,
		x__h193682,
		x__h193760,
		x__h193765,
		x__h193798,
		x__h193803;
  wire [12 : 0] edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12,
		edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13,
		edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11,
		edp_tlpBRAM_writeDWAddr_PLUS_1__q9,
		edp_tlpBRAM_writeDWAddr_PLUS_2__q10,
		edp_tlpBRAM_writeDWAddr_PLUS_3__q8,
		spanToNextPage__h162780,
		thisRequestLength__h162781,
		y__h17301,
		y__h26071;
  wire [11 : 0] _10_MUL_0_CONCAT_edp_dgdpTx_delta_deq_whas__075_ETC___d2219,
		byteCount__h28461,
		x__h28579,
		x__h28581,
		y__h28580,
		y__h28582;
  wire [9 : 0] IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855,
	       _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0_319___d7957,
	       y__h171483,
	       y__h17372,
	       y__h26023,
	       y__h29521;
  wire [7 : 0] rreq_tag__h162959;
  wire [6 : 0] lowAddr__h28460;
  wire [4 : 0] IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273;
  wire [2 : 0] bram_serverAdapterA_1_cnt_44_PLUS_IF_bram_serv_ETC___d150,
	       bram_serverAdapterA_2_cnt_62_PLUS_IF_bram_serv_ETC___d268,
	       bram_serverAdapterA_3_cnt_80_PLUS_IF_bram_serv_ETC___d386,
	       bram_serverAdapterA_cnt_6_PLUS_IF_bram_serverA_ETC___d32,
	       bram_serverAdapterB_1_cnt_03_PLUS_IF_bram_serv_ETC___d209,
	       bram_serverAdapterB_2_cnt_21_PLUS_IF_bram_serv_ETC___d327,
	       bram_serverAdapterB_3_cnt_39_PLUS_IF_bram_serv_ETC___d445,
	       bram_serverAdapterB_cnt_5_PLUS_IF_bram_serverA_ETC___d91;
  wire [1 : 0] ab__h10383,
	       ab__h11780,
	       ab__h1600,
	       ab__h2999,
	       ab__h4529,
	       ab__h5926,
	       ab__h7456,
	       ab__h8853,
	       edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_99_ETC___d6277,
	       idx__h19087,
	       idx__h21318,
	       idx__h22622,
	       idx__h23926,
	       idx__h26318,
	       idx__h26786,
	       idx__h27159,
	       idx__h27532;
  wire IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d708,
       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d921,
       IF_wmi_p4B_734_EQ_0_735_THEN_bram_serverAdapte_ETC___d5748,
       NOT_bml_lclBufDone_875_942_AND_IF_bml_dpContro_ETC___d5955,
       NOT_wmi_wrActive_649_650_OR_NOT_wmi_rdActive_6_ETC___d5659,
       bml_crdBuf_value_833_EQ_bml_crdBuf_modulus_bw__ETC___d7513,
       bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514,
       bml_lclBufDone_875_AND_IF_bml_dpControl_wget___ETC___d6396,
       bml_lclBuf_value_788_EQ_bml_lclBuf_modulus_bw__ETC___d7532,
       bml_remBuf_value_803_EQ_bml_remBuf_modulus_bw__ETC___d7533,
       bram_serverAdapterA_1_cnt_44_SLT_3___d6784,
       bram_serverAdapterA_2_cnt_62_SLT_3___d6785,
       bram_serverAdapterA_2_outDataCore_notEmpty__38_ETC___d993,
       bram_serverAdapterA_3_cnt_80_SLT_3___d6786,
       bram_serverAdapterA_cnt_6_SLT_3___d6783,
       bram_serverAdapterA_outDataCore_notEmpty_OR_br_ETC___d995,
       bram_serverAdapterB_1_cnt_03_SLT_3___d5599,
       bram_serverAdapterB_1_outData_outData_whas__61_ETC___d5627,
       bram_serverAdapterB_2_cnt_21_SLT_3___d5600,
       bram_serverAdapterB_3_cnt_39_SLT_3___d5601,
       bram_serverAdapterB_cnt_5_SLT_3___d5598,
       edp_outDwRemain_379_ULE_4___d5381,
       edp_tlpBRAM_mReqF_first__18_BIT_60_02_OR_IF_ed_ETC___d813,
       edp_tlpBRAM_mReqF_first__18_BIT_63_19_OR_IF_ed_ETC___d634,
       edp_tlpBRAM_rdRespDwRemain_024_ULE_4___d1026,
       edp_tlpBRAM_readRemainDWLen_46_ULE_4___d847,
       edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275,
       edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274,
       edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264,
       hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5111,
       hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5284,
       hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5356,
       hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5393,
       wmi_dpControl_whas__585_AND_bram_serverAdapter_ETC___d5631,
       wmi_wmi_operateD_538_AND_wmi_wmi_peerIsReady_5_ETC___d5713;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_reqF_countReg > 2'd1 || wci_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_sFlagReg } ;

  // value method wtiS0_sThreadBusy
  assign wtiS0_SThreadBusy = wti_isReset_isInReset ;

  // value method wtiS0_sReset_n
  assign wtiS0_SReset_n = !wti_isReset_isInReset && wti_operateD ;

  // value method wmiS0_sResp
  assign wmiS0_SResp = wmi_wmi_respF_q_0[33:32] ;

  // value method wmiS0_sData
  assign wmiS0_SData = wmi_wmi_respF_q_0[31:0] ;

  // value method wmiS0_sThreadBusy
  assign wmiS0_SThreadBusy =
	     !wmi_wmi_sThreadBusy_dw$whas || wmi_wmi_sThreadBusy_dw$wget ;

  // value method wmiS0_sDataThreadBusy
  assign wmiS0_SDataThreadBusy =
	     !wmi_wmi_sDataThreadBusy_dw$whas ||
	     wmi_wmi_sDataThreadBusy_dw$wget ;

  // value method wmiS0_sRespLast
  assign wmiS0_SRespLast = 1'd0 ;

  // value method wmiS0_sFlag
  assign wmiS0_SFlag = wmi_wmi_sFlagReg ;

  // value method wmiS0_sReset_n
  assign wmiS0_SReset_n = !wmi_wmi_isReset_isInReset && wmi_wmi_operateD ;

  // action method server_request_put
  assign RDY_server_request_put = edp_inF$FULL_N ;

  // actionvalue method server_response_get
  assign server_response_get =
	     { CASE_edp_outFD_OUT_BITS_9_TO_8_3_0_edp_outFD_ETC__q1,
	       edp_outF$D_OUT[7:0] } ;
  assign RDY_server_response_get = edp_outF$EMPTY_N ;

  // submodule bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) bram_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bram_memory$ADDRA),
					  .ADDRB(bram_memory$ADDRB),
					  .DIA(bram_memory$DIA),
					  .DIB(bram_memory$DIB),
					  .WEA(bram_memory$WEA),
					  .WEB(bram_memory$WEB),
					  .ENA(bram_memory$ENA),
					  .ENB(bram_memory$ENB),
					  .DOA(bram_memory$DOA),
					  .DOB(bram_memory$DOB));

  // submodule bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) bram_memory_1(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(bram_memory_1$ADDRA),
					    .ADDRB(bram_memory_1$ADDRB),
					    .DIA(bram_memory_1$DIA),
					    .DIB(bram_memory_1$DIB),
					    .WEA(bram_memory_1$WEA),
					    .WEB(bram_memory_1$WEB),
					    .ENA(bram_memory_1$ENA),
					    .ENB(bram_memory_1$ENB),
					    .DOA(bram_memory_1$DOA),
					    .DOB(bram_memory_1$DOB));

  // submodule bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) bram_memory_2(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(bram_memory_2$ADDRA),
					    .ADDRB(bram_memory_2$ADDRB),
					    .DIA(bram_memory_2$DIA),
					    .DIB(bram_memory_2$DIB),
					    .WEA(bram_memory_2$WEA),
					    .WEB(bram_memory_2$WEB),
					    .ENA(bram_memory_2$ENA),
					    .ENB(bram_memory_2$ENB),
					    .DOA(bram_memory_2$DOA),
					    .DOB(bram_memory_2$DOB));

  // submodule bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) bram_memory_3(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(bram_memory_3$ADDRA),
					    .ADDRB(bram_memory_3$ADDRB),
					    .DIA(bram_memory_3$DIA),
					    .DIB(bram_memory_3$DIB),
					    .WEA(bram_memory_3$WEA),
					    .WEB(bram_memory_3$WEB),
					    .ENA(bram_memory_3$ENA),
					    .ENB(bram_memory_3$ENB),
					    .DOA(bram_memory_3$DOA),
					    .DOB(bram_memory_3$DOB));

  // submodule bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterA_1_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterA_1_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterA_1_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterA_1_outDataCore$DEQ),
								 .CLR(bram_serverAdapterA_1_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterA_1_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterA_1_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterA_2_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterA_2_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterA_2_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterA_2_outDataCore$DEQ),
								 .CLR(bram_serverAdapterA_2_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterA_2_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterA_2_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterA_3_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterA_3_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterA_3_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterA_3_outDataCore$DEQ),
								 .CLR(bram_serverAdapterA_3_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterA_3_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterA_3_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterA_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(bram_serverAdapterA_outDataCore$D_IN),
							       .ENQ(bram_serverAdapterA_outDataCore$ENQ),
							       .DEQ(bram_serverAdapterA_outDataCore$DEQ),
							       .CLR(bram_serverAdapterA_outDataCore$CLR),
							       .D_OUT(bram_serverAdapterA_outDataCore$D_OUT),
							       .FULL_N(bram_serverAdapterA_outDataCore$FULL_N),
							       .EMPTY_N(bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterB_1_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterB_1_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterB_1_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterB_1_outDataCore$DEQ),
								 .CLR(bram_serverAdapterB_1_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterB_1_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterB_1_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterB_2_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterB_2_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterB_2_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterB_2_outDataCore$DEQ),
								 .CLR(bram_serverAdapterB_2_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterB_2_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterB_2_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterB_3_outDataCore(.RST_N(RST_N),
								 .CLK(CLK),
								 .D_IN(bram_serverAdapterB_3_outDataCore$D_IN),
								 .ENQ(bram_serverAdapterB_3_outDataCore$ENQ),
								 .DEQ(bram_serverAdapterB_3_outDataCore$DEQ),
								 .CLR(bram_serverAdapterB_3_outDataCore$CLR),
								 .D_OUT(bram_serverAdapterB_3_outDataCore$D_OUT),
								 .FULL_N(bram_serverAdapterB_3_outDataCore$FULL_N),
								 .EMPTY_N(bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) bram_serverAdapterB_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(bram_serverAdapterB_outDataCore$D_IN),
							       .ENQ(bram_serverAdapterB_outDataCore$ENQ),
							       .DEQ(bram_serverAdapterB_outDataCore$DEQ),
							       .CLR(bram_serverAdapterB_outDataCore$CLR),
							       .D_OUT(bram_serverAdapterB_outDataCore$D_OUT),
							       .FULL_N(bram_serverAdapterB_outDataCore$FULL_N),
							       .EMPTY_N(bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule edp_inF
  arSRLFIFOD #(.width(32'd10), .l2depth(32'd4)) edp_inF(.CLK(CLK),
							.RST_N(RST_N),
							.D_IN(edp_inF$D_IN),
							.CLR(edp_inF$CLR),
							.DEQ(edp_inF$DEQ),
							.ENQ(edp_inF$ENQ),
							.D_OUT(),
							.EMPTY_N(),
							.FULL_N(edp_inF$FULL_N));

  // submodule edp_outF
  arSRLFIFOD #(.width(32'd10), .l2depth(32'd4)) edp_outF(.CLK(CLK),
							 .RST_N(RST_N),
							 .D_IN(edp_outF$D_IN),
							 .CLR(edp_outF$CLR),
							 .DEQ(edp_outF$DEQ),
							 .ENQ(edp_outF$ENQ),
							 .D_OUT(edp_outF$D_OUT),
							 .EMPTY_N(edp_outF$EMPTY_N),
							 .FULL_N(edp_outF$FULL_N));

  // submodule edp_tailEventF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) edp_tailEventF(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(edp_tailEventF$D_IN),
							 .ENQ(edp_tailEventF$ENQ),
							 .DEQ(edp_tailEventF$DEQ),
							 .CLR(edp_tailEventF$CLR),
							 .D_OUT(edp_tailEventF$D_OUT),
							 .FULL_N(edp_tailEventF$FULL_N),
							 .EMPTY_N(edp_tailEventF$EMPTY_N));

  // submodule edp_tlpBRAM_mReqF
  FIFO2 #(.width(32'd130), .guarded(32'd1)) edp_tlpBRAM_mReqF(.RST_N(RST_N),
							      .CLK(CLK),
							      .D_IN(edp_tlpBRAM_mReqF$D_IN),
							      .ENQ(edp_tlpBRAM_mReqF$ENQ),
							      .DEQ(edp_tlpBRAM_mReqF$DEQ),
							      .CLR(edp_tlpBRAM_mReqF$CLR),
							      .D_OUT(edp_tlpBRAM_mReqF$D_OUT),
							      .FULL_N(edp_tlpBRAM_mReqF$FULL_N),
							      .EMPTY_N(edp_tlpBRAM_mReqF$EMPTY_N));

  // submodule edp_tlpBRAM_mRespF
  FIFO2 #(.width(32'd139), .guarded(32'd1)) edp_tlpBRAM_mRespF(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(edp_tlpBRAM_mRespF$D_IN),
							       .ENQ(edp_tlpBRAM_mRespF$ENQ),
							       .DEQ(edp_tlpBRAM_mRespF$DEQ),
							       .CLR(edp_tlpBRAM_mRespF$CLR),
							       .D_OUT(edp_tlpBRAM_mRespF$D_OUT),
							       .FULL_N(edp_tlpBRAM_mRespF$FULL_N),
							       .EMPTY_N(edp_tlpBRAM_mRespF$EMPTY_N));

  // submodule edp_tlpBRAM_readReq
  FIFO2 #(.width(32'd61), .guarded(32'd1)) edp_tlpBRAM_readReq(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(edp_tlpBRAM_readReq$D_IN),
							       .ENQ(edp_tlpBRAM_readReq$ENQ),
							       .DEQ(edp_tlpBRAM_readReq$DEQ),
							       .CLR(edp_tlpBRAM_readReq$CLR),
							       .D_OUT(edp_tlpBRAM_readReq$D_OUT),
							       .FULL_N(edp_tlpBRAM_readReq$FULL_N),
							       .EMPTY_N(edp_tlpBRAM_readReq$EMPTY_N));

  // submodule wci_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_reqF(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(wci_reqF$D_IN),
					.ENQ(wci_reqF$ENQ),
					.DEQ(wci_reqF$DEQ),
					.CLR(wci_reqF$CLR),
					.D_OUT(wci_reqF$D_OUT),
					.FULL_N(),
					.EMPTY_N(wci_reqF$EMPTY_N));

  // submodule wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wmi_wmi_dhF(.RST_N(RST_N),
					   .CLK(CLK),
					   .D_IN(wmi_wmi_dhF$D_IN),
					   .ENQ(wmi_wmi_dhF$ENQ),
					   .DEQ(wmi_wmi_dhF$DEQ),
					   .CLR(wmi_wmi_dhF$CLR),
					   .D_OUT(wmi_wmi_dhF$D_OUT),
					   .FULL_N(wmi_wmi_dhF$FULL_N),
					   .EMPTY_N(wmi_wmi_dhF$EMPTY_N));

  // submodule wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wmi_wmi_mFlagF(.RST_N(RST_N),
					      .CLK(CLK),
					      .D_IN(wmi_wmi_mFlagF$D_IN),
					      .ENQ(wmi_wmi_mFlagF$ENQ),
					      .DEQ(wmi_wmi_mFlagF$DEQ),
					      .CLR(wmi_wmi_mFlagF$CLR),
					      .D_OUT(wmi_wmi_mFlagF$D_OUT),
					      .FULL_N(wmi_wmi_mFlagF$FULL_N),
					      .EMPTY_N(wmi_wmi_mFlagF$EMPTY_N));

  // submodule wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wmi_wmi_reqF(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wmi_wmi_reqF$D_IN),
					    .ENQ(wmi_wmi_reqF$ENQ),
					    .DEQ(wmi_wmi_reqF$DEQ),
					    .CLR(wmi_wmi_reqF$CLR),
					    .D_OUT(wmi_wmi_reqF$D_OUT),
					    .FULL_N(wmi_wmi_reqF$FULL_N),
					    .EMPTY_N(wmi_wmi_reqF$EMPTY_N));

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_respF_c_r != 2'd2 && wci_reqF$EMPTY_N &&
	     wci_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctl_op_start
  assign WILL_FIRE_RL_wci_ctl_op_start =
	     wci_reqF$EMPTY_N && wci_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_edp_dmaRequestNearMeta
  assign WILL_FIRE_RL_edp_dmaRequestNearMeta =
	     edp_tlpBRAM_mReqF$FULL_N &&
	     hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5111 &&
	     edp_postSeqDwell == 4'd0 &&
	     edp_dgdpTx_num_empty == 7'd80 ;

  // rule RL_edp_send_metaMH
  assign WILL_FIRE_RL_edp_send_metaMH =
	     edp_dgdpTx_num_empty != 7'd0 && edp_doMetaMH &&
	     !WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // rule RL_edp_dmaPushRequestMesg
  assign WILL_FIRE_RL_edp_dmaPushRequestMesg =
	     edp_tlpBRAM_mReqF$FULL_N &&
	     hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5284 ;

  // rule RL_edp_send_mesgMH
  assign WILL_FIRE_RL_edp_send_mesgMH =
	     edp_dgdpTx_num_empty != 7'd0 && edp_doMesgMH &&
	     !WILL_FIRE_RL_edp_dmaResponseNearMetaBody &&
	     !WILL_FIRE_RL_edp_send_metaMH &&
	     !WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // rule RL_edp_dmaResponseNearMetaHead
  assign WILL_FIRE_RL_edp_dmaResponseNearMetaHead =
	     edp_tlpBRAM_mRespF$EMPTY_N && hasPush &&
	     dpControl[7:4] == 4'd0 &&
	     dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     !edp_tlpBRAM_mRespF$D_OUT[138] &&
	     edp_tlpBRAM_mRespF$D_OUT[89:88] == 2'd3 ;

  // rule RL_edp_dmaPushResponseHeader
  assign WILL_FIRE_RL_edp_dmaPushResponseHeader =
	     edp_tlpBRAM_mRespF$EMPTY_N &&
	     hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5356 ;

  // rule RL_edp_dmaXmtMetaHead
  assign WILL_FIRE_RL_edp_dmaXmtMetaHead =
	     hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5393 &&
	     !WILL_FIRE_RL_edp_dmaPushResponseHeader ;

  // rule RL_edp_dmaXmtTailEvent
  assign WILL_FIRE_RL_edp_dmaXmtTailEvent =
	     edp_tailEventF$FULL_N && hasPush && dpControl[7:4] == 4'd0 &&
	     dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_fabMeta[128] &&
	     edp_tlpMetaSent ;

  // rule RL_edp_dmaXmtMetaBody
  assign WILL_FIRE_RL_edp_dmaXmtMetaBody =
	     hasPush && dpControl[7:4] == 4'd0 && dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_fabMeta[128] &&
	     edp_doXmtMetaBody &&
	     !WILL_FIRE_RL_edp_dmaXmtMetaHead ;

  // rule RL_edp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_edp_dmaResponseNearMetaBody =
	     edp_dgdpTx_num_empty != 7'd0 && edp_tlpBRAM_mRespF$EMPTY_N &&
	     hasPush &&
	     dpControl[7:4] == 4'd0 &&
	     dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_tlpBRAM_mRespF$D_OUT[138] &&
	     edp_tlpBRAM_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_edp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_edp_dmaResponseNearMetaBody &&
	     !WILL_FIRE_RL_edp_send_metaMH &&
	     !WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // rule RL_edp_dmaXmtDoorbell
  assign WILL_FIRE_RL_edp_dmaXmtDoorbell =
	     edp_tailEventF$FULL_N && dpControl[1:0] == 2'd2 &&
	     edp_creditReady &&
	     edp_doorSeqDwell == 4'd0 ;

  // rule RL_edp_dmaTailEventSender
  assign CAN_FIRE_RL_edp_dmaTailEventSender =
	     edp_tailEventF$EMPTY_N &&
	     (!edp_tlpXmtBusy && !edp_sentTail4DWHeader &&
	      edp_postSeqDwell == 4'd0 ||
	      edp_tlpXmtBusy && edp_sentTail4DWHeader) ;
  assign WILL_FIRE_RL_edp_dmaTailEventSender =
	     CAN_FIRE_RL_edp_dmaTailEventSender &&
	     !(edp_postSeqDwell != 4'd0) &&
	     !WILL_FIRE_RL_edp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_edp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_edp_dmaPushResponseHeader ;

  // rule RL_edp_dmaPushResponseBody
  assign CAN_FIRE_RL_edp_dmaPushResponseBody =
	     edp_dgdpTx_num_empty != 7'd0 && edp_tlpBRAM_mRespF$EMPTY_N &&
	     hasPush &&
	     dpControl[7:4] == 4'd0 &&
	     dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_tlpBRAM_mRespF$D_OUT[138] &&
	     edp_tlpBRAM_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_edp_dmaPushResponseBody =
	     CAN_FIRE_RL_edp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_edp_send_mesgMH &&
	     !WILL_FIRE_RL_edp_send_metaMH &&
	     !WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // rule RL_edp_tlpBRAM_writeReq
  assign WILL_FIRE_RL_edp_tlpBRAM_writeReq =
	     edp_tlpBRAM_mReqF$EMPTY_N &&
	     edp_tlpBRAM_mReqF_first__18_BIT_63_19_OR_IF_ed_ETC___d634 &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] == 2'd0 ;

  // rule RL_edp_tlpBRAM_writeData
  assign WILL_FIRE_RL_edp_tlpBRAM_writeData =
	     edp_tlpBRAM_mReqF$EMPTY_N &&
	     (IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675 ||
	      bram_serverAdapterA_cnt_6_SLT_3___d6783) &&
	     IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d708 &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] == 2'd1 ;

  // rule RL_edp_tlpBRAM_read_FirstReq
  assign WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq =
	     edp_tlpBRAM_mReqF$EMPTY_N && edp_tlpBRAM_readReq$FULL_N &&
	     edp_tlpBRAM_mReqF_first__18_BIT_60_02_OR_IF_ed_ETC___d813 &&
	     !edp_tlpBRAM_readStarted &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] != 2'd0 &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_edp_tlpBRAM_read_NextReq
  assign WILL_FIRE_RL_edp_tlpBRAM_read_NextReq =
	     bram_serverAdapterA_cnt_6_SLT_3___d6783 &&
	     bram_serverAdapterA_1_cnt_44_SLT_3___d6784 &&
	     bram_serverAdapterA_2_cnt_62_SLT_3___d6785 &&
	     bram_serverAdapterA_3_cnt_80_SLT_3___d6786 &&
	     edp_tlpBRAM_mReqF$EMPTY_N &&
	     edp_tlpBRAM_readStarted &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] != 2'd0 &&
	     edp_tlpBRAM_mReqF$D_OUT[129:128] != 2'd1 ;

  // rule RL_edp_tlpBRAM_read_FirstResp
  assign WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp =
	     edp_tlpBRAM_readReq$EMPTY_N && edp_tlpBRAM_mRespF$FULL_N &&
	     (edp_tlpBRAM_readReq$D_OUT[60] ||
	      IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d921) &&
	     !edp_tlpBRAM_readHeaderSent ;

  // rule RL_edp_tlpBRAM_read_NextResp
  assign WILL_FIRE_RL_edp_tlpBRAM_read_NextResp =
	     edp_tlpBRAM_readReq$EMPTY_N &&
	     bram_serverAdapterA_outDataCore_notEmpty_OR_br_ETC___d995 &&
	     edp_tlpBRAM_readHeaderSent ;

  // rule RL_bram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterA_outData_enqAndDeq =
	     bram_serverAdapterA_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_outDataCore$FULL_N &&
	     bram_serverAdapterA_outData_deqCalled$whas &&
	     bram_serverAdapterA_outData_enqData$whas ;

  // rule RL_bram_serverAdapterA_1_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterA_1_outData_enqAndDeq =
	     bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_1_outDataCore$FULL_N &&
	     bram_serverAdapterA_1_outData_deqCalled$whas &&
	     bram_serverAdapterA_1_outData_enqData$whas ;

  // rule RL_bram_serverAdapterA_2_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterA_2_outData_enqAndDeq =
	     bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_2_outDataCore$FULL_N &&
	     bram_serverAdapterA_2_outData_deqCalled$whas &&
	     bram_serverAdapterA_2_outData_enqData$whas ;

  // rule RL_bram_serverAdapterA_3_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterA_3_outData_enqAndDeq =
	     bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_3_outDataCore$FULL_N &&
	     bram_serverAdapterA_3_outData_deqCalled$whas &&
	     bram_serverAdapterA_3_outData_enqData$whas ;

  // rule RL_wmi_reqMetadata
  assign CAN_FIRE_RL_wmi_reqMetadata =
	     bram_serverAdapterB_cnt_5_SLT_3___d5598 &&
	     bram_serverAdapterB_1_cnt_03_SLT_3___d5599 &&
	     bram_serverAdapterB_2_cnt_21_SLT_3___d5600 &&
	     bram_serverAdapterB_3_cnt_39_SLT_3___d5601 &&
	     dpControl[3:2] != 2'd1 &&
	     !wmi_mesgMeta[128] &&
	     wmi_mesgBufReady &&
	     !wmi_metaBusy &&
	     wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_wmi_reqMetadata =
	     CAN_FIRE_RL_wmi_reqMetadata && !WILL_FIRE_RL_wmi_doReadReq &&
	     !WILL_FIRE_RL_wmi_doWriteReq &&
	     !WILL_FIRE_RL_wmi_doWriteFinalize ;

  // rule RL_wmi_doWriteReq
  assign CAN_FIRE_RL_wmi_doWriteReq =
	     wmi_wmi_operateD && wmi_wmi_peerIsReady && wmi_wmi_dhF$EMPTY_N &&
	     IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 &&
	     wmi_wrActive ;
  assign WILL_FIRE_RL_wmi_doWriteReq =
	     CAN_FIRE_RL_wmi_doWriteReq && !WILL_FIRE_RL_wmi_doWriteFinalize ;

  // rule RL_wmi_doWriteFinalize
  assign WILL_FIRE_RL_wmi_doWriteFinalize =
	     wmi_wmi_operateD_538_AND_wmi_wmi_peerIsReady_5_ETC___d5713 &&
	     wmi_wrFinalize ;

  // rule RL_wmi_respMetadata
  assign CAN_FIRE_RL_wmi_respMetadata =
	     wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     wmi_dpControl_whas__585_AND_bram_serverAdapter_ETC___d5631 &&
	     dpControl[3:2] != 2'd1 &&
	     !wmi_mesgMeta[128] &&
	     wmi_mesgBufReady &&
	     wmi_metaBusy ;
  assign WILL_FIRE_RL_wmi_respMetadata =
	     CAN_FIRE_RL_wmi_respMetadata && !WILL_FIRE_RL_wmi_doReadResp ;

  // rule RL_wmi_doReadReq
  assign WILL_FIRE_RL_wmi_doReadReq =
	     IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 &&
	     wmi_rdActive &&
	     !WILL_FIRE_RL_wmi_doWriteReq &&
	     !WILL_FIRE_RL_wmi_doWriteFinalize ;

  // rule RL_wmi_doReadResp
  assign WILL_FIRE_RL_wmi_doReadResp =
	     wmi_wmi_respF_c_r != 2'd2 && wmi_wmi_operateD &&
	     wmi_wmi_peerIsReady &&
	     IF_wmi_p4B_734_EQ_0_735_THEN_bram_serverAdapte_ETC___d5748 &&
	     wmi_bytesRemainResp != 14'd0 ;

  // rule RL_bram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterB_outData_enqAndDeq =
	     bram_serverAdapterB_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_outDataCore$FULL_N &&
	     bram_serverAdapterB_outData_deqCalled$whas &&
	     bram_serverAdapterB_outData_enqData$whas ;

  // rule RL_bram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterB_1_outData_enqAndDeq =
	     bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_1_outDataCore$FULL_N &&
	     bram_serverAdapterB_1_outData_deqCalled$whas &&
	     bram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_bram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterB_2_outData_enqAndDeq =
	     bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_2_outDataCore$FULL_N &&
	     bram_serverAdapterB_2_outData_deqCalled$whas &&
	     bram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_bram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_bram_serverAdapterB_3_outData_enqAndDeq =
	     bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_3_outDataCore$FULL_N &&
	     bram_serverAdapterB_3_outData_deqCalled$whas &&
	     bram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_wmi_getRequest
  assign CAN_FIRE_RL_wmi_getRequest =
	     wmi_wmi_operateD && wmi_wmi_peerIsReady && !wmi_wmi_blockReq &&
	     wmi_wmi_reqF$EMPTY_N &&
	     NOT_wmi_wrActive_649_650_OR_NOT_wmi_rdActive_6_ETC___d5659 &&
	     wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_wmi_getRequest =
	     CAN_FIRE_RL_wmi_getRequest && !WILL_FIRE_RL_wmi_doReadReq &&
	     !WILL_FIRE_RL_wmi_doWriteReq ;

  // rule RL_wmi_wmi_respF_incCtr
  assign WILL_FIRE_RL_wmi_wmi_respF_incCtr =
	     ((wmi_wmi_respF_c_r == 2'd0) ?
		WILL_FIRE_RL_wmi_doReadResp :
		wmi_wmi_respF_c_r != 2'd1 || WILL_FIRE_RL_wmi_doReadResp) &&
	     WILL_FIRE_RL_wmi_doReadResp &&
	     !(wmi_wmi_respF_c_r != 2'd0) ;

  // rule RL_wmi_wmi_respF_decCtr
  assign WILL_FIRE_RL_wmi_wmi_respF_decCtr =
	     wmi_wmi_respF_c_r != 2'd0 && !WILL_FIRE_RL_wmi_doReadResp ;

  // rule RL_wmi_wmi_respF_both
  assign WILL_FIRE_RL_wmi_wmi_respF_both =
	     ((wmi_wmi_respF_c_r == 2'd1) ?
		WILL_FIRE_RL_wmi_doReadResp :
		wmi_wmi_respF_c_r != 2'd2 || WILL_FIRE_RL_wmi_doReadResp) &&
	     wmi_wmi_respF_c_r != 2'd0 &&
	     WILL_FIRE_RL_wmi_doReadResp ;

  // rule RL_bml_fba
  assign WILL_FIRE_RL_bml_fba = wci_cState == 3'd2 && dpControl[1:0] == 2'd1 ;

  // rule RL_bml_lcredit
  assign WILL_FIRE_RL_bml_lcredit =
	     wci_cState == 3'd2 && dpControl[1:0] == 2'd2 ;

  // rule RL_bml_lclAdvance
  assign WILL_FIRE_RL_bml_lclAdvance = wci_cState == 3'd2 && bml_lclBufDone ;

  // rule RL_bml_remAdvance
  assign CAN_FIRE_RL_bml_remAdvance = wci_cState == 3'd2 && bml_remDone ;
  assign WILL_FIRE_RL_bml_remAdvance =
	     CAN_FIRE_RL_bml_remAdvance && !WILL_FIRE_RL_bml_crdAdvance ;

  // rule RL_bml_crdAdvance
  assign WILL_FIRE_RL_bml_crdAdvance =
	     wci_cState == 3'd2 && dpControl[1:0] == 2'd2 && bml_remStart ;

  // rule RL_bml_initAccumulators
  assign WILL_FIRE_RL_bml_initAccumulators =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd1 &&
	     wci_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_respF_c_r != 2'd2 && wci_reqF$EMPTY_N &&
	     wci_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctl_op_complete
  assign WILL_FIRE_RL_wci_ctl_op_complete =
	     wci_respF_c_r != 2'd2 && wci_ctlOpActive && wci_ctlAckReg ;

  // rule RL_wci_respF_incCtr
  assign WILL_FIRE_RL_wci_respF_incCtr =
	     ((wci_respF_c_r == 2'd0) ?
		wci_respF_enqueueing$whas :
		wci_respF_c_r != 2'd1 || wci_respF_enqueueing$whas) &&
	     wci_respF_enqueueing$whas &&
	     !(wci_respF_c_r != 2'd0) ;

  // rule RL_wci_respF_decCtr
  assign WILL_FIRE_RL_wci_respF_decCtr =
	     wci_respF_c_r != 2'd0 && !wci_respF_enqueueing$whas ;

  // rule RL_wci_respF_both
  assign WILL_FIRE_RL_wci_respF_both =
	     ((wci_respF_c_r == 2'd1) ?
		wci_respF_enqueueing$whas :
		wci_respF_c_r != 2'd2 || wci_respF_enqueueing$whas) &&
	     wci_respF_c_r != 2'd0 &&
	     wci_respF_enqueueing$whas ;

  // rule RL_wmi_wmi_reqF_reset
  assign WILL_FIRE_RL_wmi_wmi_reqF_reset =
	     MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // rule RL_wmi_wmi_mFlagF_reset
  assign WILL_FIRE_RL_wmi_wmi_mFlagF_reset =
	     MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // rule RL_wmi_wmi_dhF_reset
  assign WILL_FIRE_RL_wmi_wmi_dhF_reset =
	     MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_doWriteReq ;

  // inputs to muxes for submodule ports
  assign MUX_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_bml_fba &&
	     (bml_fabAvail && !bml_remStart ||
	      !bml_fabAvail && bml_remStart) ;
  assign MUX_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_bml_remAdvance && dpControl[1:0] == 2'd1 ;
  assign MUX_bml_lclBufsAR$write_1__SEL_1 =
	     wci_cState == 3'd2 &&
	     (IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928 &&
	      !bml_lclBufStart ||
	      CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q7 &&
	      bml_lclBufStart) ;
  assign MUX_bml_lclBufsCF$write_1__SEL_1 =
	     wci_cState == 3'd2 &&
	     (bml_lclBufDone_875_AND_IF_bml_dpControl_wget___ETC___d6396 ||
	      NOT_bml_lclBufDone_875_942_AND_IF_bml_dpContro_ETC___d5955) ;
  assign MUX_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_bml_lcredit &&
	     (bml_lclBufDone && !bml_remStart ||
	      !bml_lclBufDone && bml_remStart) ;
  assign MUX_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 ;
  assign MUX_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd0 ;
  assign MUX_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd0 ;
  assign MUX_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 ;
  assign MUX_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd1 ;
  assign MUX_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd1 ;
  assign MUX_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 ;
  assign MUX_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd2 ;
  assign MUX_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd2 ;
  assign MUX_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 ;
  assign MUX_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd3 ;
  assign MUX_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd3 ;
  assign MUX_edp_dbgBytesTxEnq$write_1__SEL_3 =
	     WILL_FIRE_RL_edp_dmaPushResponseBody ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;
  assign MUX_edp_fabMeta$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     (edp_fabFlowAddrMS == 32'd0 || edp_sentTail4DWHeader) ;
  assign MUX_edp_remDone_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     (edp_fabFlowAddrMS == 32'd0 && edp_tailEventF$D_OUT ||
	      edp_fabFlowAddrMS != 32'd0 && !edp_sentTail4DWHeader &&
	      edp_tailEventF$D_OUT) ;
  assign MUX_edp_tlpBRAM_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     (edp_tlpBRAM_readReq$D_OUT[28:19] != 10'd1 ||
	      edp_tlpBRAM_readReq$D_OUT[60]) ;
  assign MUX_edp_tlpBRAM_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     (edp_tlpBRAM_mReqF$D_OUT[28:19] != 10'd1 ||
	      edp_tlpBRAM_mReqF$D_OUT[60]) ;
  assign MUX_edp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_dmaPushResponseBody &&
	     edp_outDwRemain_379_ULE_4___d5381 ;
  assign MUX_edp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     edp_fabFlowAddrMS != 32'd0 ;
  assign MUX_edp_xmtMetaOK$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_dmaPushResponseBody &&
	     edp_outDwRemain_379_ULE_4___d5381 &&
	     edp_tlpBRAM_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ;
  assign MUX_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState != 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 && wci_cState != 3'd1 &&
	      wci_cState != 3'd3 ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState != 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 && wci_cState != 3'd3 &&
	      wci_cState != 3'd2 &&
	      wci_cState != 3'd1 ||
	      wci_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ;
  assign MUX_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ;
  assign MUX_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ;
  assign MUX_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_wmi_getRequest &&
	     wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq || WILL_FIRE_RL_wmi_doWriteReq ;
  assign MUX_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_wmi_doneWithMesg$write_1__PSEL_1 &&
	     wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ;
  assign MUX_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 ;
  assign MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 =
	     wmi_wmi_dhF$FULL_N && wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiDh$wget[37] ;
  assign MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     wmi_wmi_mFlagF$FULL_N && wmi_wmi_operateD &&
	     wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     wmi_wmi_wmiReq$wget[27] ;
  assign MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 =
	     wmi_wmi_reqF$FULL_N && wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign MUX_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr && wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr && wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_bytesRemainReq == 14'd4 ;
  assign MUX_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ;
  assign MUX_bml_crdBuf_value$write_1__VAL_3 =
	     bml_crdBuf_value_833_EQ_bml_crdBuf_modulus_bw__ETC___d7513 ?
	       16'd0 :
	       bml_crdBuf_value + 16'd1 ;
  assign MUX_bml_fabBuf_value$write_1__VAL_3 =
	     bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514 ?
	       16'd0 :
	       bml_fabBuf_value + 16'd1 ;
  assign MUX_bml_fabBufsAvail$write_1__VAL_1 =
	     (bml_fabAvail && !bml_remStart) ? x__h193760 : x__h193765 ;
  assign MUX_bml_fabBufsAvail$write_1__VAL_2 =
	     (dpControl[3:2] == 2'd1) ? x__h192409 : 16'd0 ;
  assign MUX_bml_fabFlowAddr$write_1__VAL_1 =
	     bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514 ?
	       bml_fabFlowBase :
	       bml_fabFlowAddr_890_PLUS_bml_fabFlowSize_891___d6779 ;
  assign MUX_bml_fabFlowAddr$write_1__VAL_3 =
	     bml_crdBuf_value_833_EQ_bml_crdBuf_modulus_bw__ETC___d7513 ?
	       bml_fabFlowBase :
	       bml_fabFlowAddr_890_PLUS_bml_fabFlowSize_891___d6779 ;
  assign MUX_bml_fabMesgAddr$write_1__VAL_1 =
	     bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514 ?
	       bml_fabMesgBase :
	       bml_fabMesgAddr + bml_fabMesgSize ;
  assign MUX_bml_fabMetaAddr$write_1__VAL_1 =
	     bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514 ?
	       bml_fabMetaBase :
	       bml_fabMetaAddr + bml_fabMetaSize ;
  assign MUX_bml_lclBuf_value$write_1__VAL_3 =
	     bml_lclBuf_value_788_EQ_bml_lclBuf_modulus_bw__ETC___d7532 ?
	       16'd0 :
	       bml_lclBuf_value + 16'd1 ;
  assign MUX_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928 &&
	      !bml_lclBufStart) ?
	       x__h193533 :
	       x__h193538 ;
  assign MUX_bml_lclBufsAR$write_1__VAL_2 =
	     (dpControl[3:2] == 2'd1) ? bml_lclNumBufs : 16'd0 ;
  assign MUX_bml_lclBufsCF$write_1__VAL_1 =
	     bml_lclBufDone_875_AND_IF_bml_dpControl_wget___ETC___d6396 ?
	       x__h193645 :
	       x__h193682 ;
  assign MUX_bml_lclBufsCF$write_1__VAL_2 =
	     (dpControl[3:2] == 2'd1) ? 16'd0 : bml_lclNumBufs ;
  assign MUX_bml_lclCredit$write_1__VAL_1 =
	     (bml_lclBufDone && !bml_remStart) ? x__h193798 : x__h193803 ;
  assign MUX_bml_lclMesgAddr$write_1__VAL_2 =
	     bml_lclBuf_value_788_EQ_bml_lclBuf_modulus_bw__ETC___d7532 ?
	       bml_mesgBase :
	       bml_lclMesgAddr + bml_mesgSize ;
  assign MUX_bml_lclMetaAddr$write_1__VAL_2 =
	     bml_lclBuf_value_788_EQ_bml_lclBuf_modulus_bw__ETC___d7532 ?
	       bml_metaBase :
	       bml_lclMetaAddr + bml_metaSize ;
  assign MUX_bml_remBuf_value$write_1__VAL_3 =
	     bml_remBuf_value_803_EQ_bml_remBuf_modulus_bw__ETC___d7533 ?
	       16'd0 :
	       bml_remBuf_value + 16'd1 ;
  assign MUX_bml_remMesgAddr$write_1__VAL_2 =
	     bml_remBuf_value_803_EQ_bml_remBuf_modulus_bw__ETC___d7533 ?
	       bml_mesgBase :
	       bml_remMesgAddr + bml_mesgSize ;
  assign MUX_bml_remMetaAddr$write_1__VAL_2 =
	     bml_remBuf_value_803_EQ_bml_remBuf_modulus_bw__ETC___d7533 ?
	       bml_metaBase :
	       bml_remMetaAddr + bml_metaSize ;
  always@(idx__h19087 or
	  edp_tlpBRAM_writeDWAddr_PLUS_3__q8 or
	  edp_tlpBRAM_writeDWAddr or
	  edp_tlpBRAM_writeDWAddr_PLUS_1__q9 or
	  edp_tlpBRAM_writeDWAddr_PLUS_2__q10)
  begin
    case (idx__h19087)
      2'd0: MUX_bram_memory$a_put_2__VAL_3 = edp_tlpBRAM_writeDWAddr[12:2];
      2'd1:
	  MUX_bram_memory$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_1__q9[12:2];
      2'd2:
	  MUX_bram_memory$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_2__q10[12:2];
      2'd3:
	  MUX_bram_memory$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_3__q8[12:2];
    endcase
  end
  always@(idx__h26318 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11 or
	  edp_tlpBRAM_readNxtDWAddr or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h26318)
      2'd0: MUX_bram_memory$a_put_2__VAL_4 = edp_tlpBRAM_readNxtDWAddr[12:2];
      2'd1:
	  MUX_bram_memory$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_bram_memory$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_bram_memory$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  assign MUX_bram_memory$a_put_3__VAL_1 =
	     { edp_tlpBRAM_mReqF$D_OUT[7:0],
	       edp_tlpBRAM_mReqF$D_OUT[15:8],
	       edp_tlpBRAM_mReqF$D_OUT[23:16],
	       edp_tlpBRAM_mReqF$D_OUT[31:24] } ;
  assign MUX_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427[7:0],
	       IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427[15:8],
	       IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427[23:16],
	       IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427[31:24] } ;
  assign MUX_bram_memory$b_put_2__VAL_1 =
	     wmi_lclMesgAddr[14:4] + { 1'd0, wmi_addr[13:4] } ;
  always@(idx__h21318 or
	  edp_tlpBRAM_writeDWAddr_PLUS_3__q8 or
	  edp_tlpBRAM_writeDWAddr or
	  edp_tlpBRAM_writeDWAddr_PLUS_1__q9 or
	  edp_tlpBRAM_writeDWAddr_PLUS_2__q10)
  begin
    case (idx__h21318)
      2'd0: MUX_bram_memory_1$a_put_2__VAL_3 = edp_tlpBRAM_writeDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_1$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_1__q9[12:2];
      2'd2:
	  MUX_bram_memory_1$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_2__q10[12:2];
      2'd3:
	  MUX_bram_memory_1$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_3__q8[12:2];
    endcase
  end
  always@(idx__h26786 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11 or
	  edp_tlpBRAM_readNxtDWAddr or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h26786)
      2'd0:
	  MUX_bram_memory_1$a_put_2__VAL_4 = edp_tlpBRAM_readNxtDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_1$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_bram_memory_1$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_bram_memory_1$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  assign MUX_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428[7:0],
	       IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428[15:8],
	       IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428[23:16],
	       IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428[31:24] } ;
  always@(idx__h22622 or
	  edp_tlpBRAM_writeDWAddr_PLUS_3__q8 or
	  edp_tlpBRAM_writeDWAddr or
	  edp_tlpBRAM_writeDWAddr_PLUS_1__q9 or
	  edp_tlpBRAM_writeDWAddr_PLUS_2__q10)
  begin
    case (idx__h22622)
      2'd0: MUX_bram_memory_2$a_put_2__VAL_3 = edp_tlpBRAM_writeDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_2$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_1__q9[12:2];
      2'd2:
	  MUX_bram_memory_2$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_2__q10[12:2];
      2'd3:
	  MUX_bram_memory_2$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_3__q8[12:2];
    endcase
  end
  always@(idx__h27159 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11 or
	  edp_tlpBRAM_readNxtDWAddr or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h27159)
      2'd0:
	  MUX_bram_memory_2$a_put_2__VAL_4 = edp_tlpBRAM_readNxtDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_2$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_bram_memory_2$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_bram_memory_2$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  assign MUX_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429[7:0],
	       IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429[15:8],
	       IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429[23:16],
	       IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429[31:24] } ;
  always@(idx__h23926 or
	  edp_tlpBRAM_writeDWAddr_PLUS_3__q8 or
	  edp_tlpBRAM_writeDWAddr or
	  edp_tlpBRAM_writeDWAddr_PLUS_1__q9 or
	  edp_tlpBRAM_writeDWAddr_PLUS_2__q10)
  begin
    case (idx__h23926)
      2'd0: MUX_bram_memory_3$a_put_2__VAL_3 = edp_tlpBRAM_writeDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_3$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_1__q9[12:2];
      2'd2:
	  MUX_bram_memory_3$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_2__q10[12:2];
      2'd3:
	  MUX_bram_memory_3$a_put_2__VAL_3 =
	      edp_tlpBRAM_writeDWAddr_PLUS_3__q8[12:2];
    endcase
  end
  always@(idx__h27532 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11 or
	  edp_tlpBRAM_readNxtDWAddr or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12 or
	  edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h27532)
      2'd0:
	  MUX_bram_memory_3$a_put_2__VAL_4 = edp_tlpBRAM_readNxtDWAddr[12:2];
      2'd1:
	  MUX_bram_memory_3$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_bram_memory_3$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_bram_memory_3$a_put_2__VAL_4 =
	      edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  assign MUX_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270[7:0],
	       IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270[15:8],
	       IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270[23:16],
	       IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270[31:24] } ;
  assign MUX_edp_dbgBytesTxEnq$write_1__VAL_1 = edp_dbgBytesTxEnq + 32'd10 ;
  assign MUX_edp_dbgBytesTxEnq$write_1__VAL_2 =
	     edp_dbgBytesTxEnq + y__h152954 ;
  assign MUX_edp_dbgBytesTxEnq$write_1__VAL_3 = edp_dbgBytesTxEnq + 32'd16 ;
  assign MUX_edp_dbgBytesTxEnq$write_1__VAL_4 =
	     edp_dbgBytesTxEnq + y__h171358 ;
  assign MUX_edp_dgdpTx_delta_enq$wset_1__VAL_1 =
	     edp_firstMetaMH ? 5'd16 : 5'd8 ;
  assign MUX_edp_dgdpTx_delta_enq$wset_1__VAL_2 =
	     edp_firstMesgMH ? 5'd16 : 5'd8 ;
  assign MUX_edp_dgdpTx_new_data$wset_1__VAL_1 =
	     { 102'h0AA2A8AA2A8AA2A80100000000,
	       edp_frameNumber[7:0],
	       2'd0,
	       edp_frameNumber[15:8],
	       2'd0,
	       edp_fabMesgAddrMS[7:0],
	       2'd0,
	       edp_fabMesgAddrMS[15:8],
	       2'd0,
	       edp_fabMesgAddrMS[23:16],
	       2'd0,
	       edp_fabMesgAddrMS[31:24] } ;
  assign MUX_edp_dgdpTx_new_data$wset_1__VAL_2 =
	     { _0_CONCAT_IF_edp_firstMetaMH_151_THEN_2_ELSE_0__ETC___d5181,
	       2'd0,
	       edp_firstMetaMH ?
		 edp_xactionNumber[23:16] :
		 edp_fabMetaAddr[23:16],
	       2'd0,
	       edp_firstMetaMH ?
		 edp_xactionNumber[31:24] :
		 edp_fabMetaAddr[31:24] } ;
  assign MUX_edp_dgdpTx_new_data$wset_1__VAL_3 =
	     { 2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[39:32],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[47:40],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[55:48],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[63:56],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[71:64],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[79:72],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[87:80],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[95:88],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[103:96],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[111:104],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[119:112],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[127:120],
	       2'd0,
	       edp_lastMetaV[31:24],
	       2'd0,
	       edp_lastMetaV[23:16],
	       2'd0,
	       edp_lastMetaV[15:8],
	       2'd0,
	       edp_lastMetaV[7:0] } ;
  assign MUX_edp_dgdpTx_new_data$wset_1__VAL_4 =
	     { _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5340,
	       2'd0,
	       edp_firstMesgMH ?
		 edp_xactionNumber[23:16] :
		 edp_fabMesgAddr[23:16],
	       2'd0,
	       edp_firstMesgMH ?
		 edp_xactionNumber[31:24] :
		 edp_fabMesgAddr[31:24] } ;
  assign MUX_edp_dgdpTx_new_data$wset_1__VAL_5 =
	     { 2'd1,
	       edp_tlpBRAM_mRespF$D_OUT[127:120],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[119:112],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[111:104],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[103:96],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[95:88],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[87:80],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[79:72],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[71:64],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[63:56],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[55:48],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[47:40],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[39:32],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[31:24],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[23:16],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[15:8],
	       2'd0,
	       edp_tlpBRAM_mRespF$D_OUT[7:0] } ;
  assign MUX_edp_doorSeqDwell$write_1__VAL_1 = edp_doorSeqDwell - 4'd1 ;
  assign MUX_edp_fabMesgAccu$write_1__VAL_2 = edp_fabMesgAccu + y__h171534 ;
  assign MUX_edp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h159156,
	       opcode__h155979,
	       nowMS__h157210,
	       nowLS__h158153 } ;
  assign MUX_edp_mesgLengthRemainPush$write_1__VAL_1 =
	     { edp_mesgLengthRemainPush_PLUS_3__q15[16:2], 2'd0 } ;
  assign MUX_edp_mesgLengthRemainPush$write_1__VAL_2 =
	     { edp_tlpBRAM_mRespF$D_OUT[8],
	       edp_tlpBRAM_mRespF$D_OUT[23:16],
	       edp_tlpBRAM_mRespF$D_OUT[31:24] } ;
  assign MUX_edp_mesgLengthRemainPush$write_1__VAL_3 =
	     edp_mesgLengthRemainPush - y__h162806 ;
  assign MUX_edp_outDwRemain$write_1__VAL_1 =
	     edp_tlpBRAM_mRespF$D_OUT[71:62] - y__h171483 ;
  assign MUX_edp_outDwRemain$write_1__VAL_2 = edp_outDwRemain - 10'd4 ;
  assign MUX_edp_postSeqDwell$write_1__VAL_1 =
	     (dpControl[1:0] == 2'd2) ? 4'd8 : 4'd4 ;
  assign MUX_edp_postSeqDwell$write_1__VAL_2 = edp_postSeqDwell - 4'd1 ;
  assign MUX_edp_remMesgAccu$write_1__VAL_2 =
	     edp_remMesgAccu + { 3'd0, thisRequestLength__h162781 } ;
  assign MUX_edp_srcMesgAccu$write_1__VAL_2 = edp_srcMesgAccu + y__h162882 ;
  assign MUX_edp_tlpBRAM_mReqF$enq_1__VAL_1 =
	     { 88'h955555555555555553FFF8,
	       edp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_edp_tlpBRAM_mReqF$enq_1__VAL_2 =
	     { 69'h12AAAAAAAAAAAAAAAA,
	       edp_fabMesgAddrMS != 32'd0,
	       18'd196600,
	       edp_remMesgAccu[14:2],
	       thisRequestLength__h162781[11:2],
	       8'd255,
	       rreq_tag__h162959,
	       3'h2 } ;
  assign MUX_edp_tlpBRAM_mRespF$enq_1__VAL_1 =
	     { 48'h2AAAAAAAAAAA,
	       !edp_tlpBRAM_readReq$D_OUT[60],
	       edp_tlpBRAM_readReq$D_OUT[59:42],
	       edp_tlpBRAM_readReq$D_OUT[28:19],
	       lowAddr__h28460,
	       byteCount__h28461,
	       edp_tlpBRAM_readReq$D_OUT[10:0],
	       rresp_data__h28506 } ;
  assign MUX_edp_tlpBRAM_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       edp_tlpBRAM_readReq$D_OUT[59:58],
	       edp_tlpBRAM_readReq$D_OUT[10:3],
	       rdata__h33890 } ;
  assign MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_1 =
	     edp_tlpBRAM_readReq$D_OUT[28:19] - y__h29521 ;
  assign MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_2 =
	     edp_tlpBRAM_rdRespDwRemain - 10'd4 ;
  assign MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_1 =
	     edp_tlpBRAM_mReqF$D_OUT[41:29] + y__h26071 ;
  assign MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_2 =
	     edp_tlpBRAM_readNxtDWAddr + 13'd4 ;
  assign MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_1 =
	     edp_tlpBRAM_mReqF$D_OUT[28:19] - y__h26023 ;
  assign MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_2 =
	     edp_tlpBRAM_readRemainDWLen - 10'd4 ;
  assign MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_1 =
	     edp_tlpBRAM_mReqF$D_OUT[62:50] + y__h17301 ;
  assign MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_2 =
	     edp_tlpBRAM_writeDWAddr + 13'd4 ;
  assign MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_1 =
	     edp_tlpBRAM_mReqF$D_OUT[49:40] - y__h17372 ;
  assign MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_2 =
	     edp_tlpBRAM_writeRemainDWLen - 10'd4 ;
  assign MUX_wci_illegalEdge$write_1__VAL_2 =
	     wci_reqF$D_OUT[36:34] != 3'd4 && wci_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_respF_c_r$write_1__VAL_1 = wci_respF_c_r + 2'd1 ;
  assign MUX_wci_respF_c_r$write_1__VAL_2 = wci_respF_c_r - 2'd1 ;
  assign MUX_wci_respF_q_0$write_1__VAL_1 =
	     (wci_respF_c_r == 2'd1) ?
	       MUX_wci_respF_q_0$write_1__VAL_2 :
	       wci_respF_q_1 ;
  always@(WILL_FIRE_RL_wci_ctl_op_complete or
	  MUX_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_ctl_op_complete:
	  MUX_wci_respF_q_0$write_1__VAL_2 =
	      MUX_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_respF_q_0$write_1__VAL_2 =
	      MUX_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr: MUX_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_respF_q_1$write_1__VAL_1 =
	     (wci_respF_c_r == 2'd2) ?
	       MUX_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_1 =
	     wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h195644 } ;
  assign MUX_wmi_addr$write_1__VAL_1 = wmi_addr + 14'd4 ;
  assign MUX_wmi_bufDwell$write_1__VAL_3 = wmi_bufDwell - 2'd1 ;
  assign MUX_wmi_bytesRemainReq$write_1__VAL_1 = wmi_bytesRemainReq - 14'd4 ;
  assign MUX_wmi_bytesRemainReq$write_1__VAL_2 =
	     { wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_wmi_bytesRemainResp$write_1__VAL_2 =
	     wmi_bytesRemainResp - 14'd4 ;
  assign MUX_wmi_mesgCount$write_1__VAL_1 = wmi_mesgCount + 32'd1 ;
  assign MUX_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h187888,
	       y_avValue__h187908,
	       y_avValue__h187928,
	       y_avValue__h187948 } ;
  assign MUX_wmi_p4B$write_1__VAL_2 = wmi_p4B + 2'd1 ;
  assign MUX_wmi_wmi_respF_c_r$write_1__VAL_1 = wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_wmi_wmi_respF_c_r$write_1__VAL_2 = wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       wmi_wmi_respF_q_1 ;
  assign MUX_wmi_wmi_respF_q_0$write_1__VAL_2 = { 2'd1, rdata__h188052 } ;
  assign MUX_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'd0 ;

  // inlined wires
  assign bram_serverAdapterA_outData_enqData$wget = bram_memory$DOA ;
  assign bram_serverAdapterA_outData_enqData$whas =
	     (!bram_serverAdapterA_s1[0] ||
	      bram_serverAdapterA_outDataCore$FULL_N) &&
	     bram_serverAdapterA_s1[1] &&
	     bram_serverAdapterA_s1[0] ;
  assign bram_serverAdapterA_outData_outData$wget =
	     bram_serverAdapterA_outDataCore$EMPTY_N ?
	       bram_serverAdapterA_outDataCore$D_OUT :
	       bram_memory$DOA ;
  assign bram_serverAdapterA_outData_outData$whas =
	     bram_serverAdapterA_outDataCore$EMPTY_N ||
	     !bram_serverAdapterA_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_outData_enqData$whas ;
  assign bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterA_cnt_1$whas =
	     (MUX_bram_memory$a_put_1__SEL_1 ||
	      MUX_bram_memory$a_put_1__SEL_2 ||
	      MUX_bram_memory$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) &&
	     (!ab__h1600[1] || ab__h1600[0]) ;
  assign bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterA_cnt_2$whas =
	     bram_serverAdapterA_outData_deqCalled$whas ;
  assign bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterA_writeWithResp$wget = ab__h1600 ;
  assign bram_serverAdapterA_writeWithResp$whas =
	     MUX_bram_memory$a_put_1__SEL_1 ||
	     MUX_bram_memory$a_put_1__SEL_2 ||
	     MUX_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h1600[1] || ab__h1600[0] } ;
  assign bram_serverAdapterA_s1_1$whas =
	     bram_serverAdapterA_writeWithResp$whas ;
  assign bram_serverAdapterB_outData_enqData$wget = bram_memory$DOB ;
  assign bram_serverAdapterB_outData_enqData$whas =
	     (!bram_serverAdapterB_s1[0] ||
	      bram_serverAdapterB_outDataCore$FULL_N) &&
	     bram_serverAdapterB_s1[1] &&
	     bram_serverAdapterB_s1[0] ;
  assign bram_serverAdapterB_outData_outData$wget = y_avValue__h187888 ;
  assign bram_serverAdapterB_outData_outData$whas =
	     bram_serverAdapterB_outDataCore$EMPTY_N ||
	     !bram_serverAdapterB_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_outData_enqData$whas ;
  assign bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterB_cnt_1$whas =
	     (MUX_bram_memory$b_put_1__SEL_1 ||
	      MUX_bram_memory$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_wmi_reqMetadata ||
	      WILL_FIRE_RL_wmi_doWriteFinalize) &&
	     (!ab__h2999[1] || ab__h2999[0]) ;
  assign bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterB_cnt_2$whas =
	     bram_serverAdapterB_outData_deqCalled$whas ;
  assign bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterB_writeWithResp$wget = ab__h2999 ;
  assign bram_serverAdapterB_writeWithResp$whas =
	     bram_serverAdapterB_s1_1$whas ;
  assign bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h2999[1] || ab__h2999[0] } ;
  assign bram_serverAdapterB_s1_1$whas =
	     MUX_bram_memory$b_put_1__SEL_1 ||
	     MUX_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign bram_serverAdapterA_1_outData_enqData$wget = bram_memory_1$DOA ;
  assign bram_serverAdapterA_1_outData_enqData$whas =
	     (!bram_serverAdapterA_1_s1[0] ||
	      bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     bram_serverAdapterA_1_s1[1] &&
	     bram_serverAdapterA_1_s1[0] ;
  assign bram_serverAdapterA_1_outData_outData$wget =
	     bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       bram_serverAdapterA_1_outDataCore$D_OUT :
	       bram_memory_1$DOA ;
  assign bram_serverAdapterA_1_outData_outData$whas =
	     bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_1_outData_enqData$whas ;
  assign bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterA_1_cnt_1$whas =
	     (MUX_bram_memory_1$a_put_1__SEL_1 ||
	      MUX_bram_memory_1$a_put_1__SEL_2 ||
	      MUX_bram_memory_1$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) &&
	     (!ab__h4529[1] || ab__h4529[0]) ;
  assign bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterA_1_cnt_2$whas =
	     bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterA_1_writeWithResp$wget = ab__h4529 ;
  assign bram_serverAdapterA_1_writeWithResp$whas =
	     MUX_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h4529[1] || ab__h4529[0] } ;
  assign bram_serverAdapterA_1_s1_1$whas =
	     bram_serverAdapterA_1_writeWithResp$whas ;
  assign bram_serverAdapterB_1_outData_enqData$wget = bram_memory_1$DOB ;
  assign bram_serverAdapterB_1_outData_enqData$whas =
	     (!bram_serverAdapterB_1_s1[0] ||
	      bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     bram_serverAdapterB_1_s1[1] &&
	     bram_serverAdapterB_1_s1[0] ;
  assign bram_serverAdapterB_1_outData_outData$wget = y_avValue__h187908 ;
  assign bram_serverAdapterB_1_outData_outData$whas =
	     bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_1_outData_enqData$whas ;
  assign bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterB_1_cnt_1$whas =
	     (MUX_bram_memory_1$b_put_1__SEL_1 ||
	      MUX_bram_memory_1$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_wmi_reqMetadata ||
	      WILL_FIRE_RL_wmi_doWriteFinalize) &&
	     (!ab__h5926[1] || ab__h5926[0]) ;
  assign bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterB_1_cnt_2$whas =
	     bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterB_1_writeWithResp$wget = ab__h5926 ;
  assign bram_serverAdapterB_1_writeWithResp$whas =
	     MUX_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h5926[1] || ab__h5926[0] } ;
  assign bram_serverAdapterB_1_s1_1$whas =
	     bram_serverAdapterB_1_writeWithResp$whas ;
  assign bram_serverAdapterA_2_outData_enqData$wget = bram_memory_2$DOA ;
  assign bram_serverAdapterA_2_outData_enqData$whas =
	     (!bram_serverAdapterA_2_s1[0] ||
	      bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     bram_serverAdapterA_2_s1[1] &&
	     bram_serverAdapterA_2_s1[0] ;
  assign bram_serverAdapterA_2_outData_outData$wget =
	     bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       bram_serverAdapterA_2_outDataCore$D_OUT :
	       bram_memory_2$DOA ;
  assign bram_serverAdapterA_2_outData_outData$whas =
	     bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_2_outData_enqData$whas ;
  assign bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterA_2_cnt_1$whas =
	     (MUX_bram_memory_2$a_put_1__SEL_1 ||
	      MUX_bram_memory_2$a_put_1__SEL_2 ||
	      MUX_bram_memory_2$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) &&
	     (!ab__h7456[1] || ab__h7456[0]) ;
  assign bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterA_2_cnt_2$whas =
	     bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterA_2_writeWithResp$wget = ab__h7456 ;
  assign bram_serverAdapterA_2_writeWithResp$whas =
	     MUX_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h7456[1] || ab__h7456[0] } ;
  assign bram_serverAdapterA_2_s1_1$whas =
	     bram_serverAdapterA_2_writeWithResp$whas ;
  assign bram_serverAdapterB_2_outData_enqData$wget = bram_memory_2$DOB ;
  assign bram_serverAdapterB_2_outData_enqData$whas =
	     (!bram_serverAdapterB_2_s1[0] ||
	      bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     bram_serverAdapterB_2_s1[1] &&
	     bram_serverAdapterB_2_s1[0] ;
  assign bram_serverAdapterB_2_outData_outData$wget = y_avValue__h187928 ;
  assign bram_serverAdapterB_2_outData_outData$whas =
	     bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_2_outData_enqData$whas ;
  assign bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterB_2_cnt_1$whas =
	     (MUX_bram_memory_2$b_put_1__SEL_1 ||
	      MUX_bram_memory_2$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_wmi_reqMetadata ||
	      WILL_FIRE_RL_wmi_doWriteFinalize) &&
	     (!ab__h8853[1] || ab__h8853[0]) ;
  assign bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterB_2_cnt_2$whas =
	     bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterB_2_writeWithResp$wget = ab__h8853 ;
  assign bram_serverAdapterB_2_writeWithResp$whas =
	     MUX_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h8853[1] || ab__h8853[0] } ;
  assign bram_serverAdapterB_2_s1_1$whas =
	     bram_serverAdapterB_2_writeWithResp$whas ;
  assign bram_serverAdapterA_3_outData_enqData$wget = bram_memory_3$DOA ;
  assign bram_serverAdapterA_3_outData_enqData$whas =
	     (!bram_serverAdapterA_3_s1[0] ||
	      bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     bram_serverAdapterA_3_s1[1] &&
	     bram_serverAdapterA_3_s1[0] ;
  assign bram_serverAdapterA_3_outData_outData$wget =
	     bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       bram_serverAdapterA_3_outDataCore$D_OUT :
	       bram_memory_3$DOA ;
  assign bram_serverAdapterA_3_outData_outData$whas =
	     bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_3_outData_enqData$whas ;
  assign bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterA_3_cnt_1$whas =
	     (MUX_bram_memory_3$a_put_1__SEL_1 ||
	      MUX_bram_memory_3$a_put_1__SEL_2 ||
	      MUX_bram_memory_3$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) &&
	     (!ab__h10383[1] || ab__h10383[0]) ;
  assign bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterA_3_cnt_2$whas =
	     bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterA_3_writeWithResp$wget = ab__h10383 ;
  assign bram_serverAdapterA_3_writeWithResp$whas =
	     MUX_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h10383[1] || ab__h10383[0] } ;
  assign bram_serverAdapterA_3_s1_1$whas =
	     bram_serverAdapterA_3_writeWithResp$whas ;
  assign bram_serverAdapterB_3_outData_enqData$wget = bram_memory_3$DOB ;
  assign bram_serverAdapterB_3_outData_enqData$whas =
	     (!bram_serverAdapterB_3_s1[0] ||
	      bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     bram_serverAdapterB_3_s1[1] &&
	     bram_serverAdapterB_3_s1[0] ;
  assign bram_serverAdapterB_3_outData_outData$wget = y_avValue__h187948 ;
  assign bram_serverAdapterB_3_outData_outData$whas =
	     bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_3_outData_enqData$whas ;
  assign bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign bram_serverAdapterB_3_cnt_1$whas =
	     (MUX_bram_memory_3$b_put_1__SEL_1 ||
	      MUX_bram_memory_3$b_put_1__SEL_2 ||
	      WILL_FIRE_RL_wmi_reqMetadata ||
	      WILL_FIRE_RL_wmi_doWriteFinalize) &&
	     (!ab__h11780[1] || ab__h11780[0]) ;
  assign bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign bram_serverAdapterB_3_cnt_2$whas =
	     bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign bram_serverAdapterB_3_writeWithResp$wget = ab__h11780 ;
  assign bram_serverAdapterB_3_writeWithResp$whas =
	     MUX_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h11780[1] || ab__h11780[0] } ;
  assign bram_serverAdapterB_3_s1_1$whas =
	     bram_serverAdapterB_3_writeWithResp$whas ;
  assign wci_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wciReq$whas = 1'd1 ;
  assign wci_respF_x_wire$wget = MUX_wci_respF_q_0$write_1__VAL_2 ;
  assign wci_respF_x_wire$whas = wci_respF_enqueueing$whas ;
  assign wci_wEdge$wget = wci_reqF$D_OUT[36:34] ;
  assign wci_wEdge$whas = WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_sFlagReg_1$wget = 1'b0 ;
  assign wci_sFlagReg_1$whas = 1'b0 ;
  assign wci_ctlAckReg_1$wget = 1'd1 ;
  assign wci_ctlAckReg_1$whas =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd2 &&
	     wci_reqF$D_OUT[36:34] == 3'd3 ||
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd0 &&
	     wci_reqF$D_OUT[36:34] == 3'd0 ||
	     WILL_FIRE_RL_bml_initAccumulators ;
  assign wti_wtiReq$wget = 67'h0 ;
  assign wti_wtiReq$whas = 1'b0 ;
  assign wti_operateD_1$wget = 1'b0 ;
  assign wti_operateD_1$whas = 1'b0 ;
  assign edp_remStart_1$wget = 1'd1 ;
  assign edp_remStart_1$whas =
	     WILL_FIRE_RL_edp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ;
  assign edp_remDone_1$wget = 1'd1 ;
  assign edp_remDone_1$whas =
	     MUX_edp_remDone_1$wset_1__SEL_1 ||
	     WILL_FIRE_RL_edp_dmaXmtMetaBody ;
  assign edp_nearBufReady_1$wget = 1'd1 ;
  assign edp_nearBufReady_1$whas =
	     wci_cState == 3'd2 && bml_lclBufsCF != 16'd0 ;
  assign edp_farBufReady_1$wget = 1'd1 ;
  assign edp_farBufReady_1$whas =
	     wci_cState == 3'd2 && bml_fabBufsAvail != 16'd0 ;
  assign edp_creditReady_1$wget = 1'd1 ;
  assign edp_creditReady_1$whas =
	     wci_cState == 3'd2 && bml_lclCredit != 16'd0 ;
  assign edp_dpControl$wget = dpControl ;
  assign edp_dpControl$whas = 1'd1 ;
  assign edp_pullTagMatch_1$wget = 1'b0 ;
  assign edp_pullTagMatch_1$whas = 1'b0 ;
  assign edp_nowW$wget = wti_nowReq[63:0] ;
  assign edp_nowW$whas = 1'd1 ;
  assign edp_dmaStartMark_1$wget = 1'd1 ;
  assign edp_dmaStartMark_1$whas = WILL_FIRE_RL_edp_dmaRequestNearMeta ;
  assign edp_dmaDoneMark_1$wget = 1'd1 ;
  assign edp_dmaDoneMark_1$whas = WILL_FIRE_RL_edp_dmaTailEventSender ;
  always@(WILL_FIRE_RL_edp_send_metaMH or
	  MUX_edp_dgdpTx_delta_enq$wset_1__VAL_1 or
	  WILL_FIRE_RL_edp_send_mesgMH or
	  MUX_edp_dgdpTx_delta_enq$wset_1__VAL_2 or
	  WILL_FIRE_RL_edp_dmaRequestNearMeta or
	  MUX_edp_dbgBytesTxEnq$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_edp_send_metaMH:
	  edp_dgdpTx_delta_enq$wget = MUX_edp_dgdpTx_delta_enq$wset_1__VAL_1;
      WILL_FIRE_RL_edp_send_mesgMH:
	  edp_dgdpTx_delta_enq$wget = MUX_edp_dgdpTx_delta_enq$wset_1__VAL_2;
      WILL_FIRE_RL_edp_dmaRequestNearMeta: edp_dgdpTx_delta_enq$wget = 5'd10;
      MUX_edp_dbgBytesTxEnq$write_1__SEL_3: edp_dgdpTx_delta_enq$wget = 5'd16;
      default: edp_dgdpTx_delta_enq$wget = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign edp_dgdpTx_delta_enq$whas =
	     WILL_FIRE_RL_edp_send_metaMH || WILL_FIRE_RL_edp_send_mesgMH ||
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_edp_dmaPushResponseBody ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;
  assign edp_dgdpTx_delta_deq$wget = 1'd1 ;
  assign edp_dgdpTx_delta_deq$whas =
	     edp_outF$FULL_N && edp_dgdpTx_num_full != 7'd0 ;
  always@(WILL_FIRE_RL_edp_dmaRequestNearMeta or
	  MUX_edp_dgdpTx_new_data$wset_1__VAL_1 or
	  WILL_FIRE_RL_edp_send_metaMH or
	  MUX_edp_dgdpTx_new_data$wset_1__VAL_2 or
	  WILL_FIRE_RL_edp_dmaResponseNearMetaBody or
	  MUX_edp_dgdpTx_new_data$wset_1__VAL_3 or
	  WILL_FIRE_RL_edp_send_mesgMH or
	  MUX_edp_dgdpTx_new_data$wset_1__VAL_4 or
	  WILL_FIRE_RL_edp_dmaPushResponseBody or
	  MUX_edp_dgdpTx_new_data$wset_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_edp_dmaRequestNearMeta:
	  edp_dgdpTx_new_data$wget = MUX_edp_dgdpTx_new_data$wset_1__VAL_1;
      WILL_FIRE_RL_edp_send_metaMH:
	  edp_dgdpTx_new_data$wget = MUX_edp_dgdpTx_new_data$wset_1__VAL_2;
      WILL_FIRE_RL_edp_dmaResponseNearMetaBody:
	  edp_dgdpTx_new_data$wget = MUX_edp_dgdpTx_new_data$wset_1__VAL_3;
      WILL_FIRE_RL_edp_send_mesgMH:
	  edp_dgdpTx_new_data$wget = MUX_edp_dgdpTx_new_data$wset_1__VAL_4;
      WILL_FIRE_RL_edp_dmaPushResponseBody:
	  edp_dgdpTx_new_data$wget = MUX_edp_dgdpTx_new_data$wset_1__VAL_5;
      default: edp_dgdpTx_new_data$wget =
		   160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign edp_dgdpTx_new_data$whas =
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_edp_send_metaMH ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_send_mesgMH ||
	     WILL_FIRE_RL_edp_dmaPushResponseBody ;
  assign wmi_wmi_wmiReq$wget =
	     { wmiS0_MCmd,
	       wmiS0_MReqLast,
	       wmiS0_MReqInfo,
	       wmiS0_MAddrSpace,
	       wmiS0_MAddr,
	       wmiS0_MBurstLength } ;
  assign wmi_wmi_wmiReq$whas = 1'd1 ;
  assign wmi_wmi_wmiMFlag$wget = wmiS0_arg_mFlag ;
  assign wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign wmi_wmi_wmiDh$wget =
	     { wmiS0_MDataValid,
	       wmiS0_MDataLast,
	       wmiS0_MData,
	       wmiS0_MDataByteEn } ;
  assign wmi_wmi_wmiDh$whas = 1'd1 ;
  assign wmi_wmi_respF_x_wire$wget = MUX_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign wmi_wmi_respF_x_wire$whas = WILL_FIRE_RL_wmi_doReadResp ;
  assign wmi_wmi_operateD_1$wget = 1'd1 ;
  assign wmi_wmi_operateD_1$whas = wci_cState == 3'd2 ;
  assign wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign wmi_wmi_peerIsReady_1$whas = wmiS0_MReset_n ;
  assign wmi_wmi_sThreadBusy_dw$wget = wmi_wmi_reqF_countReg > 2'd1 ;
  assign wmi_wmi_sThreadBusy_dw$whas =
	     wmi_wmi_reqF_levelsValid && wmi_wmi_operateD &&
	     wmi_wmi_peerIsReady &&
	     !wmi_wmi_forceSThreadBusy_pw$whas ;
  assign wmi_wmi_sDataThreadBusy_dw$wget = wmi_wmi_dhF_countReg > 2'd1 ;
  assign wmi_wmi_sDataThreadBusy_dw$whas =
	     wmi_wmi_dhF_levelsValid && wmi_wmi_operateD &&
	     wmi_wmi_peerIsReady ;
  assign wmi_mesgStart_1$wget = 1'd1 ;
  assign wmi_mesgStart_1$whas = WILL_FIRE_RL_wmi_getRequest && !wmi_mesgBusy ;
  assign wmi_mesgDone_1$wget = 1'd1 ;
  assign wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign wmi_mesgBufReady_1$wget = 1'd1 ;
  assign wmi_mesgBufReady_1$whas =
	     wci_cState == 3'd2 && bml_lclBufsAR != 16'd0 ;
  assign wmi_dpControl$wget = dpControl ;
  assign wmi_dpControl$whas = 1'd1 ;
  assign wmi_nowW$wget = wti_nowReq[63:0] ;
  assign wmi_nowW$whas = 1'd1 ;
  assign bml_lclBufStart_1$wget = 1'd1 ;
  assign bml_lclBufStart_1$whas = wmi_mesgStart ;
  assign bml_lclBufDone_1$wget = 1'd1 ;
  assign bml_lclBufDone_1$whas = wmi_mesgDone ;
  assign bml_remStart_1$wget = 1'd1 ;
  assign bml_remStart_1$whas = edp_remStart ;
  assign bml_remDone_1$wget = 1'd1 ;
  assign bml_remDone_1$whas = edp_remDone ;
  assign bml_fabDone_1$wget = 1'd1 ;
  assign bml_fabDone_1$whas =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dpControl[1:0] != 2'd1 ;
  assign bml_fabAvail_1$wget = 1'd1 ;
  assign bml_fabAvail_1$whas =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dpControl[1:0] == 2'd1 ;
  assign bml_datumAReg_1$wget = bml_remDone ;
  assign bml_datumAReg_1$whas = wci_cState == 3'd2 ;
  assign bml_dpControl$wget = dpControl ;
  assign bml_dpControl$whas = 1'd1 ;
  assign wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_Es_mData_w$whas = 1'd1 ;
  assign wmi_Es_mCmd_w$wget = wmiS0_MCmd ;
  assign wmi_Es_mCmd_w$whas = 1'd1 ;
  assign wmi_Es_mReqInfo_w$wget = wmiS0_MReqInfo ;
  assign wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wmi_Es_mAddrSpace_w$wget = wmiS0_MAddrSpace ;
  assign wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wmi_Es_mAddr_w$wget = wmiS0_MAddr ;
  assign wmi_Es_mAddr_w$whas = 1'd1 ;
  assign wmi_Es_mBurstLength_w$wget = wmiS0_MBurstLength ;
  assign wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wmi_Es_mData_w$wget = wmiS0_MData ;
  assign wmi_Es_mData_w$whas = 1'd1 ;
  assign wmi_Es_mDataByteEn_w$wget = wmiS0_MDataByteEn ;
  assign wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     !edp_tlpBRAM_readReq$D_OUT[60] &&
	     edp_tlpBRAM_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;
  assign bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_wmi_doReadResp && wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_wmi_respMetadata ;
  assign bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     !edp_tlpBRAM_readReq$D_OUT[60] &&
	     edp_tlpBRAM_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;
  assign bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_wmi_doReadResp && wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_wmi_respMetadata ;
  assign bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     !edp_tlpBRAM_readReq$D_OUT[60] &&
	     edp_tlpBRAM_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;
  assign bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_wmi_doReadResp && wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_wmi_respMetadata ;
  assign bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     !edp_tlpBRAM_readReq$D_OUT[60] &&
	     edp_tlpBRAM_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;
  assign bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_wmi_doReadResp && wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_wmi_respMetadata ;
  assign wci_reqF_r_enq$whas = wci_wciReq$wget[71:69] != 3'd0 ;
  assign wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_ctl_op_start || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_reqF_r_clr$whas = 1'b0 ;
  assign wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_respF_dequeueing$whas = wci_respF_c_r != 2'd0 ;
  assign wci_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wci_cfwr_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wci_cfrd_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wci_ctrl_pw$whas =
	     wci_reqF$EMPTY_N && !wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign wmi_wmi_forceSThreadBusy_pw$whas =
	     dpControl[3:2] != 2'd1 && !wmi_mesgMeta[128] ||
	     dpControl[3:2] == 2'd1 && !wmi_mesgBufReady ;
  assign wmi_wmi_reqF_r_enq$whas =
	     MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_wmi_getRequest ;
  assign wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign wmi_wmi_reqF_doResetEnq$whas =
	     MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_wmi_getRequest ;
  assign wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign wmi_wmi_mFlagF_r_enq$whas =
	     MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_mFlagF_r_deq$whas = WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_mFlagF_doResetDeq$whas = WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign wmi_wmi_dhF_r_enq$whas = MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_wmi_doWriteReq ;
  assign wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign wmi_wmi_dhF_doResetEnq$whas =
	     MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_wmi_doWriteReq ;
  assign wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign wmi_wmi_respF_enqueueing$whas = WILL_FIRE_RL_wmi_doReadResp ;
  assign wmi_wmi_respF_dequeueing$whas = wmi_wmi_respF_c_r != 2'd0 ;
  assign bml_lclBuf_incAction$whas = WILL_FIRE_RL_bml_lclAdvance ;
  assign bml_lclBuf_decAction$whas = 1'b0 ;
  assign bml_remBuf_incAction$whas = WILL_FIRE_RL_bml_remAdvance ;
  assign bml_remBuf_decAction$whas = 1'b0 ;
  assign bml_fabBuf_incAction$whas = MUX_bml_fabFlowAddr$write_1__SEL_1 ;
  assign bml_fabBuf_decAction$whas = 1'b0 ;
  assign bml_crdBuf_incAction$whas = WILL_FIRE_RL_bml_crdAdvance ;
  assign bml_crdBuf_decAction$whas = 1'b0 ;
  assign wmi_Es_mReqLast_w$whas = wmiS0_MReqLast ;
  assign wmi_Es_mDataValid_w$whas = wmiS0_MDataValid ;
  assign wmi_Es_mDataLast_w$whas = wmiS0_MDataLast ;
  assign wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign bml_lclBuf_modulus_bw$wget = bml_lclBuf_modulus ;
  assign bml_remBuf_modulus_bw$wget = bml_remBuf_modulus ;
  assign bml_fabBuf_modulus_bw$wget = bml_fabBuf_modulus ;
  assign bml_crdBuf_modulus_bw$wget = bml_crdBuf_modulus ;

  // register bml_crdBuf_modulus
  assign bml_crdBuf_modulus$D_IN = bml_lclNumBufs - 16'd1 ;
  assign bml_crdBuf_modulus$EN = WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_crdBuf_value
  assign bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       16'd0 :
	       MUX_bml_crdBuf_value$write_1__VAL_3 ;
  assign bml_crdBuf_value$EN =
	     WILL_FIRE_RL_bml_crdAdvance ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_datumAReg
  assign bml_datumAReg$D_IN = CAN_FIRE_RL_bml_remAdvance ;
  assign bml_datumAReg$EN = 1'd1 ;

  // register bml_fabAvail
  assign bml_fabAvail$D_IN = bml_fabAvail_1$whas ;
  assign bml_fabAvail$EN = 1'd1 ;

  // register bml_fabBuf_modulus
  assign bml_fabBuf_modulus$D_IN = bml_fabNumBufs - 16'd1 ;
  assign bml_fabBuf_modulus$EN = WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_fabBuf_value
  assign bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       16'd0 :
	       MUX_bml_fabBuf_value$write_1__VAL_3 ;
  assign bml_fabBuf_value$EN =
	     MUX_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_fabBufsAvail
  assign bml_fabBufsAvail$D_IN =
	     MUX_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_bml_fabBufsAvail$write_1__VAL_2 ;
  assign bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_bml_fba &&
	     (bml_fabAvail && !bml_remStart ||
	      !bml_fabAvail && bml_remStart) ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_fabDone
  assign bml_fabDone$D_IN = bml_fabDone_1$whas ;
  assign bml_fabDone$EN = 1'd1 ;

  // register bml_fabFlowAddr
  always@(MUX_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_bml_initAccumulators or
	  bml_fabFlowBase or
	  WILL_FIRE_RL_bml_crdAdvance or MUX_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bml_fabFlowAddr$write_1__SEL_1:
	  bml_fabFlowAddr$D_IN = MUX_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_bml_initAccumulators:
	  bml_fabFlowAddr$D_IN = bml_fabFlowBase;
      WILL_FIRE_RL_bml_crdAdvance:
	  bml_fabFlowAddr$D_IN = MUX_bml_fabFlowAddr$write_1__VAL_3;
      default: bml_fabFlowAddr$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_bml_remAdvance && dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_bml_initAccumulators ||
	     WILL_FIRE_RL_bml_crdAdvance ;

  // register bml_fabFlowBase
  assign bml_fabFlowBase$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabFlowBase$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register bml_fabFlowBaseMS
  assign bml_fabFlowBaseMS$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabFlowBaseMS$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h9C ;

  // register bml_fabFlowSize
  assign bml_fabFlowSize$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabFlowSize$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register bml_fabMesgAddr
  assign bml_fabMesgAddr$D_IN =
	     MUX_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_bml_fabMesgAddr$write_1__VAL_1 :
	       bml_fabMesgBase ;
  assign bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_bml_remAdvance && dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_fabMesgBase
  assign bml_fabMesgBase$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMesgBase$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register bml_fabMesgBaseMS
  assign bml_fabMesgBaseMS$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMesgBaseMS$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h94 ;

  // register bml_fabMesgSize
  assign bml_fabMesgSize$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMesgSize$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register bml_fabMetaAddr
  assign bml_fabMetaAddr$D_IN =
	     MUX_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_bml_fabMetaAddr$write_1__VAL_1 :
	       bml_fabMetaBase ;
  assign bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_bml_remAdvance && dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_fabMetaBase
  assign bml_fabMetaBase$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMetaBase$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register bml_fabMetaBaseMS
  assign bml_fabMetaBaseMS$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMetaBaseMS$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h98 ;

  // register bml_fabMetaSize
  assign bml_fabMetaSize$D_IN = wci_reqF$D_OUT[31:0] ;
  assign bml_fabMetaSize$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register bml_fabNumBufs
  assign bml_fabNumBufs$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_fabNumBufs$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register bml_lclBufDone
  assign bml_lclBufDone$D_IN = wmi_mesgDone ;
  assign bml_lclBufDone$EN = 1'd1 ;

  // register bml_lclBufStart
  assign bml_lclBufStart$D_IN = wmi_mesgStart ;
  assign bml_lclBufStart$EN = 1'd1 ;

  // register bml_lclBuf_modulus
  assign bml_lclBuf_modulus$D_IN = bml_crdBuf_modulus$D_IN ;
  assign bml_lclBuf_modulus$EN = WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_lclBuf_value
  assign bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       16'd0 :
	       MUX_bml_lclBuf_value$write_1__VAL_3 ;
  assign bml_lclBuf_value$EN =
	     WILL_FIRE_RL_bml_lclAdvance ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_lclBufsAR
  assign bml_lclBufsAR$D_IN =
	     MUX_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_bml_lclBufsAR$write_1__VAL_2 ;
  assign bml_lclBufsAR$EN =
	     MUX_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_lclBufsCF
  assign bml_lclBufsCF$D_IN =
	     MUX_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_bml_lclBufsCF$write_1__VAL_2 ;
  assign bml_lclBufsCF$EN =
	     wci_cState == 3'd2 &&
	     (bml_lclBufDone_875_AND_IF_bml_dpControl_wget___ETC___d6396 ||
	      NOT_bml_lclBufDone_875_942_AND_IF_bml_dpContro_ETC___d5955) ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_lclCredit
  assign bml_lclCredit$D_IN =
	     MUX_bml_lclCredit$write_1__SEL_1 ?
	       MUX_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign bml_lclCredit$EN =
	     WILL_FIRE_RL_bml_lcredit &&
	     (bml_lclBufDone && !bml_remStart ||
	      !bml_lclBufDone && bml_remStart) ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_lclDones
  assign bml_lclDones$D_IN = bml_lclDones + 16'd1 ;
  assign bml_lclDones$EN = WILL_FIRE_RL_bml_lclAdvance ;

  // register bml_lclMesgAddr
  assign bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       bml_mesgBase :
	       MUX_bml_lclMesgAddr$write_1__VAL_2 ;
  assign bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_bml_initAccumulators ||
	     WILL_FIRE_RL_bml_lclAdvance ;

  // register bml_lclMetaAddr
  assign bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       bml_metaBase :
	       MUX_bml_lclMetaAddr$write_1__VAL_2 ;
  assign bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_bml_initAccumulators ||
	     WILL_FIRE_RL_bml_lclAdvance ;

  // register bml_lclNumBufs
  assign bml_lclNumBufs$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_lclNumBufs$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register bml_lclStarts
  assign bml_lclStarts$D_IN = bml_lclStarts + 16'd1 ;
  assign bml_lclStarts$EN = wci_cState == 3'd2 && bml_lclBufStart ;

  // register bml_mesgBase
  assign bml_mesgBase$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_mesgBase$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register bml_mesgSize
  assign bml_mesgSize$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_mesgSize$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register bml_metaBase
  assign bml_metaBase$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_metaBase$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register bml_metaSize
  assign bml_metaSize$D_IN = wci_reqF$D_OUT[15:0] ;
  assign bml_metaSize$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register bml_remBuf_modulus
  assign bml_remBuf_modulus$D_IN = bml_crdBuf_modulus$D_IN ;
  assign bml_remBuf_modulus$EN = WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_remBuf_value
  assign bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       16'd0 :
	       MUX_bml_remBuf_value$write_1__VAL_3 ;
  assign bml_remBuf_value$EN =
	     WILL_FIRE_RL_bml_remAdvance ||
	     WILL_FIRE_RL_bml_initAccumulators ;

  // register bml_remDone
  assign bml_remDone$D_IN = edp_remDone ;
  assign bml_remDone$EN = 1'd1 ;

  // register bml_remDones
  assign bml_remDones$D_IN = bml_remDones + 16'd1 ;
  assign bml_remDones$EN = CAN_FIRE_RL_bml_remAdvance ;

  // register bml_remMesgAddr
  assign bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       bml_mesgBase :
	       MUX_bml_remMesgAddr$write_1__VAL_2 ;
  assign bml_remMesgAddr$EN =
	     WILL_FIRE_RL_bml_initAccumulators ||
	     WILL_FIRE_RL_bml_remAdvance ;

  // register bml_remMetaAddr
  assign bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_bml_initAccumulators ?
	       bml_metaBase :
	       MUX_bml_remMetaAddr$write_1__VAL_2 ;
  assign bml_remMetaAddr$EN =
	     WILL_FIRE_RL_bml_initAccumulators ||
	     WILL_FIRE_RL_bml_remAdvance ;

  // register bml_remStart
  assign bml_remStart$D_IN = edp_remStart ;
  assign bml_remStart$EN = 1'd1 ;

  // register bml_remStarts
  assign bml_remStarts$D_IN = bml_remStarts + 16'd1 ;
  assign bml_remStarts$EN = wci_cState == 3'd2 && bml_remStart ;

  // register bram_serverAdapterA_1_cnt
  assign bram_serverAdapterA_1_cnt$D_IN =
	     bram_serverAdapterA_1_cnt_44_PLUS_IF_bram_serv_ETC___d150 ;
  assign bram_serverAdapterA_1_cnt$EN =
	     bram_serverAdapterA_1_cnt_1$whas ||
	     bram_serverAdapterA_1_outData_deqCalled$whas ;

  // register bram_serverAdapterA_1_s1
  assign bram_serverAdapterA_1_s1$D_IN =
	     { bram_serverAdapterA_1_writeWithResp$whas &&
	       bram_serverAdapterA_1_s1_1$wget[1],
	       bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register bram_serverAdapterA_2_cnt
  assign bram_serverAdapterA_2_cnt$D_IN =
	     bram_serverAdapterA_2_cnt_62_PLUS_IF_bram_serv_ETC___d268 ;
  assign bram_serverAdapterA_2_cnt$EN =
	     bram_serverAdapterA_2_cnt_1$whas ||
	     bram_serverAdapterA_2_outData_deqCalled$whas ;

  // register bram_serverAdapterA_2_s1
  assign bram_serverAdapterA_2_s1$D_IN =
	     { bram_serverAdapterA_2_writeWithResp$whas &&
	       bram_serverAdapterA_2_s1_1$wget[1],
	       bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register bram_serverAdapterA_3_cnt
  assign bram_serverAdapterA_3_cnt$D_IN =
	     bram_serverAdapterA_3_cnt_80_PLUS_IF_bram_serv_ETC___d386 ;
  assign bram_serverAdapterA_3_cnt$EN =
	     bram_serverAdapterA_3_cnt_1$whas ||
	     bram_serverAdapterA_3_outData_deqCalled$whas ;

  // register bram_serverAdapterA_3_s1
  assign bram_serverAdapterA_3_s1$D_IN =
	     { bram_serverAdapterA_3_writeWithResp$whas &&
	       bram_serverAdapterA_3_s1_1$wget[1],
	       bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register bram_serverAdapterA_cnt
  assign bram_serverAdapterA_cnt$D_IN =
	     bram_serverAdapterA_cnt_6_PLUS_IF_bram_serverA_ETC___d32 ;
  assign bram_serverAdapterA_cnt$EN =
	     bram_serverAdapterA_cnt_1$whas ||
	     bram_serverAdapterA_outData_deqCalled$whas ;

  // register bram_serverAdapterA_s1
  assign bram_serverAdapterA_s1$D_IN =
	     { bram_serverAdapterA_writeWithResp$whas &&
	       bram_serverAdapterA_s1_1$wget[1],
	       bram_serverAdapterA_s1_1$wget[0] } ;
  assign bram_serverAdapterA_s1$EN = 1'd1 ;

  // register bram_serverAdapterB_1_cnt
  assign bram_serverAdapterB_1_cnt$D_IN =
	     bram_serverAdapterB_1_cnt_03_PLUS_IF_bram_serv_ETC___d209 ;
  assign bram_serverAdapterB_1_cnt$EN =
	     bram_serverAdapterB_1_cnt_1$whas ||
	     bram_serverAdapterB_1_outData_deqCalled$whas ;

  // register bram_serverAdapterB_1_s1
  assign bram_serverAdapterB_1_s1$D_IN =
	     { bram_serverAdapterB_1_writeWithResp$whas &&
	       bram_serverAdapterB_1_s1_1$wget[1],
	       bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register bram_serverAdapterB_2_cnt
  assign bram_serverAdapterB_2_cnt$D_IN =
	     bram_serverAdapterB_2_cnt_21_PLUS_IF_bram_serv_ETC___d327 ;
  assign bram_serverAdapterB_2_cnt$EN =
	     bram_serverAdapterB_2_cnt_1$whas ||
	     bram_serverAdapterB_2_outData_deqCalled$whas ;

  // register bram_serverAdapterB_2_s1
  assign bram_serverAdapterB_2_s1$D_IN =
	     { bram_serverAdapterB_2_writeWithResp$whas &&
	       bram_serverAdapterB_2_s1_1$wget[1],
	       bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register bram_serverAdapterB_3_cnt
  assign bram_serverAdapterB_3_cnt$D_IN =
	     bram_serverAdapterB_3_cnt_39_PLUS_IF_bram_serv_ETC___d445 ;
  assign bram_serverAdapterB_3_cnt$EN =
	     bram_serverAdapterB_3_cnt_1$whas ||
	     bram_serverAdapterB_3_outData_deqCalled$whas ;

  // register bram_serverAdapterB_3_s1
  assign bram_serverAdapterB_3_s1$D_IN =
	     { bram_serverAdapterB_3_writeWithResp$whas &&
	       bram_serverAdapterB_3_s1_1$wget[1],
	       bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register bram_serverAdapterB_cnt
  assign bram_serverAdapterB_cnt$D_IN =
	     bram_serverAdapterB_cnt_5_PLUS_IF_bram_serverA_ETC___d91 ;
  assign bram_serverAdapterB_cnt$EN =
	     bram_serverAdapterB_cnt_1$whas ||
	     bram_serverAdapterB_outData_deqCalled$whas ;

  // register bram_serverAdapterB_s1
  assign bram_serverAdapterB_s1$D_IN =
	     { bram_serverAdapterB_s1_1$whas &&
	       bram_serverAdapterB_s1_1$wget[1],
	       bram_serverAdapterB_s1_1$wget[0] } ;
  assign bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dmaDoneTime
  assign dmaDoneTime$D_IN = wti_nowReq[63:0] ;
  assign dmaDoneTime$EN = edp_dmaDoneMark ;

  // register dmaStartTime
  assign dmaStartTime$D_IN = wti_nowReq[63:0] ;
  assign dmaStartTime$EN = edp_dmaStartMark ;

  // register dpControl
  assign dpControl$D_IN = wci_reqF$D_OUT[7:0] ;
  assign dpControl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register edp_complTimerCount
  assign edp_complTimerCount$D_IN =
	     edp_complTimerRunning ? edp_complTimerCount + 12'd1 : 12'd0 ;
  assign edp_complTimerCount$EN = 1'd1 ;

  // register edp_complTimerRunning
  assign edp_complTimerRunning$D_IN = 1'b0 ;
  assign edp_complTimerRunning$EN = 1'b0 ;

  // register edp_creditReady
  assign edp_creditReady$D_IN = edp_creditReady_1$whas ;
  assign edp_creditReady$EN = 1'd1 ;

  // register edp_dbgBytesTxDeq
  assign edp_dbgBytesTxDeq$D_IN = edp_dbgBytesTxDeq + 32'd1 ;
  assign edp_dbgBytesTxDeq$EN = edp_dgdpTx_delta_deq$whas ;

  // register edp_dbgBytesTxEnq
  always@(WILL_FIRE_RL_edp_dmaRequestNearMeta or
	  MUX_edp_dbgBytesTxEnq$write_1__VAL_1 or
	  WILL_FIRE_RL_edp_send_metaMH or
	  MUX_edp_dbgBytesTxEnq$write_1__VAL_2 or
	  MUX_edp_dbgBytesTxEnq$write_1__SEL_3 or
	  MUX_edp_dbgBytesTxEnq$write_1__VAL_3 or
	  WILL_FIRE_RL_edp_send_mesgMH or
	  MUX_edp_dbgBytesTxEnq$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_edp_dmaRequestNearMeta:
	  edp_dbgBytesTxEnq$D_IN = MUX_edp_dbgBytesTxEnq$write_1__VAL_1;
      WILL_FIRE_RL_edp_send_metaMH:
	  edp_dbgBytesTxEnq$D_IN = MUX_edp_dbgBytesTxEnq$write_1__VAL_2;
      MUX_edp_dbgBytesTxEnq$write_1__SEL_3:
	  edp_dbgBytesTxEnq$D_IN = MUX_edp_dbgBytesTxEnq$write_1__VAL_3;
      WILL_FIRE_RL_edp_send_mesgMH:
	  edp_dbgBytesTxEnq$D_IN = MUX_edp_dbgBytesTxEnq$write_1__VAL_4;
      default: edp_dbgBytesTxEnq$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign edp_dbgBytesTxEnq$EN =
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_edp_send_metaMH ||
	     WILL_FIRE_RL_edp_dmaPushResponseBody ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_send_mesgMH ;

  // register edp_dgdpTx_num_empty
  assign edp_dgdpTx_num_empty$D_IN =
	     edp_dgdpTx_num_empty + { 6'd0, edp_dgdpTx_delta_deq$whas } -
	     { 2'd0,
	       IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 } ;
  assign edp_dgdpTx_num_empty$EN = 1'd1 ;

  // register edp_dgdpTx_num_full
  assign edp_dgdpTx_num_full$D_IN =
	     edp_dgdpTx_num_full +
	     { 2'd0,
	       IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 } -
	     { 6'd0, edp_dgdpTx_delta_deq$whas } ;
  assign edp_dgdpTx_num_full$EN = 1'd1 ;

  // register edp_dgdpTx_vec
  assign edp_dgdpTx_vec$D_IN =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d5015,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q352,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q353,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780[7:0] } ;
  assign edp_dgdpTx_vec$EN = 1'd1 ;

  // register edp_dmaDoTailEvent
  assign edp_dmaDoTailEvent$D_IN = 1'b0 ;
  assign edp_dmaDoTailEvent$EN = 1'b0 ;

  // register edp_dmaDoneMark
  assign edp_dmaDoneMark$D_IN = WILL_FIRE_RL_edp_dmaTailEventSender ;
  assign edp_dmaDoneMark$EN = 1'd1 ;

  // register edp_dmaPullRemainDWLen
  assign edp_dmaPullRemainDWLen$D_IN = 10'h0 ;
  assign edp_dmaPullRemainDWLen$EN = 1'b0 ;

  // register edp_dmaPullRemainDWSub
  assign edp_dmaPullRemainDWSub$D_IN = 10'h0 ;
  assign edp_dmaPullRemainDWSub$EN = 1'b0 ;

  // register edp_dmaReqTag
  assign edp_dmaReqTag$D_IN = 5'h0 ;
  assign edp_dmaReqTag$EN = 1'b0 ;

  // register edp_dmaStartMark
  assign edp_dmaStartMark$D_IN = WILL_FIRE_RL_edp_dmaRequestNearMeta ;
  assign edp_dmaStartMark$EN = 1'd1 ;

  // register edp_dmaTag
  assign edp_dmaTag$D_IN = 5'h0 ;
  assign edp_dmaTag$EN = 1'b0 ;

  // register edp_doMesgMH
  assign edp_doMesgMH$D_IN =
	     !WILL_FIRE_RL_edp_send_mesgMH || !edp_firstMesgMH ;
  assign edp_doMesgMH$EN =
	     WILL_FIRE_RL_edp_send_mesgMH ||
	     WILL_FIRE_RL_edp_dmaPushRequestMesg ;

  // register edp_doMetaMH
  assign edp_doMetaMH$D_IN =
	     !WILL_FIRE_RL_edp_send_metaMH || !edp_firstMetaMH ;
  assign edp_doMetaMH$EN =
	     WILL_FIRE_RL_edp_send_metaMH ||
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // register edp_doXmtMetaBody
  assign edp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_edp_dmaXmtMetaBody ;
  assign edp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_edp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_edp_dmaXmtMetaHead ;

  // register edp_doorSeqDwell
  assign edp_doorSeqDwell$D_IN =
	     (edp_doorSeqDwell != 4'd0) ?
	       MUX_edp_doorSeqDwell$write_1__VAL_1 :
	       4'd8 ;
  assign edp_doorSeqDwell$EN =
	     edp_doorSeqDwell != 4'd0 || WILL_FIRE_RL_edp_dmaXmtDoorbell ;

  // register edp_fabFlowAddr
  assign edp_fabFlowAddr$D_IN = bml_fabFlowAddr ;
  assign edp_fabFlowAddr$EN = 1'd1 ;

  // register edp_fabFlowAddrMS
  assign edp_fabFlowAddrMS$D_IN = bml_fabFlowBaseMS ;
  assign edp_fabFlowAddrMS$EN = 1'd1 ;

  // register edp_fabMesgAccu
  assign edp_fabMesgAccu$D_IN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ?
	       edp_fabMesgAddr :
	       MUX_edp_fabMesgAccu$write_1__VAL_2 ;
  assign edp_fabMesgAccu$EN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaPushResponseHeader ;

  // register edp_fabMesgAddr
  assign edp_fabMesgAddr$D_IN = bml_fabMesgAddr ;
  assign edp_fabMesgAddr$EN = 1'd1 ;

  // register edp_fabMesgAddrMS
  assign edp_fabMesgAddrMS$D_IN = bml_fabMesgBaseMS ;
  assign edp_fabMesgAddrMS$EN = 1'd1 ;

  // register edp_fabMeta
  assign edp_fabMeta$D_IN =
	     MUX_edp_fabMeta$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_edp_fabMeta$write_1__VAL_2 ;
  assign edp_fabMeta$EN =
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     (edp_fabFlowAddrMS == 32'd0 || edp_sentTail4DWHeader) ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;

  // register edp_fabMetaAddr
  assign edp_fabMetaAddr$D_IN = bml_fabMetaAddr ;
  assign edp_fabMetaAddr$EN = 1'd1 ;

  // register edp_fabMetaAddrMS
  assign edp_fabMetaAddrMS$D_IN = bml_fabMetaBaseMS ;
  assign edp_fabMetaAddrMS$EN = 1'd1 ;

  // register edp_farBufReady
  assign edp_farBufReady$D_IN = edp_farBufReady_1$whas ;
  assign edp_farBufReady$EN = 1'd1 ;

  // register edp_firstMesgMH
  assign edp_firstMesgMH$D_IN = !edp_firstMesgMH ;
  assign edp_firstMesgMH$EN = WILL_FIRE_RL_edp_send_mesgMH ;

  // register edp_firstMetaMH
  assign edp_firstMetaMH$D_IN = !edp_firstMetaMH ;
  assign edp_firstMetaMH$EN = WILL_FIRE_RL_edp_send_metaMH ;

  // register edp_flowDiagCount
  assign edp_flowDiagCount$D_IN = edp_flowDiagCount + 32'd1 ;
  assign edp_flowDiagCount$EN = WILL_FIRE_RL_edp_dmaXmtDoorbell ;

  // register edp_frameNumber
  assign edp_frameNumber$D_IN = edp_frameNumber + 16'd1 ;
  assign edp_frameNumber$EN = WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // register edp_gotResponseHeader
  assign edp_gotResponseHeader$D_IN = 1'b0 ;
  assign edp_gotResponseHeader$EN = 1'b0 ;

  // register edp_inIgnorePkt
  assign edp_inIgnorePkt$D_IN = 1'b0 ;
  assign edp_inIgnorePkt$EN = 1'b0 ;

  // register edp_lastMetaV
  assign edp_lastMetaV$D_IN = x__h154145 ;
  assign edp_lastMetaV$EN = WILL_FIRE_RL_edp_dmaResponseNearMetaHead ;

  // register edp_lastMetaV_1
  assign edp_lastMetaV_1$D_IN = opcode__h155979 ;
  assign edp_lastMetaV_1$EN = WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;

  // register edp_lastMetaV_2
  assign edp_lastMetaV_2$D_IN = nowMS__h157210 ;
  assign edp_lastMetaV_2$EN = WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;

  // register edp_lastMetaV_3
  assign edp_lastMetaV_3$D_IN = nowLS__h158153 ;
  assign edp_lastMetaV_3$EN = WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;

  // register edp_lastRuleFired
  assign edp_lastRuleFired$D_IN =
	     (edp_fabFlowAddrMS == 32'd0) ?
	       4'd8 :
	       (edp_sentTail4DWHeader ? 4'd10 : 4'd9) ;
  assign edp_lastRuleFired$EN = WILL_FIRE_RL_edp_dmaTailEventSender ;

  // register edp_maxPayloadSize
  assign edp_maxPayloadSize$D_IN = 13'h0 ;
  assign edp_maxPayloadSize$EN = 1'b0 ;

  // register edp_maxReadReqSize
  assign edp_maxReadReqSize$D_IN = 13'h0 ;
  assign edp_maxReadReqSize$EN = 1'b0 ;

  // register edp_mesgComplReceived
  assign edp_mesgComplReceived$D_IN = 17'h0 ;
  assign edp_mesgComplReceived$EN = 1'b0 ;

  // register edp_mesgLengthRemainPull
  assign edp_mesgLengthRemainPull$D_IN = 17'h0 ;
  assign edp_mesgLengthRemainPull$EN = 1'b0 ;

  // register edp_mesgLengthRemainPush
  always@(WILL_FIRE_RL_edp_dmaResponseNearMetaBody or
	  MUX_edp_mesgLengthRemainPush$write_1__VAL_1 or
	  WILL_FIRE_RL_edp_dmaResponseNearMetaHead or
	  MUX_edp_mesgLengthRemainPush$write_1__VAL_2 or
	  WILL_FIRE_RL_edp_dmaPushRequestMesg or
	  MUX_edp_mesgLengthRemainPush$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_edp_dmaResponseNearMetaBody:
	edp_mesgLengthRemainPush$D_IN =
	    MUX_edp_mesgLengthRemainPush$write_1__VAL_1;
    WILL_FIRE_RL_edp_dmaResponseNearMetaHead:
	edp_mesgLengthRemainPush$D_IN =
	    MUX_edp_mesgLengthRemainPush$write_1__VAL_2;
    WILL_FIRE_RL_edp_dmaPushRequestMesg:
	edp_mesgLengthRemainPush$D_IN =
	    MUX_edp_mesgLengthRemainPush$write_1__VAL_3;
    default: edp_mesgLengthRemainPush$D_IN =
		 17'b01010101010101010 /* unspecified value */ ;
  endcase
  assign edp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaPushRequestMesg ;

  // register edp_nearBufReady
  assign edp_nearBufReady$D_IN = edp_nearBufReady_1$whas ;
  assign edp_nearBufReady$EN = 1'd1 ;

  // register edp_outDwRemain
  assign edp_outDwRemain$D_IN =
	     WILL_FIRE_RL_edp_dmaPushResponseHeader ?
	       MUX_edp_outDwRemain$write_1__VAL_1 :
	       MUX_edp_outDwRemain$write_1__VAL_2 ;
  assign edp_outDwRemain$EN =
	     WILL_FIRE_RL_edp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_edp_dmaPushResponseBody ;

  // register edp_postSeqDwell
  assign edp_postSeqDwell$D_IN =
	     MUX_edp_fabMeta$write_1__SEL_1 ?
	       MUX_edp_postSeqDwell$write_1__VAL_1 :
	       MUX_edp_postSeqDwell$write_1__VAL_2 ;
  assign edp_postSeqDwell$EN =
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     (edp_fabFlowAddrMS == 32'd0 || edp_sentTail4DWHeader) ||
	     edp_postSeqDwell != 4'd0 ;

  // register edp_pullTagMatch
  assign edp_pullTagMatch$D_IN = 1'b0 ;
  assign edp_pullTagMatch$EN = 1'd1 ;

  // register edp_remDone
  assign edp_remDone$D_IN = edp_remDone_1$whas ;
  assign edp_remDone$EN = 1'd1 ;

  // register edp_remMesgAccu
  assign edp_remMesgAccu$D_IN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ?
	       edp_remMesgAddr :
	       MUX_edp_remMesgAccu$write_1__VAL_2 ;
  assign edp_remMesgAccu$EN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaPushRequestMesg ;

  // register edp_remMesgAddr
  assign edp_remMesgAddr$D_IN = bml_remMesgAddr ;
  assign edp_remMesgAddr$EN = 1'd1 ;

  // register edp_remMetaAddr
  assign edp_remMetaAddr$D_IN = bml_remMetaAddr ;
  assign edp_remMetaAddr$EN = 1'd1 ;

  // register edp_remStart
  assign edp_remStart$D_IN = edp_remStart_1$whas ;
  assign edp_remStart$EN = 1'd1 ;

  // register edp_reqMesgInFlight
  assign edp_reqMesgInFlight$D_IN = 1'b0 ;
  assign edp_reqMesgInFlight$EN = 1'b0 ;

  // register edp_reqMetaBodyInFlight
  assign edp_reqMetaBodyInFlight$D_IN = 1'b0 ;
  assign edp_reqMetaBodyInFlight$EN = 1'b0 ;

  // register edp_reqMetaInFlight
  assign edp_reqMetaInFlight$D_IN =
	     !WILL_FIRE_RL_edp_dmaResponseNearMetaBody ;
  assign edp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ;

  // register edp_sentTail4DWHeader
  assign edp_sentTail4DWHeader$D_IN = !edp_sentTail4DWHeader ;
  assign edp_sentTail4DWHeader$EN = MUX_edp_tlpXmtBusy$write_1__SEL_2 ;

  // register edp_srcMesgAccu
  assign edp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ?
	       edp_fabMesgAddr :
	       MUX_edp_srcMesgAccu$write_1__VAL_2 ;
  assign edp_srcMesgAccu$EN =
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaPushRequestMesg ;

  // register edp_tlpBRAM_debugBdata
  assign edp_tlpBRAM_debugBdata$D_IN =
	     { bram_serverAdapterA_3_outData_outData$wget[7:0],
	       bram_serverAdapterA_3_outData_outData$wget[15:8],
	       bram_serverAdapterA_3_outData_outData$wget[23:16],
	       bram_serverAdapterA_3_outData_outData$wget[31:24],
	       bram_serverAdapterA_2_outData_outData$wget[7:0],
	       bram_serverAdapterA_2_outData_outData$wget[15:8],
	       bram_serverAdapterA_2_outData_outData$wget[23:16],
	       bram_serverAdapterA_2_outData_outData$wget[31:24],
	       bram_serverAdapterA_1_outData_outData$wget[7:0],
	       bram_serverAdapterA_1_outData_outData$wget[15:8],
	       bram_serverAdapterA_1_outData_outData$wget[23:16],
	       bram_serverAdapterA_1_outData_outData$wget[31:24],
	       bram_serverAdapterA_outData_outData$wget[7:0],
	       bram_serverAdapterA_outData_outData$wget[15:8],
	       bram_serverAdapterA_outData_outData$wget[23:16],
	       bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign edp_tlpBRAM_debugBdata$EN = WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;

  // register edp_tlpBRAM_rdRespDwRemain
  assign edp_tlpBRAM_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp ?
	       MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_1 :
	       MUX_edp_tlpBRAM_rdRespDwRemain$write_1__VAL_2 ;
  assign edp_tlpBRAM_rdRespDwRemain$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;

  // register edp_tlpBRAM_readHeaderSent
  assign edp_tlpBRAM_readHeaderSent$D_IN =
	     MUX_edp_tlpBRAM_readHeaderSent$write_1__SEL_1 ;
  assign edp_tlpBRAM_readHeaderSent$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     (edp_tlpBRAM_readReq$D_OUT[28:19] != 10'd1 ||
	      edp_tlpBRAM_readReq$D_OUT[60]) ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp &&
	     edp_tlpBRAM_rdRespDwRemain_024_ULE_4___d1026 ;

  // register edp_tlpBRAM_readNxtDWAddr
  assign edp_tlpBRAM_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq ?
	       MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_1 :
	       MUX_edp_tlpBRAM_readNxtDWAddr$write_1__VAL_2 ;
  assign edp_tlpBRAM_readNxtDWAddr$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;

  // register edp_tlpBRAM_readRemainDWLen
  assign edp_tlpBRAM_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq ?
	       MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_1 :
	       MUX_edp_tlpBRAM_readRemainDWLen$write_1__VAL_2 ;
  assign edp_tlpBRAM_readRemainDWLen$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;

  // register edp_tlpBRAM_readStarted
  assign edp_tlpBRAM_readStarted$D_IN =
	     MUX_edp_tlpBRAM_readStarted$write_1__SEL_1 ;
  assign edp_tlpBRAM_readStarted$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     (edp_tlpBRAM_mReqF$D_OUT[28:19] != 10'd1 ||
	      edp_tlpBRAM_mReqF$D_OUT[60]) ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq &&
	     edp_tlpBRAM_readRemainDWLen_46_ULE_4___d847 ;

  // register edp_tlpBRAM_writeDWAddr
  assign edp_tlpBRAM_writeDWAddr$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq ?
	       MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_1 :
	       MUX_edp_tlpBRAM_writeDWAddr$write_1__VAL_2 ;
  assign edp_tlpBRAM_writeDWAddr$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData ;

  // register edp_tlpBRAM_writeLastBE
  assign edp_tlpBRAM_writeLastBE$D_IN = edp_tlpBRAM_mReqF$D_OUT[35:32] ;
  assign edp_tlpBRAM_writeLastBE$EN = WILL_FIRE_RL_edp_tlpBRAM_writeReq ;

  // register edp_tlpBRAM_writeRemainDWLen
  assign edp_tlpBRAM_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq ?
	       MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_1 :
	       MUX_edp_tlpBRAM_writeRemainDWLen$write_1__VAL_2 ;
  assign edp_tlpBRAM_writeRemainDWLen$EN =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData ;

  // register edp_tlpMetaSent
  assign edp_tlpMetaSent$D_IN = WILL_FIRE_RL_edp_dmaXmtMetaBody ;
  assign edp_tlpMetaSent$EN =
	     WILL_FIRE_RL_edp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_edp_dmaXmtMetaBody ;

  // register edp_tlpRcvBusy
  assign edp_tlpRcvBusy$D_IN = 1'b0 ;
  assign edp_tlpRcvBusy$EN = 1'b0 ;

  // register edp_tlpXmtBusy
  always@(MUX_edp_tlpXmtBusy$write_1__SEL_1 or
	  MUX_edp_tlpXmtBusy$write_1__SEL_2 or
	  edp_sentTail4DWHeader or
	  WILL_FIRE_RL_edp_dmaXmtMetaBody or
	  WILL_FIRE_RL_edp_dmaXmtMetaHead or
	  WILL_FIRE_RL_edp_dmaPushResponseHeader)
  case (1'b1)
    MUX_edp_tlpXmtBusy$write_1__SEL_1: edp_tlpXmtBusy$D_IN = 1'd0;
    MUX_edp_tlpXmtBusy$write_1__SEL_2:
	edp_tlpXmtBusy$D_IN = !edp_sentTail4DWHeader;
    WILL_FIRE_RL_edp_dmaXmtMetaBody: edp_tlpXmtBusy$D_IN = 1'd0;
    WILL_FIRE_RL_edp_dmaXmtMetaHead || WILL_FIRE_RL_edp_dmaPushResponseHeader:
	edp_tlpXmtBusy$D_IN = 1'd1;
    default: edp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign edp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_edp_dmaPushResponseBody &&
	     edp_outDwRemain_379_ULE_4___d5381 ||
	     WILL_FIRE_RL_edp_dmaTailEventSender &&
	     edp_fabFlowAddrMS != 32'd0 ||
	     WILL_FIRE_RL_edp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_edp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_edp_dmaPushResponseHeader ;

  // register edp_xactionNumber
  assign edp_xactionNumber$D_IN = 32'h0 ;
  assign edp_xactionNumber$EN = 1'b0 ;

  // register edp_xmtMetaInFlight
  assign edp_xmtMetaInFlight$D_IN = !WILL_FIRE_RL_edp_dmaXmtTailEvent ;
  assign edp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_edp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_edp_dmaXmtMetaHead ;

  // register edp_xmtMetaOK
  always@(MUX_edp_xmtMetaOK$write_1__SEL_1 or
	  WILL_FIRE_RL_edp_dmaResponseNearMetaBody or
	  edp_mesgLengthRemainPush or WILL_FIRE_RL_edp_dmaXmtMetaHead)
  case (1'b1)
    MUX_edp_xmtMetaOK$write_1__SEL_1: edp_xmtMetaOK$D_IN = 1'd1;
    WILL_FIRE_RL_edp_dmaResponseNearMetaBody:
	edp_xmtMetaOK$D_IN = edp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_edp_dmaXmtMetaHead: edp_xmtMetaOK$D_IN = 1'd0;
    default: edp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign edp_xmtMetaOK$EN =
	     WILL_FIRE_RL_edp_dmaPushResponseBody &&
	     edp_outDwRemain_379_ULE_4___d5381 &&
	     edp_tlpBRAM_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaXmtMetaHead ;

  // register wci_cEdge
  assign wci_cEdge$D_IN = wci_reqF$D_OUT[36:34] ;
  assign wci_cEdge$EN = WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_cState
  assign wci_cState$D_IN = wci_nState ;
  assign wci_cState$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge ;

  // register wci_ctlAckReg
  assign wci_ctlAckReg$D_IN = wci_ctlAckReg_1$whas ;
  assign wci_ctlAckReg$EN = 1'd1 ;

  // register wci_ctlOpActive
  assign wci_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete ||
	     WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_illegalEdge
  assign wci_illegalEdge$D_IN =
	     !MUX_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_illegalEdge$write_1__VAL_2 ;
  assign wci_illegalEdge$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ||
	     MUX_wci_illegalEdge$write_1__SEL_2 ;

  // register wci_isReset_isInReset
  assign wci_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_isReset_isInReset$EN = wci_isReset_isInReset ;

  // register wci_nState
  always@(wci_reqF$D_OUT)
  begin
    case (wci_reqF$D_OUT[36:34])
      3'd0: wci_nState$D_IN = 3'd1;
      3'd1: wci_nState$D_IN = 3'd2;
      3'd2: wci_nState$D_IN = 3'd3;
      default: wci_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_nState$EN =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState == 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_cState == 3'd1 || wci_cState == 3'd3) ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState == 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_cState == 3'd3 || wci_cState == 3'd2 ||
	       wci_cState == 3'd1)) ;

  // register wci_reqF_countReg
  assign wci_reqF_countReg$D_IN =
	     (wci_wciReq$wget[71:69] != 3'd0) ?
	       wci_reqF_countReg + 2'd1 :
	       wci_reqF_countReg - 2'd1 ;
  assign wci_reqF_countReg$EN =
	     (wci_wciReq$wget[71:69] != 3'd0) != wci_reqF_r_deq$whas ;

  // register wci_respF_c_r
  assign wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_respF_incCtr ?
	       MUX_wci_respF_c_r$write_1__VAL_1 :
	       MUX_wci_respF_c_r$write_1__VAL_2 ;
  assign wci_respF_c_r$EN =
	     WILL_FIRE_RL_wci_respF_incCtr || WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_respF_q_0
  always@(WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  MUX_wci_respF_q_0$write_1__SEL_2 or
	  MUX_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_respF_decCtr or wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      MUX_wci_respF_q_0$write_1__SEL_2:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_0$D_IN = wci_respF_q_1;
      default: wci_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_0$EN =
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_respF_q_1
  always@(WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_1$write_1__VAL_1 or
	  MUX_wci_respF_q_1$write_1__SEL_2 or
	  MUX_wci_respF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_1$write_1__VAL_1;
      MUX_wci_respF_q_1$write_1__SEL_2:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_1$EN =
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_sFlagReg
  assign wci_sFlagReg$D_IN = 1'b0 ;
  assign wci_sFlagReg$EN = 1'd1 ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wmi_addr
  assign wmi_addr$D_IN =
	     MUX_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_wmi_addr$write_1__VAL_1 :
	       wmi_wmi_reqF$D_OUT[25:12] ;
  assign wmi_addr$EN =
	     WILL_FIRE_RL_wmi_doReadReq || WILL_FIRE_RL_wmi_doWriteReq ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_bufDwell
  assign wmi_bufDwell$D_IN =
	     (MUX_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_wmi_bufDwell$write_1__VAL_3 ;
  assign wmi_bufDwell$EN =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     wmi_bufDwell != 2'd0 ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_bytesRemainReq
  assign wmi_bytesRemainReq$D_IN =
	     MUX_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_wmi_doReadReq || WILL_FIRE_RL_wmi_doWriteReq ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_bytesRemainResp
  assign wmi_bytesRemainResp$D_IN =
	     MUX_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_wmi_getRequest &&
	     wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_wmi_doReadResp ;

  // register wmi_doneWithMesg
  assign wmi_doneWithMesg$D_IN =
	     !MUX_wmi_doneWithMesg$write_1__SEL_1 && wmi_wmi_reqF$D_OUT[27] ;
  assign wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_wmi_doReadReq || WILL_FIRE_RL_wmi_doWriteReq) &&
	     wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_lastMesg
  assign wmi_lastMesg$D_IN = wmi_thisMesg ;
  assign wmi_lastMesg$EN = WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_lclMesgAddr
  assign wmi_lclMesgAddr$D_IN = bml_lclMesgAddr[14:0] ;
  assign wmi_lclMesgAddr$EN = 1'd1 ;

  // register wmi_lclMetaAddr
  assign wmi_lclMetaAddr$D_IN = bml_lclMetaAddr[14:0] ;
  assign wmi_lclMetaAddr$EN = 1'd1 ;

  // register wmi_mesgBufReady
  assign wmi_mesgBufReady$D_IN = wmi_mesgBufReady_1$whas ;
  assign wmi_mesgBufReady$EN = 1'd1 ;

  // register wmi_mesgBusy
  assign wmi_mesgBusy$D_IN = wmi_bufDwell != 2'd1 ;
  assign wmi_mesgBusy$EN =
	     wmi_bufDwell == 2'd1 || WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_mesgCount
  assign wmi_mesgCount$D_IN =
	     MUX_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_wmi_mesgCount$write_1__VAL_1 :
	       MUX_wmi_mesgCount$write_1__VAL_1 ;
  assign wmi_mesgCount$EN = wmi_mesgDone_1$whas ;

  // register wmi_mesgDone
  assign wmi_mesgDone$D_IN = wmi_mesgDone_1$whas ;
  assign wmi_mesgDone$EN = 1'd1 ;

  // register wmi_mesgMeta
  assign wmi_mesgMeta$D_IN =
	     MUX_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_wmi_mesgMeta$write_1__VAL_2 ;
  assign wmi_mesgMeta$EN =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     WILL_FIRE_RL_wmi_respMetadata ;

  // register wmi_mesgStart
  assign wmi_mesgStart$D_IN = wmi_mesgStart_1$whas ;
  assign wmi_mesgStart$EN = 1'd1 ;

  // register wmi_metaBusy
  assign wmi_metaBusy$D_IN = !WILL_FIRE_RL_wmi_respMetadata ;
  assign wmi_metaBusy$EN =
	     WILL_FIRE_RL_wmi_respMetadata || WILL_FIRE_RL_wmi_reqMetadata ;

  // register wmi_p4B
  assign wmi_p4B$D_IN =
	     MUX_wmi_bytesRemainResp$write_1__SEL_1 ?
	       wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_wmi_p4B$write_1__VAL_2 ;
  assign wmi_p4B$EN =
	     WILL_FIRE_RL_wmi_getRequest &&
	     wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_wmi_doReadResp ;

  // register wmi_rdActive
  assign wmi_rdActive$D_IN =
	     !MUX_wmi_rdActive$write_1__SEL_1 &&
	     wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign wmi_rdActive$EN =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_reqCount
  assign wmi_reqCount$D_IN = wmi_reqCount + 16'd1 ;
  assign wmi_reqCount$EN = WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_thisMesg
  assign wmi_thisMesg$D_IN =
	     { wmi_mesgCount[7:0],
	       wmi_wmi_mFlagF$D_OUT[31:24],
	       wmi_wmi_mFlagF$D_OUT[15:0] } ;
  assign wmi_thisMesg$EN = WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_wmi_blockReq
  assign wmi_wmi_blockReq$D_IN =
	     !MUX_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_wmi_getRequest && wmi_wmi_reqF$D_OUT[28] &&
	     wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_wmi_doReadReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_wmi_dhF_countReg
  assign wmi_wmi_dhF_countReg$D_IN =
	     MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 ?
	       wmi_wmi_dhF_countReg + 2'd1 :
	       wmi_wmi_dhF_countReg - 2'd1 ;
  assign wmi_wmi_dhF_countReg$EN =
	     MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 !=
	     WILL_FIRE_RL_wmi_doWriteReq ;

  // register wmi_wmi_dhF_levelsValid
  assign wmi_wmi_dhF_levelsValid$D_IN = WILL_FIRE_RL_wmi_wmi_dhF_reset ;
  assign wmi_wmi_dhF_levelsValid$EN =
	     wmi_wmi_dhF$FULL_N && wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiDh$wget[37] ||
	     WILL_FIRE_RL_wmi_doWriteReq ||
	     WILL_FIRE_RL_wmi_wmi_dhF_reset ;

  // register wmi_wmi_errorSticky
  assign wmi_wmi_errorSticky$D_IN = 1'b0 ;
  assign wmi_wmi_errorSticky$EN = 1'b0 ;

  // register wmi_wmi_isReset_isInReset
  assign wmi_wmi_isReset_isInReset$D_IN = 1'd0 ;
  assign wmi_wmi_isReset_isInReset$EN = wmi_wmi_isReset_isInReset ;

  // register wmi_wmi_mFlagF_countReg
  assign wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       wmi_wmi_mFlagF_countReg + 2'd1 :
	       wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign wmi_wmi_mFlagF_countReg$EN =
	     MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_wmi_mFlagF_levelsValid
  assign wmi_wmi_mFlagF_levelsValid$D_IN = WILL_FIRE_RL_wmi_wmi_mFlagF_reset ;
  assign wmi_wmi_mFlagF_levelsValid$EN =
	     wmi_wmi_mFlagF$FULL_N && wmi_wmi_operateD &&
	     wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     wmi_wmi_wmiReq$wget[27] ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ||
	     WILL_FIRE_RL_wmi_wmi_mFlagF_reset ;

  // register wmi_wmi_operateD
  assign wmi_wmi_operateD$D_IN = wci_cState == 3'd2 ;
  assign wmi_wmi_operateD$EN = 1'd1 ;

  // register wmi_wmi_peerIsReady
  assign wmi_wmi_peerIsReady$D_IN = wmiS0_MReset_n ;
  assign wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register wmi_wmi_reqF_countReg
  assign wmi_wmi_reqF_countReg$D_IN =
	     MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 ?
	       wmi_wmi_reqF_countReg + 2'd1 :
	       wmi_wmi_reqF_countReg - 2'd1 ;
  assign wmi_wmi_reqF_countReg$EN =
	     MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 !=
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_wmi_reqF_levelsValid
  assign wmi_wmi_reqF_levelsValid$D_IN = WILL_FIRE_RL_wmi_wmi_reqF_reset ;
  assign wmi_wmi_reqF_levelsValid$EN =
	     wmi_wmi_reqF$FULL_N && wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     wmi_wmi_wmiReq$wget[31:29] != 3'd0 ||
	     WILL_FIRE_RL_wmi_getRequest ||
	     WILL_FIRE_RL_wmi_wmi_reqF_reset ;

  // register wmi_wmi_respF_c_r
  assign wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr ?
	       MUX_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_wmi_wmi_respF_decCtr ;

  // register wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_wmi_wmi_respF_both or
	  MUX_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmi_wmi_respF_decCtr or wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_wmi_respF_both:
	  wmi_wmi_respF_q_0$D_IN = MUX_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_wmi_wmi_respF_q_0$write_1__SEL_2:
	  wmi_wmi_respF_q_0$D_IN = MUX_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_wmi_respF_decCtr:
	  wmi_wmi_respF_q_0$D_IN = wmi_wmi_respF_q_1;
      default: wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr && wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmi_wmi_respF_decCtr ;

  // register wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_wmi_wmi_respF_both or
	  MUX_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_wmi_respF_both:
	  wmi_wmi_respF_q_1$D_IN = MUX_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_wmi_wmi_respF_q_1$write_1__SEL_2:
	  wmi_wmi_respF_q_1$D_IN = MUX_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_wmi_respF_decCtr: wmi_wmi_respF_q_1$D_IN = 34'd0;
      default: wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_wmi_wmi_respF_incCtr && wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmi_wmi_respF_decCtr ;

  // register wmi_wmi_sFlagReg
  assign wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h187908[7:0], y_avValue__h187888[23:0] } ;
  assign wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_wmi_respMetadata ;

  // register wmi_wmi_statusR
  assign wmi_wmi_statusR$D_IN = 8'h0 ;
  assign wmi_wmi_statusR$EN = 1'b0 ;

  // register wmi_wmi_trafficSticky
  assign wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register wmi_wrActive
  assign wmi_wrActive$D_IN =
	     !MUX_wmi_wrActive$write_1__SEL_1 &&
	     wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign wmi_wrActive$EN =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_wmi_getRequest ;

  // register wmi_wrFinalize
  assign wmi_wrFinalize$D_IN = MUX_wmi_wrFinalize$write_1__SEL_1 ;
  assign wmi_wrFinalize$EN =
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_bytesRemainReq == 14'd4 &&
	     wmi_doneWithMesg ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // register wmi_wrtCount
  assign wmi_wrtCount$D_IN = wmi_wrtCount + 16'd1 ;
  assign wmi_wrtCount$EN = WILL_FIRE_RL_wmi_doWriteReq ;

  // register wti_isReset_isInReset
  assign wti_isReset_isInReset$D_IN = 1'd0 ;
  assign wti_isReset_isInReset$EN = wti_isReset_isInReset ;

  // register wti_nowReq
  assign wti_nowReq$D_IN = wtiS0_req ;
  assign wti_nowReq$EN = 1'd1 ;

  // register wti_operateD
  assign wti_operateD$D_IN = 1'b1 ;
  assign wti_operateD$EN = 1'd1 ;

  // submodule bram_memory
  always@(MUX_bram_memory$a_put_1__SEL_1 or
	  edp_tlpBRAM_mReqF$D_OUT or
	  MUX_bram_memory$a_put_1__SEL_2 or
	  MUX_bram_memory$a_put_1__SEL_3 or
	  MUX_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq or
	  MUX_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory$a_put_1__SEL_1:
	  bram_memory$ADDRA = edp_tlpBRAM_mReqF$D_OUT[62:52];
      MUX_bram_memory$a_put_1__SEL_2:
	  bram_memory$ADDRA = edp_tlpBRAM_mReqF$D_OUT[41:31];
      MUX_bram_memory$a_put_1__SEL_3:
	  bram_memory$ADDRA = MUX_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory$ADDRA = MUX_bram_memory$a_put_2__VAL_4;
      default: bram_memory$ADDRA = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_reqMetadata or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_lclMetaAddr or
	  MUX_bram_memory$b_put_1__SEL_1 or
	  MUX_bram_memory$b_put_2__VAL_1 or MUX_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqMetadata || WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory$ADDRB = wmi_lclMetaAddr[14:4];
      MUX_bram_memory$b_put_1__SEL_1:
	  bram_memory$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      MUX_bram_memory$b_put_1__SEL_2:
	  bram_memory$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      default: bram_memory$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory$a_put_1__SEL_1 or
	  MUX_bram_memory$a_put_3__VAL_1 or
	  MUX_bram_memory$a_put_1__SEL_3 or
	  MUX_bram_memory$a_put_3__VAL_3 or
	  MUX_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory$a_put_1__SEL_1:
	  bram_memory$DIA = MUX_bram_memory$a_put_3__VAL_1;
      MUX_bram_memory$a_put_1__SEL_3:
	  bram_memory$DIA = MUX_bram_memory$a_put_3__VAL_3;
      MUX_bram_memory$a_put_1__SEL_2 || WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory$DIA = 32'd0;
      default: bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory$b_put_1__SEL_2 or
	  wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  x3__h186293 or
	  MUX_bram_memory$b_put_1__SEL_1 or WILL_FIRE_RL_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory$b_put_1__SEL_2:
	  bram_memory$DIB = wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_wmi_doWriteFinalize: bram_memory$DIB = x3__h186293;
      MUX_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_wmi_reqMetadata:
	  bram_memory$DIB = 32'd0;
      default: bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bram_memory$WEA =
	     !MUX_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory$WEB =
	     !MUX_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_wmi_reqMetadata ;
  assign bram_memory$ENA =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory$ENB =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // submodule bram_memory_1
  always@(MUX_bram_memory_1$a_put_1__SEL_1 or
	  edp_tlpBRAM_mReqF$D_OUT or
	  MUX_bram_memory_1$a_put_1__SEL_2 or
	  MUX_bram_memory_1$a_put_1__SEL_3 or
	  MUX_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq or
	  MUX_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_1$a_put_1__SEL_1:
	  bram_memory_1$ADDRA = edp_tlpBRAM_mReqF$D_OUT[62:52];
      MUX_bram_memory_1$a_put_1__SEL_2:
	  bram_memory_1$ADDRA = edp_tlpBRAM_mReqF$D_OUT[41:31];
      MUX_bram_memory_1$a_put_1__SEL_3:
	  bram_memory_1$ADDRA = MUX_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_1$ADDRA = MUX_bram_memory_1$a_put_2__VAL_4;
      default: bram_memory_1$ADDRA = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_reqMetadata or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_lclMetaAddr or
	  MUX_bram_memory_1$b_put_1__SEL_1 or
	  MUX_bram_memory$b_put_2__VAL_1 or MUX_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqMetadata || WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_1$ADDRB = wmi_lclMetaAddr[14:4];
      MUX_bram_memory_1$b_put_1__SEL_1:
	  bram_memory_1$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      MUX_bram_memory_1$b_put_1__SEL_2:
	  bram_memory_1$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      default: bram_memory_1$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory_1$a_put_1__SEL_1 or
	  MUX_bram_memory$a_put_3__VAL_1 or
	  MUX_bram_memory_1$a_put_1__SEL_3 or
	  MUX_bram_memory_1$a_put_3__VAL_3 or
	  MUX_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_1$a_put_1__SEL_1:
	  bram_memory_1$DIA = MUX_bram_memory$a_put_3__VAL_1;
      MUX_bram_memory_1$a_put_1__SEL_3:
	  bram_memory_1$DIA = MUX_bram_memory_1$a_put_3__VAL_3;
      MUX_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_1$DIA = 32'd0;
      default: bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory_1$b_put_1__SEL_2 or
	  wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  mesgMeta_opcode__h186333 or
	  MUX_bram_memory_1$b_put_1__SEL_1 or WILL_FIRE_RL_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_1$b_put_1__SEL_2:
	  bram_memory_1$DIB = wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_1$DIB = mesgMeta_opcode__h186333;
      MUX_bram_memory_1$b_put_1__SEL_1 || WILL_FIRE_RL_wmi_reqMetadata:
	  bram_memory_1$DIB = 32'd0;
      default: bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bram_memory_1$WEA =
	     !MUX_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_1$WEB =
	     !MUX_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_wmi_reqMetadata ;
  assign bram_memory_1$ENA =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_1$ENB =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // submodule bram_memory_2
  always@(MUX_bram_memory_2$a_put_1__SEL_1 or
	  edp_tlpBRAM_mReqF$D_OUT or
	  MUX_bram_memory_2$a_put_1__SEL_2 or
	  MUX_bram_memory_2$a_put_1__SEL_3 or
	  MUX_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq or
	  MUX_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_2$a_put_1__SEL_1:
	  bram_memory_2$ADDRA = edp_tlpBRAM_mReqF$D_OUT[62:52];
      MUX_bram_memory_2$a_put_1__SEL_2:
	  bram_memory_2$ADDRA = edp_tlpBRAM_mReqF$D_OUT[41:31];
      MUX_bram_memory_2$a_put_1__SEL_3:
	  bram_memory_2$ADDRA = MUX_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_2$ADDRA = MUX_bram_memory_2$a_put_2__VAL_4;
      default: bram_memory_2$ADDRA = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_reqMetadata or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_lclMetaAddr or
	  MUX_bram_memory_2$b_put_1__SEL_1 or
	  MUX_bram_memory$b_put_2__VAL_1 or MUX_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqMetadata || WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_2$ADDRB = wmi_lclMetaAddr[14:4];
      MUX_bram_memory_2$b_put_1__SEL_1:
	  bram_memory_2$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      MUX_bram_memory_2$b_put_1__SEL_2:
	  bram_memory_2$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      default: bram_memory_2$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory_2$a_put_1__SEL_1 or
	  MUX_bram_memory$a_put_3__VAL_1 or
	  MUX_bram_memory_2$a_put_1__SEL_3 or
	  MUX_bram_memory_2$a_put_3__VAL_3 or
	  MUX_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_2$a_put_1__SEL_1:
	  bram_memory_2$DIA = MUX_bram_memory$a_put_3__VAL_1;
      MUX_bram_memory_2$a_put_1__SEL_3:
	  bram_memory_2$DIA = MUX_bram_memory_2$a_put_3__VAL_3;
      MUX_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_2$DIA = 32'd0;
      default: bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_nowW$wget or
	  MUX_bram_memory_2$b_put_1__SEL_2 or
	  wmi_wmi_dhF$D_OUT or
	  MUX_bram_memory_2$b_put_1__SEL_1 or WILL_FIRE_RL_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_2$DIB = wmi_nowW$wget[63:32];
      MUX_bram_memory_2$b_put_1__SEL_2:
	  bram_memory_2$DIB = wmi_wmi_dhF$D_OUT[35:4];
      MUX_bram_memory_2$b_put_1__SEL_1 || WILL_FIRE_RL_wmi_reqMetadata:
	  bram_memory_2$DIB = 32'd0;
      default: bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bram_memory_2$WEA =
	     !MUX_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_2$WEB =
	     !MUX_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_wmi_reqMetadata ;
  assign bram_memory_2$ENA =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_2$ENB =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // submodule bram_memory_3
  always@(MUX_bram_memory_3$a_put_1__SEL_1 or
	  edp_tlpBRAM_mReqF$D_OUT or
	  MUX_bram_memory_3$a_put_1__SEL_2 or
	  MUX_bram_memory_3$a_put_1__SEL_3 or
	  MUX_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq or
	  MUX_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_3$a_put_1__SEL_1:
	  bram_memory_3$ADDRA = edp_tlpBRAM_mReqF$D_OUT[62:52];
      MUX_bram_memory_3$a_put_1__SEL_2:
	  bram_memory_3$ADDRA = edp_tlpBRAM_mReqF$D_OUT[41:31];
      MUX_bram_memory_3$a_put_1__SEL_3:
	  bram_memory_3$ADDRA = MUX_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_3$ADDRA = MUX_bram_memory_3$a_put_2__VAL_4;
      default: bram_memory_3$ADDRA = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_reqMetadata or
	  WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_lclMetaAddr or
	  MUX_bram_memory_3$b_put_1__SEL_1 or
	  MUX_bram_memory$b_put_2__VAL_1 or MUX_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqMetadata || WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_3$ADDRB = wmi_lclMetaAddr[14:4];
      MUX_bram_memory_3$b_put_1__SEL_1:
	  bram_memory_3$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      MUX_bram_memory_3$b_put_1__SEL_2:
	  bram_memory_3$ADDRB = MUX_bram_memory$b_put_2__VAL_1;
      default: bram_memory_3$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bram_memory_3$a_put_1__SEL_1 or
	  MUX_bram_memory$a_put_3__VAL_1 or
	  MUX_bram_memory_3$a_put_1__SEL_3 or
	  MUX_bram_memory_3$a_put_3__VAL_3 or
	  MUX_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_edp_tlpBRAM_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bram_memory_3$a_put_1__SEL_1:
	  bram_memory_3$DIA = MUX_bram_memory$a_put_3__VAL_1;
      MUX_bram_memory_3$a_put_1__SEL_3:
	  bram_memory_3$DIA = MUX_bram_memory_3$a_put_3__VAL_3;
      MUX_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq:
	  bram_memory_3$DIA = 32'd0;
      default: bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_wmi_doWriteFinalize or
	  wmi_nowW$wget or
	  MUX_bram_memory_3$b_put_1__SEL_2 or
	  wmi_wmi_dhF$D_OUT or
	  MUX_bram_memory_3$b_put_1__SEL_1 or WILL_FIRE_RL_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_doWriteFinalize:
	  bram_memory_3$DIB = wmi_nowW$wget[31:0];
      MUX_bram_memory_3$b_put_1__SEL_2:
	  bram_memory_3$DIB = wmi_wmi_dhF$D_OUT[35:4];
      MUX_bram_memory_3$b_put_1__SEL_1 || WILL_FIRE_RL_wmi_reqMetadata:
	  bram_memory_3$DIB = 32'd0;
      default: bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bram_memory_3$WEA =
	     !MUX_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_3$WEB =
	     !MUX_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_wmi_reqMetadata ;
  assign bram_memory_3$ENA =
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[63] &&
	     edp_tlpBRAM_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] &&
	     edp_tlpBRAM_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData &&
	     IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq ;
  assign bram_memory_3$ENB =
	     WILL_FIRE_RL_wmi_doReadReq && wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_wmi_doWriteReq && wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_wmi_reqMetadata ||
	     WILL_FIRE_RL_wmi_doWriteFinalize ;

  // submodule bram_serverAdapterA_1_outDataCore
  assign bram_serverAdapterA_1_outDataCore$D_IN = bram_memory_1$DOA ;
  assign bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterA_1_outData_enqAndDeq ||
	     bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !bram_serverAdapterA_1_outData_deqCalled$whas &&
	     bram_serverAdapterA_1_outData_enqData$whas ;
  assign bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterA_1_outData_enqAndDeq ||
	     bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !bram_serverAdapterA_1_outData_enqData$whas ;
  assign bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterA_2_outDataCore
  assign bram_serverAdapterA_2_outDataCore$D_IN = bram_memory_2$DOA ;
  assign bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterA_2_outData_enqAndDeq ||
	     bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !bram_serverAdapterA_2_outData_deqCalled$whas &&
	     bram_serverAdapterA_2_outData_enqData$whas ;
  assign bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterA_2_outData_enqAndDeq ||
	     bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !bram_serverAdapterA_2_outData_enqData$whas ;
  assign bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterA_3_outDataCore
  assign bram_serverAdapterA_3_outDataCore$D_IN = bram_memory_3$DOA ;
  assign bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterA_3_outData_enqAndDeq ||
	     bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !bram_serverAdapterA_3_outData_deqCalled$whas &&
	     bram_serverAdapterA_3_outData_enqData$whas ;
  assign bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterA_3_outData_enqAndDeq ||
	     bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !bram_serverAdapterA_3_outData_enqData$whas ;
  assign bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterA_outDataCore
  assign bram_serverAdapterA_outDataCore$D_IN = bram_memory$DOA ;
  assign bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterA_outData_enqAndDeq ||
	     bram_serverAdapterA_outDataCore$FULL_N &&
	     !bram_serverAdapterA_outData_deqCalled$whas &&
	     bram_serverAdapterA_outData_enqData$whas ;
  assign bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterA_outData_enqAndDeq ||
	     bram_serverAdapterA_outDataCore$EMPTY_N &&
	     bram_serverAdapterA_outData_deqCalled$whas &&
	     !bram_serverAdapterA_outData_enqData$whas ;
  assign bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterB_1_outDataCore
  assign bram_serverAdapterB_1_outDataCore$D_IN = bram_memory_1$DOB ;
  assign bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterB_1_outData_enqAndDeq ||
	     bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !bram_serverAdapterB_1_outData_deqCalled$whas &&
	     bram_serverAdapterB_1_outData_enqData$whas ;
  assign bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterB_1_outData_enqAndDeq ||
	     bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !bram_serverAdapterB_1_outData_enqData$whas ;
  assign bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterB_2_outDataCore
  assign bram_serverAdapterB_2_outDataCore$D_IN = bram_memory_2$DOB ;
  assign bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterB_2_outData_enqAndDeq ||
	     bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !bram_serverAdapterB_2_outData_deqCalled$whas &&
	     bram_serverAdapterB_2_outData_enqData$whas ;
  assign bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterB_2_outData_enqAndDeq ||
	     bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !bram_serverAdapterB_2_outData_enqData$whas ;
  assign bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterB_3_outDataCore
  assign bram_serverAdapterB_3_outDataCore$D_IN = bram_memory_3$DOB ;
  assign bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterB_3_outData_enqAndDeq ||
	     bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !bram_serverAdapterB_3_outData_deqCalled$whas &&
	     bram_serverAdapterB_3_outData_enqData$whas ;
  assign bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterB_3_outData_enqAndDeq ||
	     bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !bram_serverAdapterB_3_outData_enqData$whas ;
  assign bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule bram_serverAdapterB_outDataCore
  assign bram_serverAdapterB_outDataCore$D_IN = bram_memory$DOB ;
  assign bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_bram_serverAdapterB_outData_enqAndDeq ||
	     bram_serverAdapterB_outDataCore$FULL_N &&
	     !bram_serverAdapterB_outData_deqCalled$whas &&
	     bram_serverAdapterB_outData_enqData$whas ;
  assign bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_bram_serverAdapterB_outData_enqAndDeq ||
	     bram_serverAdapterB_outDataCore$EMPTY_N &&
	     bram_serverAdapterB_outData_deqCalled$whas &&
	     !bram_serverAdapterB_outData_enqData$whas ;
  assign bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule edp_inF
  assign edp_inF$D_IN =
	     { CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q354,
	       server_request_put[7:0] } ;
  assign edp_inF$CLR = 1'b0 ;
  assign edp_inF$DEQ = 1'b0 ;
  assign edp_inF$ENQ = EN_server_request_put ;

  // submodule edp_outF
  assign edp_outF$D_IN =
	     { CASE_edp_dgdpTx_vec_BITS_9_TO_8_3_0_edp_dgdpTx_ETC__q97,
	       edp_dgdpTx_vec[7:0] } ;
  assign edp_outF$CLR = 1'b0 ;
  assign edp_outF$DEQ = EN_server_response_get ;
  assign edp_outF$ENQ = edp_dgdpTx_delta_deq$whas ;

  // submodule edp_tailEventF
  assign edp_tailEventF$D_IN = 1'd0 ;
  assign edp_tailEventF$ENQ =
	     WILL_FIRE_RL_edp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_edp_dmaXmtTailEvent ;
  assign edp_tailEventF$DEQ = MUX_edp_fabMeta$write_1__SEL_1 ;
  assign edp_tailEventF$CLR = 1'b0 ;

  // submodule edp_tlpBRAM_mReqF
  assign edp_tlpBRAM_mReqF$D_IN =
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ?
	       MUX_edp_tlpBRAM_mReqF$enq_1__VAL_1 :
	       MUX_edp_tlpBRAM_mReqF$enq_1__VAL_2 ;
  assign edp_tlpBRAM_mReqF$ENQ =
	     WILL_FIRE_RL_edp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_edp_dmaPushRequestMesg ;
  assign edp_tlpBRAM_mReqF$DEQ =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq &&
	     edp_tlpBRAM_mReqF$D_OUT[28:19] == 10'd1 &&
	     !edp_tlpBRAM_mReqF$D_OUT[60] ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextReq &&
	     edp_tlpBRAM_readRemainDWLen_46_ULE_4___d847 ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeData ||
	     WILL_FIRE_RL_edp_tlpBRAM_writeReq ;
  assign edp_tlpBRAM_mReqF$CLR = 1'b0 ;

  // submodule edp_tlpBRAM_mRespF
  assign edp_tlpBRAM_mRespF$D_IN =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp ?
	       MUX_edp_tlpBRAM_mRespF$enq_1__VAL_1 :
	       MUX_edp_tlpBRAM_mRespF$enq_1__VAL_2 ;
  assign edp_tlpBRAM_mRespF$ENQ =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp ;
  assign edp_tlpBRAM_mRespF$DEQ =
	     WILL_FIRE_RL_edp_dmaPushResponseBody ||
	     WILL_FIRE_RL_edp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_edp_dmaResponseNearMetaHead ;
  assign edp_tlpBRAM_mRespF$CLR = 1'b0 ;

  // submodule edp_tlpBRAM_readReq
  assign edp_tlpBRAM_readReq$D_IN = edp_tlpBRAM_mReqF$D_OUT[60:0] ;
  assign edp_tlpBRAM_readReq$ENQ = WILL_FIRE_RL_edp_tlpBRAM_read_FirstReq ;
  assign edp_tlpBRAM_readReq$DEQ =
	     WILL_FIRE_RL_edp_tlpBRAM_read_FirstResp &&
	     edp_tlpBRAM_readReq$D_OUT[28:19] == 10'd1 &&
	     !edp_tlpBRAM_readReq$D_OUT[60] ||
	     WILL_FIRE_RL_edp_tlpBRAM_read_NextResp &&
	     edp_tlpBRAM_rdRespDwRemain_024_ULE_4___d1026 ;
  assign edp_tlpBRAM_readReq$CLR = 1'b0 ;

  // submodule wci_reqF
  assign wci_reqF$D_IN = wci_wciReq$wget ;
  assign wci_reqF$ENQ = wci_wciReq$wget[71:69] != 3'd0 ;
  assign wci_reqF$DEQ = wci_reqF_r_deq$whas ;
  assign wci_reqF$CLR = 1'b0 ;

  // submodule wmi_wmi_dhF
  assign wmi_wmi_dhF$D_IN = wmi_wmi_wmiDh$wget ;
  assign wmi_wmi_dhF$ENQ = MUX_wmi_wmi_dhF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_dhF$DEQ = WILL_FIRE_RL_wmi_doWriteReq ;
  assign wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule wmi_wmi_mFlagF
  assign wmi_wmi_mFlagF$D_IN = wmiS0_arg_mFlag ;
  assign wmi_wmi_mFlagF$ENQ = MUX_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_mFlagF$DEQ = WILL_FIRE_RL_wmi_doWriteFinalize ;
  assign wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule wmi_wmi_reqF
  assign wmi_wmi_reqF$D_IN = wmi_wmi_wmiReq$wget ;
  assign wmi_wmi_reqF$ENQ = MUX_wmi_wmi_reqF_levelsValid$write_1__SEL_2 ;
  assign wmi_wmi_reqF$DEQ = WILL_FIRE_RL_wmi_getRequest ;
  assign wmi_wmi_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d708 =
	     (IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685 ||
	      bram_serverAdapterA_1_cnt_44_SLT_3___d6784) &&
	     (IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695 ||
	      bram_serverAdapterA_2_cnt_62_SLT_3___d6785) &&
	     (IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705 ||
	      bram_serverAdapterA_3_cnt_80_SLT_3___d6786) ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2351 =
	     { CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q122,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q123,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q124,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q125,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2423 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2351,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q130,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q131,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2495 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2423,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q136,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q137,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2567 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2495,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q142,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q143,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2639 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2567,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q148,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q149,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2711 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2639,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q154,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q155,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2783 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2711,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q160,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q161,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2855 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2783,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q166,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q167,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2927 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2855,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q172,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q173,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2999 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2927,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q178,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q179,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3071 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d2999,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q184,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q185,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3143 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3071,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q190,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q191,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3215 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3143,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q196,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q197,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3287 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3215,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q202,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q203,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3359 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3287,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q208,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q209,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3431 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3359,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q214,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q215,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3503 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3431,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q220,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q221,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3575 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3503,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q226,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q227,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3647 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3575,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q232,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q233,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3719 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3647,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q238,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q239,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3791 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3719,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q244,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q245,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3863 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3791,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q250,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q251,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3935 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3863,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q256,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q257,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4007 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d3935,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q262,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q263,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4079 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4007,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q268,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q269,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4151 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4079,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q274,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q275,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4223 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4151,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q280,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q281,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4295 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4223,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q286,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q287,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4367 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4295,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q292,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q293,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4439 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4367,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q298,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q299,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4511 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4439,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q304,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q305,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4583 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4511,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q310,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q311,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4655 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4583,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q316,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q317,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4727 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4655,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q322,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q323,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4799 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4727,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q328,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q329,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4871 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4799,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q334,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q335,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4943 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4871,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q340,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q341,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852[7:0] } ;
  assign IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d5015 =
	     { IF_IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_ETC___d4943,
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q346,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853[7:0],
	       CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q347,
	       IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854[7:0] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[9:8] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[7:0] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q350,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[7:0] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q351,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[7:0] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[799:798] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[797:790] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q114,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[797:790] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q115,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[797:790] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[789:788] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[787:780] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q116,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[787:780] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q117,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[787:780] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[779:778] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[777:770] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q118,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[777:770] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q119,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[777:770] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[769:768] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[767:760] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q120,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[767:760] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q121,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[767:760] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[759:758] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[757:750] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q126,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[757:750] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q127,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[757:750] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[749:748] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[747:740] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q128,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[747:740] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q129,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[747:740] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[739:738] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[737:730] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q132,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[737:730] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q133,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[737:730] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[729:728] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[727:720] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q134,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[727:720] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q135,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[727:720] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[709:708] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[707:700] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q140,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[707:700] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q141,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[707:700] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[719:718] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[717:710] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q138,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[717:710] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q139,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[717:710] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[699:698] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[697:690] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q144,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[697:690] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q145,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[697:690] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[689:688] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[687:680] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q146,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[687:680] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q147,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[687:680] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[679:678] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[677:670] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q150,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[677:670] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q151,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[677:670] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[669:668] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[667:660] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q152,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[667:660] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q153,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[667:660] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[659:658] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[657:650] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q156,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[657:650] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q157,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[657:650] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[649:648] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[647:640] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q158,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[647:640] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q159,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[647:640] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[639:638] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[637:630] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q162,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[637:630] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q163,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[637:630] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[629:628] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[627:620] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q164,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[627:620] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q165,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[627:620] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[619:618] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[617:610] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q168,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[617:610] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q169,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[617:610] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[609:608] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[607:600] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q170,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[607:600] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q171,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[607:600] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[599:598] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[597:590] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q174,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[597:590] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q175,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[597:590] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[589:588] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[587:580] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q176,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[587:580] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q177,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[587:580] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[579:578] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[577:570] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q180,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[577:570] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q181,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[577:570] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[559:558] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[557:550] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q186,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[557:550] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q187,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[557:550] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[569:568] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[567:560] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q182,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[567:560] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q183,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[567:560] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[549:548] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[547:540] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q188,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[547:540] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q189,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[547:540] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[539:538] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[537:530] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q192,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[537:530] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q193,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[537:530] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[529:528] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[527:520] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q194,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[527:520] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q195,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[527:520] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[519:518] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[517:510] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q198,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[517:510] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q199,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[517:510] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[509:508] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[507:500] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q200,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[507:500] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q201,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[507:500] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[499:498] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[497:490] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q204,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[497:490] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q205,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[497:490] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[489:488] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[487:480] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q206,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[487:480] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q207,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[487:480] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[479:478] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[477:470] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q210,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[477:470] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q211,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[477:470] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[469:468] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[467:460] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q212,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[467:460] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q213,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[467:460] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[459:458] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[457:450] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q216,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[457:450] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q217,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[457:450] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[449:448] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[447:440] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q218,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[447:440] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q219,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[447:440] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[439:438] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[437:430] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q222,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[437:430] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q223,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[437:430] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[429:428] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[427:420] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q224,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[427:420] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q225,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[427:420] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[409:408] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[407:400] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q230,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[407:400] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q231,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[407:400] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[419:418] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[417:410] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q228,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[417:410] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q229,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[417:410] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[399:398] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[397:390] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q234,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[397:390] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q235,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[397:390] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[389:388] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[387:380] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q236,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[387:380] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q237,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[387:380] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[379:378] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[377:370] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q240,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[377:370] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q241,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[377:370] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[369:368] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[367:360] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q242,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[367:360] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q243,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[367:360] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[359:358] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[357:350] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q246,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[357:350] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q247,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[357:350] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[349:348] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[347:340] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q248,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[347:340] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q249,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[347:340] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[339:338] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[337:330] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q252,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[337:330] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q253,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[337:330] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[329:328] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[327:320] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q254,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[327:320] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q255,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[327:320] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[319:318] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[317:310] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q258,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[317:310] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q259,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[317:310] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[309:308] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[307:300] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q260,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[307:300] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q261,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[307:300] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[299:298] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[297:290] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q264,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[297:290] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q265,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[297:290] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[289:288] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[287:280] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q266,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[287:280] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q267,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[287:280] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[279:278] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[277:270] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q270,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[277:270] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q271,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[277:270] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[269:268] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[267:260] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q272,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[267:260] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q273,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[267:260] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[259:258] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[257:250] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q276,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[257:250] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q277,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[257:250] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[249:248] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[247:240] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q278,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[247:240] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q279,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[247:240] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[239:238] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[237:230] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q282,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[237:230] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q283,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[237:230] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[229:228] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[227:220] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q284,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[227:220] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q285,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[227:220] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[219:218] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[217:210] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q288,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[217:210] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q289,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[217:210] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[209:208] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[207:200] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q290,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[207:200] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q291,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[207:200] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[199:198] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[197:190] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q294,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[197:190] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q295,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[197:190] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[189:188] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[187:180] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q296,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[187:180] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q297,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[187:180] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[179:178] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[177:170] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q300,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[177:170] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q301,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[177:170] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[169:168] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[167:160] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q302,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[167:160] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q303,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[167:160] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[159:158] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[157:150] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q306,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[157:150] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q307,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[157:150] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[149:148] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[147:140] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q308,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[147:140] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q309,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[147:140] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[139:138] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[137:130] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q312,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[137:130] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q313,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[137:130] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[129:128] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[127:120] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q314,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[127:120] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q315,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[127:120] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[119:118] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[117:110] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q318,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[117:110] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q319,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[117:110] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[99:98] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[97:90] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q324,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[97:90] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q325,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[97:90] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[109:108] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[107:100] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q320,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[107:100] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q321,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[107:100] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[89:88] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[87:80] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q326,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[87:80] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q327,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[87:80] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[79:78] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[77:70] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q330,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[77:70] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q331,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[77:70] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[69:68] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[67:60] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q332,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[67:60] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q333,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[67:60] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[59:58] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[57:50] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q336,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[57:50] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q337,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[57:50] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[49:48] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[47:40] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q338,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[47:40] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q339,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[47:40] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[39:38] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[37:30] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q342,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[37:30] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q343,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[37:30] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[29:28] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[27:20] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q344,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[27:20] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q345,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[27:20] } ;
  assign IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855 =
	     ((!edp_dgdpTx_new_data$whas ||
	       _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[19:18] ==
	       2'd0) ?
		{ 2'd0,
		  edp_dgdpTx_new_data$whas ?
		    _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[17:10] :
		    8'd0 } :
		{ CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q348,
		  _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[17:10] }) |
	     { CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q349,
	       IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[17:10] } ;
  assign IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 =
	     edp_dgdpTx_delta_enq$whas ? edp_dgdpTx_delta_enq$wget : 5'd0 ;
  assign IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782 =
	     { CASE_edp_dgdpTx_vec_BITS_799_TO_798_3_0_edp_dg_ETC__q18,
	       edp_dgdpTx_vec[797:790],
	       CASE_edp_dgdpTx_vec_BITS_789_TO_788_3_0_edp_dg_ETC__q19,
	       edp_dgdpTx_vec[787:780],
	       CASE_edp_dgdpTx_vec_BITS_779_TO_778_3_0_edp_dg_ETC__q20,
	       edp_dgdpTx_vec[777:770],
	       CASE_edp_dgdpTx_vec_BITS_769_TO_768_3_0_edp_dg_ETC__q21,
	       edp_dgdpTx_vec[767:760],
	       CASE_edp_dgdpTx_vec_BITS_759_TO_758_3_0_edp_dg_ETC__q22,
	       edp_dgdpTx_vec[757:750],
	       CASE_edp_dgdpTx_vec_BITS_749_TO_748_3_0_edp_dg_ETC__q23,
	       edp_dgdpTx_vec[747:740],
	       CASE_edp_dgdpTx_vec_BITS_739_TO_738_3_0_edp_dg_ETC__q24,
	       edp_dgdpTx_vec[737:730],
	       CASE_edp_dgdpTx_vec_BITS_729_TO_728_3_0_edp_dg_ETC__q25,
	       edp_dgdpTx_vec[727:720],
	       CASE_edp_dgdpTx_vec_BITS_719_TO_718_3_0_edp_dg_ETC__q26,
	       edp_dgdpTx_vec[717:710],
	       CASE_edp_dgdpTx_vec_BITS_709_TO_708_3_0_edp_dg_ETC__q27,
	       edp_dgdpTx_vec[707:700],
	       CASE_edp_dgdpTx_vec_BITS_699_TO_698_3_0_edp_dg_ETC__q28,
	       edp_dgdpTx_vec[697:690],
	       CASE_edp_dgdpTx_vec_BITS_689_TO_688_3_0_edp_dg_ETC__q29,
	       edp_dgdpTx_vec[687:680],
	       CASE_edp_dgdpTx_vec_BITS_679_TO_678_3_0_edp_dg_ETC__q30,
	       edp_dgdpTx_vec[677:670],
	       CASE_edp_dgdpTx_vec_BITS_669_TO_668_3_0_edp_dg_ETC__q31,
	       edp_dgdpTx_vec[667:660],
	       CASE_edp_dgdpTx_vec_BITS_659_TO_658_3_0_edp_dg_ETC__q32,
	       edp_dgdpTx_vec[657:650],
	       CASE_edp_dgdpTx_vec_BITS_649_TO_648_3_0_edp_dg_ETC__q33,
	       edp_dgdpTx_vec[647:640],
	       CASE_edp_dgdpTx_vec_BITS_639_TO_638_3_0_edp_dg_ETC__q34,
	       edp_dgdpTx_vec[637:630],
	       CASE_edp_dgdpTx_vec_BITS_629_TO_628_3_0_edp_dg_ETC__q35,
	       edp_dgdpTx_vec[627:620],
	       CASE_edp_dgdpTx_vec_BITS_619_TO_618_3_0_edp_dg_ETC__q36,
	       edp_dgdpTx_vec[617:610],
	       CASE_edp_dgdpTx_vec_BITS_609_TO_608_3_0_edp_dg_ETC__q37,
	       edp_dgdpTx_vec[607:600],
	       CASE_edp_dgdpTx_vec_BITS_599_TO_598_3_0_edp_dg_ETC__q38,
	       edp_dgdpTx_vec[597:590],
	       CASE_edp_dgdpTx_vec_BITS_589_TO_588_3_0_edp_dg_ETC__q39,
	       edp_dgdpTx_vec[587:580],
	       CASE_edp_dgdpTx_vec_BITS_579_TO_578_3_0_edp_dg_ETC__q40,
	       edp_dgdpTx_vec[577:570],
	       CASE_edp_dgdpTx_vec_BITS_569_TO_568_3_0_edp_dg_ETC__q41,
	       edp_dgdpTx_vec[567:560],
	       CASE_edp_dgdpTx_vec_BITS_559_TO_558_3_0_edp_dg_ETC__q42,
	       edp_dgdpTx_vec[557:550],
	       CASE_edp_dgdpTx_vec_BITS_549_TO_548_3_0_edp_dg_ETC__q43,
	       edp_dgdpTx_vec[547:540],
	       CASE_edp_dgdpTx_vec_BITS_539_TO_538_3_0_edp_dg_ETC__q44,
	       edp_dgdpTx_vec[537:530],
	       CASE_edp_dgdpTx_vec_BITS_529_TO_528_3_0_edp_dg_ETC__q45,
	       edp_dgdpTx_vec[527:520],
	       CASE_edp_dgdpTx_vec_BITS_519_TO_518_3_0_edp_dg_ETC__q46,
	       edp_dgdpTx_vec[517:510],
	       CASE_edp_dgdpTx_vec_BITS_509_TO_508_3_0_edp_dg_ETC__q47,
	       edp_dgdpTx_vec[507:500],
	       CASE_edp_dgdpTx_vec_BITS_499_TO_498_3_0_edp_dg_ETC__q48,
	       edp_dgdpTx_vec[497:490],
	       CASE_edp_dgdpTx_vec_BITS_489_TO_488_3_0_edp_dg_ETC__q49,
	       edp_dgdpTx_vec[487:480],
	       CASE_edp_dgdpTx_vec_BITS_479_TO_478_3_0_edp_dg_ETC__q50,
	       edp_dgdpTx_vec[477:470],
	       CASE_edp_dgdpTx_vec_BITS_469_TO_468_3_0_edp_dg_ETC__q51,
	       edp_dgdpTx_vec[467:460],
	       CASE_edp_dgdpTx_vec_BITS_459_TO_458_3_0_edp_dg_ETC__q52,
	       edp_dgdpTx_vec[457:450],
	       CASE_edp_dgdpTx_vec_BITS_449_TO_448_3_0_edp_dg_ETC__q53,
	       edp_dgdpTx_vec[447:440],
	       CASE_edp_dgdpTx_vec_BITS_439_TO_438_3_0_edp_dg_ETC__q54,
	       edp_dgdpTx_vec[437:430],
	       CASE_edp_dgdpTx_vec_BITS_429_TO_428_3_0_edp_dg_ETC__q55,
	       edp_dgdpTx_vec[427:420],
	       CASE_edp_dgdpTx_vec_BITS_419_TO_418_3_0_edp_dg_ETC__q56,
	       edp_dgdpTx_vec[417:410],
	       CASE_edp_dgdpTx_vec_BITS_409_TO_408_3_0_edp_dg_ETC__q57,
	       edp_dgdpTx_vec[407:400],
	       CASE_edp_dgdpTx_vec_BITS_399_TO_398_3_0_edp_dg_ETC__q58,
	       edp_dgdpTx_vec[397:390],
	       CASE_edp_dgdpTx_vec_BITS_389_TO_388_3_0_edp_dg_ETC__q59,
	       edp_dgdpTx_vec[387:380],
	       CASE_edp_dgdpTx_vec_BITS_379_TO_378_3_0_edp_dg_ETC__q60,
	       edp_dgdpTx_vec[377:370],
	       CASE_edp_dgdpTx_vec_BITS_369_TO_368_3_0_edp_dg_ETC__q61,
	       edp_dgdpTx_vec[367:360],
	       CASE_edp_dgdpTx_vec_BITS_359_TO_358_3_0_edp_dg_ETC__q62,
	       edp_dgdpTx_vec[357:350],
	       CASE_edp_dgdpTx_vec_BITS_349_TO_348_3_0_edp_dg_ETC__q63,
	       edp_dgdpTx_vec[347:340],
	       CASE_edp_dgdpTx_vec_BITS_339_TO_338_3_0_edp_dg_ETC__q64,
	       edp_dgdpTx_vec[337:330],
	       CASE_edp_dgdpTx_vec_BITS_329_TO_328_3_0_edp_dg_ETC__q65,
	       edp_dgdpTx_vec[327:320],
	       CASE_edp_dgdpTx_vec_BITS_319_TO_318_3_0_edp_dg_ETC__q66,
	       edp_dgdpTx_vec[317:310],
	       CASE_edp_dgdpTx_vec_BITS_309_TO_308_3_0_edp_dg_ETC__q67,
	       edp_dgdpTx_vec[307:300],
	       CASE_edp_dgdpTx_vec_BITS_299_TO_298_3_0_edp_dg_ETC__q68,
	       edp_dgdpTx_vec[297:290],
	       CASE_edp_dgdpTx_vec_BITS_289_TO_288_3_0_edp_dg_ETC__q69,
	       edp_dgdpTx_vec[287:280],
	       CASE_edp_dgdpTx_vec_BITS_279_TO_278_3_0_edp_dg_ETC__q70,
	       edp_dgdpTx_vec[277:270],
	       CASE_edp_dgdpTx_vec_BITS_269_TO_268_3_0_edp_dg_ETC__q71,
	       edp_dgdpTx_vec[267:260],
	       CASE_edp_dgdpTx_vec_BITS_259_TO_258_3_0_edp_dg_ETC__q72,
	       edp_dgdpTx_vec[257:250],
	       CASE_edp_dgdpTx_vec_BITS_249_TO_248_3_0_edp_dg_ETC__q73,
	       edp_dgdpTx_vec[247:240],
	       CASE_edp_dgdpTx_vec_BITS_239_TO_238_3_0_edp_dg_ETC__q74,
	       edp_dgdpTx_vec[237:230],
	       CASE_edp_dgdpTx_vec_BITS_229_TO_228_3_0_edp_dg_ETC__q75,
	       edp_dgdpTx_vec[227:220],
	       CASE_edp_dgdpTx_vec_BITS_219_TO_218_3_0_edp_dg_ETC__q76,
	       edp_dgdpTx_vec[217:210],
	       CASE_edp_dgdpTx_vec_BITS_209_TO_208_3_0_edp_dg_ETC__q77,
	       edp_dgdpTx_vec[207:200],
	       CASE_edp_dgdpTx_vec_BITS_199_TO_198_3_0_edp_dg_ETC__q78,
	       edp_dgdpTx_vec[197:190],
	       CASE_edp_dgdpTx_vec_BITS_189_TO_188_3_0_edp_dg_ETC__q79,
	       edp_dgdpTx_vec[187:180],
	       CASE_edp_dgdpTx_vec_BITS_179_TO_178_3_0_edp_dg_ETC__q80,
	       edp_dgdpTx_vec[177:170],
	       CASE_edp_dgdpTx_vec_BITS_169_TO_168_3_0_edp_dg_ETC__q81,
	       edp_dgdpTx_vec[167:160],
	       CASE_edp_dgdpTx_vec_BITS_159_TO_158_3_0_edp_dg_ETC__q82,
	       edp_dgdpTx_vec[157:150],
	       CASE_edp_dgdpTx_vec_BITS_149_TO_148_3_0_edp_dg_ETC__q83,
	       edp_dgdpTx_vec[147:140],
	       CASE_edp_dgdpTx_vec_BITS_139_TO_138_3_0_edp_dg_ETC__q84,
	       edp_dgdpTx_vec[137:130],
	       CASE_edp_dgdpTx_vec_BITS_129_TO_128_3_0_edp_dg_ETC__q85,
	       edp_dgdpTx_vec[127:120],
	       CASE_edp_dgdpTx_vec_BITS_119_TO_118_3_0_edp_dg_ETC__q86,
	       edp_dgdpTx_vec[117:110],
	       CASE_edp_dgdpTx_vec_BITS_109_TO_108_3_0_edp_dg_ETC__q87,
	       edp_dgdpTx_vec[107:100],
	       CASE_edp_dgdpTx_vec_BITS_99_TO_98_3_0_edp_dgdp_ETC__q88,
	       edp_dgdpTx_vec[97:90],
	       CASE_edp_dgdpTx_vec_BITS_89_TO_88_3_0_edp_dgdp_ETC__q89,
	       edp_dgdpTx_vec[87:80],
	       CASE_edp_dgdpTx_vec_BITS_79_TO_78_3_0_edp_dgdp_ETC__q90,
	       edp_dgdpTx_vec[77:70],
	       CASE_edp_dgdpTx_vec_BITS_69_TO_68_3_0_edp_dgdp_ETC__q91,
	       edp_dgdpTx_vec[67:60],
	       CASE_edp_dgdpTx_vec_BITS_59_TO_58_3_0_edp_dgdp_ETC__q92,
	       edp_dgdpTx_vec[57:50],
	       CASE_edp_dgdpTx_vec_BITS_49_TO_48_3_0_edp_dgdp_ETC__q93,
	       edp_dgdpTx_vec[47:40],
	       CASE_edp_dgdpTx_vec_BITS_39_TO_38_3_0_edp_dgdp_ETC__q94,
	       edp_dgdpTx_vec[37:30],
	       CASE_edp_dgdpTx_vec_BITS_29_TO_28_3_0_edp_dgdp_ETC__q95,
	       edp_dgdpTx_vec[27:20],
	       CASE_edp_dgdpTx_vec_BITS_19_TO_18_3_0_edp_dgdp_ETC__q96,
	       edp_dgdpTx_vec[17:10],
	       CASE_edp_dgdpTx_vec_BITS_9_TO_8_3_0_edp_dgdpTx_ETC__q97,
	       edp_dgdpTx_vec[7:0] } >>
	     _10_MUL_0_CONCAT_edp_dgdpTx_delta_deq_whas__075_ETC___d2219[5:0] ;
  assign IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1037 =
	     edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_99_ETC___d6277[0] ?
	       { bram_serverAdapterA_3_outData_outData$wget[7:0],
		 bram_serverAdapterA_3_outData_outData$wget[15:8],
		 bram_serverAdapterA_3_outData_outData$wget[23:16],
		 bram_serverAdapterA_3_outData_outData$wget[31:24],
		 bram_serverAdapterA_outData_outData$wget[7:0],
		 bram_serverAdapterA_outData_outData$wget[15:8],
		 bram_serverAdapterA_outData_outData$wget[23:16],
		 bram_serverAdapterA_outData_outData$wget[31:24],
		 bram_serverAdapterA_1_outData_outData$wget[7:0],
		 bram_serverAdapterA_1_outData_outData$wget[15:8],
		 bram_serverAdapterA_1_outData_outData$wget[23:16],
		 bram_serverAdapterA_1_outData_outData$wget[31:24],
		 bram_serverAdapterA_2_outData_outData$wget[7:0],
		 bram_serverAdapterA_2_outData_outData$wget[15:8],
		 bram_serverAdapterA_2_outData_outData$wget[23:16],
		 bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { bram_serverAdapterA_2_outData_outData$wget[7:0],
		 bram_serverAdapterA_2_outData_outData$wget[15:8],
		 bram_serverAdapterA_2_outData_outData$wget[23:16],
		 bram_serverAdapterA_2_outData_outData$wget[31:24],
		 bram_serverAdapterA_3_outData_outData$wget[7:0],
		 bram_serverAdapterA_3_outData_outData$wget[15:8],
		 bram_serverAdapterA_3_outData_outData$wget[23:16],
		 bram_serverAdapterA_3_outData_outData$wget[31:24],
		 bram_serverAdapterA_outData_outData$wget[7:0],
		 bram_serverAdapterA_outData_outData$wget[15:8],
		 bram_serverAdapterA_outData_outData$wget[23:16],
		 bram_serverAdapterA_outData_outData$wget[31:24],
		 bram_serverAdapterA_1_outData_outData$wget[7:0],
		 bram_serverAdapterA_1_outData_outData$wget[15:8],
		 bram_serverAdapterA_1_outData_outData$wget[23:16],
		 bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1042 =
	     edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_99_ETC___d6277[0] ?
	       { bram_serverAdapterA_1_outData_outData$wget[7:0],
		 bram_serverAdapterA_1_outData_outData$wget[15:8],
		 bram_serverAdapterA_1_outData_outData$wget[23:16],
		 bram_serverAdapterA_1_outData_outData$wget[31:24],
		 bram_serverAdapterA_2_outData_outData$wget[7:0],
		 bram_serverAdapterA_2_outData_outData$wget[15:8],
		 bram_serverAdapterA_2_outData_outData$wget[23:16],
		 bram_serverAdapterA_2_outData_outData$wget[31:24],
		 bram_serverAdapterA_3_outData_outData$wget[7:0],
		 bram_serverAdapterA_3_outData_outData$wget[15:8],
		 bram_serverAdapterA_3_outData_outData$wget[23:16],
		 bram_serverAdapterA_3_outData_outData$wget[31:24],
		 bram_serverAdapterA_outData_outData$wget[7:0],
		 bram_serverAdapterA_outData_outData$wget[15:8],
		 bram_serverAdapterA_outData_outData$wget[23:16],
		 bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { bram_serverAdapterA_outData_outData$wget[7:0],
		 bram_serverAdapterA_outData_outData$wget[15:8],
		 bram_serverAdapterA_outData_outData$wget[23:16],
		 bram_serverAdapterA_outData_outData$wget[31:24],
		 bram_serverAdapterA_1_outData_outData$wget[7:0],
		 bram_serverAdapterA_1_outData_outData$wget[15:8],
		 bram_serverAdapterA_1_outData_outData$wget[23:16],
		 bram_serverAdapterA_1_outData_outData$wget[31:24],
		 bram_serverAdapterA_2_outData_outData$wget[7:0],
		 bram_serverAdapterA_2_outData_outData$wget[15:8],
		 bram_serverAdapterA_2_outData_outData$wget[23:16],
		 bram_serverAdapterA_2_outData_outData$wget[31:24],
		 bram_serverAdapterA_3_outData_outData$wget[7:0],
		 bram_serverAdapterA_3_outData_outData$wget[15:8],
		 bram_serverAdapterA_3_outData_outData$wget[23:16],
		 bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d921 =
	     IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912 &&
	     CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16 ;
  assign IF_wmi_p4B_734_EQ_0_735_THEN_bram_serverAdapte_ETC___d5748 =
	     (wmi_p4B == 2'd0) ?
	       (bram_serverAdapterB_outDataCore$EMPTY_N ||
		bram_serverAdapterB_outData_enqData$whas) &&
	       bram_serverAdapterB_outData_outData$whas :
	       IF_wmi_p4B_734_EQ_1_737_THEN_bram_serverAdapte_ETC___d5743 &&
	       CASE_wmi_p4B_NOT_wmi_p4B_EQ_3_OR_bram_serverAd_ETC__q17 ;
  assign NOT_bml_lclBufDone_875_942_AND_IF_bml_dpContro_ETC___d5955 =
	     !bml_lclBufDone &&
	     CASE_dpControl_BITS_1_TO_0_bml_fabDone_0_bml_f_ETC__q3 ;
  assign NOT_wmi_wrActive_649_650_OR_NOT_wmi_rdActive_6_ETC___d5659 =
	     (!wmi_wrActive || !wmi_rdActive) && !wmi_wrFinalize &&
	     (wmi_mesgBufReady || wmi_mesgBusy) ;
  assign _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781 =
	     { 640'd0, x__h55201 } <<
	     _10_MUL_0_CONCAT_edp_dgdpTx_num_full_069_MINUS__ETC___d1321[11:0] ;
  assign _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0_319___d7957 =
	     { 2'd0, edp_firstMesgMH ? 8'd1 : 8'd0 } ;
  assign _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5334 =
	     { _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0_319___d7957,
	       12'd0,
	       edp_firstMesgMH ? 8'd2 : 8'd0,
	       10'd0,
	       _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0_319___d7957,
	       32'd0,
	       edp_firstMesgMH ? edp_fabFlowAddr[7:0] : 8'd0,
	       2'd0,
	       edp_firstMesgMH ? edp_fabFlowAddr[15:8] : 8'd0,
	       2'd0,
	       edp_firstMesgMH ? edp_fabFlowAddr[23:16] : edp_lastMetaV[7:0],
	       2'd0,
	       edp_firstMesgMH ?
		 edp_fabFlowAddr[31:24] :
		 edp_lastMetaV[15:8] } ;
  assign _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5340 =
	     { _0_CONCAT_IF_edp_firstMesgMH_317_THEN_1_ELSE_0__ETC___d5334,
	       2'd0,
	       edp_firstMesgMH ?
		 edp_xactionNumber[7:0] :
		 edp_fabMesgAddr[7:0],
	       2'd0,
	       edp_firstMesgMH ?
		 edp_xactionNumber[15:8] :
		 edp_fabMesgAddr[15:8] } ;
  assign _0_CONCAT_IF_edp_firstMetaMH_151_THEN_2_ELSE_0__ETC___d5181 =
	     { 22'd0,
	       edp_firstMetaMH ? 8'd2 : 8'd0,
	       12'd0,
	       edp_firstMetaMH ? 8'd1 : 8'd0,
	       32'd0,
	       edp_firstMetaMH ? edp_fabFlowAddr[7:0] : 8'd1,
	       2'd0,
	       edp_firstMetaMH ? edp_fabFlowAddr[15:8] : 8'd1,
	       2'd0,
	       edp_firstMetaMH ? edp_fabFlowAddr[23:16] : 8'd16,
	       2'd0,
	       edp_firstMetaMH ? edp_fabFlowAddr[31:24] : 8'd0,
	       2'd0,
	       edp_firstMetaMH ?
		 edp_xactionNumber[7:0] :
		 edp_fabMetaAddr[7:0],
	       2'd0,
	       edp_firstMetaMH ?
		 edp_xactionNumber[15:8] :
		 edp_fabMetaAddr[15:8] } ;
  assign _10_MUL_0_CONCAT_edp_dgdpTx_delta_deq_whas__075_ETC___d2219 =
	     6'd10 * { 5'd0, edp_dgdpTx_delta_deq$whas } ;
  assign _10_MUL_0_CONCAT_edp_dgdpTx_num_full_069_MINUS__ETC___d1321 =
	     12'd10 *
	     { 5'd0,
	       edp_dgdpTx_num_full - { 6'd0, edp_dgdpTx_delta_deq$whas } } ;
  assign ab__h10383 =
	     (MUX_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h11780 =
	     (MUX_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h1600 =
	     (MUX_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h2999 =
	     (MUX_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h4529 =
	     (MUX_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h5926 =
	     (MUX_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h7456 =
	     (MUX_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_edp_tlpBRAM_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h8853 =
	     (MUX_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign bml_crdBuf_value_833_EQ_bml_crdBuf_modulus_bw__ETC___d7513 =
	     bml_crdBuf_value == bml_crdBuf_modulus ;
  assign bml_fabBuf_value_818_EQ_bml_fabBuf_modulus_bw__ETC___d7514 =
	     bml_fabBuf_value == bml_fabBuf_modulus ;
  assign bml_fabFlowAddr_890_PLUS_bml_fabFlowSize_891___d6779 =
	     bml_fabFlowAddr + bml_fabFlowSize ;
  assign bml_lclBufDone_875_AND_IF_bml_dpControl_wget___ETC___d6396 =
	     bml_lclBufDone &&
	     CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q6 ;
  assign bml_lclBuf_value_788_EQ_bml_lclBuf_modulus_bw__ETC___d7532 =
	     bml_lclBuf_value == bml_lclBuf_modulus ;
  assign bml_remBuf_value_803_EQ_bml_remBuf_modulus_bw__ETC___d7533 =
	     bml_remBuf_value == bml_remBuf_modulus ;
  assign bram_serverAdapterA_1_cnt_44_PLUS_IF_bram_serv_ETC___d150 =
	     bram_serverAdapterA_1_cnt +
	     (bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterA_1_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterA_1_cnt_44_SLT_3___d6784 =
	     (bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterA_2_cnt_62_PLUS_IF_bram_serv_ETC___d268 =
	     bram_serverAdapterA_2_cnt +
	     (bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterA_2_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterA_2_cnt_62_SLT_3___d6785 =
	     (bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterA_2_outDataCore_notEmpty__38_ETC___d993 =
	     (bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_2_outData_enqData$whas) &&
	     (bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_3_outData_enqData$whas) &&
	     bram_serverAdapterA_outData_outData$whas &&
	     bram_serverAdapterA_1_outData_outData$whas &&
	     bram_serverAdapterA_2_outData_outData$whas &&
	     bram_serverAdapterA_3_outData_outData$whas &&
	     edp_tlpBRAM_mRespF$FULL_N ;
  assign bram_serverAdapterA_3_cnt_80_PLUS_IF_bram_serv_ETC___d386 =
	     bram_serverAdapterA_3_cnt +
	     (bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterA_3_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterA_3_cnt_80_SLT_3___d6786 =
	     (bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterA_cnt_6_PLUS_IF_bram_serverA_ETC___d32 =
	     bram_serverAdapterA_cnt +
	     (bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterA_cnt_6_SLT_3___d6783 =
	     (bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterA_outDataCore_notEmpty_OR_br_ETC___d995 =
	     (bram_serverAdapterA_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_outData_enqData$whas) &&
	     (bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_1_outData_enqData$whas) &&
	     bram_serverAdapterA_2_outDataCore_notEmpty__38_ETC___d993 ;
  assign bram_serverAdapterB_1_cnt_03_PLUS_IF_bram_serv_ETC___d209 =
	     bram_serverAdapterB_1_cnt +
	     (bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterB_1_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterB_1_cnt_03_SLT_3___d5599 =
	     (bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterB_1_outData_outData_whas__61_ETC___d5627 =
	     bram_serverAdapterB_1_outData_outData$whas &&
	     (bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_2_outData_enqData$whas) &&
	     bram_serverAdapterB_2_outData_outData$whas &&
	     (bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_3_outData_enqData$whas) &&
	     bram_serverAdapterB_3_outData_outData$whas ;
  assign bram_serverAdapterB_2_cnt_21_PLUS_IF_bram_serv_ETC___d327 =
	     bram_serverAdapterB_2_cnt +
	     (bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterB_2_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterB_2_cnt_21_SLT_3___d5600 =
	     (bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterB_3_cnt_39_PLUS_IF_bram_serv_ETC___d445 =
	     bram_serverAdapterB_3_cnt +
	     (bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterB_3_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterB_3_cnt_39_SLT_3___d5601 =
	     (bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign bram_serverAdapterB_cnt_5_PLUS_IF_bram_serverA_ETC___d91 =
	     bram_serverAdapterB_cnt +
	     (bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign bram_serverAdapterB_cnt_5_SLT_3___d5598 =
	     (bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign byteCount__h28461 = x__h28579 - y__h28580 ;
  assign edp_mesgLengthRemainPush_PLUS_3__q15 =
	     edp_mesgLengthRemainPush + 17'd3 ;
  assign edp_outDwRemain_379_ULE_4___d5381 = edp_outDwRemain <= 10'd4 ;
  assign edp_tlpBRAM_mReqF_first__18_BIT_60_02_OR_IF_ed_ETC___d813 =
	     edp_tlpBRAM_mReqF$D_OUT[60] ||
	     CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5 ;
  assign edp_tlpBRAM_mReqF_first__18_BIT_63_19_OR_IF_ed_ETC___d634 =
	     edp_tlpBRAM_mReqF$D_OUT[63] ||
	     CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4 ;
  assign edp_tlpBRAM_rdRespDwRemain_024_ULE_4___d1026 =
	     edp_tlpBRAM_rdRespDwRemain <= 10'd4 ;
  assign edp_tlpBRAM_readNxtDWAddr_PLUS_1__q12 =
	     edp_tlpBRAM_readNxtDWAddr + 13'd1 ;
  assign edp_tlpBRAM_readNxtDWAddr_PLUS_2__q13 =
	     edp_tlpBRAM_readNxtDWAddr + 13'd2 ;
  assign edp_tlpBRAM_readNxtDWAddr_PLUS_3__q11 =
	     edp_tlpBRAM_readNxtDWAddr + 13'd3 ;
  assign edp_tlpBRAM_readRemainDWLen_46_ULE_4___d847 =
	     edp_tlpBRAM_readRemainDWLen <= 10'd4 ;
  assign edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_99_ETC___d6277 =
	     edp_tlpBRAM_readReq$D_OUT[30:29] +
	     (edp_tlpBRAM_readReq$D_OUT[60] ? 2'd0 : 2'd1) ;
  assign edp_tlpBRAM_writeDWAddr_PLUS_1__q9 =
	     edp_tlpBRAM_writeDWAddr + 13'd1 ;
  assign edp_tlpBRAM_writeDWAddr_PLUS_2__q10 =
	     edp_tlpBRAM_writeDWAddr + 13'd2 ;
  assign edp_tlpBRAM_writeDWAddr_PLUS_3__q8 =
	     edp_tlpBRAM_writeDWAddr + 13'd3 ;
  assign edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 =
	     edp_tlpBRAM_writeRemainDWLen <= 10'd1 ;
  assign edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274 =
	     edp_tlpBRAM_writeRemainDWLen <= 10'd2 ;
  assign edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 =
	     edp_tlpBRAM_writeRemainDWLen <= 10'd3 ;
  assign hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5111 =
	     hasPush && dpControl[7:4] == 4'd0 && dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     !edp_reqMetaInFlight &&
	     !edp_fabMeta[128] &&
	     edp_nearBufReady &&
	     edp_farBufReady ;
  assign hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5284 =
	     hasPush && dpControl[7:4] == 4'd0 && dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_fabMeta[128] &&
	     edp_fabMeta[127:96] != 32'd0 &&
	     !edp_tlpRcvBusy &&
	     edp_mesgLengthRemainPush != 17'd0 &&
	     edp_dgdpTx_num_empty == 7'd0 ;
  assign hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5356 =
	     hasPush && dpControl[7:4] == 4'd0 && dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     !edp_tlpBRAM_mRespF$D_OUT[138] &&
	     edp_tlpBRAM_mRespF$D_OUT[89:88] == 2'd2 &&
	     !edp_tlpXmtBusy &&
	     edp_postSeqDwell == 4'd0 ;
  assign hasPush_AND_edp_dpControl_wget__091_BITS_7_TO__ETC___d5393 =
	     hasPush && dpControl[7:4] == 4'd0 && dpControl[3:2] == 2'd1 &&
	     dpControl[1:0] == 2'd1 &&
	     edp_fabMeta[128] &&
	     !edp_tlpXmtBusy &&
	     !edp_xmtMetaInFlight &&
	     edp_xmtMetaOK &&
	     edp_postSeqDwell == 4'd0 ;
  assign idx__h19087 = 2'd0 - edp_tlpBRAM_writeDWAddr[1:0] ;
  assign idx__h21318 = 2'd1 - edp_tlpBRAM_writeDWAddr[1:0] ;
  assign idx__h22622 = 2'd2 - edp_tlpBRAM_writeDWAddr[1:0] ;
  assign idx__h23926 = 2'd3 - edp_tlpBRAM_writeDWAddr[1:0] ;
  assign idx__h26318 = 2'd0 - edp_tlpBRAM_readNxtDWAddr[1:0] ;
  assign idx__h26786 = 2'd1 - edp_tlpBRAM_readNxtDWAddr[1:0] ;
  assign idx__h27159 = 2'd2 - edp_tlpBRAM_readNxtDWAddr[1:0] ;
  assign idx__h27532 = 2'd3 - edp_tlpBRAM_readNxtDWAddr[1:0] ;
  assign lowAddr__h28460 =
	     { edp_tlpBRAM_readReq$D_OUT[33:29], lowAddr10__h28459 } ;
  assign mesgMeta_opcode__h186333 =
	     { 24'h800000, wmi_wmi_mFlagF$D_OUT[31:24] } ;
  assign nowLS__h158153 =
	     { edp_tlpBRAM_mRespF$D_OUT[39:32],
	       edp_tlpBRAM_mRespF$D_OUT[47:40],
	       edp_tlpBRAM_mRespF$D_OUT[55:48],
	       edp_tlpBRAM_mRespF$D_OUT[63:56] } ;
  assign nowMS__h157210 =
	     { edp_tlpBRAM_mRespF$D_OUT[71:64],
	       edp_tlpBRAM_mRespF$D_OUT[79:72],
	       edp_tlpBRAM_mRespF$D_OUT[87:80],
	       edp_tlpBRAM_mRespF$D_OUT[95:88] } ;
  assign opcode__h155979 =
	     { edp_tlpBRAM_mRespF$D_OUT[103:96],
	       edp_tlpBRAM_mRespF$D_OUT[111:104],
	       edp_tlpBRAM_mRespF$D_OUT[119:112],
	       edp_tlpBRAM_mRespF$D_OUT[127:120] } ;
  assign rdat__h195723 = { 16'd0, bml_lclNumBufs } ;
  assign rdat__h195731 = { 16'd0, bml_fabNumBufs } ;
  assign rdat__h195739 = { 16'd0, bml_mesgBase } ;
  assign rdat__h195747 = { 16'd0, bml_metaBase } ;
  assign rdat__h195755 = { 16'd0, bml_mesgSize } ;
  assign rdat__h195763 = { 16'd0, bml_metaSize } ;
  assign rdat__h195771 = { 16'd0, bml_lclBufsCF } ;
  assign rdat__h195792 =
	     hasDebugLogic ? { bml_lclBufsAR, bml_fabBufsAvail } : 32'd0 ;
  assign rdat__h195799 =
	     hasDebugLogic ? { bml_remBuf_value, bml_lclBuf_value } : 32'd0 ;
  assign rdat__h195812 =
	     hasDebugLogic ? { bml_lclStarts, bml_lclDones } : 32'd0 ;
  assign rdat__h195819 =
	     hasDebugLogic ? { bml_remStarts, bml_remDones } : 32'd0 ;
  assign rdat__h195826 = hasDebugLogic ? wmi_thisMesg : 32'd0 ;
  assign rdat__h196090 = hasDebugLogic ? wmi_lastMesg : 32'd0 ;
  assign rdat__h196140 =
	     hasDebugLogic ? { wmi_reqCount, wmi_wrtCount } : 32'd0 ;
  assign rdat__h196240 = hasDebugLogic ? 32'hDADEBABE : 32'd0 ;
  assign rdat__h196298 = { 24'd0, dpControl } ;
  assign rdat__h196320 = hasDebugLogic ? edp_flowDiagCount : 32'd0 ;
  assign rdat__h196330 =
	     hasDebugLogic ?
	       { 4'h0,
		 edp_complTimerCount,
		 12'h0,
		 CASE_edp_lastRuleFired_10_1_edp_lastRuleFired__ETC__q2 } :
	       32'd0 ;
  assign rdat__h196452 = hasDebugLogic ? edp_lastMetaV : 32'd0 ;
  assign rdat__h196572 = hasDebugLogic ? edp_lastMetaV_1 : 32'd0 ;
  assign rdat__h196601 = hasDebugLogic ? edp_lastMetaV_2 : 32'd0 ;
  assign rdat__h196630 = hasDebugLogic ? edp_lastMetaV_3 : 32'd0 ;
  assign rdat__h196659 = hasDebugLogic ? 32'hC0DE0111 : 32'd0 ;
  assign rdat__h196689 = hasDebugLogic ? dmaStartTime[31:0] : 32'd0 ;
  assign rdat__h196723 = hasDebugLogic ? dmaStartTime[63:32] : 32'd0 ;
  assign rdat__h196756 = hasDebugLogic ? dmaDoneTime[31:0] : 32'd0 ;
  assign rdat__h196790 = hasDebugLogic ? dmaDoneTime[63:32] : 32'd0 ;
  assign rdat__h196823 = hasDebugLogic ? edp_dbgBytesTxEnq : 32'd0 ;
  assign rdat__h196833 = hasDebugLogic ? edp_dbgBytesTxDeq : 32'd0 ;
  assign rdata__h33890 =
	     edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_99_ETC___d6277[1] ?
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1037 :
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d1042 ;
  assign rreq_tag__h162959 =
	     (y__h162806 == edp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h28506 =
	     { IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861[7:0],
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861[15:8],
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861[23:16],
	       IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861[31:24] } ;
  assign spanToNextPage__h162780 =
	     13'd4096 - { 1'd0, edp_srcMesgAccu[11:0] } ;
  assign thisRequestLength__h162781 =
	     (x__h162816[12:0] <= spanToNextPage__h162780) ?
	       x__h162816[12:0] :
	       spanToNextPage__h162780 ;
  assign wmi_dpControl_whas__585_AND_bram_serverAdapter_ETC___d5631 =
	     (bram_serverAdapterB_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_outData_enqData$whas) &&
	     bram_serverAdapterB_outData_outData$whas &&
	     (bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_1_outData_enqData$whas) &&
	     bram_serverAdapterB_1_outData_outData_whas__61_ETC___d5627 ;
  assign wmi_wmi_operateD_538_AND_wmi_wmi_peerIsReady_5_ETC___d5713 =
	     wmi_wmi_operateD && wmi_wmi_peerIsReady &&
	     bram_serverAdapterB_cnt_5_SLT_3___d5598 &&
	     bram_serverAdapterB_1_cnt_03_SLT_3___d5599 &&
	     bram_serverAdapterB_2_cnt_21_SLT_3___d5600 &&
	     bram_serverAdapterB_3_cnt_39_SLT_3___d5601 &&
	     wmi_wmi_mFlagF$EMPTY_N ;
  assign x3__h186293 = { 8'd0, wmi_wmi_mFlagF$D_OUT[23:0] } ;
  assign x__h154145 =
	     { edp_tlpBRAM_mRespF$D_OUT[7:0],
	       edp_tlpBRAM_mRespF$D_OUT[15:8],
	       edp_tlpBRAM_mRespF$D_OUT[23:16],
	       edp_tlpBRAM_mRespF$D_OUT[31:24] } ;
  assign x__h159156 = { 15'd0, edp_mesgLengthRemainPush } ;
  assign x__h162816 =
	     (edp_mesgLengthRemainPush <= y__h162818) ?
	       edp_mesgLengthRemainPush :
	       y__h162818 ;
  assign x__h192409 = (dpControl[1:0] == 2'd1) ? bml_fabNumBufs : 16'd0 ;
  assign x__h193533 = bml_lclBufsAR + 16'd1 ;
  assign x__h193538 = bml_lclBufsAR - 16'd1 ;
  assign x__h193645 = bml_lclBufsCF + 16'd1 ;
  assign x__h193682 = bml_lclBufsCF - 16'd1 ;
  assign x__h193760 = bml_fabBufsAvail + 16'd1 ;
  assign x__h193765 = bml_fabBufsAvail - 16'd1 ;
  assign x__h193798 = bml_lclCredit + 16'd1 ;
  assign x__h193803 = bml_lclCredit - 16'd1 ;
  assign x__h28579 = x__h28581 - y__h28582 ;
  assign x__h28581 = { edp_tlpBRAM_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h55201 =
	     { { CASE_edp_dgdpTx_new_datawget_BITS_159_TO_158__ETC__q98,
		 edp_dgdpTx_new_data$wget[157:150] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd15) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_149_TO_148__ETC__q99,
		 edp_dgdpTx_new_data$wget[147:140] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd14) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_139_TO_138__ETC__q100,
		 edp_dgdpTx_new_data$wget[137:130] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd13) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_129_TO_128__ETC__q101,
		 edp_dgdpTx_new_data$wget[127:120] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd12) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_119_TO_118__ETC__q102,
		 edp_dgdpTx_new_data$wget[117:110] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd11) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_109_TO_108__ETC__q103,
		 edp_dgdpTx_new_data$wget[107:100] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd10) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_99_TO_98_3__ETC__q104,
		 edp_dgdpTx_new_data$wget[97:90] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd9) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_89_TO_88_3__ETC__q105,
		 edp_dgdpTx_new_data$wget[87:80] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd8) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_79_TO_78_3__ETC__q106,
		 edp_dgdpTx_new_data$wget[77:70] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd7) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_69_TO_68_3__ETC__q107,
		 edp_dgdpTx_new_data$wget[67:60] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd6) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_59_TO_58_3__ETC__q108,
		 edp_dgdpTx_new_data$wget[57:50] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd5) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_49_TO_48_3__ETC__q109,
		 edp_dgdpTx_new_data$wget[47:40] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd4) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_39_TO_38_3__ETC__q110,
		 edp_dgdpTx_new_data$wget[37:30] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd3) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_29_TO_28_3__ETC__q111,
		 edp_dgdpTx_new_data$wget[27:20] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd2) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_19_TO_18_3__ETC__q112,
		 edp_dgdpTx_new_data$wget[17:10] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 <=
		 5'd1) ?
		  10'd0 :
		  10'd1023),
	       { CASE_edp_dgdpTx_new_datawget_BITS_9_TO_8_3_0__ETC__q113,
		 edp_dgdpTx_new_data$wget[7:0] } &
	       ((IF_edp_dgdpTx_delta_enq_whas__070_THEN_edp_dgd_ETC___d6273 ==
		 5'd0) ?
		  10'd0 :
		  10'd1023) } ;
  assign y__h152954 = edp_firstMetaMH ? 32'd16 : 32'd8 ;
  assign y__h162806 = { 4'd0, thisRequestLength__h162781 } ;
  assign y__h162818 = { 4'd0, edp_maxPayloadSize } ;
  assign y__h162882 = { 19'd0, thisRequestLength__h162781 } ;
  assign y__h171358 = edp_firstMesgMH ? 32'd16 : 32'd8 ;
  assign y__h171483 = (edp_fabMesgAddrMS == 32'd0) ? 10'd1 : 10'd0 ;
  assign y__h171534 = { 20'd0, edp_tlpBRAM_mRespF$D_OUT[71:62], 2'd0 } ;
  assign y__h17301 = edp_tlpBRAM_mReqF$D_OUT[63] ? 13'd0 : 13'd1 ;
  assign y__h17372 = edp_tlpBRAM_mReqF$D_OUT[63] ? 10'd0 : 10'd1 ;
  assign y__h26023 = edp_tlpBRAM_mReqF$D_OUT[60] ? 10'd0 : 10'd1 ;
  assign y__h26071 = edp_tlpBRAM_mReqF$D_OUT[60] ? 13'd0 : 13'd1 ;
  assign y__h28580 =
	     (edp_tlpBRAM_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h28611 } ;
  assign y__h28582 = { 10'd0, x__h28588 } ;
  assign y__h29521 = edp_tlpBRAM_readReq$D_OUT[60] ? 10'd0 : 10'd1 ;
  assign y_avValue__h187888 =
	     bram_serverAdapterB_outDataCore$EMPTY_N ?
	       bram_serverAdapterB_outDataCore$D_OUT :
	       bram_memory$DOB ;
  assign y_avValue__h187908 =
	     bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       bram_serverAdapterB_1_outDataCore$D_OUT :
	       bram_memory_1$DOB ;
  assign y_avValue__h187928 =
	     bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       bram_serverAdapterB_2_outDataCore$D_OUT :
	       bram_memory_2$DOB ;
  assign y_avValue__h187948 =
	     bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       bram_serverAdapterB_3_outDataCore$D_OUT :
	       bram_memory_3$DOB ;
  always@(edp_outF$D_OUT)
  begin
    case (edp_outF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_outFD_OUT_BITS_9_TO_8_3_0_edp_outFD_ETC__q1 =
	      edp_outF$D_OUT[9:8];
      2'd3: CASE_edp_outFD_OUT_BITS_9_TO_8_3_0_edp_outFD_ETC__q1 = 2'd3;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[18:15])
      4'b1100: x__h28588 = 2'b10;
      4'b1110: x__h28588 = 2'b01;
      4'b1111: x__h28588 = 2'b0;
      default: x__h28588 = 2'b11;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[14:11])
      4'b1100: x__h28611 = 2'b10;
      4'b1110: x__h28611 = 2'b01;
      4'b1111: x__h28611 = 2'b0;
      default: x__h28611 = 2'b11;
    endcase
  end
  always@(edp_lastRuleFired)
  begin
    case (edp_lastRuleFired)
      4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8, 4'd9, 4'd15:
	  CASE_edp_lastRuleFired_10_1_edp_lastRuleFired__ETC__q2 =
	      edp_lastRuleFired;
      default: CASE_edp_lastRuleFired_10_1_edp_lastRuleFired__ETC__q2 = 4'd10;
    endcase
  end
  always@(wmi_p4B or
	  y_avValue__h187948 or
	  y_avValue__h187888 or y_avValue__h187908 or y_avValue__h187928)
  begin
    case (wmi_p4B)
      2'd0: rdata__h188052 = y_avValue__h187888;
      2'd1: rdata__h188052 = y_avValue__h187908;
      2'd2: rdata__h188052 = y_avValue__h187928;
      2'd3: rdata__h188052 = y_avValue__h187948;
    endcase
  end
  always@(wci_reqF$D_OUT or
	  rdat__h195723 or
	  rdat__h195731 or
	  rdat__h195739 or
	  rdat__h195747 or
	  rdat__h195755 or
	  rdat__h195763 or
	  rdat__h195771 or
	  rdat__h195792 or
	  rdat__h195799 or
	  rdat__h195812 or
	  rdat__h195819 or
	  rdat__h195826 or
	  rdat__h196090 or
	  rdat__h196140 or
	  rdat__h196240 or
	  bml_fabMesgBase or
	  bml_fabMetaBase or
	  bml_fabMesgSize or
	  bml_fabMetaSize or
	  bml_fabFlowBase or
	  bml_fabFlowSize or
	  rdat__h196298 or
	  rdat__h196320 or
	  rdat__h196330 or
	  rdat__h196452 or
	  rdat__h196572 or
	  rdat__h196601 or
	  rdat__h196630 or
	  rdat__h196659 or
	  bml_fabMesgBaseMS or
	  bml_fabMetaBaseMS or
	  bml_fabFlowBaseMS or
	  rdat__h196689 or
	  rdat__h196723 or
	  rdat__h196756 or rdat__h196790 or rdat__h196823 or rdat__h196833)
  begin
    case (wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h195644 = rdat__h195723;
      8'h04: _theResult____h195644 = rdat__h195731;
      8'h08: _theResult____h195644 = rdat__h195739;
      8'h0C: _theResult____h195644 = rdat__h195747;
      8'h10: _theResult____h195644 = rdat__h195755;
      8'h14: _theResult____h195644 = rdat__h195763;
      8'h20: _theResult____h195644 = rdat__h195771;
      8'h24: _theResult____h195644 = 32'hF00DFACE;
      8'h28: _theResult____h195644 = rdat__h195792;
      8'h2C: _theResult____h195644 = rdat__h195799;
      8'h30: _theResult____h195644 = rdat__h195812;
      8'h34: _theResult____h195644 = rdat__h195819;
      8'h38: _theResult____h195644 = rdat__h195826;
      8'h3C: _theResult____h195644 = rdat__h196090;
      8'h40: _theResult____h195644 = rdat__h196140;
      8'h44: _theResult____h195644 = 32'd0;
      8'h48: _theResult____h195644 = rdat__h196240;
      8'h4C: _theResult____h195644 = 32'h00008000;
      8'h50: _theResult____h195644 = bml_fabMesgBase;
      8'h54: _theResult____h195644 = bml_fabMetaBase;
      8'h58: _theResult____h195644 = bml_fabMesgSize;
      8'h5C: _theResult____h195644 = bml_fabMetaSize;
      8'h60: _theResult____h195644 = bml_fabFlowBase;
      8'h64: _theResult____h195644 = bml_fabFlowSize;
      8'h68: _theResult____h195644 = rdat__h196298;
      8'h6C: _theResult____h195644 = rdat__h196320;
      8'h70: _theResult____h195644 = rdat__h196330;
      8'h80: _theResult____h195644 = rdat__h196452;
      8'h84: _theResult____h195644 = rdat__h196572;
      8'h88: _theResult____h195644 = rdat__h196601;
      8'h8C: _theResult____h195644 = rdat__h196630;
      8'h90: _theResult____h195644 = rdat__h196659;
      8'h94: _theResult____h195644 = bml_fabMesgBaseMS;
      8'h98: _theResult____h195644 = bml_fabMetaBaseMS;
      8'h9C: _theResult____h195644 = bml_fabFlowBaseMS;
      8'hA0: _theResult____h195644 = rdat__h196689;
      8'hA4: _theResult____h195644 = rdat__h196723;
      8'hA8: _theResult____h195644 = rdat__h196756;
      8'hAC: _theResult____h195644 = rdat__h196790;
      8'hB0: _theResult____h195644 = rdat__h196823;
      8'hB4: _theResult____h195644 = rdat__h196833;
      default: _theResult____h195644 = 32'd0;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h28459 = 2'b11;
      4'b1100: lowAddr10__h28459 = 2'b10;
      4'b1110: lowAddr10__h28459 = 2'b01;
      default: lowAddr10__h28459 = 2'b0;
    endcase
  end
  always@(dpControl or bml_fabDone or bml_remDone)
  begin
    case (dpControl[1:0])
      2'd0:
	  IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928 =
	      bml_fabDone;
      2'd1:
	  IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928 =
	      bml_remDone;
      default: IF_bml_dpControl_wget__851_BITS_1_TO_0_857_EQ__ETC___d5928 =
		   bml_fabDone;
    endcase
  end
  always@(dpControl or bml_fabDone or bml_remDone or bml_remStart)
  begin
    case (dpControl[1:0])
      2'd0:
	  CASE_dpControl_BITS_1_TO_0_bml_fabDone_0_bml_f_ETC__q3 =
	      bml_fabDone;
      2'd1:
	  CASE_dpControl_BITS_1_TO_0_bml_fabDone_0_bml_f_ETC__q3 =
	      (dpControl[3:2] == 2'd1) ? bml_remDone : bml_remStart;
      default: CASE_dpControl_BITS_1_TO_0_bml_fabDone_0_bml_f_ETC__q3 =
		   bml_fabDone;
    endcase
  end
  always@(idx__h19087 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h19087)
      2'd0:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675 =
	      edp_tlpBRAM_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d675 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h21318 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h21318)
      2'd0:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685 =
	      edp_tlpBRAM_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d685 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h22622 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h22622)
      2'd0:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695 =
	      edp_tlpBRAM_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d695 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h23926 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h23926)
      2'd0:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705 =
	      edp_tlpBRAM_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d705 =
	      edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(edp_tlpBRAM_mReqF$D_OUT or
	  bram_serverAdapterA_3_cnt_80_SLT_3___d6786 or
	  bram_serverAdapterA_cnt_6_SLT_3___d6783 or
	  bram_serverAdapterA_1_cnt_44_SLT_3___d6784 or
	  bram_serverAdapterA_2_cnt_62_SLT_3___d6785)
  begin
    case (edp_tlpBRAM_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4 =
	      bram_serverAdapterA_cnt_6_SLT_3___d6783;
      2'd1:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4 =
	      bram_serverAdapterA_1_cnt_44_SLT_3___d6784;
      2'd2:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4 =
	      bram_serverAdapterA_2_cnt_62_SLT_3___d6785;
      2'd3:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q4 =
	      edp_tlpBRAM_mReqF$D_OUT[51:50] != 2'd3 ||
	      bram_serverAdapterA_3_cnt_80_SLT_3___d6786;
    endcase
  end
  always@(edp_tlpBRAM_mReqF$D_OUT or
	  bram_serverAdapterA_3_cnt_80_SLT_3___d6786 or
	  bram_serverAdapterA_cnt_6_SLT_3___d6783 or
	  bram_serverAdapterA_1_cnt_44_SLT_3___d6784 or
	  bram_serverAdapterA_2_cnt_62_SLT_3___d6785)
  begin
    case (edp_tlpBRAM_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5 =
	      bram_serverAdapterA_cnt_6_SLT_3___d6783;
      2'd1:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5 =
	      bram_serverAdapterA_1_cnt_44_SLT_3___d6784;
      2'd2:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5 =
	      bram_serverAdapterA_2_cnt_62_SLT_3___d6785;
      2'd3:
	  CASE_edp_tlpBRAM_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q5 =
	      edp_tlpBRAM_mReqF$D_OUT[30:29] != 2'd3 ||
	      bram_serverAdapterA_3_cnt_80_SLT_3___d6786;
    endcase
  end
  always@(wmi_addr or
	  bram_serverAdapterB_3_cnt_39_SLT_3___d5601 or
	  bram_serverAdapterB_cnt_5_SLT_3___d5598 or
	  bram_serverAdapterB_1_cnt_03_SLT_3___d5599 or
	  bram_serverAdapterB_2_cnt_21_SLT_3___d5600)
  begin
    case (wmi_addr[3:2])
      2'd0:
	  IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 =
	      bram_serverAdapterB_cnt_5_SLT_3___d5598;
      2'd1:
	  IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 =
	      bram_serverAdapterB_1_cnt_03_SLT_3___d5599;
      2'd2:
	  IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 =
	      bram_serverAdapterB_2_cnt_21_SLT_3___d5600;
      2'd3:
	  IF_wmi_addr_677_BITS_3_TO_2_678_EQ_0_679_THEN__ETC___d7958 =
	      wmi_addr[3:2] != 2'd3 ||
	      bram_serverAdapterB_3_cnt_39_SLT_3___d5601;
    endcase
  end
  always@(dpControl or bml_fabDone or bml_remDone or bml_remStart)
  begin
    case (dpControl[1:0])
      2'd0:
	  CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q6 =
	      !bml_fabDone;
      2'd1:
	  CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q6 =
	      (dpControl[3:2] == 2'd1) ? !bml_remDone : !bml_remStart;
      default: CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q6 =
		   !bml_fabDone;
    endcase
  end
  always@(idx__h19087 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h19087)
      2'd0:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 =
	      edp_tlpBRAM_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6403 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h21318 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h21318)
      2'd0:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 =
	      edp_tlpBRAM_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6392 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h22622 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h22622)
      2'd0:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 =
	      edp_tlpBRAM_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6393 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h23926 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264 or
	  edp_tlpBRAM_writeRemainDWLen or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275 or
	  edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274)
  begin
    case (idx__h23926)
      2'd0:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 =
	      edp_tlpBRAM_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_1___d6275;
      2'd2:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_2___d6274;
      2'd3:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6404 =
	      !edp_tlpBRAM_writeRemainDWLen_62_ULE_3___d6264;
    endcase
  end
  always@(idx__h19087 or edp_tlpBRAM_mReqF$D_OUT)
  begin
    case (idx__h19087)
      2'd0:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427 =
	      edp_tlpBRAM_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427 =
	      edp_tlpBRAM_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427 =
	      edp_tlpBRAM_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6427 =
	      edp_tlpBRAM_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h21318 or edp_tlpBRAM_mReqF$D_OUT)
  begin
    case (idx__h21318)
      2'd0:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428 =
	      edp_tlpBRAM_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428 =
	      edp_tlpBRAM_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428 =
	      edp_tlpBRAM_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6428 =
	      edp_tlpBRAM_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h22622 or edp_tlpBRAM_mReqF$D_OUT)
  begin
    case (idx__h22622)
      2'd0:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429 =
	      edp_tlpBRAM_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429 =
	      edp_tlpBRAM_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429 =
	      edp_tlpBRAM_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6429 =
	      edp_tlpBRAM_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h23926 or edp_tlpBRAM_mReqF$D_OUT)
  begin
    case (idx__h23926)
      2'd0:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270 =
	      edp_tlpBRAM_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270 =
	      edp_tlpBRAM_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270 =
	      edp_tlpBRAM_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_edp_tlpBRAM_writeDWAddr_58_BITS_1_T_ETC___d6270 =
	      edp_tlpBRAM_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dpControl or bml_fabDone or bml_remDone)
  begin
    case (dpControl[1:0])
      2'd0:
	  CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q7 =
	      !bml_fabDone;
      2'd1:
	  CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q7 =
	      !bml_remDone;
      default: CASE_dpControl_BITS_1_TO_0_NOT_bml_fabDone_0_N_ETC__q7 =
		   !bml_fabDone;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT or
	  bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  bram_serverAdapterA_3_outData_enqData$whas or
	  bram_serverAdapterA_outDataCore$EMPTY_N or
	  bram_serverAdapterA_outData_enqData$whas or
	  bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  bram_serverAdapterA_1_outData_enqData$whas or
	  bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[30:29])
      2'd0:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912 =
	      bram_serverAdapterA_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_outData_enqData$whas;
      2'd1:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912 =
	      bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912 =
	      bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_2_outData_enqData$whas;
      2'd3:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d912 =
	      edp_tlpBRAM_readReq$D_OUT[30:29] != 2'd3 ||
	      bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT or
	  bram_serverAdapterA_3_outData_outData$wget or
	  bram_serverAdapterA_outData_outData$wget or
	  bram_serverAdapterA_1_outData_outData$wget or
	  bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[30:29])
      2'd0:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861 =
	      bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861 =
	      bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861 =
	      bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_edp_tlpBRAM_readReq_first__97_BITS_30_TO_29_ETC___d7861 =
	      bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(edp_tlpBRAM_readReq$D_OUT or
	  bram_serverAdapterA_3_outData_outData$whas or
	  bram_serverAdapterA_outData_outData$whas or
	  bram_serverAdapterA_1_outData_outData$whas or
	  bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (edp_tlpBRAM_readReq$D_OUT[30:29])
      2'd0:
	  CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16 =
	      bram_serverAdapterA_outData_outData$whas;
      2'd1:
	  CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16 =
	      bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16 =
	      bram_serverAdapterA_2_outData_outData$whas;
      2'd3:
	  CASE_edp_tlpBRAM_readReqD_OUT_BITS_30_TO_29_N_ETC__q16 =
	      edp_tlpBRAM_readReq$D_OUT[30:29] != 2'd3 ||
	      bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(wmi_p4B or
	  bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  bram_serverAdapterB_3_outData_enqData$whas or
	  bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  bram_serverAdapterB_1_outData_enqData$whas or
	  bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (wmi_p4B)
      2'd1:
	  IF_wmi_p4B_734_EQ_1_737_THEN_bram_serverAdapte_ETC___d5743 =
	      bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_wmi_p4B_734_EQ_1_737_THEN_bram_serverAdapte_ETC___d5743 =
	      bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_wmi_p4B_734_EQ_1_737_THEN_bram_serverAdapte_ETC___d5743 =
		   wmi_p4B != 2'd3 ||
		   bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(wmi_p4B or
	  bram_serverAdapterB_3_outData_outData$whas or
	  bram_serverAdapterB_1_outData_outData$whas or
	  bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (wmi_p4B)
      2'd1:
	  CASE_wmi_p4B_NOT_wmi_p4B_EQ_3_OR_bram_serverAd_ETC__q17 =
	      bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_wmi_p4B_NOT_wmi_p4B_EQ_3_OR_bram_serverAd_ETC__q17 =
	      bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_wmi_p4B_NOT_wmi_p4B_EQ_3_OR_bram_serverAd_ETC__q17 =
		   wmi_p4B != 2'd3 ||
		   bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[799:798])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_799_TO_798_3_0_edp_dg_ETC__q18 =
	      edp_dgdpTx_vec[799:798];
      2'd3: CASE_edp_dgdpTx_vec_BITS_799_TO_798_3_0_edp_dg_ETC__q18 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[789:788])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_789_TO_788_3_0_edp_dg_ETC__q19 =
	      edp_dgdpTx_vec[789:788];
      2'd3: CASE_edp_dgdpTx_vec_BITS_789_TO_788_3_0_edp_dg_ETC__q19 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[779:778])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_779_TO_778_3_0_edp_dg_ETC__q20 =
	      edp_dgdpTx_vec[779:778];
      2'd3: CASE_edp_dgdpTx_vec_BITS_779_TO_778_3_0_edp_dg_ETC__q20 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[769:768])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_769_TO_768_3_0_edp_dg_ETC__q21 =
	      edp_dgdpTx_vec[769:768];
      2'd3: CASE_edp_dgdpTx_vec_BITS_769_TO_768_3_0_edp_dg_ETC__q21 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[759:758])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_759_TO_758_3_0_edp_dg_ETC__q22 =
	      edp_dgdpTx_vec[759:758];
      2'd3: CASE_edp_dgdpTx_vec_BITS_759_TO_758_3_0_edp_dg_ETC__q22 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[749:748])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_749_TO_748_3_0_edp_dg_ETC__q23 =
	      edp_dgdpTx_vec[749:748];
      2'd3: CASE_edp_dgdpTx_vec_BITS_749_TO_748_3_0_edp_dg_ETC__q23 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[739:738])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_739_TO_738_3_0_edp_dg_ETC__q24 =
	      edp_dgdpTx_vec[739:738];
      2'd3: CASE_edp_dgdpTx_vec_BITS_739_TO_738_3_0_edp_dg_ETC__q24 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[729:728])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_729_TO_728_3_0_edp_dg_ETC__q25 =
	      edp_dgdpTx_vec[729:728];
      2'd3: CASE_edp_dgdpTx_vec_BITS_729_TO_728_3_0_edp_dg_ETC__q25 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[719:718])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_719_TO_718_3_0_edp_dg_ETC__q26 =
	      edp_dgdpTx_vec[719:718];
      2'd3: CASE_edp_dgdpTx_vec_BITS_719_TO_718_3_0_edp_dg_ETC__q26 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[709:708])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_709_TO_708_3_0_edp_dg_ETC__q27 =
	      edp_dgdpTx_vec[709:708];
      2'd3: CASE_edp_dgdpTx_vec_BITS_709_TO_708_3_0_edp_dg_ETC__q27 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[699:698])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_699_TO_698_3_0_edp_dg_ETC__q28 =
	      edp_dgdpTx_vec[699:698];
      2'd3: CASE_edp_dgdpTx_vec_BITS_699_TO_698_3_0_edp_dg_ETC__q28 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[689:688])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_689_TO_688_3_0_edp_dg_ETC__q29 =
	      edp_dgdpTx_vec[689:688];
      2'd3: CASE_edp_dgdpTx_vec_BITS_689_TO_688_3_0_edp_dg_ETC__q29 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[679:678])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_679_TO_678_3_0_edp_dg_ETC__q30 =
	      edp_dgdpTx_vec[679:678];
      2'd3: CASE_edp_dgdpTx_vec_BITS_679_TO_678_3_0_edp_dg_ETC__q30 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[669:668])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_669_TO_668_3_0_edp_dg_ETC__q31 =
	      edp_dgdpTx_vec[669:668];
      2'd3: CASE_edp_dgdpTx_vec_BITS_669_TO_668_3_0_edp_dg_ETC__q31 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[659:658])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_659_TO_658_3_0_edp_dg_ETC__q32 =
	      edp_dgdpTx_vec[659:658];
      2'd3: CASE_edp_dgdpTx_vec_BITS_659_TO_658_3_0_edp_dg_ETC__q32 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[649:648])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_649_TO_648_3_0_edp_dg_ETC__q33 =
	      edp_dgdpTx_vec[649:648];
      2'd3: CASE_edp_dgdpTx_vec_BITS_649_TO_648_3_0_edp_dg_ETC__q33 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[639:638])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_639_TO_638_3_0_edp_dg_ETC__q34 =
	      edp_dgdpTx_vec[639:638];
      2'd3: CASE_edp_dgdpTx_vec_BITS_639_TO_638_3_0_edp_dg_ETC__q34 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[629:628])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_629_TO_628_3_0_edp_dg_ETC__q35 =
	      edp_dgdpTx_vec[629:628];
      2'd3: CASE_edp_dgdpTx_vec_BITS_629_TO_628_3_0_edp_dg_ETC__q35 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[619:618])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_619_TO_618_3_0_edp_dg_ETC__q36 =
	      edp_dgdpTx_vec[619:618];
      2'd3: CASE_edp_dgdpTx_vec_BITS_619_TO_618_3_0_edp_dg_ETC__q36 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[609:608])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_609_TO_608_3_0_edp_dg_ETC__q37 =
	      edp_dgdpTx_vec[609:608];
      2'd3: CASE_edp_dgdpTx_vec_BITS_609_TO_608_3_0_edp_dg_ETC__q37 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[599:598])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_599_TO_598_3_0_edp_dg_ETC__q38 =
	      edp_dgdpTx_vec[599:598];
      2'd3: CASE_edp_dgdpTx_vec_BITS_599_TO_598_3_0_edp_dg_ETC__q38 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[589:588])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_589_TO_588_3_0_edp_dg_ETC__q39 =
	      edp_dgdpTx_vec[589:588];
      2'd3: CASE_edp_dgdpTx_vec_BITS_589_TO_588_3_0_edp_dg_ETC__q39 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[579:578])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_579_TO_578_3_0_edp_dg_ETC__q40 =
	      edp_dgdpTx_vec[579:578];
      2'd3: CASE_edp_dgdpTx_vec_BITS_579_TO_578_3_0_edp_dg_ETC__q40 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[569:568])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_569_TO_568_3_0_edp_dg_ETC__q41 =
	      edp_dgdpTx_vec[569:568];
      2'd3: CASE_edp_dgdpTx_vec_BITS_569_TO_568_3_0_edp_dg_ETC__q41 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[559:558])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_559_TO_558_3_0_edp_dg_ETC__q42 =
	      edp_dgdpTx_vec[559:558];
      2'd3: CASE_edp_dgdpTx_vec_BITS_559_TO_558_3_0_edp_dg_ETC__q42 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[549:548])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_549_TO_548_3_0_edp_dg_ETC__q43 =
	      edp_dgdpTx_vec[549:548];
      2'd3: CASE_edp_dgdpTx_vec_BITS_549_TO_548_3_0_edp_dg_ETC__q43 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[539:538])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_539_TO_538_3_0_edp_dg_ETC__q44 =
	      edp_dgdpTx_vec[539:538];
      2'd3: CASE_edp_dgdpTx_vec_BITS_539_TO_538_3_0_edp_dg_ETC__q44 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[529:528])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_529_TO_528_3_0_edp_dg_ETC__q45 =
	      edp_dgdpTx_vec[529:528];
      2'd3: CASE_edp_dgdpTx_vec_BITS_529_TO_528_3_0_edp_dg_ETC__q45 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[519:518])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_519_TO_518_3_0_edp_dg_ETC__q46 =
	      edp_dgdpTx_vec[519:518];
      2'd3: CASE_edp_dgdpTx_vec_BITS_519_TO_518_3_0_edp_dg_ETC__q46 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[509:508])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_509_TO_508_3_0_edp_dg_ETC__q47 =
	      edp_dgdpTx_vec[509:508];
      2'd3: CASE_edp_dgdpTx_vec_BITS_509_TO_508_3_0_edp_dg_ETC__q47 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[499:498])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_499_TO_498_3_0_edp_dg_ETC__q48 =
	      edp_dgdpTx_vec[499:498];
      2'd3: CASE_edp_dgdpTx_vec_BITS_499_TO_498_3_0_edp_dg_ETC__q48 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[489:488])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_489_TO_488_3_0_edp_dg_ETC__q49 =
	      edp_dgdpTx_vec[489:488];
      2'd3: CASE_edp_dgdpTx_vec_BITS_489_TO_488_3_0_edp_dg_ETC__q49 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[479:478])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_479_TO_478_3_0_edp_dg_ETC__q50 =
	      edp_dgdpTx_vec[479:478];
      2'd3: CASE_edp_dgdpTx_vec_BITS_479_TO_478_3_0_edp_dg_ETC__q50 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[469:468])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_469_TO_468_3_0_edp_dg_ETC__q51 =
	      edp_dgdpTx_vec[469:468];
      2'd3: CASE_edp_dgdpTx_vec_BITS_469_TO_468_3_0_edp_dg_ETC__q51 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[459:458])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_459_TO_458_3_0_edp_dg_ETC__q52 =
	      edp_dgdpTx_vec[459:458];
      2'd3: CASE_edp_dgdpTx_vec_BITS_459_TO_458_3_0_edp_dg_ETC__q52 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[449:448])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_449_TO_448_3_0_edp_dg_ETC__q53 =
	      edp_dgdpTx_vec[449:448];
      2'd3: CASE_edp_dgdpTx_vec_BITS_449_TO_448_3_0_edp_dg_ETC__q53 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[439:438])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_439_TO_438_3_0_edp_dg_ETC__q54 =
	      edp_dgdpTx_vec[439:438];
      2'd3: CASE_edp_dgdpTx_vec_BITS_439_TO_438_3_0_edp_dg_ETC__q54 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[429:428])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_429_TO_428_3_0_edp_dg_ETC__q55 =
	      edp_dgdpTx_vec[429:428];
      2'd3: CASE_edp_dgdpTx_vec_BITS_429_TO_428_3_0_edp_dg_ETC__q55 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[419:418])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_419_TO_418_3_0_edp_dg_ETC__q56 =
	      edp_dgdpTx_vec[419:418];
      2'd3: CASE_edp_dgdpTx_vec_BITS_419_TO_418_3_0_edp_dg_ETC__q56 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[409:408])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_409_TO_408_3_0_edp_dg_ETC__q57 =
	      edp_dgdpTx_vec[409:408];
      2'd3: CASE_edp_dgdpTx_vec_BITS_409_TO_408_3_0_edp_dg_ETC__q57 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[399:398])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_399_TO_398_3_0_edp_dg_ETC__q58 =
	      edp_dgdpTx_vec[399:398];
      2'd3: CASE_edp_dgdpTx_vec_BITS_399_TO_398_3_0_edp_dg_ETC__q58 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[389:388])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_389_TO_388_3_0_edp_dg_ETC__q59 =
	      edp_dgdpTx_vec[389:388];
      2'd3: CASE_edp_dgdpTx_vec_BITS_389_TO_388_3_0_edp_dg_ETC__q59 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[379:378])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_379_TO_378_3_0_edp_dg_ETC__q60 =
	      edp_dgdpTx_vec[379:378];
      2'd3: CASE_edp_dgdpTx_vec_BITS_379_TO_378_3_0_edp_dg_ETC__q60 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[369:368])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_369_TO_368_3_0_edp_dg_ETC__q61 =
	      edp_dgdpTx_vec[369:368];
      2'd3: CASE_edp_dgdpTx_vec_BITS_369_TO_368_3_0_edp_dg_ETC__q61 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[359:358])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_359_TO_358_3_0_edp_dg_ETC__q62 =
	      edp_dgdpTx_vec[359:358];
      2'd3: CASE_edp_dgdpTx_vec_BITS_359_TO_358_3_0_edp_dg_ETC__q62 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[349:348])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_349_TO_348_3_0_edp_dg_ETC__q63 =
	      edp_dgdpTx_vec[349:348];
      2'd3: CASE_edp_dgdpTx_vec_BITS_349_TO_348_3_0_edp_dg_ETC__q63 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[339:338])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_339_TO_338_3_0_edp_dg_ETC__q64 =
	      edp_dgdpTx_vec[339:338];
      2'd3: CASE_edp_dgdpTx_vec_BITS_339_TO_338_3_0_edp_dg_ETC__q64 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[329:328])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_329_TO_328_3_0_edp_dg_ETC__q65 =
	      edp_dgdpTx_vec[329:328];
      2'd3: CASE_edp_dgdpTx_vec_BITS_329_TO_328_3_0_edp_dg_ETC__q65 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[319:318])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_319_TO_318_3_0_edp_dg_ETC__q66 =
	      edp_dgdpTx_vec[319:318];
      2'd3: CASE_edp_dgdpTx_vec_BITS_319_TO_318_3_0_edp_dg_ETC__q66 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[309:308])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_309_TO_308_3_0_edp_dg_ETC__q67 =
	      edp_dgdpTx_vec[309:308];
      2'd3: CASE_edp_dgdpTx_vec_BITS_309_TO_308_3_0_edp_dg_ETC__q67 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[299:298])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_299_TO_298_3_0_edp_dg_ETC__q68 =
	      edp_dgdpTx_vec[299:298];
      2'd3: CASE_edp_dgdpTx_vec_BITS_299_TO_298_3_0_edp_dg_ETC__q68 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[289:288])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_289_TO_288_3_0_edp_dg_ETC__q69 =
	      edp_dgdpTx_vec[289:288];
      2'd3: CASE_edp_dgdpTx_vec_BITS_289_TO_288_3_0_edp_dg_ETC__q69 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[279:278])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_279_TO_278_3_0_edp_dg_ETC__q70 =
	      edp_dgdpTx_vec[279:278];
      2'd3: CASE_edp_dgdpTx_vec_BITS_279_TO_278_3_0_edp_dg_ETC__q70 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[269:268])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_269_TO_268_3_0_edp_dg_ETC__q71 =
	      edp_dgdpTx_vec[269:268];
      2'd3: CASE_edp_dgdpTx_vec_BITS_269_TO_268_3_0_edp_dg_ETC__q71 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[259:258])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_259_TO_258_3_0_edp_dg_ETC__q72 =
	      edp_dgdpTx_vec[259:258];
      2'd3: CASE_edp_dgdpTx_vec_BITS_259_TO_258_3_0_edp_dg_ETC__q72 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[249:248])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_249_TO_248_3_0_edp_dg_ETC__q73 =
	      edp_dgdpTx_vec[249:248];
      2'd3: CASE_edp_dgdpTx_vec_BITS_249_TO_248_3_0_edp_dg_ETC__q73 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[239:238])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_239_TO_238_3_0_edp_dg_ETC__q74 =
	      edp_dgdpTx_vec[239:238];
      2'd3: CASE_edp_dgdpTx_vec_BITS_239_TO_238_3_0_edp_dg_ETC__q74 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[229:228])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_229_TO_228_3_0_edp_dg_ETC__q75 =
	      edp_dgdpTx_vec[229:228];
      2'd3: CASE_edp_dgdpTx_vec_BITS_229_TO_228_3_0_edp_dg_ETC__q75 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[219:218])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_219_TO_218_3_0_edp_dg_ETC__q76 =
	      edp_dgdpTx_vec[219:218];
      2'd3: CASE_edp_dgdpTx_vec_BITS_219_TO_218_3_0_edp_dg_ETC__q76 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[209:208])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_209_TO_208_3_0_edp_dg_ETC__q77 =
	      edp_dgdpTx_vec[209:208];
      2'd3: CASE_edp_dgdpTx_vec_BITS_209_TO_208_3_0_edp_dg_ETC__q77 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[199:198])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_199_TO_198_3_0_edp_dg_ETC__q78 =
	      edp_dgdpTx_vec[199:198];
      2'd3: CASE_edp_dgdpTx_vec_BITS_199_TO_198_3_0_edp_dg_ETC__q78 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[189:188])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_189_TO_188_3_0_edp_dg_ETC__q79 =
	      edp_dgdpTx_vec[189:188];
      2'd3: CASE_edp_dgdpTx_vec_BITS_189_TO_188_3_0_edp_dg_ETC__q79 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[179:178])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_179_TO_178_3_0_edp_dg_ETC__q80 =
	      edp_dgdpTx_vec[179:178];
      2'd3: CASE_edp_dgdpTx_vec_BITS_179_TO_178_3_0_edp_dg_ETC__q80 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[169:168])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_169_TO_168_3_0_edp_dg_ETC__q81 =
	      edp_dgdpTx_vec[169:168];
      2'd3: CASE_edp_dgdpTx_vec_BITS_169_TO_168_3_0_edp_dg_ETC__q81 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[159:158])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_159_TO_158_3_0_edp_dg_ETC__q82 =
	      edp_dgdpTx_vec[159:158];
      2'd3: CASE_edp_dgdpTx_vec_BITS_159_TO_158_3_0_edp_dg_ETC__q82 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[149:148])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_149_TO_148_3_0_edp_dg_ETC__q83 =
	      edp_dgdpTx_vec[149:148];
      2'd3: CASE_edp_dgdpTx_vec_BITS_149_TO_148_3_0_edp_dg_ETC__q83 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[139:138])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_139_TO_138_3_0_edp_dg_ETC__q84 =
	      edp_dgdpTx_vec[139:138];
      2'd3: CASE_edp_dgdpTx_vec_BITS_139_TO_138_3_0_edp_dg_ETC__q84 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[129:128])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_129_TO_128_3_0_edp_dg_ETC__q85 =
	      edp_dgdpTx_vec[129:128];
      2'd3: CASE_edp_dgdpTx_vec_BITS_129_TO_128_3_0_edp_dg_ETC__q85 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[119:118])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_119_TO_118_3_0_edp_dg_ETC__q86 =
	      edp_dgdpTx_vec[119:118];
      2'd3: CASE_edp_dgdpTx_vec_BITS_119_TO_118_3_0_edp_dg_ETC__q86 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[109:108])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_109_TO_108_3_0_edp_dg_ETC__q87 =
	      edp_dgdpTx_vec[109:108];
      2'd3: CASE_edp_dgdpTx_vec_BITS_109_TO_108_3_0_edp_dg_ETC__q87 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[99:98])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_99_TO_98_3_0_edp_dgdp_ETC__q88 =
	      edp_dgdpTx_vec[99:98];
      2'd3: CASE_edp_dgdpTx_vec_BITS_99_TO_98_3_0_edp_dgdp_ETC__q88 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[89:88])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_89_TO_88_3_0_edp_dgdp_ETC__q89 =
	      edp_dgdpTx_vec[89:88];
      2'd3: CASE_edp_dgdpTx_vec_BITS_89_TO_88_3_0_edp_dgdp_ETC__q89 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_79_TO_78_3_0_edp_dgdp_ETC__q90 =
	      edp_dgdpTx_vec[79:78];
      2'd3: CASE_edp_dgdpTx_vec_BITS_79_TO_78_3_0_edp_dgdp_ETC__q90 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_69_TO_68_3_0_edp_dgdp_ETC__q91 =
	      edp_dgdpTx_vec[69:68];
      2'd3: CASE_edp_dgdpTx_vec_BITS_69_TO_68_3_0_edp_dgdp_ETC__q91 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_59_TO_58_3_0_edp_dgdp_ETC__q92 =
	      edp_dgdpTx_vec[59:58];
      2'd3: CASE_edp_dgdpTx_vec_BITS_59_TO_58_3_0_edp_dgdp_ETC__q92 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_49_TO_48_3_0_edp_dgdp_ETC__q93 =
	      edp_dgdpTx_vec[49:48];
      2'd3: CASE_edp_dgdpTx_vec_BITS_49_TO_48_3_0_edp_dgdp_ETC__q93 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_39_TO_38_3_0_edp_dgdp_ETC__q94 =
	      edp_dgdpTx_vec[39:38];
      2'd3: CASE_edp_dgdpTx_vec_BITS_39_TO_38_3_0_edp_dgdp_ETC__q94 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_29_TO_28_3_0_edp_dgdp_ETC__q95 =
	      edp_dgdpTx_vec[29:28];
      2'd3: CASE_edp_dgdpTx_vec_BITS_29_TO_28_3_0_edp_dgdp_ETC__q95 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_19_TO_18_3_0_edp_dgdp_ETC__q96 =
	      edp_dgdpTx_vec[19:18];
      2'd3: CASE_edp_dgdpTx_vec_BITS_19_TO_18_3_0_edp_dgdp_ETC__q96 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_vec)
  begin
    case (edp_dgdpTx_vec[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_vec_BITS_9_TO_8_3_0_edp_dgdpTx_ETC__q97 =
	      edp_dgdpTx_vec[9:8];
      2'd3: CASE_edp_dgdpTx_vec_BITS_9_TO_8_3_0_edp_dgdpTx_ETC__q97 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[159:158])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_159_TO_158__ETC__q98 =
	      edp_dgdpTx_new_data$wget[159:158];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_159_TO_158__ETC__q98 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[149:148])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_149_TO_148__ETC__q99 =
	      edp_dgdpTx_new_data$wget[149:148];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_149_TO_148__ETC__q99 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[139:138])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_139_TO_138__ETC__q100 =
	      edp_dgdpTx_new_data$wget[139:138];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_139_TO_138__ETC__q100 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[129:128])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_129_TO_128__ETC__q101 =
	      edp_dgdpTx_new_data$wget[129:128];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_129_TO_128__ETC__q101 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[119:118])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_119_TO_118__ETC__q102 =
	      edp_dgdpTx_new_data$wget[119:118];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_119_TO_118__ETC__q102 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[109:108])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_109_TO_108__ETC__q103 =
	      edp_dgdpTx_new_data$wget[109:108];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_109_TO_108__ETC__q103 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[99:98])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_99_TO_98_3__ETC__q104 =
	      edp_dgdpTx_new_data$wget[99:98];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_99_TO_98_3__ETC__q104 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[89:88])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_89_TO_88_3__ETC__q105 =
	      edp_dgdpTx_new_data$wget[89:88];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_89_TO_88_3__ETC__q105 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_79_TO_78_3__ETC__q106 =
	      edp_dgdpTx_new_data$wget[79:78];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_79_TO_78_3__ETC__q106 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_69_TO_68_3__ETC__q107 =
	      edp_dgdpTx_new_data$wget[69:68];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_69_TO_68_3__ETC__q107 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_59_TO_58_3__ETC__q108 =
	      edp_dgdpTx_new_data$wget[59:58];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_59_TO_58_3__ETC__q108 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_49_TO_48_3__ETC__q109 =
	      edp_dgdpTx_new_data$wget[49:48];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_49_TO_48_3__ETC__q109 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_39_TO_38_3__ETC__q110 =
	      edp_dgdpTx_new_data$wget[39:38];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_39_TO_38_3__ETC__q110 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_29_TO_28_3__ETC__q111 =
	      edp_dgdpTx_new_data$wget[29:28];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_29_TO_28_3__ETC__q111 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_19_TO_18_3__ETC__q112 =
	      edp_dgdpTx_new_data$wget[19:18];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_19_TO_18_3__ETC__q112 = 2'd3;
    endcase
  end
  always@(edp_dgdpTx_new_data$wget)
  begin
    case (edp_dgdpTx_new_data$wget[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpTx_new_datawget_BITS_9_TO_8_3_0__ETC__q113 =
	      edp_dgdpTx_new_data$wget[9:8];
      2'd3: CASE_edp_dgdpTx_new_datawget_BITS_9_TO_8_3_0__ETC__q113 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[799:798])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q114 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[799:798];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q114 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[799:798])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q115 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[799:798];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q115 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[789:788])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q116 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[789:788];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q116 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[789:788])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q117 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[789:788];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q117 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[779:778])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q118 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[779:778];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q118 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[779:778])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q119 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[779:778];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q119 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[769:768])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q120 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[769:768];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q120 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[769:768])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q121 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[769:768];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q121 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q122 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7777[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q122 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q123 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7778[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q123 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q124 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7779[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q124 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q125 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7780[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q125 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[759:758])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q126 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[759:758];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q126 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[759:758])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q127 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[759:758];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q127 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[749:748])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q128 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[749:748];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q128 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[749:748])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q129 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[749:748];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q129 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q130 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7781[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q130 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q131 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7782[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q131 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[739:738])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q132 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[739:738];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q132 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[739:738])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q133 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[739:738];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q133 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[729:728])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q134 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[729:728];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q134 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[729:728])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q135 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[729:728];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q135 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q136 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7783[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q136 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q137 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7784[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q137 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[719:718])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q138 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[719:718];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q138 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[719:718])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q139 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[719:718];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q139 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[709:708])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q140 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[709:708];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q140 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[709:708])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q141 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[709:708];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q141 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q142 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7786[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q142 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q143 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7785[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q143 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[699:698])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q144 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[699:698];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q144 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[699:698])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q145 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[699:698];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q145 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[689:688])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q146 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[689:688];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q146 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[689:688])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q147 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[689:688];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q147 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q148 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7787[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q148 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q149 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7788[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q149 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[679:678])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q150 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[679:678];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q150 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[679:678])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q151 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[679:678];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q151 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[669:668])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q152 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[669:668];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q152 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[669:668])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q153 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[669:668];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q153 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q154 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7789[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q154 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q155 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7790[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q155 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[659:658])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q156 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[659:658];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q156 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[659:658])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q157 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[659:658];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q157 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[649:648])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q158 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[649:648];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q158 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[649:648])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q159 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[649:648];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q159 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q160 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7791[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q160 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q161 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7792[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q161 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[639:638])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q162 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[639:638];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q162 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[639:638])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q163 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[639:638];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q163 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[629:628])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q164 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[629:628];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q164 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[629:628])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q165 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[629:628];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q165 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q166 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7793[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q166 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q167 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7794[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q167 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[619:618])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q168 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[619:618];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q168 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[619:618])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q169 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[619:618];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q169 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[609:608])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q170 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[609:608];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q170 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[609:608])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q171 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[609:608];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q171 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q172 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7795[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q172 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q173 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7796[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q173 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[599:598])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q174 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[599:598];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q174 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[599:598])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q175 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[599:598];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q175 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[589:588])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q176 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[589:588];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q176 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[589:588])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q177 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[589:588];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q177 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q178 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7797[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q178 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q179 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7798[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q179 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[579:578])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q180 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[579:578];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q180 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[579:578])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q181 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[579:578];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q181 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[569:568])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q182 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[569:568];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q182 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[569:568])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q183 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[569:568];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q183 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q184 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7799[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q184 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q185 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7801[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q185 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[559:558])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q186 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[559:558];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q186 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[559:558])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q187 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[559:558];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q187 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[549:548])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q188 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[549:548];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q188 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[549:548])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q189 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[549:548];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q189 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q190 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7800[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q190 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q191 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7802[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q191 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[539:538])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q192 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[539:538];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q192 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[539:538])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q193 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[539:538];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q193 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[529:528])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q194 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[529:528];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q194 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[529:528])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q195 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[529:528];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q195 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q196 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7803[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q196 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q197 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7804[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q197 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[519:518])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q198 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[519:518];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q198 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[519:518])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q199 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[519:518];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q199 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[509:508])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q200 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[509:508];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q200 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[509:508])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q201 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[509:508];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q201 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q202 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7805[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q202 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q203 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7806[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q203 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[499:498])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q204 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[499:498];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q204 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[499:498])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q205 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[499:498];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q205 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[489:488])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q206 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[489:488];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q206 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[489:488])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q207 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[489:488];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q207 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q208 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7807[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q208 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q209 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7808[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q209 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[479:478])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q210 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[479:478];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q210 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[479:478])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q211 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[479:478];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q211 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[469:468])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q212 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[469:468];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q212 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[469:468])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q213 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[469:468];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q213 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q214 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7809[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q214 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q215 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7810[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q215 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[459:458])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q216 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[459:458];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q216 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[459:458])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q217 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[459:458];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q217 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[449:448])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q218 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[449:448];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q218 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[449:448])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q219 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[449:448];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q219 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q220 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7811[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q220 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q221 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7812[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q221 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[439:438])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q222 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[439:438];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q222 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[439:438])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q223 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[439:438];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q223 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[429:428])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q224 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[429:428];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q224 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[429:428])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q225 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[429:428];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q225 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q226 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7813[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q226 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q227 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7814[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q227 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[419:418])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q228 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[419:418];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q228 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[419:418])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q229 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[419:418];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q229 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[409:408])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q230 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[409:408];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q230 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[409:408])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q231 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[409:408];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q231 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q232 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7816[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q232 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q233 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7815[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q233 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[399:398])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q234 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[399:398];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q234 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[399:398])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q235 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[399:398];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q235 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[389:388])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q236 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[389:388];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q236 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[389:388])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q237 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[389:388];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q237 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q238 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7817[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q238 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q239 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7818[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q239 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[379:378])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q240 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[379:378];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q240 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[379:378])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q241 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[379:378];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q241 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[369:368])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q242 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[369:368];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q242 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[369:368])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q243 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[369:368];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q243 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q244 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7819[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q244 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q245 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7820[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q245 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[359:358])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q246 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[359:358];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q246 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[359:358])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q247 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[359:358];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q247 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[349:348])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q248 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[349:348];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q248 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[349:348])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q249 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[349:348];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q249 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q250 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7821[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q250 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q251 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7822[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q251 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[339:338])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q252 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[339:338];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q252 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[339:338])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q253 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[339:338];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q253 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[329:328])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q254 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[329:328];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q254 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[329:328])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q255 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[329:328];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q255 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q256 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7823[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q256 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q257 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7824[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q257 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[319:318])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q258 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[319:318];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q258 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[319:318])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q259 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[319:318];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q259 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[309:308])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q260 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[309:308];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q260 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[309:308])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q261 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[309:308];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q261 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q262 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7825[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q262 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q263 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7826[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q263 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[299:298])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q264 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[299:298];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q264 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[299:298])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q265 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[299:298];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q265 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[289:288])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q266 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[289:288];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q266 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[289:288])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q267 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[289:288];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q267 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q268 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7827[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q268 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q269 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7828[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q269 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[279:278])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q270 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[279:278];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q270 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[279:278])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q271 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[279:278];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q271 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[269:268])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q272 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[269:268];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q272 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[269:268])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q273 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[269:268];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q273 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q274 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7829[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q274 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q275 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7830[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q275 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[259:258])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q276 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[259:258];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q276 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[259:258])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q277 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[259:258];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q277 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[249:248])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q278 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[249:248];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q278 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[249:248])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q279 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[249:248];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q279 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q280 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7831[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q280 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q281 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7832[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q281 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[239:238])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q282 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[239:238];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q282 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[239:238])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q283 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[239:238];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q283 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[229:228])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q284 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[229:228];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q284 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[229:228])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q285 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[229:228];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q285 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q286 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7833[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q286 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q287 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7834[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q287 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[219:218])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q288 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[219:218];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q288 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[219:218])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q289 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[219:218];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q289 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[209:208])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q290 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[209:208];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q290 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[209:208])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q291 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[209:208];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q291 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q292 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7835[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q292 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q293 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7836[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q293 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[199:198])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q294 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[199:198];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q294 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[199:198])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q295 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[199:198];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q295 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[189:188])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q296 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[189:188];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q296 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[189:188])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q297 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[189:188];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q297 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q298 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7837[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q298 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q299 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7838[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q299 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[179:178])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q300 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[179:178];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q300 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[179:178])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q301 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[179:178];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q301 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[169:168])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q302 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[169:168];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q302 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[169:168])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q303 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[169:168];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q303 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q304 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7839[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q304 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q305 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7840[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q305 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[159:158])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q306 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[159:158];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q306 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[159:158])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q307 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[159:158];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q307 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[149:148])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q308 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[149:148];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q308 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[149:148])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q309 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[149:148];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q309 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q310 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7841[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q310 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q311 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7842[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q311 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[139:138])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q312 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[139:138];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q312 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[139:138])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q313 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[139:138];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q313 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[129:128])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q314 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[129:128];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q314 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[129:128])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q315 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[129:128];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q315 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q316 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7843[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q316 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q317 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7844[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q317 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[119:118])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q318 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[119:118];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q318 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[119:118])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q319 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[119:118];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q319 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[109:108])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q320 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[109:108];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q320 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[109:108])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q321 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[109:108];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q321 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q322 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7845[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q322 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q323 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7847[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q323 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[99:98])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q324 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[99:98];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q324 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[99:98])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q325 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[99:98];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q325 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[89:88])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q326 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[89:88];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q326 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[89:88])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q327 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[89:88];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q327 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q328 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7846[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q328 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q329 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7848[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q329 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[79:78])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q330 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[79:78];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q330 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q331 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[79:78];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q331 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[69:68])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q332 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[69:68];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q332 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q333 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[69:68];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q333 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q334 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7849[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q334 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q335 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7850[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q335 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[59:58])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q336 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[59:58];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q336 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q337 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[59:58];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q337 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[49:48])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q338 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[49:48];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q338 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q339 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[49:48];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q339 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q340 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7851[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q340 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q341 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7852[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q341 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[39:38])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q342 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[39:38];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q342 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q343 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[39:38];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q343 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[29:28])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q344 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[29:28];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q344 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q345 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[29:28];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q345 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q346 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7853[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q346 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q347 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7854[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q347 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[19:18])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q348 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[19:18];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q348 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q349 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[19:18];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q349 = 2'd3;
    endcase
  end
  always@(_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781)
  begin
    case (_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[9:8])
      2'd1, 2'd2:
	  CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q350 =
	      _0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_BITS_ETC___d6781[9:8];
      default: CASE_0_CONCAT_IF_edp_dgdpTx_new_data_wget__085_ETC__q350 =
		   2'd3;
    endcase
  end
  always@(IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782)
  begin
    case (IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q351 =
	      IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_EQ_0_ETC___d6782[9:8];
      2'd3: CASE_IF_edp_dgdpTx_vec_337_BITS_799_TO_798_338_ETC__q351 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q352 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d7855[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q352 = 2'd3;
    endcase
  end
  always@(IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780)
  begin
    case (IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q353 =
	      IF_NOT_edp_dgdpTx_new_data_whas__083_084_OR_0__ETC___d6780[9:8];
      2'd3: CASE_IF_NOT_edp_dgdpTx_new_data_whas__083_084__ETC__q353 = 2'd3;
    endcase
  end
  always@(server_request_put)
  begin
    case (server_request_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q354 =
	      server_request_put[9:8];
      2'd3: CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q354 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_datumAReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	bml_fabFlowBaseMS <= `BSV_ASSIGNMENT_DELAY 32'h0;
	bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	bml_fabMesgBaseMS <= `BSV_ASSIGNMENT_DELAY 32'h0;
	bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	bml_fabMetaBaseMS <= `BSV_ASSIGNMENT_DELAY 32'h0;
	bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dmaDoneTime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	dmaStartTime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	dpControl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	edp_complTimerCount <= `BSV_ASSIGNMENT_DELAY 12'd0;
	edp_complTimerRunning <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_dbgBytesTxDeq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_dbgBytesTxEnq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_dgdpTx_num_empty <= `BSV_ASSIGNMENT_DELAY 7'd80;
	edp_dgdpTx_num_full <= `BSV_ASSIGNMENT_DELAY 7'd0;
	edp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_dmaDoneMark <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_dmaStartMark <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	edp_doMesgMH <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_doMetaMH <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_doorSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	edp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	edp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_firstMesgMH <= `BSV_ASSIGNMENT_DELAY 1'd1;
	edp_firstMetaMH <= `BSV_ASSIGNMENT_DELAY 1'd1;
	edp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_frameNumber <= `BSV_ASSIGNMENT_DELAY 16'd0;
	edp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_lastMetaV <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_lastMetaV_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_lastMetaV_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_lastMetaV_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_lastRuleFired <= `BSV_ASSIGNMENT_DELAY 4'd15;
	edp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	edp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	edp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	edp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_sentTail4DWHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_tlpBRAM_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	edp_tlpBRAM_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_tlpBRAM_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_xactionNumber <= `BSV_ASSIGNMENT_DELAY 32'd0;
	edp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'd0;
	wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	wti_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (bml_crdBuf_modulus$EN)
	  bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY bml_crdBuf_modulus$D_IN;
	if (bml_crdBuf_value$EN)
	  bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY bml_crdBuf_value$D_IN;
	if (bml_datumAReg$EN)
	  bml_datumAReg <= `BSV_ASSIGNMENT_DELAY bml_datumAReg$D_IN;
	if (bml_fabAvail$EN)
	  bml_fabAvail <= `BSV_ASSIGNMENT_DELAY bml_fabAvail$D_IN;
	if (bml_fabBuf_modulus$EN)
	  bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY bml_fabBuf_modulus$D_IN;
	if (bml_fabBuf_value$EN)
	  bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY bml_fabBuf_value$D_IN;
	if (bml_fabDone$EN)
	  bml_fabDone <= `BSV_ASSIGNMENT_DELAY bml_fabDone$D_IN;
	if (bml_fabFlowBase$EN)
	  bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY bml_fabFlowBase$D_IN;
	if (bml_fabFlowBaseMS$EN)
	  bml_fabFlowBaseMS <= `BSV_ASSIGNMENT_DELAY bml_fabFlowBaseMS$D_IN;
	if (bml_fabFlowSize$EN)
	  bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY bml_fabFlowSize$D_IN;
	if (bml_fabMesgBase$EN)
	  bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY bml_fabMesgBase$D_IN;
	if (bml_fabMesgBaseMS$EN)
	  bml_fabMesgBaseMS <= `BSV_ASSIGNMENT_DELAY bml_fabMesgBaseMS$D_IN;
	if (bml_fabMesgSize$EN)
	  bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY bml_fabMesgSize$D_IN;
	if (bml_fabMetaBase$EN)
	  bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY bml_fabMetaBase$D_IN;
	if (bml_fabMetaBaseMS$EN)
	  bml_fabMetaBaseMS <= `BSV_ASSIGNMENT_DELAY bml_fabMetaBaseMS$D_IN;
	if (bml_fabMetaSize$EN)
	  bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY bml_fabMetaSize$D_IN;
	if (bml_fabNumBufs$EN)
	  bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY bml_fabNumBufs$D_IN;
	if (bml_lclBufDone$EN)
	  bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY bml_lclBufDone$D_IN;
	if (bml_lclBufStart$EN)
	  bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY bml_lclBufStart$D_IN;
	if (bml_lclBuf_modulus$EN)
	  bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY bml_lclBuf_modulus$D_IN;
	if (bml_lclBuf_value$EN)
	  bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY bml_lclBuf_value$D_IN;
	if (bml_lclDones$EN)
	  bml_lclDones <= `BSV_ASSIGNMENT_DELAY bml_lclDones$D_IN;
	if (bml_lclNumBufs$EN)
	  bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY bml_lclNumBufs$D_IN;
	if (bml_lclStarts$EN)
	  bml_lclStarts <= `BSV_ASSIGNMENT_DELAY bml_lclStarts$D_IN;
	if (bml_mesgBase$EN)
	  bml_mesgBase <= `BSV_ASSIGNMENT_DELAY bml_mesgBase$D_IN;
	if (bml_mesgSize$EN)
	  bml_mesgSize <= `BSV_ASSIGNMENT_DELAY bml_mesgSize$D_IN;
	if (bml_metaBase$EN)
	  bml_metaBase <= `BSV_ASSIGNMENT_DELAY bml_metaBase$D_IN;
	if (bml_metaSize$EN)
	  bml_metaSize <= `BSV_ASSIGNMENT_DELAY bml_metaSize$D_IN;
	if (bml_remBuf_modulus$EN)
	  bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY bml_remBuf_modulus$D_IN;
	if (bml_remBuf_value$EN)
	  bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY bml_remBuf_value$D_IN;
	if (bml_remDone$EN)
	  bml_remDone <= `BSV_ASSIGNMENT_DELAY bml_remDone$D_IN;
	if (bml_remDones$EN)
	  bml_remDones <= `BSV_ASSIGNMENT_DELAY bml_remDones$D_IN;
	if (bml_remStart$EN)
	  bml_remStart <= `BSV_ASSIGNMENT_DELAY bml_remStart$D_IN;
	if (bml_remStarts$EN)
	  bml_remStarts <= `BSV_ASSIGNMENT_DELAY bml_remStarts$D_IN;
	if (bram_serverAdapterA_1_cnt$EN)
	  bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_1_cnt$D_IN;
	if (bram_serverAdapterA_1_s1$EN)
	  bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_1_s1$D_IN;
	if (bram_serverAdapterA_2_cnt$EN)
	  bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_2_cnt$D_IN;
	if (bram_serverAdapterA_2_s1$EN)
	  bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_2_s1$D_IN;
	if (bram_serverAdapterA_3_cnt$EN)
	  bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_3_cnt$D_IN;
	if (bram_serverAdapterA_3_s1$EN)
	  bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_3_s1$D_IN;
	if (bram_serverAdapterA_cnt$EN)
	  bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_cnt$D_IN;
	if (bram_serverAdapterA_s1$EN)
	  bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterA_s1$D_IN;
	if (bram_serverAdapterB_1_cnt$EN)
	  bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_1_cnt$D_IN;
	if (bram_serverAdapterB_1_s1$EN)
	  bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_1_s1$D_IN;
	if (bram_serverAdapterB_2_cnt$EN)
	  bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_2_cnt$D_IN;
	if (bram_serverAdapterB_2_s1$EN)
	  bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_2_s1$D_IN;
	if (bram_serverAdapterB_3_cnt$EN)
	  bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_3_cnt$D_IN;
	if (bram_serverAdapterB_3_s1$EN)
	  bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_3_s1$D_IN;
	if (bram_serverAdapterB_cnt$EN)
	  bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_cnt$D_IN;
	if (bram_serverAdapterB_s1$EN)
	  bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      bram_serverAdapterB_s1$D_IN;
	if (dmaDoneTime$EN)
	  dmaDoneTime <= `BSV_ASSIGNMENT_DELAY dmaDoneTime$D_IN;
	if (dmaStartTime$EN)
	  dmaStartTime <= `BSV_ASSIGNMENT_DELAY dmaStartTime$D_IN;
	if (dpControl$EN) dpControl <= `BSV_ASSIGNMENT_DELAY dpControl$D_IN;
	if (edp_complTimerCount$EN)
	  edp_complTimerCount <= `BSV_ASSIGNMENT_DELAY
	      edp_complTimerCount$D_IN;
	if (edp_complTimerRunning$EN)
	  edp_complTimerRunning <= `BSV_ASSIGNMENT_DELAY
	      edp_complTimerRunning$D_IN;
	if (edp_creditReady$EN)
	  edp_creditReady <= `BSV_ASSIGNMENT_DELAY edp_creditReady$D_IN;
	if (edp_dbgBytesTxDeq$EN)
	  edp_dbgBytesTxDeq <= `BSV_ASSIGNMENT_DELAY edp_dbgBytesTxDeq$D_IN;
	if (edp_dbgBytesTxEnq$EN)
	  edp_dbgBytesTxEnq <= `BSV_ASSIGNMENT_DELAY edp_dbgBytesTxEnq$D_IN;
	if (edp_dgdpTx_num_empty$EN)
	  edp_dgdpTx_num_empty <= `BSV_ASSIGNMENT_DELAY
	      edp_dgdpTx_num_empty$D_IN;
	if (edp_dgdpTx_num_full$EN)
	  edp_dgdpTx_num_full <= `BSV_ASSIGNMENT_DELAY
	      edp_dgdpTx_num_full$D_IN;
	if (edp_dmaDoTailEvent$EN)
	  edp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY edp_dmaDoTailEvent$D_IN;
	if (edp_dmaDoneMark$EN)
	  edp_dmaDoneMark <= `BSV_ASSIGNMENT_DELAY edp_dmaDoneMark$D_IN;
	if (edp_dmaStartMark$EN)
	  edp_dmaStartMark <= `BSV_ASSIGNMENT_DELAY edp_dmaStartMark$D_IN;
	if (edp_dmaTag$EN)
	  edp_dmaTag <= `BSV_ASSIGNMENT_DELAY edp_dmaTag$D_IN;
	if (edp_doMesgMH$EN)
	  edp_doMesgMH <= `BSV_ASSIGNMENT_DELAY edp_doMesgMH$D_IN;
	if (edp_doMetaMH$EN)
	  edp_doMetaMH <= `BSV_ASSIGNMENT_DELAY edp_doMetaMH$D_IN;
	if (edp_doXmtMetaBody$EN)
	  edp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY edp_doXmtMetaBody$D_IN;
	if (edp_doorSeqDwell$EN)
	  edp_doorSeqDwell <= `BSV_ASSIGNMENT_DELAY edp_doorSeqDwell$D_IN;
	if (edp_fabMeta$EN)
	  edp_fabMeta <= `BSV_ASSIGNMENT_DELAY edp_fabMeta$D_IN;
	if (edp_farBufReady$EN)
	  edp_farBufReady <= `BSV_ASSIGNMENT_DELAY edp_farBufReady$D_IN;
	if (edp_firstMesgMH$EN)
	  edp_firstMesgMH <= `BSV_ASSIGNMENT_DELAY edp_firstMesgMH$D_IN;
	if (edp_firstMetaMH$EN)
	  edp_firstMetaMH <= `BSV_ASSIGNMENT_DELAY edp_firstMetaMH$D_IN;
	if (edp_flowDiagCount$EN)
	  edp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY edp_flowDiagCount$D_IN;
	if (edp_frameNumber$EN)
	  edp_frameNumber <= `BSV_ASSIGNMENT_DELAY edp_frameNumber$D_IN;
	if (edp_gotResponseHeader$EN)
	  edp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      edp_gotResponseHeader$D_IN;
	if (edp_lastMetaV$EN)
	  edp_lastMetaV <= `BSV_ASSIGNMENT_DELAY edp_lastMetaV$D_IN;
	if (edp_lastMetaV_1$EN)
	  edp_lastMetaV_1 <= `BSV_ASSIGNMENT_DELAY edp_lastMetaV_1$D_IN;
	if (edp_lastMetaV_2$EN)
	  edp_lastMetaV_2 <= `BSV_ASSIGNMENT_DELAY edp_lastMetaV_2$D_IN;
	if (edp_lastMetaV_3$EN)
	  edp_lastMetaV_3 <= `BSV_ASSIGNMENT_DELAY edp_lastMetaV_3$D_IN;
	if (edp_lastRuleFired$EN)
	  edp_lastRuleFired <= `BSV_ASSIGNMENT_DELAY edp_lastRuleFired$D_IN;
	if (edp_maxPayloadSize$EN)
	  edp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY edp_maxPayloadSize$D_IN;
	if (edp_maxReadReqSize$EN)
	  edp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY edp_maxReadReqSize$D_IN;
	if (edp_nearBufReady$EN)
	  edp_nearBufReady <= `BSV_ASSIGNMENT_DELAY edp_nearBufReady$D_IN;
	if (edp_postSeqDwell$EN)
	  edp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY edp_postSeqDwell$D_IN;
	if (edp_pullTagMatch$EN)
	  edp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY edp_pullTagMatch$D_IN;
	if (edp_remDone$EN)
	  edp_remDone <= `BSV_ASSIGNMENT_DELAY edp_remDone$D_IN;
	if (edp_remStart$EN)
	  edp_remStart <= `BSV_ASSIGNMENT_DELAY edp_remStart$D_IN;
	if (edp_reqMesgInFlight$EN)
	  edp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      edp_reqMesgInFlight$D_IN;
	if (edp_reqMetaBodyInFlight$EN)
	  edp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      edp_reqMetaBodyInFlight$D_IN;
	if (edp_reqMetaInFlight$EN)
	  edp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      edp_reqMetaInFlight$D_IN;
	if (edp_sentTail4DWHeader$EN)
	  edp_sentTail4DWHeader <= `BSV_ASSIGNMENT_DELAY
	      edp_sentTail4DWHeader$D_IN;
	if (edp_tlpBRAM_debugBdata$EN)
	  edp_tlpBRAM_debugBdata <= `BSV_ASSIGNMENT_DELAY
	      edp_tlpBRAM_debugBdata$D_IN;
	if (edp_tlpBRAM_readHeaderSent$EN)
	  edp_tlpBRAM_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      edp_tlpBRAM_readHeaderSent$D_IN;
	if (edp_tlpBRAM_readStarted$EN)
	  edp_tlpBRAM_readStarted <= `BSV_ASSIGNMENT_DELAY
	      edp_tlpBRAM_readStarted$D_IN;
	if (edp_tlpMetaSent$EN)
	  edp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY edp_tlpMetaSent$D_IN;
	if (edp_tlpRcvBusy$EN)
	  edp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY edp_tlpRcvBusy$D_IN;
	if (edp_tlpXmtBusy$EN)
	  edp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY edp_tlpXmtBusy$D_IN;
	if (edp_xactionNumber$EN)
	  edp_xactionNumber <= `BSV_ASSIGNMENT_DELAY edp_xactionNumber$D_IN;
	if (edp_xmtMetaInFlight$EN)
	  edp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      edp_xmtMetaInFlight$D_IN;
	if (edp_xmtMetaOK$EN)
	  edp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY edp_xmtMetaOK$D_IN;
	if (wci_cEdge$EN) wci_cEdge <= `BSV_ASSIGNMENT_DELAY wci_cEdge$D_IN;
	if (wci_cState$EN)
	  wci_cState <= `BSV_ASSIGNMENT_DELAY wci_cState$D_IN;
	if (wci_ctlAckReg$EN)
	  wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_ctlAckReg$D_IN;
	if (wci_ctlOpActive$EN)
	  wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wci_ctlOpActive$D_IN;
	if (wci_illegalEdge$EN)
	  wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY wci_illegalEdge$D_IN;
	if (wci_nState$EN)
	  wci_nState <= `BSV_ASSIGNMENT_DELAY wci_nState$D_IN;
	if (wci_reqF_countReg$EN)
	  wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY wci_reqF_countReg$D_IN;
	if (wci_respF_c_r$EN)
	  wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_respF_c_r$D_IN;
	if (wci_respF_q_0$EN)
	  wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_0$D_IN;
	if (wci_respF_q_1$EN)
	  wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_1$D_IN;
	if (wci_sFlagReg$EN)
	  wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_sFlagReg$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wmi_bufDwell$EN)
	  wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY wmi_bufDwell$D_IN;
	if (wmi_bytesRemainResp$EN)
	  wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      wmi_bytesRemainResp$D_IN;
	if (wmi_doneWithMesg$EN)
	  wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY wmi_doneWithMesg$D_IN;
	if (wmi_lastMesg$EN)
	  wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY wmi_lastMesg$D_IN;
	if (wmi_mesgBufReady$EN)
	  wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY wmi_mesgBufReady$D_IN;
	if (wmi_mesgBusy$EN)
	  wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY wmi_mesgBusy$D_IN;
	if (wmi_mesgCount$EN)
	  wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY wmi_mesgCount$D_IN;
	if (wmi_mesgDone$EN)
	  wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY wmi_mesgDone$D_IN;
	if (wmi_mesgMeta$EN)
	  wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY wmi_mesgMeta$D_IN;
	if (wmi_mesgStart$EN)
	  wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY wmi_mesgStart$D_IN;
	if (wmi_metaBusy$EN)
	  wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY wmi_metaBusy$D_IN;
	if (wmi_p4B$EN) wmi_p4B <= `BSV_ASSIGNMENT_DELAY wmi_p4B$D_IN;
	if (wmi_rdActive$EN)
	  wmi_rdActive <= `BSV_ASSIGNMENT_DELAY wmi_rdActive$D_IN;
	if (wmi_reqCount$EN)
	  wmi_reqCount <= `BSV_ASSIGNMENT_DELAY wmi_reqCount$D_IN;
	if (wmi_thisMesg$EN)
	  wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY wmi_thisMesg$D_IN;
	if (wmi_wmi_blockReq$EN)
	  wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY wmi_wmi_blockReq$D_IN;
	if (wmi_wmi_dhF_countReg$EN)
	  wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_dhF_countReg$D_IN;
	if (wmi_wmi_dhF_levelsValid$EN)
	  wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_dhF_levelsValid$D_IN;
	if (wmi_wmi_errorSticky$EN)
	  wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_errorSticky$D_IN;
	if (wmi_wmi_mFlagF_countReg$EN)
	  wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_mFlagF_countReg$D_IN;
	if (wmi_wmi_mFlagF_levelsValid$EN)
	  wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_mFlagF_levelsValid$D_IN;
	if (wmi_wmi_operateD$EN)
	  wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY wmi_wmi_operateD$D_IN;
	if (wmi_wmi_peerIsReady$EN)
	  wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_peerIsReady$D_IN;
	if (wmi_wmi_reqF_countReg$EN)
	  wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_reqF_countReg$D_IN;
	if (wmi_wmi_reqF_levelsValid$EN)
	  wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_reqF_levelsValid$D_IN;
	if (wmi_wmi_respF_c_r$EN)
	  wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY wmi_wmi_respF_c_r$D_IN;
	if (wmi_wmi_respF_q_0$EN)
	  wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wmi_wmi_respF_q_0$D_IN;
	if (wmi_wmi_respF_q_1$EN)
	  wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wmi_wmi_respF_q_1$D_IN;
	if (wmi_wmi_sFlagReg$EN)
	  wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY wmi_wmi_sFlagReg$D_IN;
	if (wmi_wmi_trafficSticky$EN)
	  wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmi_wmi_trafficSticky$D_IN;
	if (wmi_wrActive$EN)
	  wmi_wrActive <= `BSV_ASSIGNMENT_DELAY wmi_wrActive$D_IN;
	if (wmi_wrFinalize$EN)
	  wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY wmi_wrFinalize$D_IN;
	if (wmi_wrtCount$EN)
	  wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY wmi_wrtCount$D_IN;
	if (wti_nowReq$EN)
	  wti_nowReq <= `BSV_ASSIGNMENT_DELAY wti_nowReq$D_IN;
	if (wti_operateD$EN)
	  wti_operateD <= `BSV_ASSIGNMENT_DELAY wti_operateD$D_IN;
      end
    if (bml_fabBufsAvail$EN)
      bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY bml_fabBufsAvail$D_IN;
    if (bml_fabFlowAddr$EN)
      bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY bml_fabFlowAddr$D_IN;
    if (bml_fabMesgAddr$EN)
      bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY bml_fabMesgAddr$D_IN;
    if (bml_fabMetaAddr$EN)
      bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY bml_fabMetaAddr$D_IN;
    if (bml_lclBufsAR$EN)
      bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY bml_lclBufsAR$D_IN;
    if (bml_lclBufsCF$EN)
      bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY bml_lclBufsCF$D_IN;
    if (bml_lclCredit$EN)
      bml_lclCredit <= `BSV_ASSIGNMENT_DELAY bml_lclCredit$D_IN;
    if (bml_lclMesgAddr$EN)
      bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY bml_lclMesgAddr$D_IN;
    if (bml_lclMetaAddr$EN)
      bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY bml_lclMetaAddr$D_IN;
    if (bml_remMesgAddr$EN)
      bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY bml_remMesgAddr$D_IN;
    if (bml_remMetaAddr$EN)
      bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY bml_remMetaAddr$D_IN;
    if (edp_dgdpTx_vec$EN)
      edp_dgdpTx_vec <= `BSV_ASSIGNMENT_DELAY edp_dgdpTx_vec$D_IN;
    if (edp_dmaPullRemainDWLen$EN)
      edp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  edp_dmaPullRemainDWLen$D_IN;
    if (edp_dmaPullRemainDWSub$EN)
      edp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  edp_dmaPullRemainDWSub$D_IN;
    if (edp_dmaReqTag$EN)
      edp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY edp_dmaReqTag$D_IN;
    if (edp_fabFlowAddr$EN)
      edp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY edp_fabFlowAddr$D_IN;
    if (edp_fabFlowAddrMS$EN)
      edp_fabFlowAddrMS <= `BSV_ASSIGNMENT_DELAY edp_fabFlowAddrMS$D_IN;
    if (edp_fabMesgAccu$EN)
      edp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY edp_fabMesgAccu$D_IN;
    if (edp_fabMesgAddr$EN)
      edp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY edp_fabMesgAddr$D_IN;
    if (edp_fabMesgAddrMS$EN)
      edp_fabMesgAddrMS <= `BSV_ASSIGNMENT_DELAY edp_fabMesgAddrMS$D_IN;
    if (edp_fabMetaAddr$EN)
      edp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY edp_fabMetaAddr$D_IN;
    if (edp_fabMetaAddrMS$EN)
      edp_fabMetaAddrMS <= `BSV_ASSIGNMENT_DELAY edp_fabMetaAddrMS$D_IN;
    if (edp_inIgnorePkt$EN)
      edp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY edp_inIgnorePkt$D_IN;
    if (edp_mesgComplReceived$EN)
      edp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  edp_mesgComplReceived$D_IN;
    if (edp_mesgLengthRemainPull$EN)
      edp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  edp_mesgLengthRemainPull$D_IN;
    if (edp_mesgLengthRemainPush$EN)
      edp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  edp_mesgLengthRemainPush$D_IN;
    if (edp_outDwRemain$EN)
      edp_outDwRemain <= `BSV_ASSIGNMENT_DELAY edp_outDwRemain$D_IN;
    if (edp_remMesgAccu$EN)
      edp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY edp_remMesgAccu$D_IN;
    if (edp_remMesgAddr$EN)
      edp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY edp_remMesgAddr$D_IN;
    if (edp_remMetaAddr$EN)
      edp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY edp_remMetaAddr$D_IN;
    if (edp_srcMesgAccu$EN)
      edp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY edp_srcMesgAccu$D_IN;
    if (edp_tlpBRAM_rdRespDwRemain$EN)
      edp_tlpBRAM_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_rdRespDwRemain$D_IN;
    if (edp_tlpBRAM_readNxtDWAddr$EN)
      edp_tlpBRAM_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_readNxtDWAddr$D_IN;
    if (edp_tlpBRAM_readRemainDWLen$EN)
      edp_tlpBRAM_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_readRemainDWLen$D_IN;
    if (edp_tlpBRAM_writeDWAddr$EN)
      edp_tlpBRAM_writeDWAddr <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_writeDWAddr$D_IN;
    if (edp_tlpBRAM_writeLastBE$EN)
      edp_tlpBRAM_writeLastBE <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_writeLastBE$D_IN;
    if (edp_tlpBRAM_writeRemainDWLen$EN)
      edp_tlpBRAM_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  edp_tlpBRAM_writeRemainDWLen$D_IN;
    if (wmi_addr$EN) wmi_addr <= `BSV_ASSIGNMENT_DELAY wmi_addr$D_IN;
    if (wmi_bytesRemainReq$EN)
      wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY wmi_bytesRemainReq$D_IN;
    if (wmi_lclMesgAddr$EN)
      wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY wmi_lclMesgAddr$D_IN;
    if (wmi_lclMetaAddr$EN)
      wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY wmi_lclMetaAddr$D_IN;
    if (wmi_wmi_statusR$EN)
      wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY wmi_wmi_statusR$D_IN;
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      wci_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wmi_wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_isReset_isInReset$EN)
	wci_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_isReset_isInReset$D_IN;
      if (wmi_wmi_isReset_isInReset$EN)
	wmi_wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmi_wmi_isReset_isInReset$D_IN;
      if (wti_isReset_isInReset$EN)
	wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wti_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bml_crdBuf_modulus = 16'hAAAA;
    bml_crdBuf_value = 16'hAAAA;
    bml_datumAReg = 1'h0;
    bml_fabAvail = 1'h0;
    bml_fabBuf_modulus = 16'hAAAA;
    bml_fabBuf_value = 16'hAAAA;
    bml_fabBufsAvail = 16'hAAAA;
    bml_fabDone = 1'h0;
    bml_fabFlowAddr = 32'hAAAAAAAA;
    bml_fabFlowBase = 32'hAAAAAAAA;
    bml_fabFlowBaseMS = 32'hAAAAAAAA;
    bml_fabFlowSize = 32'hAAAAAAAA;
    bml_fabMesgAddr = 32'hAAAAAAAA;
    bml_fabMesgBase = 32'hAAAAAAAA;
    bml_fabMesgBaseMS = 32'hAAAAAAAA;
    bml_fabMesgSize = 32'hAAAAAAAA;
    bml_fabMetaAddr = 32'hAAAAAAAA;
    bml_fabMetaBase = 32'hAAAAAAAA;
    bml_fabMetaBaseMS = 32'hAAAAAAAA;
    bml_fabMetaSize = 32'hAAAAAAAA;
    bml_fabNumBufs = 16'hAAAA;
    bml_lclBufDone = 1'h0;
    bml_lclBufStart = 1'h0;
    bml_lclBuf_modulus = 16'hAAAA;
    bml_lclBuf_value = 16'hAAAA;
    bml_lclBufsAR = 16'hAAAA;
    bml_lclBufsCF = 16'hAAAA;
    bml_lclCredit = 16'hAAAA;
    bml_lclDones = 16'hAAAA;
    bml_lclMesgAddr = 16'hAAAA;
    bml_lclMetaAddr = 16'hAAAA;
    bml_lclNumBufs = 16'hAAAA;
    bml_lclStarts = 16'hAAAA;
    bml_mesgBase = 16'hAAAA;
    bml_mesgSize = 16'hAAAA;
    bml_metaBase = 16'hAAAA;
    bml_metaSize = 16'hAAAA;
    bml_remBuf_modulus = 16'hAAAA;
    bml_remBuf_value = 16'hAAAA;
    bml_remDone = 1'h0;
    bml_remDones = 16'hAAAA;
    bml_remMesgAddr = 16'hAAAA;
    bml_remMetaAddr = 16'hAAAA;
    bml_remStart = 1'h0;
    bml_remStarts = 16'hAAAA;
    bram_serverAdapterA_1_cnt = 3'h2;
    bram_serverAdapterA_1_s1 = 2'h2;
    bram_serverAdapterA_2_cnt = 3'h2;
    bram_serverAdapterA_2_s1 = 2'h2;
    bram_serverAdapterA_3_cnt = 3'h2;
    bram_serverAdapterA_3_s1 = 2'h2;
    bram_serverAdapterA_cnt = 3'h2;
    bram_serverAdapterA_s1 = 2'h2;
    bram_serverAdapterB_1_cnt = 3'h2;
    bram_serverAdapterB_1_s1 = 2'h2;
    bram_serverAdapterB_2_cnt = 3'h2;
    bram_serverAdapterB_2_s1 = 2'h2;
    bram_serverAdapterB_3_cnt = 3'h2;
    bram_serverAdapterB_3_s1 = 2'h2;
    bram_serverAdapterB_cnt = 3'h2;
    bram_serverAdapterB_s1 = 2'h2;
    dmaDoneTime = 64'hAAAAAAAAAAAAAAAA;
    dmaStartTime = 64'hAAAAAAAAAAAAAAAA;
    dpControl = 8'hAA;
    edp_complTimerCount = 12'hAAA;
    edp_complTimerRunning = 1'h0;
    edp_creditReady = 1'h0;
    edp_dbgBytesTxDeq = 32'hAAAAAAAA;
    edp_dbgBytesTxEnq = 32'hAAAAAAAA;
    edp_dgdpTx_num_empty = 7'h2A;
    edp_dgdpTx_num_full = 7'h2A;
    edp_dgdpTx_vec =
	800'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    edp_dmaDoTailEvent = 1'h0;
    edp_dmaDoneMark = 1'h0;
    edp_dmaPullRemainDWLen = 10'h2AA;
    edp_dmaPullRemainDWSub = 10'h2AA;
    edp_dmaReqTag = 5'h0A;
    edp_dmaStartMark = 1'h0;
    edp_dmaTag = 5'h0A;
    edp_doMesgMH = 1'h0;
    edp_doMetaMH = 1'h0;
    edp_doXmtMetaBody = 1'h0;
    edp_doorSeqDwell = 4'hA;
    edp_fabFlowAddr = 32'hAAAAAAAA;
    edp_fabFlowAddrMS = 32'hAAAAAAAA;
    edp_fabMesgAccu = 32'hAAAAAAAA;
    edp_fabMesgAddr = 32'hAAAAAAAA;
    edp_fabMesgAddrMS = 32'hAAAAAAAA;
    edp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    edp_fabMetaAddr = 32'hAAAAAAAA;
    edp_fabMetaAddrMS = 32'hAAAAAAAA;
    edp_farBufReady = 1'h0;
    edp_firstMesgMH = 1'h0;
    edp_firstMetaMH = 1'h0;
    edp_flowDiagCount = 32'hAAAAAAAA;
    edp_frameNumber = 16'hAAAA;
    edp_gotResponseHeader = 1'h0;
    edp_inIgnorePkt = 1'h0;
    edp_lastMetaV = 32'hAAAAAAAA;
    edp_lastMetaV_1 = 32'hAAAAAAAA;
    edp_lastMetaV_2 = 32'hAAAAAAAA;
    edp_lastMetaV_3 = 32'hAAAAAAAA;
    edp_lastRuleFired = 4'hA;
    edp_maxPayloadSize = 13'h0AAA;
    edp_maxReadReqSize = 13'h0AAA;
    edp_mesgComplReceived = 17'h0AAAA;
    edp_mesgLengthRemainPull = 17'h0AAAA;
    edp_mesgLengthRemainPush = 17'h0AAAA;
    edp_nearBufReady = 1'h0;
    edp_outDwRemain = 10'h2AA;
    edp_postSeqDwell = 4'hA;
    edp_pullTagMatch = 1'h0;
    edp_remDone = 1'h0;
    edp_remMesgAccu = 16'hAAAA;
    edp_remMesgAddr = 16'hAAAA;
    edp_remMetaAddr = 16'hAAAA;
    edp_remStart = 1'h0;
    edp_reqMesgInFlight = 1'h0;
    edp_reqMetaBodyInFlight = 1'h0;
    edp_reqMetaInFlight = 1'h0;
    edp_sentTail4DWHeader = 1'h0;
    edp_srcMesgAccu = 32'hAAAAAAAA;
    edp_tlpBRAM_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    edp_tlpBRAM_rdRespDwRemain = 10'h2AA;
    edp_tlpBRAM_readHeaderSent = 1'h0;
    edp_tlpBRAM_readNxtDWAddr = 13'h0AAA;
    edp_tlpBRAM_readRemainDWLen = 10'h2AA;
    edp_tlpBRAM_readStarted = 1'h0;
    edp_tlpBRAM_writeDWAddr = 13'h0AAA;
    edp_tlpBRAM_writeLastBE = 4'hA;
    edp_tlpBRAM_writeRemainDWLen = 10'h2AA;
    edp_tlpMetaSent = 1'h0;
    edp_tlpRcvBusy = 1'h0;
    edp_tlpXmtBusy = 1'h0;
    edp_xactionNumber = 32'hAAAAAAAA;
    edp_xmtMetaInFlight = 1'h0;
    edp_xmtMetaOK = 1'h0;
    wci_cEdge = 3'h2;
    wci_cState = 3'h2;
    wci_ctlAckReg = 1'h0;
    wci_ctlOpActive = 1'h0;
    wci_illegalEdge = 1'h0;
    wci_isReset_isInReset = 1'h0;
    wci_nState = 3'h2;
    wci_reqF_countReg = 2'h2;
    wci_respF_c_r = 2'h2;
    wci_respF_q_0 = 34'h2AAAAAAAA;
    wci_respF_q_1 = 34'h2AAAAAAAA;
    wci_sFlagReg = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wmi_addr = 14'h2AAA;
    wmi_bufDwell = 2'h2;
    wmi_bytesRemainReq = 14'h2AAA;
    wmi_bytesRemainResp = 14'h2AAA;
    wmi_doneWithMesg = 1'h0;
    wmi_lastMesg = 32'hAAAAAAAA;
    wmi_lclMesgAddr = 15'h2AAA;
    wmi_lclMetaAddr = 15'h2AAA;
    wmi_mesgBufReady = 1'h0;
    wmi_mesgBusy = 1'h0;
    wmi_mesgCount = 32'hAAAAAAAA;
    wmi_mesgDone = 1'h0;
    wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmi_mesgStart = 1'h0;
    wmi_metaBusy = 1'h0;
    wmi_p4B = 2'h2;
    wmi_rdActive = 1'h0;
    wmi_reqCount = 16'hAAAA;
    wmi_thisMesg = 32'hAAAAAAAA;
    wmi_wmi_blockReq = 1'h0;
    wmi_wmi_dhF_countReg = 2'h2;
    wmi_wmi_dhF_levelsValid = 1'h0;
    wmi_wmi_errorSticky = 1'h0;
    wmi_wmi_isReset_isInReset = 1'h0;
    wmi_wmi_mFlagF_countReg = 2'h2;
    wmi_wmi_mFlagF_levelsValid = 1'h0;
    wmi_wmi_operateD = 1'h0;
    wmi_wmi_peerIsReady = 1'h0;
    wmi_wmi_reqF_countReg = 2'h2;
    wmi_wmi_reqF_levelsValid = 1'h0;
    wmi_wmi_respF_c_r = 2'h2;
    wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    wmi_wmi_statusR = 8'hAA;
    wmi_wmi_trafficSticky = 1'h0;
    wmi_wrActive = 1'h0;
    wmi_wrFinalize = 1'h0;
    wmi_wrtCount = 16'hAAAA;
    wti_isReset_isInReset = 1'h0;
    wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    wti_operateD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h195660 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h195660,
		 wci_reqF$D_OUT[63:32],
		 wci_reqF$D_OUT[67:64],
		 _theResult____h195644);
    if (RST_N)
      if (bram_serverAdapterA_s1[1] &&
	  !bram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterB_s1[1] &&
	  !bram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterA_1_s1[1] &&
	  !bram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterB_1_s1[1] &&
	  !bram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterA_2_s1[1] &&
	  !bram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterB_2_s1[1] &&
	  !bram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterA_3_s1[1] &&
	  !bram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (bram_serverAdapterB_3_s1[1] &&
	  !bram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	begin
	  v__h15543 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h15543,
		 wci_reqF$D_OUT[36:34],
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaRequestNearMeta)
	begin
	  v__h140358 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h140358);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushRequestMesg)
	begin
	  v__h163041 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h163041);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaResponseNearMetaHead)
	begin
	  v__h155038 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h155038,
		 x__h154145);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushResponseHeader)
	begin
	  v__h171677 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushResponseHeader)
	$display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		 v__h171677);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtMetaHead)
	begin
	  v__h175447 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtMetaHead)
	$display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h175447);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtTailEvent)
	begin
	  v__h175710 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtTailEvent)
	$display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h175710);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtMetaBody)
	begin
	  v__h175590 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h175590);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaResponseNearMetaBody)
	begin
	  v__h159360 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h159360,
		 opcode__h155979,
		 nowMS__h157210,
		 nowLS__h158153);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtDoorbell)
	begin
	  v__h175917 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		 v__h175917);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaTailEventSender)
	begin
	  v__h176679 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaTailEventSender)
	$display("[%0d]: %m: dmaTailEventSender - generic", v__h176679);
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushResponseBody)
	begin
	  v__h175301 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_edp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h175301);
    if (RST_N)
      if (WILL_FIRE_RL_wmi_doWriteFinalize)
	begin
	  v__h186935 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h186935,
		 wmi_lclMetaAddr,
		 x3__h186293,
		 mesgMeta_opcode__h186333,
		 dmaStartTime$D_IN[63:32],
		 dmaStartTime$D_IN[31:0]);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h195037 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h195037);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h195506 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h195506,
		 wci_reqF$D_OUT[63:32],
		 wci_reqF$D_OUT[67:64],
		 wci_reqF$D_OUT[31:0]);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/inf/OCEDP.bsv\", line 69, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	begin
	  v__h15861 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h15861,
		 wci_cEdge,
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	begin
	  v__h15717 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h15717,
		 wci_cEdge,
		 wci_cState,
		 wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOCEDP4B

