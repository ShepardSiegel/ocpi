//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Tue Feb  8 14:43:46 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTB13(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wci_reqF_x_wire$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [33 : 0] wci_wciResponse$wget;
  wire [31 : 0] wci_wci_Em_respData_w$wget, wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wsi_Es_mCmd_w$wget;
  wire [1 : 0] wci_wci_Em_resp_w$wget;
  wire wciSeqFsm_abort$wget,
       wciSeqFsm_abort$whas,
       wciSeqFsm_pw_list$whas,
       wciSeqFsm_pw_list_1$whas,
       wciSeqFsm_pw_list_2$whas,
       wciSeqFsm_pw_list_3$whas,
       wciSeqFsm_pw_list_4$whas,
       wciSeqFsm_pw_list_5$whas,
       wciSeqFsm_pw_list_6$whas,
       wciSeqFsm_pw_list_7$whas,
       wciSeqFsm_pw_list_8$whas,
       wciSeqFsm_start_reg_1$wget,
       wciSeqFsm_start_reg_1$whas,
       wciSeqFsm_start_wire$wget,
       wciSeqFsm_start_wire$whas,
       wciSeqFsm_state_run_pw$whas,
       wciSeqFsm_state_start_pw$whas,
       wci_reqF_dequeueing$whas,
       wci_reqF_enqueueing$whas,
       wci_reqF_x_wire$whas,
       wci_sThreadBusy_pw$whas,
       wci_sfCapClear_1$wget,
       wci_sfCapClear_1$whas,
       wci_sfCapSet_1$wget,
       wci_sfCapSet_1$whas,
       wci_wciResponse$whas,
       wci_wci_Em_respData_w$whas,
       wci_wci_Em_resp_w$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register badDataCnt
  reg [31 : 0] badDataCnt;
  wire [31 : 0] badDataCnt$D_IN;
  wire badDataCnt$EN;

  // register badMesgCnt
  reg [31 : 0] badMesgCnt;
  wire [31 : 0] badMesgCnt$D_IN;
  wire badMesgCnt$EN;

  // register dstDataOut
  reg [31 : 0] dstDataOut;
  wire [31 : 0] dstDataOut$D_IN;
  wire dstDataOut$EN;

  // register dstMesgCount
  reg [15 : 0] dstMesgCount;
  wire [15 : 0] dstMesgCount$D_IN;
  wire dstMesgCount$EN;

  // register dstUnrollCnt
  reg [15 : 0] dstUnrollCnt;
  wire [15 : 0] dstUnrollCnt$D_IN;
  wire dstUnrollCnt$EN;

  // register enWsiChecker
  reg enWsiChecker;
  wire enWsiChecker$D_IN, enWsiChecker$EN;

  // register enWsiSource
  reg enWsiSource;
  wire enWsiSource$D_IN, enWsiSource$EN;

  // register goodDataCnt
  reg [31 : 0] goodDataCnt;
  wire [31 : 0] goodDataCnt$D_IN;
  wire goodDataCnt$EN;

  // register goodMesgCnt
  reg [31 : 0] goodMesgCnt;
  wire [31 : 0] goodMesgCnt$D_IN;
  wire goodMesgCnt$EN;

  // register mesgHadError
  reg mesgHadError;
  wire mesgHadError$D_IN, mesgHadError$EN;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // register srcDataOut
  reg [31 : 0] srcDataOut;
  wire [31 : 0] srcDataOut$D_IN;
  wire srcDataOut$EN;

  // register srcMesgCount
  reg [15 : 0] srcMesgCount;
  wire [15 : 0] srcMesgCount$D_IN;
  wire srcMesgCount$EN;

  // register srcMesgRemain
  reg [15 : 0] srcMesgRemain;
  wire [15 : 0] srcMesgRemain$D_IN;
  wire srcMesgRemain$EN;

  // register srcUnrollCnt
  reg [15 : 0] srcUnrollCnt;
  wire [15 : 0] srcUnrollCnt$D_IN;
  wire srcUnrollCnt$EN;

  // register testOperating
  reg testOperating;
  wire testOperating$D_IN, testOperating$EN;

  // register wciSeqFsm_start_reg
  reg wciSeqFsm_start_reg;
  wire wciSeqFsm_start_reg$D_IN, wciSeqFsm_start_reg$EN;

  // register wciSeqFsm_state_mkFSMstate
  reg [3 : 0] wciSeqFsm_state_mkFSMstate;
  reg [3 : 0] wciSeqFsm_state_mkFSMstate$D_IN;
  wire wciSeqFsm_state_mkFSMstate$EN;

  // register wciSeqFsm_state_standby
  reg wciSeqFsm_state_standby;
  wire wciSeqFsm_state_standby$D_IN, wciSeqFsm_state_standby$EN;

  // register wciSeqOnce_onceReady
  reg wciSeqOnce_onceReady;
  wire wciSeqOnce_onceReady$D_IN, wciSeqOnce_onceReady$EN;

  // register wci_busy
  reg wci_busy;
  wire wci_busy$D_IN, wci_busy$EN;

  // register wci_lastConfigAddr
  reg [32 : 0] wci_lastConfigAddr;
  wire [32 : 0] wci_lastConfigAddr$D_IN;
  wire wci_lastConfigAddr$EN;

  // register wci_lastConfigBE
  reg [4 : 0] wci_lastConfigBE;
  wire [4 : 0] wci_lastConfigBE$D_IN;
  wire wci_lastConfigBE$EN;

  // register wci_lastControlOp
  reg [3 : 0] wci_lastControlOp;
  wire [3 : 0] wci_lastControlOp$D_IN;
  wire wci_lastControlOp$EN;

  // register wci_lastOpWrite
  reg [1 : 0] wci_lastOpWrite;
  wire [1 : 0] wci_lastOpWrite$D_IN;
  wire wci_lastOpWrite$EN;

  // register wci_mFlagReg
  reg [1 : 0] wci_mFlagReg;
  wire [1 : 0] wci_mFlagReg$D_IN;
  wire wci_mFlagReg$EN;

  // register wci_pageWindow
  reg [11 : 0] wci_pageWindow;
  wire [11 : 0] wci_pageWindow$D_IN;
  wire wci_pageWindow$EN;

  // register wci_reqERR
  reg [2 : 0] wci_reqERR;
  reg [2 : 0] wci_reqERR$D_IN;
  wire wci_reqERR$EN;

  // register wci_reqFAIL
  reg [2 : 0] wci_reqFAIL;
  reg [2 : 0] wci_reqFAIL$D_IN;
  wire wci_reqFAIL$EN;

  // register wci_reqF_c_r
  reg wci_reqF_c_r;
  wire wci_reqF_c_r$D_IN, wci_reqF_c_r$EN;

  // register wci_reqF_q_0
  reg [71 : 0] wci_reqF_q_0;
  wire [71 : 0] wci_reqF_q_0$D_IN;
  wire wci_reqF_q_0$EN;

  // register wci_reqPend
  reg [1 : 0] wci_reqPend;
  wire [1 : 0] wci_reqPend$D_IN;
  wire wci_reqPend$EN;

  // register wci_reqTO
  reg [2 : 0] wci_reqTO;
  reg [2 : 0] wci_reqTO$D_IN;
  wire wci_reqTO$EN;

  // register wci_respTimr
  reg [31 : 0] wci_respTimr;
  wire [31 : 0] wci_respTimr$D_IN;
  wire wci_respTimr$EN;

  // register wci_respTimrAct
  reg wci_respTimrAct;
  wire wci_respTimrAct$D_IN, wci_respTimrAct$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wci_sfCap
  reg wci_sfCap;
  wire wci_sfCap$D_IN, wci_sfCap$EN;

  // register wci_sfCapClear
  reg wci_sfCapClear;
  wire wci_sfCapClear$D_IN, wci_sfCapClear$EN;

  // register wci_sfCapSet
  reg wci_sfCapSet;
  wire wci_sfCapSet$D_IN, wci_sfCapSet$EN;

  // register wci_slvPresent
  reg wci_slvPresent;
  wire wci_slvPresent$D_IN, wci_slvPresent$EN;

  // register wci_wReset_n
  reg wci_wReset_n;
  wire wci_wReset_n$D_IN, wci_wReset_n$EN;

  // register wci_wStatus
  reg [31 : 0] wci_wStatus;
  wire [31 : 0] wci_wStatus$D_IN;
  wire wci_wStatus$EN;

  // register wci_wTimeout
  reg [4 : 0] wci_wTimeout;
  wire [4 : 0] wci_wTimeout$D_IN;
  wire wci_wTimeout$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule axis2wsi
  wire [31 : 0] axis2wsi$axi_TDATA, axis2wsi$wsi_MData;
  wire [11 : 0] axis2wsi$wsi_MBurstLength;
  wire [7 : 0] axis2wsi$axi_TUSER, axis2wsi$wsi_MReqInfo;
  wire [3 : 0] axis2wsi$axi_TSTRB, axis2wsi$wsi_MByteEn;
  wire [2 : 0] axis2wsi$wsi_MCmd;
  wire axis2wsi$axi_TLAST,
       axis2wsi$axi_TREADY,
       axis2wsi$axi_TVALID,
       axis2wsi$wsi_MBurstPrecise,
       axis2wsi$wsi_MReqLast,
       axis2wsi$wsi_MReset_n,
       axis2wsi$wsi_SReset_n,
       axis2wsi$wsi_SThreadBusy;

  // ports of submodule wci_mReset
  wire wci_mReset$ASSERT_IN;

  // ports of submodule wci_respF
  wire [33 : 0] wci_respF$D_IN;
  wire wci_respF$CLR, wci_respF$DEQ, wci_respF$ENQ, wci_respF$FULL_N;

  // ports of submodule wsi2axis
  wire [31 : 0] wsi2axis$axi_TDATA, wsi2axis$axi_TUSER, wsi2axis$wsi_MData;
  wire [11 : 0] wsi2axis$wsi_MBurstLength;
  wire [7 : 0] wsi2axis$wsi_MReqInfo;
  wire [3 : 0] wsi2axis$axi_TSTRB, wsi2axis$wsi_MByteEn;
  wire [2 : 0] wsi2axis$wsi_MCmd;
  wire wsi2axis$axi_TLAST,
       wsi2axis$axi_TREADY,
       wsi2axis$axi_TVALID,
       wsi2axis$wsi_MBurstPrecise,
       wsi2axis$wsi_MReqLast,
       wsi2axis$wsi_MReset_n,
       wsi2axis$wsi_SReset_n,
       wsi2axis$wsi_SThreadBusy;

  // ports of submodule wsiM_isReset
  wire wsiM_isReset$VAL;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_wciSeqFsm_actionof_l42c3_6,
       WILL_FIRE_RL_wciSeqFsm_actionof_l67c19,
       WILL_FIRE_RL_wci_wrkBusy,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_wci_respTimr$write_1__VAL_2;
  wire [15 : 0] MUX_dstUnrollCnt$write_1__VAL_2,
		MUX_srcMesgRemain$write_1__VAL_2,
		MUX_srcUnrollCnt$write_1__VAL_2;
  wire [1 : 0] MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_srcMesgRemain$write_1__SEL_2,
       MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1,
       MUX_wci_reqF_c_r$write_1__VAL_2,
       MUX_wci_respTimrAct$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h21599,
	       v__h21876,
	       v__h22070,
	       v__h22268,
	       v__h2737,
	       v__h2827,
	       v__h2916;
  wire [31 : 0] toCount__h2445, x__h2604;
  wire [26 : 0] IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137;
  wire [15 : 0] wsiBurstLength__h21669, x__h21539, x__h22037;
  wire NOT_wciSeqFsm_abort_whas__18_43_OR_NOT_wciSeqF_ETC___d348,
       wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543,
       wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494,
       wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278;

  // submodule axis2wsi
  mkAXIStoWSI4B axis2wsi(.CLK(CLK),
			 .RST_N(RST_N),
			 .axi_TDATA(axis2wsi$axi_TDATA),
			 .axi_TSTRB(axis2wsi$axi_TSTRB),
			 .axi_TUSER(axis2wsi$axi_TUSER),
			 .axi_TVALID(axis2wsi$axi_TVALID),
			 .axi_TLAST(axis2wsi$axi_TLAST),
			 .wsi_SThreadBusy(axis2wsi$wsi_SThreadBusy),
			 .wsi_SReset_n(axis2wsi$wsi_SReset_n),
			 .axi_TREADY(axis2wsi$axi_TREADY),
			 .wsi_MCmd(axis2wsi$wsi_MCmd),
			 .wsi_MReqLast(axis2wsi$wsi_MReqLast),
			 .wsi_MBurstPrecise(axis2wsi$wsi_MBurstPrecise),
			 .wsi_MBurstLength(axis2wsi$wsi_MBurstLength),
			 .wsi_MData(axis2wsi$wsi_MData),
			 .wsi_MByteEn(axis2wsi$wsi_MByteEn),
			 .wsi_MReqInfo(axis2wsi$wsi_MReqInfo),
			 .wsi_MReset_n(axis2wsi$wsi_MReset_n));

  // submodule wci_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) wci_mReset(.CLK(CLK),
							  .RST_N(RST_N),
							  .DST_CLK(CLK),
							  .ASSERT_IN(wci_mReset$ASSERT_IN),
							  .ASSERT_OUT(),
							  .OUT_RST_N());

  // submodule wci_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) wci_respF(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(wci_respF$D_IN),
						     .ENQ(wci_respF$ENQ),
						     .DEQ(wci_respF$DEQ),
						     .CLR(wci_respF$CLR),
						     .D_OUT(),
						     .FULL_N(wci_respF$FULL_N),
						     .EMPTY_N());

  // submodule wsi2axis
  mkWSItoAXIS4B wsi2axis(.CLK(CLK),
			 .RST_N(RST_N),
			 .wsi_MBurstLength(wsi2axis$wsi_MBurstLength),
			 .wsi_MByteEn(wsi2axis$wsi_MByteEn),
			 .wsi_MCmd(wsi2axis$wsi_MCmd),
			 .wsi_MData(wsi2axis$wsi_MData),
			 .wsi_MReqInfo(wsi2axis$wsi_MReqInfo),
			 .wsi_MReqLast(wsi2axis$wsi_MReqLast),
			 .wsi_MBurstPrecise(wsi2axis$wsi_MBurstPrecise),
			 .wsi_MReset_n(wsi2axis$wsi_MReset_n),
			 .axi_TREADY(wsi2axis$axi_TREADY),
			 .wsi_SThreadBusy(wsi2axis$wsi_SThreadBusy),
			 .wsi_SReset_n(wsi2axis$wsi_SReset_n),
			 .axi_TVALID(wsi2axis$axi_TVALID),
			 .axi_TDATA(wsi2axis$axi_TDATA),
			 .axi_TSTRB(wsi2axis$axi_TSTRB),
			 .axi_TUSER(wsi2axis$axi_TUSER),
			 .axi_TLAST(wsi2axis$axi_TLAST));

  // submodule wsiM_isReset
  ResetToBool wsiM_isReset(.RST(RST_N), .VAL(wsiM_isReset$VAL));

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wci_wrkBusy
  assign WILL_FIRE_RL_wci_wrkBusy =
	     (wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 ||
	      wci_respF$FULL_N) &&
	     wci_busy ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wciSeqFsm_actionof_l42c3_6
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l42c3_6 =
	     wciSeqFsm_state_mkFSMstate == 4'd1 &&
	     !wciSeqFsm_start_wire$whas &&
	     !wciSeqFsm_state_standby ;

  // rule RL_wciSeqFsm_actionof_l67c19
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 =
	     wciSeqFsm_state_mkFSMstate == 4'd1 &&
	     NOT_wciSeqFsm_abort_whas__18_43_OR_NOT_wciSeqF_ETC___d348 ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_srcMesgRemain$write_1__SEL_2 =
	     wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1 ;
  assign MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c3_6 ||
	     wciSeqFsm_state_mkFSMstate == 4'd7 ;
  assign MUX_wci_respTimrAct$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 =
	     wsiS_reqFifo$EMPTY_N && enWsiChecker ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_dstUnrollCnt$write_1__VAL_2 =
	     wsiS_reqFifo$D_OUT[57] ? wsiBurstLength__h21669 : x__h22037 ;
  assign MUX_srcMesgRemain$write_1__VAL_2 = srcMesgRemain - 16'd1 ;
  assign MUX_srcUnrollCnt$write_1__VAL_2 =
	     (srcUnrollCnt == 16'd1) ? 16'd16 : x__h21539 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_2 = wci_reqF_c_r - 1'd1 ;
  assign MUX_wci_respTimr$write_1__VAL_2 =
	     wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 ?
	       x__h2604 :
	       32'd0 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { 3'd1, srcUnrollCnt == 16'd1, 13'd4112, srcDataOut, 12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign wci_reqF_x_wire$wget = 72'h0 ;
  assign wci_reqF_x_wire$whas = 1'b0 ;
  assign wci_wciResponse$wget = 34'd0 ;
  assign wci_wciResponse$whas = 1'd1 ;
  assign wci_sfCapSet_1$wget = 1'b0 ;
  assign wci_sfCapSet_1$whas = 1'b0 ;
  assign wci_sfCapClear_1$wget = 1'b0 ;
  assign wci_sfCapClear_1$whas = 1'b0 ;
  assign wci_wci_Em_resp_w$wget = 2'h0 ;
  assign wci_wci_Em_resp_w$whas = 1'b0 ;
  assign wci_wci_Em_respData_w$wget = 32'h0 ;
  assign wci_wci_Em_respData_w$whas = 1'b0 ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = testOperating ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsi2axis$wsi_SReset_n ;
  assign wsiS_wsiReq$wget =
	     { axis2wsi$wsi_MCmd,
	       axis2wsi$wsi_MReqLast,
	       axis2wsi$wsi_MBurstPrecise,
	       axis2wsi$wsi_MBurstLength,
	       axis2wsi$wsi_MData,
	       axis2wsi$wsi_MByteEn,
	       axis2wsi$wsi_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = testOperating ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = axis2wsi$wsi_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign wciSeqFsm_start_reg_1$wget = 1'd1 ;
  assign wciSeqFsm_start_reg_1$whas =
	     wciSeqOnce_onceReady &&
	     (wciSeqFsm_state_mkFSMstate == 4'd7 ||
	      wciSeqFsm_state_mkFSMstate == 4'd1 &&
	      !wciSeqFsm_state_standby) &&
	     !wciSeqFsm_start_reg ;
  assign wciSeqFsm_start_wire$wget = 1'd1 ;
  assign wciSeqFsm_start_wire$whas =
	     (wciSeqFsm_state_mkFSMstate == 4'd7 ||
	      wciSeqFsm_state_mkFSMstate == 4'd1 &&
	      !wciSeqFsm_state_standby) &&
	     wciSeqFsm_start_reg ;
  assign wciSeqFsm_abort$wget = 1'b0 ;
  assign wciSeqFsm_abort$whas = 1'b0 ;
  assign wsi_Es_mCmd_w$wget = axis2wsi$wsi_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = axis2wsi$wsi_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = axis2wsi$wsi_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = axis2wsi$wsi_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = axis2wsi$wsi_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wci_reqF_enqueueing$whas = 1'b0 ;
  assign wci_reqF_dequeueing$whas = !wci_sThreadBusy_d && wci_reqF_c_r ;
  assign wci_sThreadBusy_pw$whas = 1'b0 ;
  assign wsiM_reqFifo_enqueueing$whas =
	     wsiM_reqFifo_c_r != 2'd2 && enWsiSource &&
	     srcMesgRemain != 16'd0 ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsi2axis$wsi_SThreadBusy ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign wciSeqFsm_state_run_pw$whas =
	     wciSeqFsm_state_mkFSMstate == 4'd6 ||
	     wciSeqFsm_state_mkFSMstate == 4'd5 ||
	     wciSeqFsm_state_mkFSMstate == 4'd4 ||
	     wciSeqFsm_state_mkFSMstate == 4'd3 ||
	     wciSeqFsm_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 ;
  assign wciSeqFsm_state_start_pw$whas = wciSeqFsm_start_wire$whas ;
  assign wciSeqFsm_pw_list$whas = 1'b0 ;
  assign wciSeqFsm_pw_list_1$whas =
	     MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 ;
  assign wciSeqFsm_pw_list_2$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 ;
  assign wciSeqFsm_pw_list_3$whas = wciSeqFsm_state_mkFSMstate == 4'd2 ;
  assign wciSeqFsm_pw_list_4$whas = wciSeqFsm_state_mkFSMstate == 4'd3 ;
  assign wciSeqFsm_pw_list_5$whas = wciSeqFsm_state_mkFSMstate == 4'd4 ;
  assign wciSeqFsm_pw_list_6$whas = wciSeqFsm_state_mkFSMstate == 4'd5 ;
  assign wciSeqFsm_pw_list_7$whas = wciSeqFsm_state_mkFSMstate == 4'd6 ;
  assign wciSeqFsm_pw_list_8$whas = 1'b0 ;
  assign wsi_Es_mReqLast_w$whas = axis2wsi$wsi_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = axis2wsi$wsi_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register badDataCnt
  assign badDataCnt$D_IN = badDataCnt + 32'd1 ;
  assign badDataCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     !wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 ;

  // register badMesgCnt
  assign badMesgCnt$D_IN = badMesgCnt + 32'd1 ;
  assign badMesgCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] &&
	     (!wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 ||
	      mesgHadError) ;

  // register dstDataOut
  assign dstDataOut$D_IN = dstDataOut + 32'd1 ;
  assign dstDataOut$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register dstMesgCount
  assign dstMesgCount$D_IN = dstMesgCount + 16'd1 ;
  assign dstMesgCount$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ;

  // register dstUnrollCnt
  assign dstUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 4'd3) ?
	       16'd16 :
	       MUX_dstUnrollCnt$write_1__VAL_2 ;
  assign dstUnrollCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ||
	     wciSeqFsm_state_mkFSMstate == 4'd3 ;

  // register enWsiChecker
  assign enWsiChecker$D_IN = 1'd1 ;
  assign enWsiChecker$EN = wciSeqFsm_state_mkFSMstate == 4'd4 ;

  // register enWsiSource
  assign enWsiSource$D_IN = 1'd1 ;
  assign enWsiSource$EN = wciSeqFsm_state_mkFSMstate == 4'd6 ;

  // register goodDataCnt
  assign goodDataCnt$D_IN = goodDataCnt + 32'd1 ;
  assign goodDataCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 ;

  // register goodMesgCnt
  assign goodMesgCnt$D_IN = goodMesgCnt + 32'd1 ;
  assign goodMesgCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] &&
	     wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 &&
	     !mesgHadError ;

  // register mesgHadError
  assign mesgHadError$D_IN =
	     !wsiS_reqFifo$D_OUT[57] &&
	     !wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 ;
  assign mesgHadError$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // register srcDataOut
  assign srcDataOut$D_IN = srcDataOut + 32'd1 ;
  assign srcDataOut$EN = wsiM_reqFifo_enqueueing$whas ;

  // register srcMesgCount
  assign srcMesgCount$D_IN = srcMesgCount + 16'd1 ;
  assign srcMesgCount$EN = MUX_srcMesgRemain$write_1__SEL_2 ;

  // register srcMesgRemain
  assign srcMesgRemain$D_IN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 ?
	       16'd4 :
	       MUX_srcMesgRemain$write_1__VAL_2 ;
  assign srcMesgRemain$EN =
	     wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 ;

  // register srcUnrollCnt
  assign srcUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 4'd5) ?
	       16'd16 :
	       MUX_srcUnrollCnt$write_1__VAL_2 ;
  assign srcUnrollCnt$EN =
	     wsiM_reqFifo_enqueueing$whas ||
	     wciSeqFsm_state_mkFSMstate == 4'd5 ;

  // register testOperating
  assign testOperating$D_IN = 1'd1 ;
  assign testOperating$EN = wciSeqFsm_state_mkFSMstate == 4'd2 ;

  // register wciSeqFsm_start_reg
  assign wciSeqFsm_start_reg$D_IN = wciSeqFsm_start_reg_1$whas ;
  assign wciSeqFsm_start_reg$EN = 1'd1 ;

  // register wciSeqFsm_state_mkFSMstate
  always@(MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 or
	  wciSeqFsm_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_wciSeqFsm_actionof_l67c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd2;
      wciSeqFsm_state_mkFSMstate == 4'd2:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd3;
      wciSeqFsm_state_mkFSMstate == 4'd3:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd4;
      wciSeqFsm_state_mkFSMstate == 4'd4:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd5;
      wciSeqFsm_state_mkFSMstate == 4'd5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd6;
      wciSeqFsm_state_mkFSMstate == 4'd6:
	  wciSeqFsm_state_mkFSMstate$D_IN = 4'd7;
      default: wciSeqFsm_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign wciSeqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c3_6 ||
	     wciSeqFsm_state_mkFSMstate == 4'd7 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c19 ||
	     wciSeqFsm_state_mkFSMstate == 4'd2 ||
	     wciSeqFsm_state_mkFSMstate == 4'd3 ||
	     wciSeqFsm_state_mkFSMstate == 4'd4 ||
	     wciSeqFsm_state_mkFSMstate == 4'd5 ||
	     wciSeqFsm_state_mkFSMstate == 4'd6 ;

  // register wciSeqFsm_state_standby
  assign wciSeqFsm_state_standby$D_IN = !wciSeqFsm_state_run_pw$whas ;
  assign wciSeqFsm_state_standby$EN =
	     wciSeqFsm_state_run_pw$whas || wciSeqFsm_start_wire$whas ;

  // register wciSeqOnce_onceReady
  assign wciSeqOnce_onceReady$D_IN = 1'd0 ;
  assign wciSeqOnce_onceReady$EN = wciSeqFsm_start_reg_1$whas ;

  // register wci_busy
  assign wci_busy$D_IN = 1'd0 ;
  assign wci_busy$EN = MUX_wci_respTimrAct$write_1__SEL_2 ;

  // register wci_lastConfigAddr
  assign wci_lastConfigAddr$D_IN = 33'h0 ;
  assign wci_lastConfigAddr$EN = 1'b0 ;

  // register wci_lastConfigBE
  assign wci_lastConfigBE$D_IN = 5'h0 ;
  assign wci_lastConfigBE$EN = 1'b0 ;

  // register wci_lastControlOp
  assign wci_lastControlOp$D_IN = 4'h0 ;
  assign wci_lastControlOp$EN = 1'b0 ;

  // register wci_lastOpWrite
  assign wci_lastOpWrite$D_IN = 2'h0 ;
  assign wci_lastOpWrite$EN = 1'b0 ;

  // register wci_mFlagReg
  assign wci_mFlagReg$D_IN = 2'h0 ;
  assign wci_mFlagReg$EN = 1'b0 ;

  // register wci_pageWindow
  assign wci_pageWindow$D_IN = 12'h0 ;
  assign wci_pageWindow$EN = 1'b0 ;

  // register wci_reqERR
  always@(wci_reqPend or wci_reqERR)
  begin
    case (wci_reqPend)
      2'd1: wci_reqERR$D_IN = { 1'd1, wci_reqERR[1:0] };
      2'd2: wci_reqERR$D_IN = { wci_reqERR[2], 1'd1, wci_reqERR[0] };
      default: wci_reqERR$D_IN = { wci_reqERR[2:1], 1'd1 };
    endcase
  end
  assign wci_reqERR$EN = 1'b0 ;

  // register wci_reqFAIL
  always@(wci_reqPend or wci_reqFAIL)
  begin
    case (wci_reqPend)
      2'd1: wci_reqFAIL$D_IN = { 1'd1, wci_reqFAIL[1:0] };
      2'd2: wci_reqFAIL$D_IN = { wci_reqFAIL[2], 1'd1, wci_reqFAIL[0] };
      default: wci_reqFAIL$D_IN = { wci_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign wci_reqFAIL$EN = 1'b0 ;

  // register wci_reqF_c_r
  assign wci_reqF_c_r$D_IN = MUX_wci_reqF_c_r$write_1__VAL_2 ;
  assign wci_reqF_c_r$EN = wci_reqF_dequeueing$whas ;

  // register wci_reqF_q_0
  assign wci_reqF_q_0$D_IN = 72'h0000000000AAAAAAAA ;
  assign wci_reqF_q_0$EN = wci_reqF_dequeueing$whas ;

  // register wci_reqPend
  assign wci_reqPend$D_IN = 2'd0 ;
  assign wci_reqPend$EN = 1'b0 ;

  // register wci_reqTO
  always@(wci_reqPend or wci_reqTO)
  begin
    case (wci_reqPend)
      2'd1: wci_reqTO$D_IN = { 1'd1, wci_reqTO[1:0] };
      2'd2: wci_reqTO$D_IN = { wci_reqTO[2], 1'd1, wci_reqTO[0] };
      default: wci_reqTO$D_IN = { wci_reqTO[2:1], 1'd1 };
    endcase
  end
  assign wci_reqTO$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_respTimr
  assign wci_respTimr$D_IN =
	     wci_reqF_c_r ? 32'd0 : MUX_wci_respTimr$write_1__VAL_2 ;
  assign wci_respTimr$EN = WILL_FIRE_RL_wci_wrkBusy || wci_reqF_c_r ;

  // register wci_respTimrAct
  assign wci_respTimrAct$D_IN = wci_reqF_c_r ;
  assign wci_respTimrAct$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 ||
	     wci_reqF_c_r ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wci_sfCap
  assign wci_sfCap$D_IN = wci_sfCapSet ;
  assign wci_sfCap$EN = wci_sfCapSet || wci_sfCapClear ;

  // register wci_sfCapClear
  assign wci_sfCapClear$D_IN = 1'b0 ;
  assign wci_sfCapClear$EN = 1'd1 ;

  // register wci_sfCapSet
  assign wci_sfCapSet$D_IN = 1'b0 ;
  assign wci_sfCapSet$EN = 1'd1 ;

  // register wci_slvPresent
  assign wci_slvPresent$D_IN = 1'b0 ;
  assign wci_slvPresent$EN = 1'b0 ;

  // register wci_wReset_n
  assign wci_wReset_n$D_IN = 1'b0 ;
  assign wci_wReset_n$EN = 1'b0 ;

  // register wci_wStatus
  assign wci_wStatus$D_IN =
	     { 4'b0,
	       !wci_lastOpWrite[1] || wci_lastOpWrite[0],
	       IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 } ;
  assign wci_wStatus$EN = 1'd1 ;

  // register wci_wTimeout
  assign wci_wTimeout$D_IN = 5'h0 ;
  assign wci_wTimeout$EN = 1'b0 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = testOperating ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsi2axis$wsi_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(MUX_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiM_reqFifo_q_0$write_1__SEL_1:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsi2axis$wsi_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset$VAL,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = testOperating ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = axis2wsi$wsi_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule axis2wsi
  assign axis2wsi$axi_TDATA = wsi2axis$axi_TDATA ;
  assign axis2wsi$axi_TSTRB = wsi2axis$axi_TSTRB ;
  assign axis2wsi$axi_TUSER = wsi2axis$axi_TUSER[7:0] ;
  assign axis2wsi$axi_TVALID = wsi2axis$axi_TVALID ;
  assign axis2wsi$axi_TLAST = wsi2axis$axi_TLAST ;
  assign axis2wsi$wsi_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;
  assign axis2wsi$wsi_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // submodule wci_mReset
  assign wci_mReset$ASSERT_IN = !wci_wReset_n ;

  // submodule wci_respF
  assign wci_respF$D_IN = 34'h1C0DE4203 ;
  assign wci_respF$ENQ = MUX_wci_respTimrAct$write_1__SEL_2 ;
  assign wci_respF$DEQ = 1'b0 ;
  assign wci_respF$CLR = 1'b0 ;

  // submodule wsi2axis
  assign wsi2axis$wsi_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;
  assign wsi2axis$wsi_MByteEn = wsiM_reqFifo_q_0[11:8] ;
  assign wsi2axis$wsi_MCmd =
	     wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;
  assign wsi2axis$wsi_MData = wsiM_reqFifo_q_0[43:12] ;
  assign wsi2axis$wsi_MReqInfo =
	     wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;
  assign wsi2axis$wsi_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;
  assign wsi2axis$wsi_MBurstPrecise =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;
  assign wsi2axis$wsi_MReset_n = !wsiM_isReset$VAL && wsiM_operateD ;
  assign wsi2axis$axi_TREADY = axis2wsi$axi_TREADY ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 =
	     { wci_lastControlOp[3] ? wci_lastControlOp[2:0] : 3'b111,
	       wci_lastConfigBE[4] ? wci_lastConfigBE[3:0] : 4'hF,
	       wci_lastOpWrite[1],
	       wci_lastControlOp[3],
	       wci_lastConfigBE[4],
	       wci_lastConfigAddr[32],
	       6'b0,
	       wci_sfCap,
	       wci_reqTO,
	       wci_reqFAIL,
	       wci_reqERR } ;
  assign NOT_wciSeqFsm_abort_whas__18_43_OR_NOT_wciSeqF_ETC___d348 =
	     wciSeqFsm_start_wire$whas || wciSeqFsm_state_standby ;
  assign toCount__h2445 = 32'd1 << wci_wTimeout ;
  assign wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 =
	     wci_respTimr < toCount__h2445 ;
  assign wsiBurstLength__h21669 = { 4'd0, wsiS_reqFifo$D_OUT[55:44] } ;
  assign wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494 =
	     wsiS_reqFifo$D_OUT[43:12] == dstDataOut ;
  assign wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x__h21539 = srcUnrollCnt - 16'd1 ;
  assign x__h22037 = dstUnrollCnt - 16'd1 ;
  assign x__h2604 = wci_respTimr + 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        badDataCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	badMesgCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	enWsiChecker <= `BSV_ASSIGNMENT_DELAY 1'd0;
	enWsiSource <= `BSV_ASSIGNMENT_DELAY 1'd0;
	goodDataCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	goodMesgCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mesgHadError <= `BSV_ASSIGNMENT_DELAY 1'd0;
	simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	srcMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcMesgRemain <= `BSV_ASSIGNMENT_DELAY 16'd1;
	srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	testOperating <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd1;
	wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	wci_pageWindow <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wci_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 72'h0000000000AAAAAAAA;
	wci_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (badDataCnt$EN)
	  badDataCnt <= `BSV_ASSIGNMENT_DELAY badDataCnt$D_IN;
	if (badMesgCnt$EN)
	  badMesgCnt <= `BSV_ASSIGNMENT_DELAY badMesgCnt$D_IN;
	if (dstDataOut$EN)
	  dstDataOut <= `BSV_ASSIGNMENT_DELAY dstDataOut$D_IN;
	if (dstMesgCount$EN)
	  dstMesgCount <= `BSV_ASSIGNMENT_DELAY dstMesgCount$D_IN;
	if (dstUnrollCnt$EN)
	  dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY dstUnrollCnt$D_IN;
	if (enWsiChecker$EN)
	  enWsiChecker <= `BSV_ASSIGNMENT_DELAY enWsiChecker$D_IN;
	if (enWsiSource$EN)
	  enWsiSource <= `BSV_ASSIGNMENT_DELAY enWsiSource$D_IN;
	if (goodDataCnt$EN)
	  goodDataCnt <= `BSV_ASSIGNMENT_DELAY goodDataCnt$D_IN;
	if (goodMesgCnt$EN)
	  goodMesgCnt <= `BSV_ASSIGNMENT_DELAY goodMesgCnt$D_IN;
	if (mesgHadError$EN)
	  mesgHadError <= `BSV_ASSIGNMENT_DELAY mesgHadError$D_IN;
	if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
	if (srcDataOut$EN)
	  srcDataOut <= `BSV_ASSIGNMENT_DELAY srcDataOut$D_IN;
	if (srcMesgCount$EN)
	  srcMesgCount <= `BSV_ASSIGNMENT_DELAY srcMesgCount$D_IN;
	if (srcMesgRemain$EN)
	  srcMesgRemain <= `BSV_ASSIGNMENT_DELAY srcMesgRemain$D_IN;
	if (srcUnrollCnt$EN)
	  srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY srcUnrollCnt$D_IN;
	if (testOperating$EN)
	  testOperating <= `BSV_ASSIGNMENT_DELAY testOperating$D_IN;
	if (wciSeqFsm_start_reg$EN)
	  wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg$D_IN;
	if (wciSeqFsm_state_mkFSMstate$EN)
	  wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_mkFSMstate$D_IN;
	if (wciSeqFsm_state_standby$EN)
	  wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_standby$D_IN;
	if (wciSeqOnce_onceReady$EN)
	  wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY
	      wciSeqOnce_onceReady$D_IN;
	if (wci_busy$EN) wci_busy <= `BSV_ASSIGNMENT_DELAY wci_busy$D_IN;
	if (wci_lastConfigAddr$EN)
	  wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY wci_lastConfigAddr$D_IN;
	if (wci_lastConfigBE$EN)
	  wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY wci_lastConfigBE$D_IN;
	if (wci_lastControlOp$EN)
	  wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY wci_lastControlOp$D_IN;
	if (wci_lastOpWrite$EN)
	  wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY wci_lastOpWrite$D_IN;
	if (wci_mFlagReg$EN)
	  wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY wci_mFlagReg$D_IN;
	if (wci_pageWindow$EN)
	  wci_pageWindow <= `BSV_ASSIGNMENT_DELAY wci_pageWindow$D_IN;
	if (wci_reqERR$EN)
	  wci_reqERR <= `BSV_ASSIGNMENT_DELAY wci_reqERR$D_IN;
	if (wci_reqFAIL$EN)
	  wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY wci_reqFAIL$D_IN;
	if (wci_reqF_c_r$EN)
	  wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wci_reqF_c_r$D_IN;
	if (wci_reqF_q_0$EN)
	  wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_reqF_q_0$D_IN;
	if (wci_reqPend$EN)
	  wci_reqPend <= `BSV_ASSIGNMENT_DELAY wci_reqPend$D_IN;
	if (wci_reqTO$EN) wci_reqTO <= `BSV_ASSIGNMENT_DELAY wci_reqTO$D_IN;
	if (wci_respTimr$EN)
	  wci_respTimr <= `BSV_ASSIGNMENT_DELAY wci_respTimr$D_IN;
	if (wci_respTimrAct$EN)
	  wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY wci_respTimrAct$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wci_sfCap$EN) wci_sfCap <= `BSV_ASSIGNMENT_DELAY wci_sfCap$D_IN;
	if (wci_sfCapClear$EN)
	  wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY wci_sfCapClear$D_IN;
	if (wci_sfCapSet$EN)
	  wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY wci_sfCapSet$D_IN;
	if (wci_slvPresent$EN)
	  wci_slvPresent <= `BSV_ASSIGNMENT_DELAY wci_slvPresent$D_IN;
	if (wci_wReset_n$EN)
	  wci_wReset_n <= `BSV_ASSIGNMENT_DELAY wci_wReset_n$D_IN;
	if (wci_wTimeout$EN)
	  wci_wTimeout <= `BSV_ASSIGNMENT_DELAY wci_wTimeout$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wci_wStatus$EN) wci_wStatus <= `BSV_ASSIGNMENT_DELAY wci_wStatus$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    badDataCnt = 32'hAAAAAAAA;
    badMesgCnt = 32'hAAAAAAAA;
    dstDataOut = 32'hAAAAAAAA;
    dstMesgCount = 16'hAAAA;
    dstUnrollCnt = 16'hAAAA;
    enWsiChecker = 1'h0;
    enWsiSource = 1'h0;
    goodDataCnt = 32'hAAAAAAAA;
    goodMesgCnt = 32'hAAAAAAAA;
    mesgHadError = 1'h0;
    simCycle = 16'hAAAA;
    srcDataOut = 32'hAAAAAAAA;
    srcMesgCount = 16'hAAAA;
    srcMesgRemain = 16'hAAAA;
    srcUnrollCnt = 16'hAAAA;
    testOperating = 1'h0;
    wciSeqFsm_start_reg = 1'h0;
    wciSeqFsm_state_mkFSMstate = 4'hA;
    wciSeqFsm_state_standby = 1'h0;
    wciSeqOnce_onceReady = 1'h0;
    wci_busy = 1'h0;
    wci_lastConfigAddr = 33'h0AAAAAAAA;
    wci_lastConfigBE = 5'h0A;
    wci_lastControlOp = 4'hA;
    wci_lastOpWrite = 2'h2;
    wci_mFlagReg = 2'h2;
    wci_pageWindow = 12'hAAA;
    wci_reqERR = 3'h2;
    wci_reqFAIL = 3'h2;
    wci_reqF_c_r = 1'h0;
    wci_reqF_q_0 = 72'hAAAAAAAAAAAAAAAAAA;
    wci_reqPend = 2'h2;
    wci_reqTO = 3'h2;
    wci_respTimr = 32'hAAAAAAAA;
    wci_respTimrAct = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wci_sfCap = 1'h0;
    wci_sfCapClear = 1'h0;
    wci_sfCapSet = 1'h0;
    wci_slvPresent = 1'h0;
    wci_wReset_n = 1'h0;
    wci_wStatus = 32'hAAAAAAAA;
    wci_wTimeout = 5'h0A;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1)
	begin
	  v__h21599 = $time;
	  #0;
	end
    if (RST_N)
      if (wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: srcMesgCount:%0x opcode:%0x",
		 v__h21599,
		 srcMesgCount,
		 8'd0);
    if (RST_N)
      if (simCycle == 16'd1000)
	begin
	  v__h22268 = $time;
	  #0;
	end
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("[%0d]: %m: mkTB13 termination", v__h22268);
    if (RST_N)
      if (simCycle == 16'd1000) $display("goodDataCnt:%08x", goodDataCnt);
    if (RST_N)
      if (simCycle == 16'd1000) $display("goodMesgCnt:%08x", goodMesgCnt);
    if (RST_N)
      if (simCycle == 16'd1000) $display("badDataCnt :%08x", badDataCnt);
    if (RST_N)
      if (simCycle == 16'd1000) $display("badMesgCnt :%08x", badMesgCnt);
    if (RST_N)
      if (simCycle == 16'd1000 && badDataCnt == 32'd0)
	$display("mkTB13 PASSED OK");
    if (RST_N)
      if (simCycle == 16'd1000 && badDataCnt != 32'd0)
	$display("mkTB13 had %d ERRORS and FAILED", badDataCnt);
    if (RST_N) if (simCycle == 16'd1000) $finish(32'd1);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h2737 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2737);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h2827 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h2827);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h2916 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d543 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h2916);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 4'd2) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 4'd5) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 4'd6) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l42c3_6 ||
	  wciSeqFsm_state_mkFSMstate == 4'd7)
	$write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 4'd1 &&
	  NOT_wciSeqFsm_abort_whas__18_43_OR_NOT_wciSeqF_ETC___d348)
	$write("");
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	  !wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494)
	begin
	  v__h21876 = $time;
	  #0;
	end
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	  !wsiS_reqFifo_first__52_BITS_43_TO_12_53_EQ_dst_ETC___d494)
	$display("[%0d]: %m: wsi_checker MISMATCH: exp:%0x got:%0x srcMesgCount:%0x",
		 v__h21876,
		 dstDataOut,
		 wsiS_reqFifo$D_OUT[43:12],
		 dstMesgCount);
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	  wsiS_reqFifo$D_OUT[57])
	begin
	  v__h22070 = $time;
	  #0;
	end
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	  wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: wsi_source: End of WSI Consumer Ingress: dstMesgCount:%0x opcode:%0x",
		 v__h22070,
		 dstMesgCount,
		 wsiS_reqFifo$D_OUT[7:0]);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 4'd3) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 4'd4) $write("");
  end
  // synopsys translate_on
endmodule  // mkTB13

