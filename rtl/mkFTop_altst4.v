//
// Generated by Bluespec Compiler, version 2011.03.beta1 (build 23381, 2011-03-08)
//
// On Sat Apr  2 07:15:16 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// pcie_tx                        O     4 const
// led                            O    16
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// p125rst                        O     1 reset
// sys0_clk                       I     1 clock
// sys0_rstn                      I     1 reset
// pcie_clk                       I     1 clock
// pcie_rstn                      I     1 reset
// pcie_rx_i                      I     4 unused
// usr_sw_i                       I     8 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_altst4(sys0_clk,
		     sys0_rstn,
		     pcie_clk,
		     pcie_rstn,

		     pcie_rx_i,

		     pcie_tx,

		     usr_sw_i,

		     led,

		     p125clk,
		     CLK_GATE_p125clk,

		     p125rst);
  input  sys0_clk;
  input  sys0_rstn;
  input  pcie_clk;
  input  pcie_rstn;

  // action method pcie_rx
  input  [3 : 0] pcie_rx_i;

  // value method pcie_tx
  output [3 : 0] pcie_tx;

  // action method usr_sw
  input  [7 : 0] usr_sw_i;

  // value method led
  output [15 : 0] led;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // output resets
  output p125rst;

  // signals for module outputs
  wire [15 : 0] led;
  wire [3 : 0] pcie_tx;
  wire CLK_GATE_p125clk, p125clk, p125rst;

  // inlined wires
  wire [95 : 0] pmemMonW8_wsiS_extStatusW$wget;
  wire [63 : 0] pciw_pci0_wTrnTxDat$wget;
  wire [60 : 0] pmemMonW8_wsiS_wsiReq$wget;
  wire [31 : 0] pmemMonW8_wsi_Es_mData_w$wget;
  wire [11 : 0] pmemMonW8_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] pciw_pci0_wTrnTxRem$wget,
	       pciw_pcie_irq_wInterruptDo$wget,
	       pmemMonW8_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] pmemMonW8_wsi_Es_mByteEn_w$wget;
  wire [2 : 0] pmemMonW8_wsi_Es_mCmd_w$wget;
  wire [1 : 0] infLed$wget;
  wire pciw_pci0_pwTrnRx$whas,
       pciw_pci0_pwTrnTx$whas,
       pciw_pci0_wTrnRxCplS$wget,
       pciw_pci0_wTrnRxCplS$whas,
       pciw_pci0_wTrnRxNpOk$wget,
       pciw_pci0_wTrnRxNpOk$whas,
       pciw_pci0_wTrnTxDat$whas,
       pciw_pci0_wTrnTxDsc$wget,
       pciw_pci0_wTrnTxDsc$whas,
       pciw_pci0_wTrnTxEof$wget,
       pciw_pci0_wTrnTxEof$whas,
       pciw_pci0_wTrnTxRem$whas,
       pciw_pci0_wTrnTxSof$wget,
       pciw_pci0_wTrnTxSof$whas,
       pciw_pcie_irq_wInterruptDo$whas,
       pciw_pcie_irq_wInterruptRdyN$wget,
       pciw_pcie_irq_wInterruptRdyN$whas,
       pmemMonW8_pmBody_1$wget,
       pmemMonW8_pmBody_1$whas,
       pmemMonW8_pmHead_1$wget,
       pmemMonW8_pmHead_1$whas,
       pmemMonW8_wsiS_operateD_1$wget,
       pmemMonW8_wsiS_operateD_1$whas,
       pmemMonW8_wsiS_peerIsReady_1$wget,
       pmemMonW8_wsiS_peerIsReady_1$whas,
       pmemMonW8_wsiS_reqFifo_doResetClr$whas,
       pmemMonW8_wsiS_reqFifo_doResetDeq$whas,
       pmemMonW8_wsiS_reqFifo_doResetEnq$whas,
       pmemMonW8_wsiS_reqFifo_r_clr$whas,
       pmemMonW8_wsiS_reqFifo_r_deq$whas,
       pmemMonW8_wsiS_reqFifo_r_enq$whas,
       pmemMonW8_wsiS_sThreadBusy_dw$wget,
       pmemMonW8_wsiS_sThreadBusy_dw$whas,
       pmemMonW8_wsiS_wsiReq$whas,
       pmemMonW8_wsi_Es_mBurstLength_w$whas,
       pmemMonW8_wsi_Es_mBurstPrecise_w$whas,
       pmemMonW8_wsi_Es_mByteEn_w$whas,
       pmemMonW8_wsi_Es_mCmd_w$whas,
       pmemMonW8_wsi_Es_mDataInfo_w$whas,
       pmemMonW8_wsi_Es_mData_w$whas,
       pmemMonW8_wsi_Es_mReqInfo_w$whas,
       pmemMonW8_wsi_Es_mReqLast_w$whas;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi$D_IN;
  wire pciw_pcie_irq_rInterruptDi$EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN$D_IN, pciw_pcie_irq_rInterruptN$EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting$D_IN, pciw_pcie_irq_rInterrupting$EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled$D_IN;
  wire pciw_pcie_irq_rMMEnabled$EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled$D_IN, pciw_pcie_irq_rMSIEnabled$EN;

  // register pciw_rg
  reg [81 : 0] pciw_rg;
  wire [81 : 0] pciw_rg$D_IN;
  wire pciw_rg$EN;

  // register pciw_rg_1
  reg [81 : 0] pciw_rg_1;
  wire [81 : 0] pciw_rg_1$D_IN;
  wire pciw_rg_1$EN;

  // register pmemMonW8_eventCount
  reg [31 : 0] pmemMonW8_eventCount;
  wire [31 : 0] pmemMonW8_eventCount$D_IN;
  wire pmemMonW8_eventCount$EN;

  // register pmemMonW8_msgActive
  reg pmemMonW8_msgActive;
  wire pmemMonW8_msgActive$D_IN, pmemMonW8_msgActive$EN;

  // register pmemMonW8_pmBody
  reg pmemMonW8_pmBody;
  wire pmemMonW8_pmBody$D_IN, pmemMonW8_pmBody$EN;

  // register pmemMonW8_pmGrab
  reg pmemMonW8_pmGrab;
  wire pmemMonW8_pmGrab$D_IN, pmemMonW8_pmGrab$EN;

  // register pmemMonW8_pmHead
  reg pmemMonW8_pmHead;
  wire pmemMonW8_pmHead$D_IN, pmemMonW8_pmHead$EN;

  // register pmemMonW8_pmh
  reg [31 : 0] pmemMonW8_pmh;
  wire [31 : 0] pmemMonW8_pmh$D_IN;
  wire pmemMonW8_pmh$EN;

  // register pmemMonW8_wsiS_burstKind
  reg [1 : 0] pmemMonW8_wsiS_burstKind;
  wire [1 : 0] pmemMonW8_wsiS_burstKind$D_IN;
  wire pmemMonW8_wsiS_burstKind$EN;

  // register pmemMonW8_wsiS_errorSticky
  reg pmemMonW8_wsiS_errorSticky;
  wire pmemMonW8_wsiS_errorSticky$D_IN, pmemMonW8_wsiS_errorSticky$EN;

  // register pmemMonW8_wsiS_iMesgCount
  reg [31 : 0] pmemMonW8_wsiS_iMesgCount;
  wire [31 : 0] pmemMonW8_wsiS_iMesgCount$D_IN;
  wire pmemMonW8_wsiS_iMesgCount$EN;

  // register pmemMonW8_wsiS_isReset_isInReset
  reg pmemMonW8_wsiS_isReset_isInReset;
  wire pmemMonW8_wsiS_isReset_isInReset$D_IN,
       pmemMonW8_wsiS_isReset_isInReset$EN;

  // register pmemMonW8_wsiS_mesgWordLength
  reg [11 : 0] pmemMonW8_wsiS_mesgWordLength;
  wire [11 : 0] pmemMonW8_wsiS_mesgWordLength$D_IN;
  wire pmemMonW8_wsiS_mesgWordLength$EN;

  // register pmemMonW8_wsiS_operateD
  reg pmemMonW8_wsiS_operateD;
  wire pmemMonW8_wsiS_operateD$D_IN, pmemMonW8_wsiS_operateD$EN;

  // register pmemMonW8_wsiS_pMesgCount
  reg [31 : 0] pmemMonW8_wsiS_pMesgCount;
  wire [31 : 0] pmemMonW8_wsiS_pMesgCount$D_IN;
  wire pmemMonW8_wsiS_pMesgCount$EN;

  // register pmemMonW8_wsiS_peerIsReady
  reg pmemMonW8_wsiS_peerIsReady;
  wire pmemMonW8_wsiS_peerIsReady$D_IN, pmemMonW8_wsiS_peerIsReady$EN;

  // register pmemMonW8_wsiS_reqFifo_countReg
  reg [1 : 0] pmemMonW8_wsiS_reqFifo_countReg;
  wire [1 : 0] pmemMonW8_wsiS_reqFifo_countReg$D_IN;
  wire pmemMonW8_wsiS_reqFifo_countReg$EN;

  // register pmemMonW8_wsiS_reqFifo_levelsValid
  reg pmemMonW8_wsiS_reqFifo_levelsValid;
  wire pmemMonW8_wsiS_reqFifo_levelsValid$D_IN,
       pmemMonW8_wsiS_reqFifo_levelsValid$EN;

  // register pmemMonW8_wsiS_statusR
  reg [7 : 0] pmemMonW8_wsiS_statusR;
  wire [7 : 0] pmemMonW8_wsiS_statusR$D_IN;
  wire pmemMonW8_wsiS_statusR$EN;

  // register pmemMonW8_wsiS_tBusyCount
  reg [31 : 0] pmemMonW8_wsiS_tBusyCount;
  wire [31 : 0] pmemMonW8_wsiS_tBusyCount$D_IN;
  wire pmemMonW8_wsiS_tBusyCount$EN;

  // register pmemMonW8_wsiS_trafficSticky
  reg pmemMonW8_wsiS_trafficSticky;
  wire pmemMonW8_wsiS_trafficSticky$D_IN, pmemMonW8_wsiS_trafficSticky$EN;

  // register pmemMonW8_wsiS_wordCount
  reg [11 : 0] pmemMonW8_wsiS_wordCount;
  wire [11 : 0] pmemMonW8_wsiS_wordCount$D_IN;
  wire pmemMonW8_wsiS_wordCount$EN;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM0_SData, ctop$wsi_s_adc_MData;
  wire [31 : 0] ctop$wci_m_0_SData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_SData;
  wire [15 : 0] ctop$wsi_s_adc_MByteEn;
  wire [11 : 0] ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_s_adc_MReqInfo;
  wire [2 : 0] ctop$switch_x, ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$led,
	       ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM0_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$gps_ppsSyncIn_x,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM0_SCmdAccept,
       ctop$wmemiM0_SDataAccept,
       ctop$wmemiM0_SRespLast,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n;

  // ports of submodule pciw_inFifo
  wire [80 : 0] pciw_inFifo$D_IN, pciw_inFifo$D_OUT;
  wire pciw_inFifo$CLR,
       pciw_inFifo$DEQ,
       pciw_inFifo$EMPTY_N,
       pciw_inFifo$ENQ,
       pciw_inFifo$FULL_N;

  // ports of submodule pciw_outFifo
  wire [80 : 0] pciw_outFifo$D_IN, pciw_outFifo$D_OUT;
  wire pciw_outFifo$CLR,
       pciw_outFifo$DEQ,
       pciw_outFifo$EMPTY_N,
       pciw_outFifo$ENQ,
       pciw_outFifo$FULL_N;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst$OUT_RST_N;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk$O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep$cfg_dsn,
		pciw_pci0_pcie_ep$trn_rd,
		pciw_pci0_pcie_ep$trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep$cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_di,
	       pciw_pci0_pcie_ep$cfg_interrupt_do,
	       pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_trem_n;
  wire [6 : 0] pciw_pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep$cfg_byte_en_n,
	       pciw_pci0_pcie_ep$pci_exp_rxn,
	       pciw_pci0_pcie_ep$pci_exp_rxp;
  wire [2 : 0] pciw_pci0_pcie_ep$cfg_function_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_mmenable;
  wire pciw_pci0_pcie_ep$cfg_err_cor_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep$cfg_err_ecrc_n,
       pciw_pci0_pcie_ep$cfg_err_locked_n,
       pciw_pci0_pcie_ep$cfg_err_posted_n,
       pciw_pci0_pcie_ep$cfg_err_ur_n,
       pciw_pci0_pcie_ep$cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep$cfg_interrupt_msienable,
       pciw_pci0_pcie_ep$cfg_interrupt_n,
       pciw_pci0_pcie_ep$cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep$cfg_pm_wake_n,
       pciw_pci0_pcie_ep$cfg_rd_en_n,
       pciw_pci0_pcie_ep$cfg_trn_pending_n,
       pciw_pci0_pcie_ep$cfg_wr_en_n,
       pciw_pci0_pcie_ep$trn_clk,
       pciw_pci0_pcie_ep$trn_lnk_up_n,
       pciw_pci0_pcie_ep$trn_rcpl_streaming_n,
       pciw_pci0_pcie_ep$trn_rdst_rdy_n,
       pciw_pci0_pcie_ep$trn_reof_n,
       pciw_pci0_pcie_ep$trn_reset_n,
       pciw_pci0_pcie_ep$trn_rnp_ok_n,
       pciw_pci0_pcie_ep$trn_rsof_n,
       pciw_pci0_pcie_ep$trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tdst_rdy_n,
       pciw_pci0_pcie_ep$trn_teof_n,
       pciw_pci0_pcie_ep$trn_terrfwd_n,
       pciw_pci0_pcie_ep$trn_tsof_n,
       pciw_pci0_pcie_ep$trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep$trn_tsrc_rdy_n;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice$dD_OUT, pciw_pciDevice$sD_IN;
  wire pciw_pciDevice$sEN, pciw_pciDevice$sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp$dD_OUT, pciw_pciLinkUp$sD_IN, pciw_pciLinkUp$sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert$dD_OUT,
	       pciw_pcie_irq_fifoAssert$sD_IN;
  wire pciw_pcie_irq_fifoAssert$dDEQ,
       pciw_pcie_irq_fifoAssert$dEMPTY_N,
       pciw_pcie_irq_fifoAssert$sENQ;

  // ports of submodule pciw_uI2PF
  wire [152 : 0] pciw_uI2PF$D_IN, pciw_uI2PF$D_OUT;
  wire pciw_uI2PF$CLR,
       pciw_uI2PF$DEQ,
       pciw_uI2PF$EMPTY_N,
       pciw_uI2PF$ENQ,
       pciw_uI2PF$FULL_N;

  // ports of submodule pciw_uP2IF
  wire [152 : 0] pciw_uP2IF$D_IN, pciw_uP2IF$D_OUT;
  wire pciw_uP2IF$CLR,
       pciw_uP2IF$DEQ,
       pciw_uP2IF$EMPTY_N,
       pciw_uP2IF$ENQ,
       pciw_uP2IF$FULL_N;

  // ports of submodule pmemMonW8_pmemF
  wire [33 : 0] pmemMonW8_pmemF$D_IN, pmemMonW8_pmemF$D_OUT;
  wire pmemMonW8_pmemF$CLR,
       pmemMonW8_pmemF$DEQ,
       pmemMonW8_pmemF$EMPTY_N,
       pmemMonW8_pmemF$ENQ,
       pmemMonW8_pmemF$FULL_N;

  // ports of submodule pmemMonW8_wsiS_reqFifo
  wire [60 : 0] pmemMonW8_wsiS_reqFifo$D_IN, pmemMonW8_wsiS_reqFifo$D_OUT;
  wire pmemMonW8_wsiS_reqFifo$CLR,
       pmemMonW8_wsiS_reqFifo$DEQ,
       pmemMonW8_wsiS_reqFifo$EMPTY_N,
       pmemMonW8_wsiS_reqFifo$ENQ,
       pmemMonW8_wsiS_reqFifo$FULL_N;

  // ports of submodule wciMonW8
  wire [31 : 0] wciMonW8$observe_MAddr,
		wciMonW8$observe_MData,
		wciMonW8$observe_SData,
		wciMonW8$pmem_MData;
  wire [11 : 0] wciMonW8$pmem_MBurstLength;
  wire [7 : 0] wciMonW8$pmem_MReqInfo;
  wire [3 : 0] wciMonW8$observe_MByteEn, wciMonW8$pmem_MByteEn;
  wire [2 : 0] wciMonW8$observe_MCmd, wciMonW8$pmem_MCmd;
  wire [1 : 0] wciMonW8$observe_MFlag,
	       wciMonW8$observe_SFlag,
	       wciMonW8$observe_SResp;
  wire wciMonW8$observe_MAddrSpace,
       wciMonW8$observe_MReset_n,
       wciMonW8$observe_SThreadBusy,
       wciMonW8$pmem_MBurstPrecise,
       wciMonW8$pmem_MReqLast,
       wciMonW8$pmem_MReset_n,
       wciMonW8$pmem_SReset_n,
       wciMonW8$pmem_SThreadBusy;

  // rule scheduling signals
  wire WILL_FIRE_RL_pciw_connect_1,
       WILL_FIRE_RL_pciw_downconv_connect1,
       WILL_FIRE_RL_pciw_downconv_connect2,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pciw_upconv_connect1,
       WILL_FIRE_RL_pciw_upconv_connect2,
       WILL_FIRE_RL_pmemMonW8_gen_message_body_dw,
       WILL_FIRE_RL_pmemMonW8_get_message_head_dw,
       WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq,
       WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_pciw_uP2IF$enq_1__VAL_1, MUX_pciw_uP2IF$enq_1__VAL_2;
  wire [81 : 0] MUX_pciw_rg$write_1__VAL_1, MUX_pciw_rg_1$write_1__VAL_1;
  wire [80 : 0] MUX_pciw_outFifo$enq_1__VAL_1;
  wire MUX_pciw_rg$write_1__SEL_1,
       MUX_pciw_rg_1$write_1__SEL_1,
       MUX_pciw_uP2IF$enq_1__SEL_1,
       MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2,
       MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h11835, v__h13329;
  reg [7 : 0] CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2,
	      CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1,
	      IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647;
  wire [127 : 0] wOut_data__h3155, x_data__h3076;
  wire [15 : 0] wOut_be__h3154, x_be__h3075;
  wire _dor1pmemMonW8_eventCount$EN_write,
       pmemMonW8_wsiS_reqFifo_notFull__88_AND_pmemMon_ETC___d210,
       z__h10350,
       z__h10357,
       z__h10364,
       z__h10371,
       z__h10378,
       z__h10385,
       z__h10392,
       z__h10399,
       z__h10406,
       z__h10413,
       z__h10420,
       z__h10427,
       z__h10434,
       z__h10441,
       z__h10448,
       z__h10455,
       z__h10462,
       z__h10469,
       z__h10476,
       z__h10483,
       z__h10490,
       z__h10497,
       z__h10504,
       z__h10511,
       z__h10518,
       z__h10525,
       z__h10532,
       z__h10539,
       z__h10546,
       z__h10553;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep$trn_clk ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // output resets
  assign p125rst = pciw_p125rst$OUT_RST_N ;

  // value method pcie_tx
  assign pcie_tx = 4'hA ;

  // value method led
  assign led =
	     { 10'd267,
	       pmemMonW8_pmGrab,
	       pmemMonW8_pmHead,
	       pmemMonW8_pmBody,
	       ctop$led,
	       pciw_pciLinkUp$dD_OUT } ;

  // submodule ctop
  mkCTop16B ctop(.pciDevice(pciDevice),
		 .CLK_sys0_clk(sys0_clk),
		 .RST_N_sys0_rst(sys0_rstn),
		 .CLK(pciw_pci0_pcie_ep$trn_clk),
		 .RST_N(pciw_p125rst$OUT_RST_N),
		 .gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
		 .server_request_put(ctop$server_request_put),
		 .switch_x(ctop$switch_x),
		 .wci_m_0_SData(ctop$wci_m_0_SData),
		 .wci_m_0_SFlag(ctop$wci_m_0_SFlag),
		 .wci_m_0_SResp(ctop$wci_m_0_SResp),
		 .wci_m_1_SData(ctop$wci_m_1_SData),
		 .wci_m_1_SFlag(ctop$wci_m_1_SFlag),
		 .wci_m_1_SResp(ctop$wci_m_1_SResp),
		 .wci_m_2_SData(ctop$wci_m_2_SData),
		 .wci_m_2_SFlag(ctop$wci_m_2_SFlag),
		 .wci_m_2_SResp(ctop$wci_m_2_SResp),
		 .wci_m_3_SData(ctop$wci_m_3_SData),
		 .wci_m_3_SFlag(ctop$wci_m_3_SFlag),
		 .wci_m_3_SResp(ctop$wci_m_3_SResp),
		 .wci_m_4_SData(ctop$wci_m_4_SData),
		 .wci_m_4_SFlag(ctop$wci_m_4_SFlag),
		 .wci_m_4_SResp(ctop$wci_m_4_SResp),
		 .wmemiM0_SData(ctop$wmemiM0_SData),
		 .wmemiM0_SResp(ctop$wmemiM0_SResp),
		 .wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
		 .wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
		 .wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
		 .wsi_s_adc_MData(ctop$wsi_s_adc_MData),
		 .wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
		 .EN_server_request_put(ctop$EN_server_request_put),
		 .EN_server_response_get(ctop$EN_server_response_get),
		 .wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
		 .wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
		 .wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
		 .wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
		 .wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
		 .wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
		 .wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
		 .wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
		 .wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
		 .wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
		 .wmemiM0_SRespLast(ctop$wmemiM0_SRespLast),
		 .wmemiM0_SCmdAccept(ctop$wmemiM0_SCmdAccept),
		 .wmemiM0_SDataAccept(ctop$wmemiM0_SDataAccept),
		 .RDY_server_request_put(ctop$RDY_server_request_put),
		 .server_response_get(ctop$server_response_get),
		 .RDY_server_response_get(ctop$RDY_server_response_get),
		 .led(ctop$led),
		 .wci_m_0_MCmd(),
		 .wci_m_0_MAddrSpace(),
		 .wci_m_0_MByteEn(),
		 .wci_m_0_MAddr(),
		 .wci_m_0_MData(),
		 .wci_m_0_MFlag(),
		 .wci_m_1_MCmd(),
		 .wci_m_1_MAddrSpace(),
		 .wci_m_1_MByteEn(),
		 .wci_m_1_MAddr(),
		 .wci_m_1_MData(),
		 .wci_m_1_MFlag(),
		 .wci_m_2_MCmd(),
		 .wci_m_2_MAddrSpace(),
		 .wci_m_2_MByteEn(),
		 .wci_m_2_MAddr(),
		 .wci_m_2_MData(),
		 .wci_m_2_MFlag(),
		 .wci_m_3_MCmd(),
		 .wci_m_3_MAddrSpace(),
		 .wci_m_3_MByteEn(),
		 .wci_m_3_MAddr(),
		 .wci_m_3_MData(),
		 .wci_m_3_MFlag(),
		 .wci_m_4_MCmd(),
		 .wci_m_4_MAddrSpace(),
		 .wci_m_4_MByteEn(),
		 .wci_m_4_MAddr(),
		 .wci_m_4_MData(),
		 .wci_m_4_MFlag(),
		 .cpNow(),
		 .RDY_cpNow(),
		 .wsi_s_adc_SThreadBusy(),
		 .wsi_s_adc_SReset_n(),
		 .wsi_m_dac_MCmd(),
		 .wsi_m_dac_MReqLast(),
		 .wsi_m_dac_MBurstPrecise(),
		 .wsi_m_dac_MBurstLength(),
		 .wsi_m_dac_MData(),
		 .wsi_m_dac_MByteEn(),
		 .wsi_m_dac_MReqInfo(),
		 .wsi_m_dac_MReset_n(),
		 .wmemiM0_MCmd(),
		 .wmemiM0_MReqLast(),
		 .wmemiM0_MAddr(),
		 .wmemiM0_MBurstLength(),
		 .wmemiM0_MDataValid(),
		 .wmemiM0_MDataLast(),
		 .wmemiM0_MData(),
		 .wmemiM0_MDataByteEn(),
		 .wmemiM0_MReset_n(),
		 .gps_ppsSyncOut(),
		 .RST_N_wci_m_0(),
		 .RST_N_wci_m_1(),
		 .RST_N_wci_m_2(),
		 .RST_N_wci_m_3(),
		 .RST_N_wci_m_4());

  // submodule pciw_inFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_inFifo(.RST_N(pciw_p125rst$OUT_RST_N),
				       .CLK(pciw_pci0_pcie_ep$trn_clk),
				       .D_IN(pciw_inFifo$D_IN),
				       .ENQ(pciw_inFifo$ENQ),
				       .DEQ(pciw_inFifo$DEQ),
				       .CLR(pciw_inFifo$CLR),
				       .D_OUT(pciw_inFifo$D_OUT),
				       .FULL_N(pciw_inFifo$FULL_N),
				       .EMPTY_N(pciw_inFifo$EMPTY_N));

  // submodule pciw_outFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_outFifo(.RST_N(pciw_p125rst$OUT_RST_N),
					.CLK(pciw_pci0_pcie_ep$trn_clk),
					.D_IN(pciw_outFifo$D_IN),
					.ENQ(pciw_outFifo$ENQ),
					.DEQ(pciw_outFifo$DEQ),
					.CLR(pciw_outFifo$CLR),
					.D_OUT(pciw_outFifo$D_OUT),
					.FULL_N(pciw_outFifo$FULL_N),
					.EMPTY_N(pciw_outFifo$EMPTY_N));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p125rst$OUT_RST_N));

  // submodule pciw_pci0_clk
  IBUFDS pciw_pci0_clk(.I(pcie_clk), .IB(pcie_clk), .O(pciw_pci0_clk$O));

  // submodule pciw_pci0_pcie_ep
  xilinx_v5_pcie_wrapper pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk$O),
					   .sys_reset_n(pcie_rstn),
					   .fast_train_simulation_only(1'h0),
					   .cfg_byte_en_n(pciw_pci0_pcie_ep$cfg_byte_en_n),
					   .cfg_di(pciw_pci0_pcie_ep$cfg_di),
					   .cfg_dsn(pciw_pci0_pcie_ep$cfg_dsn),
					   .cfg_dwaddr(pciw_pci0_pcie_ep$cfg_dwaddr),
					   .cfg_err_cor_n(pciw_pci0_pcie_ep$cfg_err_cor_n),
					   .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep$cfg_err_cpl_abort_n),
					   .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n),
					   .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n),
					   .cfg_err_ecrc_n(pciw_pci0_pcie_ep$cfg_err_ecrc_n),
					   .cfg_err_locked_n(pciw_pci0_pcie_ep$cfg_err_locked_n),
					   .cfg_err_posted_n(pciw_pci0_pcie_ep$cfg_err_posted_n),
					   .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header),
					   .cfg_err_ur_n(pciw_pci0_pcie_ep$cfg_err_ur_n),
					   .cfg_interrupt_assert_n(pciw_pci0_pcie_ep$cfg_interrupt_assert_n),
					   .cfg_interrupt_di(pciw_pci0_pcie_ep$cfg_interrupt_di),
					   .cfg_interrupt_n(pciw_pci0_pcie_ep$cfg_interrupt_n),
					   .cfg_pm_wake_n(pciw_pci0_pcie_ep$cfg_pm_wake_n),
					   .cfg_rd_en_n(pciw_pci0_pcie_ep$cfg_rd_en_n),
					   .cfg_trn_pending_n(pciw_pci0_pcie_ep$cfg_trn_pending_n),
					   .cfg_wr_en_n(pciw_pci0_pcie_ep$cfg_wr_en_n),
					   .pci_exp_rxn(pciw_pci0_pcie_ep$pci_exp_rxn),
					   .pci_exp_rxp(pciw_pci0_pcie_ep$pci_exp_rxp),
					   .trn_rcpl_streaming_n(pciw_pci0_pcie_ep$trn_rcpl_streaming_n),
					   .trn_rdst_rdy_n(pciw_pci0_pcie_ep$trn_rdst_rdy_n),
					   .trn_rnp_ok_n(pciw_pci0_pcie_ep$trn_rnp_ok_n),
					   .trn_td(pciw_pci0_pcie_ep$trn_td),
					   .trn_teof_n(pciw_pci0_pcie_ep$trn_teof_n),
					   .trn_terrfwd_n(pciw_pci0_pcie_ep$trn_terrfwd_n),
					   .trn_trem_n(pciw_pci0_pcie_ep$trn_trem_n),
					   .trn_tsof_n(pciw_pci0_pcie_ep$trn_tsof_n),
					   .trn_tsrc_dsc_n(pciw_pci0_pcie_ep$trn_tsrc_dsc_n),
					   .trn_tsrc_rdy_n(pciw_pci0_pcie_ep$trn_tsrc_rdy_n),
					   .pci_exp_txp(),
					   .pci_exp_txn(),
					   .trn_lnk_up_n(pciw_pci0_pcie_ep$trn_lnk_up_n),
					   .cfg_do(),
					   .cfg_rd_wr_done_n(),
					   .cfg_to_turnoff_n(),
					   .cfg_bus_number(pciw_pci0_pcie_ep$cfg_bus_number),
					   .cfg_device_number(pciw_pci0_pcie_ep$cfg_device_number),
					   .cfg_function_number(pciw_pci0_pcie_ep$cfg_function_number),
					   .cfg_status(),
					   .cfg_command(),
					   .cfg_dstatus(),
					   .cfg_dcommand(),
					   .cfg_lstatus(),
					   .cfg_lcommand(),
					   .cfg_pcie_link_state_n(),
					   .trn_rsof_n(pciw_pci0_pcie_ep$trn_rsof_n),
					   .trn_reof_n(pciw_pci0_pcie_ep$trn_reof_n),
					   .trn_rd(pciw_pci0_pcie_ep$trn_rd),
					   .trn_rrem_n(pciw_pci0_pcie_ep$trn_rrem_n),
					   .trn_rerrfwd_n(),
					   .trn_rsrc_rdy_n(pciw_pci0_pcie_ep$trn_rsrc_rdy_n),
					   .trn_rsrc_dsc_n(),
					   .trn_rbar_hit_n(pciw_pci0_pcie_ep$trn_rbar_hit_n),
					   .trn_rfc_ph_av(),
					   .trn_rfc_pd_av(),
					   .trn_rfc_nph_av(),
					   .trn_rfc_npd_av(),
					   .trn_tdst_rdy_n(pciw_pci0_pcie_ep$trn_tdst_rdy_n),
					   .trn_tdst_dsc_n(),
					   .trn_tbuf_av(),
					   .cfg_err_cpl_rdy_n(),
					   .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep$cfg_interrupt_rdy_n),
					   .cfg_interrupt_mmenable(pciw_pci0_pcie_ep$cfg_interrupt_mmenable),
					   .cfg_interrupt_msienable(pciw_pci0_pcie_ep$cfg_interrupt_msienable),
					   .cfg_interrupt_do(pciw_pci0_pcie_ep$cfg_interrupt_do),
					   .trn_clk(pciw_pci0_pcie_ep$trn_clk),
					   .trn2_clk(),
					   .refclkout(),
					   .trn_reset_n(pciw_pci0_pcie_ep$trn_reset_n));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					      .dCLK(pciw_pci0_pcie_ep$trn_clk),
					      .sRST_N(pciw_p125rst$OUT_RST_N),
					      .sD_IN(pciw_pciDevice$sD_IN),
					      .sEN(pciw_pciDevice$sEN),
					      .dD_OUT(pciw_pciDevice$dD_OUT),
					      .sRDY(pciw_pciDevice$sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(1'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					.dCLK(pciw_pci0_pcie_ep$trn_clk),
					.sRST_N(pciw_p125rst$OUT_RST_N),
					.sD_IN(pciw_pciLinkUp$sD_IN),
					.sEN(pciw_pciLinkUp$sEN),
					.dD_OUT(pciw_pciLinkUp$dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep$trn_clk),
							 .dCLK(pciw_pci0_pcie_ep$trn_clk),
							 .sRST_N(pciw_p125rst$OUT_RST_N),
							 .sD_IN(pciw_pcie_irq_fifoAssert$sD_IN),
							 .sENQ(pciw_pcie_irq_fifoAssert$sENQ),
							 .dDEQ(pciw_pcie_irq_fifoAssert$dDEQ),
							 .dD_OUT(pciw_pcie_irq_fifoAssert$dD_OUT),
							 .sFULL_N(),
							 .dEMPTY_N(pciw_pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pciw_uI2PF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uI2PF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uI2PF$D_IN),
				      .ENQ(pciw_uI2PF$ENQ),
				      .DEQ(pciw_uI2PF$DEQ),
				      .CLR(pciw_uI2PF$CLR),
				      .D_OUT(pciw_uI2PF$D_OUT),
				      .FULL_N(pciw_uI2PF$FULL_N),
				      .EMPTY_N(pciw_uI2PF$EMPTY_N));

  // submodule pciw_uP2IF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uP2IF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uP2IF$D_IN),
				      .ENQ(pciw_uP2IF$ENQ),
				      .DEQ(pciw_uP2IF$DEQ),
				      .CLR(pciw_uP2IF$CLR),
				      .D_OUT(pciw_uP2IF$D_OUT),
				      .FULL_N(pciw_uP2IF$FULL_N),
				      .EMPTY_N(pciw_uP2IF$EMPTY_N));

  // submodule pmemMonW8_pmemF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) pmemMonW8_pmemF(.RST_N(pciw_p125rst$OUT_RST_N),
					   .CLK(pciw_pci0_pcie_ep$trn_clk),
					   .D_IN(pmemMonW8_pmemF$D_IN),
					   .ENQ(pmemMonW8_pmemF$ENQ),
					   .DEQ(pmemMonW8_pmemF$DEQ),
					   .CLR(pmemMonW8_pmemF$CLR),
					   .D_OUT(pmemMonW8_pmemF$D_OUT),
					   .FULL_N(pmemMonW8_pmemF$FULL_N),
					   .EMPTY_N(pmemMonW8_pmemF$EMPTY_N));

  // submodule pmemMonW8_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pmemMonW8_wsiS_reqFifo(.RST_N(pciw_p125rst$OUT_RST_N),
						      .CLK(pciw_pci0_pcie_ep$trn_clk),
						      .D_IN(pmemMonW8_wsiS_reqFifo$D_IN),
						      .ENQ(pmemMonW8_wsiS_reqFifo$ENQ),
						      .DEQ(pmemMonW8_wsiS_reqFifo$DEQ),
						      .CLR(pmemMonW8_wsiS_reqFifo$CLR),
						      .D_OUT(pmemMonW8_wsiS_reqFifo$D_OUT),
						      .FULL_N(pmemMonW8_wsiS_reqFifo$FULL_N),
						      .EMPTY_N(pmemMonW8_wsiS_reqFifo$EMPTY_N));

  // submodule wciMonW8
  mkWciMonitor #(.monId(8'h42)) wciMonW8(.CLK(pciw_pci0_pcie_ep$trn_clk),
					 .RST_N(pciw_p125rst$OUT_RST_N),
					 .observe_MAddr(wciMonW8$observe_MAddr),
					 .observe_MAddrSpace(wciMonW8$observe_MAddrSpace),
					 .observe_MByteEn(wciMonW8$observe_MByteEn),
					 .observe_MCmd(wciMonW8$observe_MCmd),
					 .observe_MData(wciMonW8$observe_MData),
					 .observe_MFlag(wciMonW8$observe_MFlag),
					 .observe_MReset_n(wciMonW8$observe_MReset_n),
					 .observe_SData(wciMonW8$observe_SData),
					 .observe_SFlag(wciMonW8$observe_SFlag),
					 .observe_SResp(wciMonW8$observe_SResp),
					 .observe_SThreadBusy(wciMonW8$observe_SThreadBusy),
					 .pmem_SThreadBusy(wciMonW8$pmem_SThreadBusy),
					 .pmem_SReset_n(wciMonW8$pmem_SReset_n),
					 .pmem_MCmd(wciMonW8$pmem_MCmd),
					 .pmem_MReqLast(wciMonW8$pmem_MReqLast),
					 .pmem_MBurstPrecise(wciMonW8$pmem_MBurstPrecise),
					 .pmem_MBurstLength(wciMonW8$pmem_MBurstLength),
					 .pmem_MData(wciMonW8$pmem_MData),
					 .pmem_MByteEn(wciMonW8$pmem_MByteEn),
					 .pmem_MReqInfo(wciMonW8$pmem_MReqInfo),
					 .pmem_MReset_n(wciMonW8$pmem_MReset_n));

  // rule RL_pciw_upconv_connect1
  assign WILL_FIRE_RL_pciw_upconv_connect1 =
	     pciw_inFifo$EMPTY_N &&
	     (!pciw_inFifo$D_OUT[79] || pciw_uP2IF$FULL_N) &&
	     !pciw_rg[81] ;

  // rule RL_pciw_upconv_connect2
  assign WILL_FIRE_RL_pciw_upconv_connect2 =
	     pciw_inFifo$EMPTY_N && pciw_uP2IF$FULL_N && pciw_rg[81] ;

  // rule RL_pciw_connect_1
  assign WILL_FIRE_RL_pciw_connect_1 =
	     pciw_outFifo$EMPTY_N &&
	     (pciw_outFifo$D_OUT[71:64] == 8'd0 ||
	      !pciw_pci0_pcie_ep$trn_tdst_rdy_n) ;

  // rule RL_pciw_downconv_connect1
  assign WILL_FIRE_RL_pciw_downconv_connect1 =
	     pciw_uI2PF$EMPTY_N && pciw_outFifo$FULL_N && !pciw_rg_1[81] ;

  // rule RL_pciw_downconv_connect2
  assign WILL_FIRE_RL_pciw_downconv_connect2 =
	     pciw_outFifo$FULL_N && pciw_rg_1[81] ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert$dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pmemMonW8_get_message_head_dw
  assign WILL_FIRE_RL_pmemMonW8_get_message_head_dw =
	     pmemMonW8_pmemF$EMPTY_N && !pmemMonW8_pmemF$D_OUT[32] ;

  // rule RL_pmemMonW8_gen_message_body_dw
  assign WILL_FIRE_RL_pmemMonW8_gen_message_body_dw =
	     pmemMonW8_pmemF$EMPTY_N && pmemMonW8_pmemF$D_OUT[32] ;

  // rule RL_pmemMonW8_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq =
	     pmemMonW8_wsiS_operateD && pmemMonW8_wsiS_peerIsReady &&
	     pmemMonW8_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_pmemMonW8_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_pciw_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ;
  assign MUX_pciw_rg_1$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ;
  assign MUX_pciw_uP2IF$enq_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ;
  assign MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 =
	     pmemMonW8_wsiS_reqFifo$EMPTY_N && pmemMonW8_pmemF$FULL_N ;
  assign MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo$FULL_N ;
  assign MUX_pciw_outFifo$enq_1__VAL_1 =
	     (pciw_uI2PF$D_OUT[135:128] == 8'd0) ?
	       { pciw_uI2PF$D_OUT[152:136], pciw_uI2PF$D_OUT[127:64] } :
	       { pciw_uI2PF$D_OUT[152],
		 1'd0,
		 pciw_uI2PF$D_OUT[150:136],
		 pciw_uI2PF$D_OUT[127:64] } ;
  assign MUX_pciw_rg$write_1__VAL_1 = { 1'd1, pciw_inFifo$D_OUT } ;
  assign MUX_pciw_rg_1$write_1__VAL_1 =
	     { 2'd2,
	       pciw_uI2PF$D_OUT[151:144],
	       pciw_uI2PF$D_OUT[135:128],
	       pciw_uI2PF$D_OUT[63:0] } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_1 =
	     { pciw_inFifo$D_OUT[80:72], x_be__h3075, x_data__h3076 } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_2 =
	     { pciw_rg[80],
	       pciw_inFifo$D_OUT[79],
	       pciw_rg[78:72],
	       wOut_be__h3154,
	       wOut_data__h3155 } ;

  // inlined wires
  assign pciw_pci0_wTrnTxSof$wget = !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_wTrnTxSof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxEof$wget = !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_wTrnTxEof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDsc$wget = 1'd1 ;
  assign pciw_pci0_wTrnTxDsc$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxRem$wget = pciw_outFifo$D_OUT[71:64] ;
  assign pciw_pci0_wTrnTxRem$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDat$wget = pciw_outFifo$D_OUT[63:0] ;
  assign pciw_pci0_wTrnTxDat$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnRxNpOk$wget = 1'd0 ;
  assign pciw_pci0_wTrnRxNpOk$whas = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$wget = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptRdyN$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign pmemMonW8_wsiS_wsiReq$wget =
	     { wciMonW8$pmem_MCmd,
	       wciMonW8$pmem_MReqLast,
	       wciMonW8$pmem_MBurstPrecise,
	       wciMonW8$pmem_MBurstLength,
	       wciMonW8$pmem_MData,
	       wciMonW8$pmem_MByteEn,
	       wciMonW8$pmem_MReqInfo } ;
  assign pmemMonW8_wsiS_wsiReq$whas = 1'd1 ;
  assign pmemMonW8_wsiS_operateD_1$wget = 1'd1 ;
  assign pmemMonW8_wsiS_operateD_1$whas = 1'd1 ;
  assign pmemMonW8_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign pmemMonW8_wsiS_peerIsReady_1$whas = wciMonW8$pmem_MReset_n ;
  assign pmemMonW8_wsiS_sThreadBusy_dw$wget =
	     pmemMonW8_wsiS_reqFifo_countReg > 2'd1 ;
  assign pmemMonW8_wsiS_sThreadBusy_dw$whas =
	     pmemMonW8_wsiS_reqFifo_levelsValid && pmemMonW8_wsiS_operateD &&
	     pmemMonW8_wsiS_peerIsReady ;
  assign pmemMonW8_pmHead_1$wget = 1'd1 ;
  assign pmemMonW8_pmHead_1$whas =
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmBody_1$wget = 1'd1 ;
  assign pmemMonW8_pmBody_1$whas =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ;
  assign pmemMonW8_wsi_Es_mCmd_w$wget = wciMonW8$pmem_MCmd ;
  assign pmemMonW8_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mBurstLength_w$wget = wciMonW8$pmem_MBurstLength ;
  assign pmemMonW8_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mData_w$wget = wciMonW8$pmem_MData ;
  assign pmemMonW8_wsi_Es_mData_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mByteEn_w$wget = wciMonW8$pmem_MByteEn ;
  assign pmemMonW8_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mReqInfo_w$wget = wciMonW8$pmem_MReqInfo ;
  assign pmemMonW8_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign pciw_pci0_pwTrnTx$whas =
	     WILL_FIRE_RL_pciw_connect_1 &&
	     pciw_outFifo$D_OUT[71:64] != 8'd0 ;
  assign pciw_pci0_pwTrnRx$whas =
	     !pciw_pci0_pcie_ep$trn_rsrc_rdy_n && pciw_inFifo$FULL_N ;
  assign pmemMonW8_wsiS_reqFifo_r_enq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo_r_deq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign pmemMonW8_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign pmemMonW8_wsiS_reqFifo_doResetEnq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo_doResetDeq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign pmemMonW8_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign pmemMonW8_wsi_Es_mReqLast_w$whas = wciMonW8$pmem_MReqLast ;
  assign pmemMonW8_wsi_Es_mBurstPrecise_w$whas = wciMonW8$pmem_MBurstPrecise ;
  assign pmemMonW8_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign infLed$wget = ctop$led ;
  assign pmemMonW8_wsiS_extStatusW$wget =
	     { pmemMonW8_wsiS_pMesgCount,
	       pmemMonW8_wsiS_iMesgCount,
	       pmemMonW8_wsiS_tBusyCount } ;

  // register pciDevice
  assign pciDevice$D_IN = pciw_pciDevice$dD_OUT ;
  assign pciDevice$EN = 1'd1 ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi$D_IN = pciw_pcie_irq_fifoAssert$dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register pciw_rg
  assign pciw_rg$D_IN =
	     MUX_pciw_rg$write_1__SEL_1 ?
	       MUX_pciw_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg$EN =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;

  // register pciw_rg_1
  assign pciw_rg_1$D_IN =
	     MUX_pciw_rg_1$write_1__SEL_1 ?
	       MUX_pciw_rg_1$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg_1$EN =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;

  // register pmemMonW8_eventCount
  assign pmemMonW8_eventCount$D_IN = pmemMonW8_eventCount + 32'd1 ;
  assign pmemMonW8_eventCount$EN =
	     _dor1pmemMonW8_eventCount$EN_write && pmemMonW8_pmemF$D_OUT[33] ;

  // register pmemMonW8_msgActive
  assign pmemMonW8_msgActive$D_IN = !pmemMonW8_wsiS_reqFifo$D_OUT[57] ;
  assign pmemMonW8_msgActive$EN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register pmemMonW8_pmBody
  assign pmemMonW8_pmBody$D_IN = WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ;
  assign pmemMonW8_pmBody$EN = 1'd1 ;

  // register pmemMonW8_pmGrab
  assign pmemMonW8_pmGrab$D_IN = z__h10553 ^ pmemMonW8_pmh[31] ;
  assign pmemMonW8_pmGrab$EN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;

  // register pmemMonW8_pmHead
  assign pmemMonW8_pmHead$D_IN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmHead$EN = 1'd1 ;

  // register pmemMonW8_pmh
  assign pmemMonW8_pmh$D_IN =
	     { pmemMonW8_pmemF$D_OUT[31:24],
	       CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2,
	       pmemMonW8_pmemF$D_OUT[15:0] } ;
  assign pmemMonW8_pmh$EN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;

  // register pmemMonW8_wsiS_burstKind
  assign pmemMonW8_wsiS_burstKind$D_IN =
	     (pmemMonW8_wsiS_burstKind == 2'd0) ?
	       (pmemMonW8_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pmemMonW8_wsiS_burstKind$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo_notFull__88_AND_pmemMon_ETC___d210 ;

  // register pmemMonW8_wsiS_errorSticky
  assign pmemMonW8_wsiS_errorSticky$D_IN = 1'd1 ;
  assign pmemMonW8_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     !pmemMonW8_wsiS_reqFifo$FULL_N ;

  // register pmemMonW8_wsiS_iMesgCount
  assign pmemMonW8_wsiS_iMesgCount$D_IN = pmemMonW8_wsiS_iMesgCount + 32'd1 ;
  assign pmemMonW8_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo$FULL_N &&
	     pmemMonW8_wsiS_burstKind == 2'd2 &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_isReset_isInReset
  assign pmemMonW8_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign pmemMonW8_wsiS_isReset_isInReset$EN =
	     pmemMonW8_wsiS_isReset_isInReset ;

  // register pmemMonW8_wsiS_mesgWordLength
  assign pmemMonW8_wsiS_mesgWordLength$D_IN = pmemMonW8_wsiS_wordCount ;
  assign pmemMonW8_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo$FULL_N &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_operateD
  assign pmemMonW8_wsiS_operateD$D_IN = 1'b1 ;
  assign pmemMonW8_wsiS_operateD$EN = 1'd1 ;

  // register pmemMonW8_wsiS_pMesgCount
  assign pmemMonW8_wsiS_pMesgCount$D_IN = pmemMonW8_wsiS_pMesgCount + 32'd1 ;
  assign pmemMonW8_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo$FULL_N &&
	     pmemMonW8_wsiS_burstKind == 2'd1 &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_peerIsReady
  assign pmemMonW8_wsiS_peerIsReady$D_IN = wciMonW8$pmem_MReset_n ;
  assign pmemMonW8_wsiS_peerIsReady$EN = 1'd1 ;

  // register pmemMonW8_wsiS_reqFifo_countReg
  assign pmemMonW8_wsiS_reqFifo_countReg$D_IN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       pmemMonW8_wsiS_reqFifo_countReg + 2'd1 :
	       pmemMonW8_wsiS_reqFifo_countReg - 2'd1 ;
  assign pmemMonW8_wsiS_reqFifo_countReg$EN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register pmemMonW8_wsiS_reqFifo_levelsValid
  assign pmemMonW8_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset ;
  assign pmemMonW8_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_reqFifo$FULL_N ||
	     pmemMonW8_wsiS_reqFifo$EMPTY_N && pmemMonW8_pmemF$FULL_N ||
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset ;

  // register pmemMonW8_wsiS_statusR
  assign pmemMonW8_wsiS_statusR$D_IN =
	     { pmemMonW8_wsiS_isReset_isInReset,
	       !pmemMonW8_wsiS_peerIsReady,
	       !pmemMonW8_wsiS_operateD,
	       pmemMonW8_wsiS_errorSticky,
	       pmemMonW8_wsiS_burstKind != 2'd0,
	       !pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	       pmemMonW8_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       pmemMonW8_wsiS_trafficSticky } ;
  assign pmemMonW8_wsiS_statusR$EN = 1'd1 ;

  // register pmemMonW8_wsiS_tBusyCount
  assign pmemMonW8_wsiS_tBusyCount$D_IN = pmemMonW8_wsiS_tBusyCount + 32'd1 ;
  assign pmemMonW8_wsiS_tBusyCount$EN =
	     pmemMonW8_wsiS_operateD && pmemMonW8_wsiS_peerIsReady &&
	     (!pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	      pmemMonW8_wsiS_sThreadBusy_dw$wget) ;

  // register pmemMonW8_wsiS_trafficSticky
  assign pmemMonW8_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign pmemMonW8_wsiS_trafficSticky$EN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMonW8_wsiS_wordCount
  assign pmemMonW8_wsiS_wordCount$D_IN =
	     pmemMonW8_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       pmemMonW8_wsiS_wordCount + 12'd1 ;
  assign pmemMonW8_wsiS_wordCount$EN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule ctop
  assign ctop$gps_ppsSyncIn_x = 1'b0 ;
  assign ctop$server_request_put = pciw_uP2IF$D_OUT ;
  assign ctop$switch_x = 3'h0 ;
  assign ctop$wci_m_0_SData = 32'h0 ;
  assign ctop$wci_m_0_SFlag = 2'h0 ;
  assign ctop$wci_m_0_SResp = 2'h0 ;
  assign ctop$wci_m_1_SData = 32'h0 ;
  assign ctop$wci_m_1_SFlag = 2'h0 ;
  assign ctop$wci_m_1_SResp = 2'h0 ;
  assign ctop$wci_m_2_SData = 32'h0 ;
  assign ctop$wci_m_2_SFlag = 2'h0 ;
  assign ctop$wci_m_2_SResp = 2'h0 ;
  assign ctop$wci_m_3_SData = 32'h0 ;
  assign ctop$wci_m_3_SFlag = 2'h0 ;
  assign ctop$wci_m_3_SResp = 2'h0 ;
  assign ctop$wci_m_4_SData = 32'h0 ;
  assign ctop$wci_m_4_SFlag = 2'h0 ;
  assign ctop$wci_m_4_SResp = 2'h0 ;
  assign ctop$wmemiM0_SData = 128'h0 ;
  assign ctop$wmemiM0_SResp = 2'h0 ;
  assign ctop$wsi_s_adc_MBurstLength = 12'h0 ;
  assign ctop$wsi_s_adc_MByteEn = 16'h0 ;
  assign ctop$wsi_s_adc_MCmd = 3'h0 ;
  assign ctop$wsi_s_adc_MData = 128'h0 ;
  assign ctop$wsi_s_adc_MReqInfo = 8'h0 ;
  assign ctop$EN_server_request_put =
	     ctop$RDY_server_request_put && pciw_uP2IF$EMPTY_N ;
  assign ctop$EN_server_response_get =
	     ctop$RDY_server_response_get && pciw_uI2PF$FULL_N ;
  assign ctop$wci_m_0_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_1_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_2_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_3_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_4_SThreadBusy = 1'b0 ;
  assign ctop$wsi_s_adc_MReqLast = 1'b0 ;
  assign ctop$wsi_s_adc_MBurstPrecise = 1'b0 ;
  assign ctop$wsi_s_adc_MReset_n = 1'b0 ;
  assign ctop$wsi_m_dac_SThreadBusy = 1'b0 ;
  assign ctop$wsi_m_dac_SReset_n = 1'b0 ;
  assign ctop$wmemiM0_SRespLast = 1'b0 ;
  assign ctop$wmemiM0_SCmdAccept = 1'b0 ;
  assign ctop$wmemiM0_SDataAccept = 1'b0 ;

  // submodule pciw_inFifo
  assign pciw_inFifo$D_IN =
	     { !pciw_pci0_pcie_ep$trn_rsof_n,
	       !pciw_pci0_pcie_ep$trn_reof_n,
	       ~pciw_pci0_pcie_ep$trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_rd } ;
  assign pciw_inFifo$ENQ = pciw_pci0_pwTrnRx$whas ;
  assign pciw_inFifo$DEQ =
	     WILL_FIRE_RL_pciw_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_upconv_connect1 ;
  assign pciw_inFifo$CLR = 1'b0 ;

  // submodule pciw_outFifo
  assign pciw_outFifo$D_IN =
	     WILL_FIRE_RL_pciw_downconv_connect1 ?
	       MUX_pciw_outFifo$enq_1__VAL_1 :
	       pciw_rg_1[80:0] ;
  assign pciw_outFifo$ENQ =
	     WILL_FIRE_RL_pciw_downconv_connect1 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;
  assign pciw_outFifo$DEQ = WILL_FIRE_RL_pciw_connect_1 ;
  assign pciw_outFifo$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxn = 4'h0 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxp = 4'h0 ;
  assign pciw_pci0_pcie_ep$trn_rcpl_streaming_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_rdst_rdy_n = !pciw_pci0_pwTrnRx$whas ;
  assign pciw_pci0_pcie_ep$trn_rnp_ok_n = 1'b0 ;
  assign pciw_pci0_pcie_ep$trn_td =
	     pciw_pci0_pwTrnTx$whas ? pciw_outFifo$D_OUT[63:0] : 64'h0 ;
  assign pciw_pci0_pcie_ep$trn_teof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_trem_n =
	     pciw_pci0_pwTrnTx$whas ? ~pciw_outFifo$D_OUT[71:64] : 8'd255 ;
  assign pciw_pci0_pcie_ep$trn_tsof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_pcie_ep$trn_tsrc_dsc_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx$whas ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice$sD_IN =
	     { pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_device_number,
	       pciw_pci0_pcie_ep$cfg_function_number } ;
  assign pciw_pciDevice$sEN = pciw_pciDevice$sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp$sD_IN = !pciw_pci0_pcie_ep$trn_lnk_up_n ;
  assign pciw_pciLinkUp$sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert$dDEQ =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule pciw_uI2PF
  assign pciw_uI2PF$D_IN = ctop$server_response_get ;
  assign pciw_uI2PF$ENQ = ctop$RDY_server_response_get && pciw_uI2PF$FULL_N ;
  assign pciw_uI2PF$DEQ = WILL_FIRE_RL_pciw_downconv_connect1 ;
  assign pciw_uI2PF$CLR = 1'b0 ;

  // submodule pciw_uP2IF
  assign pciw_uP2IF$D_IN =
	     MUX_pciw_uP2IF$enq_1__SEL_1 ?
	       MUX_pciw_uP2IF$enq_1__VAL_1 :
	       MUX_pciw_uP2IF$enq_1__VAL_2 ;
  assign pciw_uP2IF$ENQ =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;
  assign pciw_uP2IF$DEQ = ctop$RDY_server_request_put && pciw_uP2IF$EMPTY_N ;
  assign pciw_uP2IF$CLR = 1'b0 ;

  // submodule pmemMonW8_pmemF
  assign pmemMonW8_pmemF$D_IN =
	     { pmemMonW8_wsiS_reqFifo$D_OUT[57],
	       pmemMonW8_msgActive,
	       pmemMonW8_msgActive ?
		 pmemMonW8_wsiS_reqFifo$D_OUT[43:12] :
		 { pmemMonW8_wsiS_reqFifo$D_OUT[43:36],
		   CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1,
		   pmemMonW8_wsiS_reqFifo$D_OUT[27:12] } } ;
  assign pmemMonW8_pmemF$ENQ =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign pmemMonW8_pmemF$DEQ =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmemF$CLR = 1'b0 ;

  // submodule pmemMonW8_wsiS_reqFifo
  assign pmemMonW8_wsiS_reqFifo$D_IN = pmemMonW8_wsiS_wsiReq$wget ;
  assign pmemMonW8_wsiS_reqFifo$ENQ =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo$DEQ =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign pmemMonW8_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule wciMonW8
  assign wciMonW8$observe_MAddr = 32'h0 ;
  assign wciMonW8$observe_MAddrSpace = 1'b0 ;
  assign wciMonW8$observe_MByteEn = 4'h0 ;
  assign wciMonW8$observe_MCmd = 3'h0 ;
  assign wciMonW8$observe_MData = 32'h0 ;
  assign wciMonW8$observe_MFlag = 2'h0 ;
  assign wciMonW8$observe_MReset_n = 1'b0 ;
  assign wciMonW8$observe_SData = 32'h0 ;
  assign wciMonW8$observe_SFlag = 2'h0 ;
  assign wciMonW8$observe_SResp = 2'h0 ;
  assign wciMonW8$observe_SThreadBusy = 1'b0 ;
  assign wciMonW8$pmem_SThreadBusy =
	     !pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	     pmemMonW8_wsiS_sThreadBusy_dw$wget ;
  assign wciMonW8$pmem_SReset_n =
	     !pmemMonW8_wsiS_isReset_isInReset && pmemMonW8_wsiS_operateD ;

  // remaining internal signals
  assign _dor1pmemMonW8_eventCount$EN_write =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_wsiS_reqFifo_notFull__88_AND_pmemMon_ETC___d210 =
	     pmemMonW8_wsiS_reqFifo$FULL_N &&
	     (pmemMonW8_wsiS_burstKind == 2'd0 ||
	      (pmemMonW8_wsiS_burstKind == 2'd1 ||
	       pmemMonW8_wsiS_burstKind == 2'd2) &&
	      pmemMonW8_wsiS_wsiReq$wget[57]) ;
  assign wOut_be__h3154 = { pciw_rg[71:64], pciw_inFifo$D_OUT[71:64] } ;
  assign wOut_data__h3155 = { pciw_rg[63:0], pciw_inFifo$D_OUT[63:0] } ;
  assign x_be__h3075 = { pciw_inFifo$D_OUT[71:64], 8'd0 } ;
  assign x_data__h3076 = { pciw_inFifo$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign z__h10350 = pmemMonW8_pmh[0] ^ pmemMonW8_pmh[1] ;
  assign z__h10357 = z__h10350 ^ pmemMonW8_pmh[2] ;
  assign z__h10364 = z__h10357 ^ pmemMonW8_pmh[3] ;
  assign z__h10371 = z__h10364 ^ pmemMonW8_pmh[4] ;
  assign z__h10378 = z__h10371 ^ pmemMonW8_pmh[5] ;
  assign z__h10385 = z__h10378 ^ pmemMonW8_pmh[6] ;
  assign z__h10392 = z__h10385 ^ pmemMonW8_pmh[7] ;
  assign z__h10399 = z__h10392 ^ pmemMonW8_pmh[8] ;
  assign z__h10406 = z__h10399 ^ pmemMonW8_pmh[9] ;
  assign z__h10413 = z__h10406 ^ pmemMonW8_pmh[10] ;
  assign z__h10420 = z__h10413 ^ pmemMonW8_pmh[11] ;
  assign z__h10427 = z__h10420 ^ pmemMonW8_pmh[12] ;
  assign z__h10434 = z__h10427 ^ pmemMonW8_pmh[13] ;
  assign z__h10441 = z__h10434 ^ pmemMonW8_pmh[14] ;
  assign z__h10448 = z__h10441 ^ pmemMonW8_pmh[15] ;
  assign z__h10455 =
	     z__h10448 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[0] ;
  assign z__h10462 =
	     z__h10455 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[1] ;
  assign z__h10469 =
	     z__h10462 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[2] ;
  assign z__h10476 =
	     z__h10469 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[3] ;
  assign z__h10483 =
	     z__h10476 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[4] ;
  assign z__h10490 =
	     z__h10483 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[5] ;
  assign z__h10497 =
	     z__h10490 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[6] ;
  assign z__h10504 =
	     z__h10497 ^
	     IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647[7] ;
  assign z__h10511 = z__h10504 ^ pmemMonW8_pmh[24] ;
  assign z__h10518 = z__h10511 ^ pmemMonW8_pmh[25] ;
  assign z__h10525 = z__h10518 ^ pmemMonW8_pmh[26] ;
  assign z__h10532 = z__h10525 ^ pmemMonW8_pmh[27] ;
  assign z__h10539 = z__h10532 ^ pmemMonW8_pmh[28] ;
  assign z__h10546 = z__h10539 ^ pmemMonW8_pmh[29] ;
  assign z__h10553 = z__h10546 ^ pmemMonW8_pmh[30] ;
  always@(pmemMonW8_pmh)
  begin
    case (pmemMonW8_pmh[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647 =
	      pmemMonW8_pmh[23:16];
      default: IF_pmemMonW8_pmh_68_BITS_23_TO_16_00_EQ_0_01_O_ETC___d647 =
		   8'd255;
    endcase
  end
  always@(pmemMonW8_wsiS_reqFifo$D_OUT)
  begin
    case (pmemMonW8_wsiS_reqFifo$D_OUT[35:28])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1 =
	      pmemMonW8_wsiS_reqFifo$D_OUT[35:28];
      default: CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1 = 8'd255;
    endcase
  end
  always@(pmemMonW8_pmemF$D_OUT)
  begin
    case (pmemMonW8_pmemF$D_OUT[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2 =
	      pmemMonW8_pmemF$D_OUT[23:16];
      default: CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2 = 8'd255;
    endcase
  end

  // handling of inlined registers

  always@(posedge pciw_pci0_pcie_ep$trn_clk)
  begin
    if (!pciw_p125rst$OUT_RST_N)
      begin
        pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_rg <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
	pmemMonW8_eventCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_msgActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_pmBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_pmHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMonW8_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMonW8_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pmemMonW8_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_pcie_irq_rInterruptDi$EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi$D_IN;
	if (pciw_pcie_irq_rInterruptN$EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN$D_IN;
	if (pciw_pcie_irq_rInterrupting$EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting$D_IN;
	if (pciw_rg$EN) pciw_rg <= `BSV_ASSIGNMENT_DELAY pciw_rg$D_IN;
	if (pciw_rg_1$EN) pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY pciw_rg_1$D_IN;
	if (pmemMonW8_eventCount$EN)
	  pmemMonW8_eventCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_eventCount$D_IN;
	if (pmemMonW8_msgActive$EN)
	  pmemMonW8_msgActive <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_msgActive$D_IN;
	if (pmemMonW8_pmBody$EN)
	  pmemMonW8_pmBody <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmBody$D_IN;
	if (pmemMonW8_pmHead$EN)
	  pmemMonW8_pmHead <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmHead$D_IN;
	if (pmemMonW8_wsiS_burstKind$EN)
	  pmemMonW8_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_burstKind$D_IN;
	if (pmemMonW8_wsiS_errorSticky$EN)
	  pmemMonW8_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_errorSticky$D_IN;
	if (pmemMonW8_wsiS_iMesgCount$EN)
	  pmemMonW8_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_iMesgCount$D_IN;
	if (pmemMonW8_wsiS_operateD$EN)
	  pmemMonW8_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_operateD$D_IN;
	if (pmemMonW8_wsiS_pMesgCount$EN)
	  pmemMonW8_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_pMesgCount$D_IN;
	if (pmemMonW8_wsiS_peerIsReady$EN)
	  pmemMonW8_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_peerIsReady$D_IN;
	if (pmemMonW8_wsiS_reqFifo_countReg$EN)
	  pmemMonW8_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_reqFifo_countReg$D_IN;
	if (pmemMonW8_wsiS_reqFifo_levelsValid$EN)
	  pmemMonW8_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_reqFifo_levelsValid$D_IN;
	if (pmemMonW8_wsiS_tBusyCount$EN)
	  pmemMonW8_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_tBusyCount$D_IN;
	if (pmemMonW8_wsiS_trafficSticky$EN)
	  pmemMonW8_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_trafficSticky$D_IN;
	if (pmemMonW8_wsiS_wordCount$EN)
	  pmemMonW8_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_wordCount$D_IN;
      end
    if (pciw_pcie_irq_rMMEnabled$EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled$D_IN;
    if (pciw_pcie_irq_rMSIEnabled$EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled$D_IN;
    if (pmemMonW8_pmGrab$EN)
      pmemMonW8_pmGrab <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmGrab$D_IN;
    if (pmemMonW8_pmh$EN)
      pmemMonW8_pmh <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmh$D_IN;
    if (pmemMonW8_wsiS_mesgWordLength$EN)
      pmemMonW8_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  pmemMonW8_wsiS_mesgWordLength$D_IN;
    if (pmemMonW8_wsiS_statusR$EN)
      pmemMonW8_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  pmemMonW8_wsiS_statusR$D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep$trn_clk or negedge pciw_p125rst$OUT_RST_N)
  if (!pciw_p125rst$OUT_RST_N)
    begin
      pmemMonW8_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pmemMonW8_wsiS_isReset_isInReset$EN)
	pmemMonW8_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pmemMonW8_wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    pciDevice = 16'hAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
    pciw_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_rg_1 = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pmemMonW8_eventCount = 32'hAAAAAAAA;
    pmemMonW8_msgActive = 1'h0;
    pmemMonW8_pmBody = 1'h0;
    pmemMonW8_pmGrab = 1'h0;
    pmemMonW8_pmHead = 1'h0;
    pmemMonW8_pmh = 32'hAAAAAAAA;
    pmemMonW8_wsiS_burstKind = 2'h2;
    pmemMonW8_wsiS_errorSticky = 1'h0;
    pmemMonW8_wsiS_iMesgCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_isReset_isInReset = 1'h0;
    pmemMonW8_wsiS_mesgWordLength = 12'hAAA;
    pmemMonW8_wsiS_operateD = 1'h0;
    pmemMonW8_wsiS_pMesgCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_peerIsReady = 1'h0;
    pmemMonW8_wsiS_reqFifo_countReg = 2'h2;
    pmemMonW8_wsiS_reqFifo_levelsValid = 1'h0;
    pmemMonW8_wsiS_statusR = 8'hAA;
    pmemMonW8_wsiS_tBusyCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_trafficSticky = 1'h0;
    pmemMonW8_wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pciw_pci0_pcie_ep$trn_clk)
  begin
    #0;
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	begin
	  v__h11835 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("[%0d]: %m: PMEM HEAD: ", v__h11835);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw) $write("PMEM_HEADER ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd0)
	$write("---None              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd1)
	$write("---UnReset           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd2)
	$write("---Reset             ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd3)
	$write("---UnAttention       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd4)
	$write("---Attention         ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd5)
	$write("---UnTerminate       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd6)
	$write("---Terminate         ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd7)
	$write("---Timeout           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd8)
	$write("---Initialize        ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd9)
	$write("---Start             ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd10)
	$write("---Stop              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd11)
	$write("---Release           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd12)
	$write("---Test              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd13)
	$write("---BeforeQuery       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd14)
	$write("---AfterConfig       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd16)
	$write("---WriteRequest      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd32)
	$write("---ReadRequest       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd48)
	$write("---WriteResponse     ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd64)
	$write("---ReadResponse      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd80)
	$write("---ReqLastAsserted   ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd96)
	$write("---BPressureAssert   ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd97)
	$write("---BPressureDeassert ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd128)
	$write("---RequestError      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd144)
	$write("---ResponseError     ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd160)
	$write("---TransactionError  ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd0 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd1 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd2 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd3 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd4 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd5 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd6 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd7 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd8 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd9 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd10 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd11 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd12 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd13 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd14 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd16 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd32 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd48 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd64 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd80 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd96 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd97 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd128 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd144 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd160)
	$write("---Pad               ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("srcID:(%0x) ", pmemMonW8_pmemF$D_OUT[31:24]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("srcTag:(%0x) ", pmemMonW8_pmemF$D_OUT[15:8]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("info:(%0x) ", pmemMonW8_pmemF$D_OUT[7:0]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw) $write("\n");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_gen_message_body_dw)
	begin
	  v__h13329 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_gen_message_body_dw)
	$display("[%0d]: %m: PMEM BODY: srcId:%x srcTag:%x, Event Count:%d. Body Data:%0x ",
		 v__h13329,
		 pmemMonW8_pmh[31:24],
		 pmemMonW8_pmh[15:8],
		 pmemMonW8_eventCount,
		 pmemMonW8_pmemF$D_OUT[31:0]);
  end
  // synopsys translate_on
endmodule  // mkFTop_altst4

