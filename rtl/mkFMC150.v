//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Tue Apr 10 15:44:55 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// pads_sdo                       O     1 reg
// pads_csb                       O     4 reg
// CLK_pads_sclk                  O     1 clock
// CLK_GATE_pads_sclk             O     1 const
// CLK_pads_sclkn                 O     1 clock
// CLK_GATE_pads_sclkn            O     1 const
// RST_N_pads_srst                O     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// pads_sdi_arg                   I     4 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFMC150(wciS0_Clk,
		wciS0_MReset_n,

		wciS0_MCmd,

		wciS0_MAddrSpace,

		wciS0_MByteEn,

		wciS0_MAddr,

		wciS0_MData,

		wciS0_SResp,

		wciS0_SData,

		wciS0_SThreadBusy,

		wciS0_SFlag,

		wciS0_MFlag,

		pads_sdo,

		pads_csb,

		pads_sdi_arg,

		CLK_pads_sclk,
		CLK_GATE_pads_sclk,

		CLK_pads_sclkn,
		CLK_GATE_pads_sclkn,

		RST_N_pads_srst);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // value method pads_sdo
  output pads_sdo;

  // value method pads_csb
  output [3 : 0] pads_csb;

  // action method pads_sdi
  input  [3 : 0] pads_sdi_arg;

  // oscillator and gates for output clock CLK_pads_sclk
  output CLK_pads_sclk;
  output CLK_GATE_pads_sclk;

  // oscillator and gates for output clock CLK_pads_sclkn
  output CLK_pads_sclkn;
  output CLK_GATE_pads_sclkn;

  // output resets
  output RST_N_pads_srst;

  // signals for module outputs
  wire [31 : 0] wciS0_SData;
  wire [3 : 0] pads_csb;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire CLK_GATE_pads_sclk,
       CLK_GATE_pads_sclkn,
       CLK_pads_sclk,
       CLK_pads_sclkn,
       RST_N_pads_srst,
       pads_sdo,
       wciS0_SThreadBusy;

  // inlined wires
  reg [3 : 0] spi_csbR_1$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] wci_wci_Es_mAddr_w$wget, wci_wci_Es_mData_w$wget;
  wire [3 : 0] spi_sdiWs$wget, wci_wci_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget, wci_wslv_wEdge$wget;
  wire spi_csbR_1$whas,
       spi_doResp_1$wget,
       spi_doResp_1$whas,
       spi_reqF_dClear_pw$whas,
       spi_reqF_deq_happened$whas,
       spi_reqF_deq_pw$whas,
       spi_reqF_enq_pw$whas,
       spi_reqF_sClear_pw$whas,
       spi_respF_dClear_pw$whas,
       spi_respF_deq_happened$whas,
       spi_respF_deq_pw$whas,
       spi_respF_enq_pw$whas,
       spi_respF_sClear_pw$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas;

  // register spi_cap
  reg spi_cap;
  wire spi_cap$D_IN, spi_cap$EN;

  // register spi_cap_1
  reg spi_cap_1;
  wire spi_cap_1$D_IN, spi_cap_1$EN;

  // register spi_cap_10
  reg spi_cap_10;
  wire spi_cap_10$D_IN, spi_cap_10$EN;

  // register spi_cap_11
  reg spi_cap_11;
  wire spi_cap_11$D_IN, spi_cap_11$EN;

  // register spi_cap_12
  reg spi_cap_12;
  wire spi_cap_12$D_IN, spi_cap_12$EN;

  // register spi_cap_13
  reg spi_cap_13;
  wire spi_cap_13$D_IN, spi_cap_13$EN;

  // register spi_cap_14
  reg spi_cap_14;
  wire spi_cap_14$D_IN, spi_cap_14$EN;

  // register spi_cap_15
  reg spi_cap_15;
  wire spi_cap_15$D_IN, spi_cap_15$EN;

  // register spi_cap_16
  reg spi_cap_16;
  wire spi_cap_16$D_IN, spi_cap_16$EN;

  // register spi_cap_17
  reg spi_cap_17;
  wire spi_cap_17$D_IN, spi_cap_17$EN;

  // register spi_cap_18
  reg spi_cap_18;
  wire spi_cap_18$D_IN, spi_cap_18$EN;

  // register spi_cap_19
  reg spi_cap_19;
  wire spi_cap_19$D_IN, spi_cap_19$EN;

  // register spi_cap_2
  reg spi_cap_2;
  wire spi_cap_2$D_IN, spi_cap_2$EN;

  // register spi_cap_20
  reg spi_cap_20;
  wire spi_cap_20$D_IN, spi_cap_20$EN;

  // register spi_cap_21
  reg spi_cap_21;
  wire spi_cap_21$D_IN, spi_cap_21$EN;

  // register spi_cap_22
  reg spi_cap_22;
  wire spi_cap_22$D_IN, spi_cap_22$EN;

  // register spi_cap_23
  reg spi_cap_23;
  wire spi_cap_23$D_IN, spi_cap_23$EN;

  // register spi_cap_24
  reg spi_cap_24;
  wire spi_cap_24$D_IN, spi_cap_24$EN;

  // register spi_cap_25
  reg spi_cap_25;
  wire spi_cap_25$D_IN, spi_cap_25$EN;

  // register spi_cap_26
  reg spi_cap_26;
  wire spi_cap_26$D_IN, spi_cap_26$EN;

  // register spi_cap_27
  reg spi_cap_27;
  wire spi_cap_27$D_IN, spi_cap_27$EN;

  // register spi_cap_28
  reg spi_cap_28;
  wire spi_cap_28$D_IN, spi_cap_28$EN;

  // register spi_cap_29
  reg spi_cap_29;
  wire spi_cap_29$D_IN, spi_cap_29$EN;

  // register spi_cap_3
  reg spi_cap_3;
  wire spi_cap_3$D_IN, spi_cap_3$EN;

  // register spi_cap_30
  reg spi_cap_30;
  wire spi_cap_30$D_IN, spi_cap_30$EN;

  // register spi_cap_31
  reg spi_cap_31;
  wire spi_cap_31$D_IN, spi_cap_31$EN;

  // register spi_cap_4
  reg spi_cap_4;
  wire spi_cap_4$D_IN, spi_cap_4$EN;

  // register spi_cap_5
  reg spi_cap_5;
  wire spi_cap_5$D_IN, spi_cap_5$EN;

  // register spi_cap_6
  reg spi_cap_6;
  wire spi_cap_6$D_IN, spi_cap_6$EN;

  // register spi_cap_7
  reg spi_cap_7;
  wire spi_cap_7$D_IN, spi_cap_7$EN;

  // register spi_cap_8
  reg spi_cap_8;
  wire spi_cap_8$D_IN, spi_cap_8$EN;

  // register spi_cap_9
  reg spi_cap_9;
  wire spi_cap_9$D_IN, spi_cap_9$EN;

  // register spi_csbR
  reg [3 : 0] spi_csbR;
  wire [3 : 0] spi_csbR$D_IN;
  wire spi_csbR$EN;

  // register spi_dPos
  reg [5 : 0] spi_dPos;
  wire [5 : 0] spi_dPos$D_IN;
  wire spi_dPos$EN;

  // register spi_devId
  reg [1 : 0] spi_devId;
  wire [1 : 0] spi_devId$D_IN;
  wire spi_devId$EN;

  // register spi_doResp
  reg spi_doResp;
  wire spi_doResp$D_IN, spi_doResp$EN;

  // register spi_iPos
  reg [4 : 0] spi_iPos;
  wire [4 : 0] spi_iPos$D_IN;
  wire spi_iPos$EN;

  // register spi_lsbFirst
  reg spi_lsbFirst;
  wire spi_lsbFirst$D_IN, spi_lsbFirst$EN;

  // register spi_rPos
  reg [5 : 0] spi_rPos;
  wire [5 : 0] spi_rPos$D_IN;
  wire spi_rPos$EN;

  // register spi_rcv_d
  reg spi_rcv_d;
  wire spi_rcv_d$D_IN, spi_rcv_d$EN;

  // register spi_reqF_dInReset_isInReset
  reg spi_reqF_dInReset_isInReset;
  wire spi_reqF_dInReset_isInReset$D_IN, spi_reqF_dInReset_isInReset$EN;

  // register spi_reqF_head_wrapped
  reg spi_reqF_head_wrapped;
  wire spi_reqF_head_wrapped$D_IN, spi_reqF_head_wrapped$EN;

  // register spi_reqF_sInReset_isInReset
  reg spi_reqF_sInReset_isInReset;
  wire spi_reqF_sInReset_isInReset$D_IN, spi_reqF_sInReset_isInReset$EN;

  // register spi_reqF_tail_wrapped
  reg spi_reqF_tail_wrapped;
  wire spi_reqF_tail_wrapped$D_IN, spi_reqF_tail_wrapped$EN;

  // register spi_reqS
  reg [50 : 0] spi_reqS;
  wire [50 : 0] spi_reqS$D_IN;
  wire spi_reqS$EN;

  // register spi_respF_dInReset_isInReset
  reg spi_respF_dInReset_isInReset;
  wire spi_respF_dInReset_isInReset$D_IN, spi_respF_dInReset_isInReset$EN;

  // register spi_respF_head_wrapped
  reg spi_respF_head_wrapped;
  wire spi_respF_head_wrapped$D_IN, spi_respF_head_wrapped$EN;

  // register spi_respF_sInReset_isInReset
  reg spi_respF_sInReset_isInReset;
  wire spi_respF_sInReset_isInReset$D_IN, spi_respF_sInReset_isInReset$EN;

  // register spi_respF_tail_wrapped
  reg spi_respF_tail_wrapped;
  wire spi_respF_tail_wrapped$D_IN, spi_respF_tail_wrapped$EN;

  // register spi_respS
  reg [31 : 0] spi_respS;
  wire [31 : 0] spi_respS$D_IN;
  wire spi_respS$EN;

  // register spi_sdiP
  reg [3 : 0] spi_sdiP;
  wire [3 : 0] spi_sdiP$D_IN;
  wire spi_sdiP$EN;

  // register spi_sdoR
  reg spi_sdoR;
  wire spi_sdoR$D_IN, spi_sdoR$EN;

  // register spi_xmt_d
  reg spi_xmt_d;
  wire spi_xmt_d$D_IN, spi_xmt_d$EN;

  // register spi_xmt_i
  reg spi_xmt_i;
  wire spi_xmt_i$D_IN, spi_xmt_i$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // ports of submodule spi_cd
  wire spi_cd$CLK_OUT, spi_cd$PREEDGE;

  // ports of submodule spi_cinv
  wire spi_cinv$CLK_OUT;

  // ports of submodule spi_reqF_dCombinedReset
  wire spi_reqF_dCombinedReset$RST_OUT;

  // ports of submodule spi_reqF_dCrossedsReset
  wire spi_reqF_dCrossedsReset$OUT_RST_N;

  // ports of submodule spi_reqF_sCombinedReset
  wire spi_reqF_sCombinedReset$RST_OUT;

  // ports of submodule spi_reqF_sCrosseddReset
  wire spi_reqF_sCrosseddReset$OUT_RST_N;

  // ports of submodule spi_respF_dCombinedReset
  wire spi_respF_dCombinedReset$RST_OUT;

  // ports of submodule spi_respF_dCrossedsReset
  wire spi_respF_dCrossedsReset$OUT_RST_N;

  // ports of submodule spi_respF_sCombinedReset
  wire spi_respF_sCombinedReset$RST_OUT;

  // ports of submodule spi_respF_sCrosseddReset
  wire spi_respF_sCrosseddReset$OUT_RST_N;

  // ports of submodule spi_slowReset
  wire spi_slowReset$OUT_RST_N;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_spi_response,
       WILL_FIRE_RL_spi_recv_d,
       WILL_FIRE_RL_spi_reqF_deq_update_head,
       WILL_FIRE_RL_spi_reqF_enq_update_tail,
       WILL_FIRE_RL_spi_respF_deq_update_head,
       WILL_FIRE_RL_spi_respF_enq_update_tail,
       WILL_FIRE_RL_spi_response,
       WILL_FIRE_RL_spi_send_d,
       WILL_FIRE_RL_spi_send_i,
       WILL_FIRE_RL_spi_start_cs,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1;
  reg [5 : 0] MUX_spi_dPos$write_1__VAL_1;
  reg [4 : 0] MUX_spi_iPos$write_1__VAL_1;
  reg [3 : 0] MUX_spi_csbR_1$wset_1__VAL_2;
  reg MUX_spi_cap$write_1__VAL_1, MUX_spi_sdoR$write_1__VAL_1;
  wire [50 : 0] MUX_spi_reqS$write_1__VAL_1, MUX_spi_reqS$write_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
  wire [5 : 0] MUX_spi_dPos$write_1__VAL_2,
	       MUX_spi_rPos$write_1__VAL_1,
	       MUX_spi_rPos$write_1__VAL_2;
  wire [4 : 0] MUX_spi_iPos$write_1__VAL_2;
  wire [3 : 0] MUX_spi_csbR_1$wset_1__VAL_1;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_spi_cap$write_1__SEL_1,
       MUX_spi_cap_1$write_1__SEL_1,
       MUX_spi_cap_10$write_1__SEL_1,
       MUX_spi_cap_11$write_1__SEL_1,
       MUX_spi_cap_12$write_1__SEL_1,
       MUX_spi_cap_13$write_1__SEL_1,
       MUX_spi_cap_14$write_1__SEL_1,
       MUX_spi_cap_15$write_1__SEL_1,
       MUX_spi_cap_16$write_1__SEL_1,
       MUX_spi_cap_17$write_1__SEL_1,
       MUX_spi_cap_18$write_1__SEL_1,
       MUX_spi_cap_19$write_1__SEL_1,
       MUX_spi_cap_2$write_1__SEL_1,
       MUX_spi_cap_20$write_1__SEL_1,
       MUX_spi_cap_21$write_1__SEL_1,
       MUX_spi_cap_22$write_1__SEL_1,
       MUX_spi_cap_23$write_1__SEL_1,
       MUX_spi_cap_24$write_1__SEL_1,
       MUX_spi_cap_25$write_1__SEL_1,
       MUX_spi_cap_26$write_1__SEL_1,
       MUX_spi_cap_27$write_1__SEL_1,
       MUX_spi_cap_28$write_1__SEL_1,
       MUX_spi_cap_29$write_1__SEL_1,
       MUX_spi_cap_3$write_1__SEL_1,
       MUX_spi_cap_30$write_1__SEL_1,
       MUX_spi_cap_31$write_1__SEL_1,
       MUX_spi_cap_4$write_1__SEL_1,
       MUX_spi_cap_5$write_1__SEL_1,
       MUX_spi_cap_6$write_1__SEL_1,
       MUX_spi_cap_7$write_1__SEL_1,
       MUX_spi_cap_8$write_1__SEL_1,
       MUX_spi_cap_9$write_1__SEL_1,
       MUX_spi_csbR_1$wset_1__SEL_1,
       MUX_spi_rcv_d$write_1__SEL_1,
       MUX_spi_sdoR$write_1__VAL_2,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_wci_wslv_respF_q_1$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h18089, v__h18893, v__h3616, v__h3790, v__h3934;
  reg [2 : 0] CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_4_0b0_0_ETC__q3,
	      CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4;
  reg IF_wci_wslv_reqF_first__5_BITS_43_TO_42_08_EQ__ETC___d730;
  wire [31 : 0] spi_reqS_BITS_31_TO_0__q2;
  wire [15 : 0] spi_reqS_BITS_47_TO_32__q1, val_addr__h17725;
  wire [5 : 0] _31_MINUS_spi_rPos_83___d705, x__h11756;
  wire [4 : 0] x__h10907;
  wire [3 : 0] spi_cap_2_87_CONCAT_spi_cap_1_88_CONCAT_spi_ca_ETC___d593;
  wire IF_spi_iPos_43_EQ_15_49_THEN_spi_reqS_read__21_ETC___d262,
       _dor1spi_reqF_enq_pw$EN_wset,
       spi_reqF_head_wrapped_crossed__68_EQ_spi_reqF__ETC___d729,
       x__h10844,
       x__h10972,
       x__h11697,
       x__h11821;

  // oscillator and gates for output clock CLK_pads_sclk
  assign CLK_pads_sclk = spi_cd$CLK_OUT ;
  assign CLK_GATE_pads_sclk = 1'b1 ;

  // oscillator and gates for output clock CLK_pads_sclkn
  assign CLK_pads_sclkn = spi_cinv$CLK_OUT ;
  assign CLK_GATE_pads_sclkn = 1'b1 ;

  // output resets
  assign RST_N_pads_srst = spi_slowReset$OUT_RST_N ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method pads_sdo
  assign pads_sdo = spi_sdoR ;

  // value method pads_csb
  assign pads_csb = spi_csbR ;

  // submodule spi_cd
  ClockDiv #(.width(32'd3),
	     .lower(32'd0),
	     .upper(32'd7),
	     .offset(32'd0)) spi_cd(.CLK_IN(wciS0_Clk),
				    .RST_N(wciS0_MReset_n),
				    .PREEDGE(spi_cd$PREEDGE),
				    .CLK_OUT(spi_cd$CLK_OUT));

  // submodule spi_cinv
  ClockInverter spi_cinv(.CLK_IN(spi_cd$CLK_OUT),
			 .PREEDGE(),
			 .CLK_OUT(spi_cinv$CLK_OUT));

  // submodule spi_reqF_dCombinedReset
  ResetEither spi_reqF_dCombinedReset(.A_RST(spi_slowReset$OUT_RST_N),
				      .B_RST(spi_reqF_dCrossedsReset$OUT_RST_N),
				      .RST_OUT(spi_reqF_dCombinedReset$RST_OUT));

  // submodule spi_reqF_dCrossedsReset
  SyncReset0 spi_reqF_dCrossedsReset(.IN_RST_N(wciS0_MReset_n),
				     .OUT_RST_N(spi_reqF_dCrossedsReset$OUT_RST_N));

  // submodule spi_reqF_sCombinedReset
  ResetEither spi_reqF_sCombinedReset(.A_RST(wciS0_MReset_n),
				      .B_RST(spi_reqF_sCrosseddReset$OUT_RST_N),
				      .RST_OUT(spi_reqF_sCombinedReset$RST_OUT));

  // submodule spi_reqF_sCrosseddReset
  SyncReset0 spi_reqF_sCrosseddReset(.IN_RST_N(spi_slowReset$OUT_RST_N),
				     .OUT_RST_N(spi_reqF_sCrosseddReset$OUT_RST_N));

  // submodule spi_respF_dCombinedReset
  ResetEither spi_respF_dCombinedReset(.A_RST(wciS0_MReset_n),
				       .B_RST(spi_respF_dCrossedsReset$OUT_RST_N),
				       .RST_OUT(spi_respF_dCombinedReset$RST_OUT));

  // submodule spi_respF_dCrossedsReset
  SyncReset0 spi_respF_dCrossedsReset(.IN_RST_N(spi_slowReset$OUT_RST_N),
				      .OUT_RST_N(spi_respF_dCrossedsReset$OUT_RST_N));

  // submodule spi_respF_sCombinedReset
  ResetEither spi_respF_sCombinedReset(.A_RST(spi_slowReset$OUT_RST_N),
				       .B_RST(spi_respF_sCrosseddReset$OUT_RST_N),
				       .RST_OUT(spi_respF_sCombinedReset$RST_OUT));

  // submodule spi_respF_sCrosseddReset
  SyncReset0 spi_respF_sCrosseddReset(.IN_RST_N(wciS0_MReset_n),
				      .OUT_RST_N(spi_respF_sCrosseddReset$OUT_RST_N));

  // submodule spi_slowReset
  SyncResetA #(.RSTDELAY(32'd1)) spi_slowReset(.CLK(spi_cd$CLK_OUT),
					       .IN_RST_N(wciS0_MReset_n),
					       .OUT_RST_N(spi_slowReset$OUT_RST_N));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // rule RL_spi_response
  assign CAN_FIRE_RL_spi_response =
	     wci_wslv_respF_c_r != 2'd2 &&
	     spi_respF_head_wrapped != spi_respF_tail_wrapped &&
	     !spi_respF_dInReset_isInReset &&
	     spi_cd$PREEDGE ;
  assign WILL_FIRE_RL_spi_response =
	     CAN_FIRE_RL_spi_response &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_respF_c_r != 2'd2 &&
	     IF_wci_wslv_reqF_first__5_BITS_43_TO_42_08_EQ__ETC___d730 &&
	     wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF$EMPTY_N &&
	     IF_wci_wslv_reqF_first__5_BITS_43_TO_42_08_EQ__ETC___d730 &&
	     wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // rule RL_spi_start_cs
  assign WILL_FIRE_RL_spi_start_cs =
	     spi_reqF_head_wrapped != spi_reqF_tail_wrapped &&
	     !spi_reqF_dInReset_isInReset &&
	     !spi_xmt_i &&
	     !spi_xmt_d &&
	     !spi_rcv_d ;

  // rule RL_spi_send_d
  assign WILL_FIRE_RL_spi_send_d =
	     spi_reqF_head_wrapped != spi_reqF_tail_wrapped &&
	     !spi_reqF_dInReset_isInReset &&
	     spi_xmt_d ;

  // rule RL_spi_send_i
  assign WILL_FIRE_RL_spi_send_i =
	     spi_reqF_head_wrapped != spi_reqF_tail_wrapped &&
	     !spi_reqF_dInReset_isInReset &&
	     spi_xmt_i ;

  // rule RL_spi_recv_d
  assign WILL_FIRE_RL_spi_recv_d =
	     spi_reqF_head_wrapped != spi_reqF_tail_wrapped &&
	     !spi_reqF_dInReset_isInReset &&
	     spi_rcv_d &&
	     !WILL_FIRE_RL_spi_send_d ;

  // rule RL_spi_reqF_enq_update_tail
  assign WILL_FIRE_RL_spi_reqF_enq_update_tail =
	     !spi_reqF_sInReset_isInReset && _dor1spi_reqF_enq_pw$EN_wset ;

  // rule RL_spi_reqF_deq_update_head
  assign WILL_FIRE_RL_spi_reqF_deq_update_head =
	     !spi_reqF_dInReset_isInReset && spi_reqF_deq_pw$whas ;

  // rule RL_spi_respF_enq_update_tail
  assign WILL_FIRE_RL_spi_respF_enq_update_tail =
	     !spi_respF_sInReset_isInReset && spi_respF_enq_pw$whas ;

  // rule RL_spi_respF_deq_update_head
  assign WILL_FIRE_RL_spi_respF_deq_update_head =
	     !spi_respF_dInReset_isInReset && WILL_FIRE_RL_spi_response ;

  // inputs to muxes for submodule ports
  assign MUX_spi_cap$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd0 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd0) ;
  assign MUX_spi_cap_1$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd1 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd1) ;
  assign MUX_spi_cap_10$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd10 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd10) ;
  assign MUX_spi_cap_11$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd11 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd11) ;
  assign MUX_spi_cap_12$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd12 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd12) ;
  assign MUX_spi_cap_13$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd13 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd13) ;
  assign MUX_spi_cap_14$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd14 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd14) ;
  assign MUX_spi_cap_15$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd15 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd15) ;
  assign MUX_spi_cap_16$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd16 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd16) ;
  assign MUX_spi_cap_17$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd17 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd17) ;
  assign MUX_spi_cap_18$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd18 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd18) ;
  assign MUX_spi_cap_19$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd19 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd19) ;
  assign MUX_spi_cap_2$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd2 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd2) ;
  assign MUX_spi_cap_20$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd20 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd20) ;
  assign MUX_spi_cap_21$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd21 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd21) ;
  assign MUX_spi_cap_22$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd22 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd22) ;
  assign MUX_spi_cap_23$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd23 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd23) ;
  assign MUX_spi_cap_24$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd24 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd24) ;
  assign MUX_spi_cap_25$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd25 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd25) ;
  assign MUX_spi_cap_26$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd26 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd26) ;
  assign MUX_spi_cap_27$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd27 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd27) ;
  assign MUX_spi_cap_28$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd28 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd28) ;
  assign MUX_spi_cap_29$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd29 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd29) ;
  assign MUX_spi_cap_3$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd3 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd3) ;
  assign MUX_spi_cap_30$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd30 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd30) ;
  assign MUX_spi_cap_31$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd31 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd31) ;
  assign MUX_spi_cap_4$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd4 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd4) ;
  assign MUX_spi_cap_5$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd5 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd5) ;
  assign MUX_spi_cap_6$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd6 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd6) ;
  assign MUX_spi_cap_7$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd7 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd7) ;
  assign MUX_spi_cap_8$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd8 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd8) ;
  assign MUX_spi_cap_9$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d &&
	     (spi_reqS[50:49] == 2'd1 && spi_dPos == 6'd9 ||
	      (spi_reqS[50:49] == 2'd2 || spi_reqS[50:49] == 2'd3) &&
	      spi_dPos == 6'd9) ;
  assign MUX_spi_csbR_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 ;
  assign MUX_spi_rcv_d$write_1__SEL_1 =
	     WILL_FIRE_RL_spi_send_d && spi_dPos == 6'd0 &&
	     spi_reqS[50:49] == 2'd0 ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  always@(spi_reqS or spi_sdiP)
  begin
    case (spi_reqS[50:49])
      2'd1: MUX_spi_cap$write_1__VAL_1 = spi_sdiP[1];
      2'd2: MUX_spi_cap$write_1__VAL_1 = spi_sdiP[2];
      default: MUX_spi_cap$write_1__VAL_1 = spi_sdiP[3];
    endcase
  end
  assign MUX_spi_csbR_1$wset_1__VAL_1 =
	     (spi_rPos == 6'd32) ? 4'd15 : 4'b1110 ;
  always@(spi_reqS)
  begin
    case (spi_reqS[50:49])
      2'd0: MUX_spi_csbR_1$wset_1__VAL_2 = 4'b1110;
      2'd1: MUX_spi_csbR_1$wset_1__VAL_2 = 4'b1101;
      2'd2: MUX_spi_csbR_1$wset_1__VAL_2 = 4'b1011;
      2'd3: MUX_spi_csbR_1$wset_1__VAL_2 = 4'b0111;
    endcase
  end
  always@(spi_reqS)
  begin
    case (spi_reqS[50:49])
      2'd0: MUX_spi_dPos$write_1__VAL_1 = 6'd27;
      2'd1, 2'd2: MUX_spi_dPos$write_1__VAL_1 = 6'd7;
      2'd3: MUX_spi_dPos$write_1__VAL_1 = 6'd15;
    endcase
  end
  assign MUX_spi_dPos$write_1__VAL_2 =
	     (spi_dPos == 6'd0) ? spi_dPos : spi_dPos - 6'd1 ;
  always@(spi_reqS)
  begin
    case (spi_reqS[50:49])
      2'd0: MUX_spi_iPos$write_1__VAL_1 = 5'd3;
      2'd1, 2'd2: MUX_spi_iPos$write_1__VAL_1 = 5'd7;
      2'd3: MUX_spi_iPos$write_1__VAL_1 = 5'd15;
    endcase
  end
  assign MUX_spi_iPos$write_1__VAL_2 =
	     (spi_iPos == 5'd0) ? spi_iPos : spi_iPos - 5'd1 ;
  assign MUX_spi_rPos$write_1__VAL_1 =
	     (spi_reqS[50:49] == 2'd0) ? 6'd32 : 6'd0 ;
  assign MUX_spi_rPos$write_1__VAL_2 =
	     (spi_rPos == 6'd0) ? spi_rPos : spi_rPos - 6'd1 ;
  assign MUX_spi_reqS$write_1__VAL_1 =
	     { CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_4_0b0_0_ETC__q3,
	       val_addr__h17725,
	       wci_wslv_reqF$D_OUT[31:0] } ;
  assign MUX_spi_reqS$write_1__VAL_2 =
	     { CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4,
	       val_addr__h17725,
	       32'd0 } ;
  always@(spi_reqS or
	  IF_spi_iPos_43_EQ_15_49_THEN_spi_reqS_read__21_ETC___d262 or
	  x__h10844 or x__h10972)
  begin
    case (spi_reqS[50:49])
      2'd0: MUX_spi_sdoR$write_1__VAL_1 = x__h10844;
      2'd1, 2'd2: MUX_spi_sdoR$write_1__VAL_1 = x__h10972;
      2'd3:
	  MUX_spi_sdoR$write_1__VAL_1 =
	      IF_spi_iPos_43_EQ_15_49_THEN_spi_reqS_read__21_ETC___d262;
    endcase
  end
  assign MUX_spi_sdoR$write_1__VAL_2 =
	     (spi_reqS[50:49] == 2'd0) ? x__h11697 : x__h11821 ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_2 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_spi_response or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_spi_response:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       wci_wslv_respF_q_1 ;
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 = { 2'd1, spi_respS } ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_spi_response ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  always@(MUX_spi_csbR_1$wset_1__SEL_1 or
	  MUX_spi_csbR_1$wset_1__VAL_1 or
	  WILL_FIRE_RL_spi_send_i or
	  MUX_spi_csbR_1$wset_1__VAL_2 or WILL_FIRE_RL_spi_send_d)
  case (1'b1)
    MUX_spi_csbR_1$wset_1__SEL_1:
	spi_csbR_1$wget = MUX_spi_csbR_1$wset_1__VAL_1;
    WILL_FIRE_RL_spi_send_i: spi_csbR_1$wget = MUX_spi_csbR_1$wset_1__VAL_2;
    WILL_FIRE_RL_spi_send_d: spi_csbR_1$wget = MUX_spi_csbR_1$wset_1__VAL_2;
    default: spi_csbR_1$wget = 4'b1010 /* unspecified value */ ;
  endcase
  assign spi_csbR_1$whas =
	     WILL_FIRE_RL_spi_send_i || WILL_FIRE_RL_spi_send_d ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 ;
  assign spi_doResp_1$wget = spi_reqS[48] ;
  assign spi_doResp_1$whas = spi_reqF_deq_pw$whas ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_spi_response || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign spi_reqF_enq_pw$whas = _dor1spi_reqF_enq_pw$EN_wset ;
  assign spi_reqF_deq_pw$whas =
	     WILL_FIRE_RL_spi_send_d && spi_dPos == 6'd0 &&
	     spi_reqS[50:49] != 2'd0 ||
	     WILL_FIRE_RL_spi_recv_d && spi_rPos == 6'd0 ;
  assign spi_reqF_sClear_pw$whas = 1'b0 ;
  assign spi_reqF_dClear_pw$whas = 1'b0 ;
  assign spi_reqF_deq_happened$whas = 1'b0 ;
  assign spi_respF_enq_pw$whas =
	     spi_respF_head_wrapped == spi_respF_tail_wrapped &&
	     !spi_respF_sInReset_isInReset &&
	     spi_doResp ;
  assign spi_respF_deq_pw$whas = WILL_FIRE_RL_spi_response ;
  assign spi_respF_sClear_pw$whas = 1'b0 ;
  assign spi_respF_dClear_pw$whas = 1'b0 ;
  assign spi_respF_deq_happened$whas = 1'b0 ;
  assign spi_sdiWs$wget = spi_sdiP ;

  // register spi_cap
  assign spi_cap$D_IN =
	     MUX_spi_cap$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap$EN =
	     MUX_spi_cap$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd0 ;

  // register spi_cap_1
  assign spi_cap_1$D_IN =
	     MUX_spi_cap_1$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_1$EN =
	     MUX_spi_cap_1$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd1 ;

  // register spi_cap_10
  assign spi_cap_10$D_IN =
	     MUX_spi_cap_10$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_10$EN =
	     MUX_spi_cap_10$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd10 ;

  // register spi_cap_11
  assign spi_cap_11$D_IN =
	     MUX_spi_cap_11$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_11$EN =
	     MUX_spi_cap_11$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd11 ;

  // register spi_cap_12
  assign spi_cap_12$D_IN =
	     MUX_spi_cap_12$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_12$EN =
	     MUX_spi_cap_12$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd12 ;

  // register spi_cap_13
  assign spi_cap_13$D_IN =
	     MUX_spi_cap_13$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_13$EN =
	     MUX_spi_cap_13$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd13 ;

  // register spi_cap_14
  assign spi_cap_14$D_IN =
	     MUX_spi_cap_14$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_14$EN =
	     MUX_spi_cap_14$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd14 ;

  // register spi_cap_15
  assign spi_cap_15$D_IN =
	     MUX_spi_cap_15$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_15$EN =
	     MUX_spi_cap_15$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd15 ;

  // register spi_cap_16
  assign spi_cap_16$D_IN =
	     MUX_spi_cap_16$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_16$EN =
	     MUX_spi_cap_16$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd16 ;

  // register spi_cap_17
  assign spi_cap_17$D_IN =
	     MUX_spi_cap_17$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_17$EN =
	     MUX_spi_cap_17$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd17 ;

  // register spi_cap_18
  assign spi_cap_18$D_IN =
	     MUX_spi_cap_18$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_18$EN =
	     MUX_spi_cap_18$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd18 ;

  // register spi_cap_19
  assign spi_cap_19$D_IN =
	     MUX_spi_cap_19$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_19$EN =
	     MUX_spi_cap_19$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd19 ;

  // register spi_cap_2
  assign spi_cap_2$D_IN =
	     MUX_spi_cap_2$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_2$EN =
	     MUX_spi_cap_2$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd2 ;

  // register spi_cap_20
  assign spi_cap_20$D_IN =
	     MUX_spi_cap_20$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_20$EN =
	     MUX_spi_cap_20$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd20 ;

  // register spi_cap_21
  assign spi_cap_21$D_IN =
	     MUX_spi_cap_21$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_21$EN =
	     MUX_spi_cap_21$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd21 ;

  // register spi_cap_22
  assign spi_cap_22$D_IN =
	     MUX_spi_cap_22$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_22$EN =
	     MUX_spi_cap_22$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd22 ;

  // register spi_cap_23
  assign spi_cap_23$D_IN =
	     MUX_spi_cap_23$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_23$EN =
	     MUX_spi_cap_23$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd23 ;

  // register spi_cap_24
  assign spi_cap_24$D_IN =
	     MUX_spi_cap_24$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_24$EN =
	     MUX_spi_cap_24$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd24 ;

  // register spi_cap_25
  assign spi_cap_25$D_IN =
	     MUX_spi_cap_25$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_25$EN =
	     MUX_spi_cap_25$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd25 ;

  // register spi_cap_26
  assign spi_cap_26$D_IN =
	     MUX_spi_cap_26$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_26$EN =
	     MUX_spi_cap_26$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd26 ;

  // register spi_cap_27
  assign spi_cap_27$D_IN =
	     MUX_spi_cap_27$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_27$EN =
	     MUX_spi_cap_27$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd27 ;

  // register spi_cap_28
  assign spi_cap_28$D_IN =
	     MUX_spi_cap_28$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_28$EN =
	     MUX_spi_cap_28$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd28 ;

  // register spi_cap_29
  assign spi_cap_29$D_IN =
	     MUX_spi_cap_29$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_29$EN =
	     MUX_spi_cap_29$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd29 ;

  // register spi_cap_3
  assign spi_cap_3$D_IN =
	     MUX_spi_cap_3$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_3$EN =
	     MUX_spi_cap_3$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd3 ;

  // register spi_cap_30
  assign spi_cap_30$D_IN =
	     MUX_spi_cap_30$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_30$EN =
	     MUX_spi_cap_30$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd30 ;

  // register spi_cap_31
  assign spi_cap_31$D_IN =
	     MUX_spi_cap_31$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_31$EN =
	     MUX_spi_cap_31$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd31 ;

  // register spi_cap_4
  assign spi_cap_4$D_IN =
	     MUX_spi_cap_4$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_4$EN =
	     MUX_spi_cap_4$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd4 ;

  // register spi_cap_5
  assign spi_cap_5$D_IN =
	     MUX_spi_cap_5$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_5$EN =
	     MUX_spi_cap_5$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd5 ;

  // register spi_cap_6
  assign spi_cap_6$D_IN =
	     MUX_spi_cap_6$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_6$EN =
	     MUX_spi_cap_6$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd6 ;

  // register spi_cap_7
  assign spi_cap_7$D_IN =
	     MUX_spi_cap_7$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_7$EN =
	     MUX_spi_cap_7$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd7 ;

  // register spi_cap_8
  assign spi_cap_8$D_IN =
	     MUX_spi_cap_8$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_8$EN =
	     MUX_spi_cap_8$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd8 ;

  // register spi_cap_9
  assign spi_cap_9$D_IN =
	     MUX_spi_cap_9$write_1__SEL_1 ?
	       MUX_spi_cap$write_1__VAL_1 :
	       spi_sdiP[0] ;
  assign spi_cap_9$EN =
	     MUX_spi_cap_9$write_1__SEL_1 ||
	     WILL_FIRE_RL_spi_recv_d && spi_reqS[50:49] == 2'd0 &&
	     _31_MINUS_spi_rPos_83___d705 == 6'd9 ;

  // register spi_csbR
  assign spi_csbR$D_IN = spi_csbR_1$whas ? spi_csbR_1$wget : 4'd15 ;
  assign spi_csbR$EN = 1'd1 ;

  // register spi_dPos
  assign spi_dPos$D_IN =
	     WILL_FIRE_RL_spi_start_cs ?
	       MUX_spi_dPos$write_1__VAL_1 :
	       MUX_spi_dPos$write_1__VAL_2 ;
  assign spi_dPos$EN = WILL_FIRE_RL_spi_start_cs || WILL_FIRE_RL_spi_send_d ;

  // register spi_devId
  assign spi_devId$D_IN = spi_reqS[50:49] ;
  assign spi_devId$EN = WILL_FIRE_RL_spi_start_cs ;

  // register spi_doResp
  assign spi_doResp$D_IN = spi_reqF_deq_pw$whas && spi_reqS[48] ;
  assign spi_doResp$EN = 1'd1 ;

  // register spi_iPos
  assign spi_iPos$D_IN =
	     WILL_FIRE_RL_spi_start_cs ?
	       MUX_spi_iPos$write_1__VAL_1 :
	       MUX_spi_iPos$write_1__VAL_2 ;
  assign spi_iPos$EN = WILL_FIRE_RL_spi_start_cs || WILL_FIRE_RL_spi_send_i ;

  // register spi_lsbFirst
  assign spi_lsbFirst$D_IN = spi_reqS[50:49] == 2'd0 ;
  assign spi_lsbFirst$EN = WILL_FIRE_RL_spi_start_cs ;

  // register spi_rPos
  assign spi_rPos$D_IN =
	     WILL_FIRE_RL_spi_start_cs ?
	       MUX_spi_rPos$write_1__VAL_1 :
	       MUX_spi_rPos$write_1__VAL_2 ;
  assign spi_rPos$EN = WILL_FIRE_RL_spi_start_cs || WILL_FIRE_RL_spi_recv_d ;

  // register spi_rcv_d
  assign spi_rcv_d$D_IN = MUX_spi_rcv_d$write_1__SEL_1 ;
  assign spi_rcv_d$EN =
	     WILL_FIRE_RL_spi_send_d && spi_dPos == 6'd0 &&
	     spi_reqS[50:49] == 2'd0 ||
	     WILL_FIRE_RL_spi_recv_d && spi_rPos == 6'd0 ;

  // register spi_reqF_dInReset_isInReset
  assign spi_reqF_dInReset_isInReset$D_IN = 1'd0 ;
  assign spi_reqF_dInReset_isInReset$EN = spi_reqF_dInReset_isInReset ;

  // register spi_reqF_head_wrapped
  assign spi_reqF_head_wrapped$D_IN =
	     WILL_FIRE_RL_spi_reqF_deq_update_head && !spi_reqF_head_wrapped ;
  assign spi_reqF_head_wrapped$EN =
	     WILL_FIRE_RL_spi_reqF_deq_update_head ||
	     spi_reqF_dInReset_isInReset ;

  // register spi_reqF_sInReset_isInReset
  assign spi_reqF_sInReset_isInReset$D_IN = 1'd0 ;
  assign spi_reqF_sInReset_isInReset$EN = spi_reqF_sInReset_isInReset ;

  // register spi_reqF_tail_wrapped
  assign spi_reqF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_spi_reqF_enq_update_tail && !spi_reqF_tail_wrapped ;
  assign spi_reqF_tail_wrapped$EN =
	     WILL_FIRE_RL_spi_reqF_enq_update_tail ||
	     spi_reqF_sInReset_isInReset ;

  // register spi_reqS
  assign spi_reqS$D_IN =
	     WILL_FIRE_RL_wci_cfwr ?
	       MUX_spi_reqS$write_1__VAL_1 :
	       MUX_spi_reqS$write_1__VAL_2 ;
  assign spi_reqS$EN = WILL_FIRE_RL_wci_cfwr || WILL_FIRE_RL_wci_cfrd ;

  // register spi_respF_dInReset_isInReset
  assign spi_respF_dInReset_isInReset$D_IN = 1'd0 ;
  assign spi_respF_dInReset_isInReset$EN = spi_respF_dInReset_isInReset ;

  // register spi_respF_head_wrapped
  assign spi_respF_head_wrapped$D_IN =
	     WILL_FIRE_RL_spi_respF_deq_update_head &&
	     !spi_respF_head_wrapped ;
  assign spi_respF_head_wrapped$EN =
	     WILL_FIRE_RL_spi_respF_deq_update_head ||
	     spi_respF_dInReset_isInReset ;

  // register spi_respF_sInReset_isInReset
  assign spi_respF_sInReset_isInReset$D_IN = 1'd0 ;
  assign spi_respF_sInReset_isInReset$EN = spi_respF_sInReset_isInReset ;

  // register spi_respF_tail_wrapped
  assign spi_respF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_spi_respF_enq_update_tail &&
	     !spi_respF_tail_wrapped ;
  assign spi_respF_tail_wrapped$EN =
	     WILL_FIRE_RL_spi_respF_enq_update_tail ||
	     spi_respF_sInReset_isInReset ;

  // register spi_respS
  assign spi_respS$D_IN =
	     { spi_cap_30,
	       spi_cap_29,
	       spi_cap_28,
	       spi_cap_27,
	       spi_cap_26,
	       spi_cap_25,
	       spi_cap_24,
	       spi_cap_23,
	       spi_cap_22,
	       spi_cap_21,
	       spi_cap_20,
	       spi_cap_19,
	       spi_cap_18,
	       spi_cap_17,
	       spi_cap_16,
	       spi_cap_15,
	       spi_cap_14,
	       spi_cap_13,
	       spi_cap_12,
	       spi_cap_11,
	       spi_cap_10,
	       spi_cap_9,
	       spi_cap_8,
	       spi_cap_7,
	       spi_cap_6,
	       spi_cap_5,
	       spi_cap_4,
	       spi_cap_3,
	       spi_cap_2_87_CONCAT_spi_cap_1_88_CONCAT_spi_ca_ETC___d593 } ;
  assign spi_respS$EN = spi_respF_enq_pw$whas ;

  // register spi_sdiP
  assign spi_sdiP$D_IN = pads_sdi_arg ;
  assign spi_sdiP$EN = 1'd1 ;

  // register spi_sdoR
  assign spi_sdoR$D_IN =
	     WILL_FIRE_RL_spi_send_i ?
	       MUX_spi_sdoR$write_1__VAL_1 :
	       MUX_spi_sdoR$write_1__VAL_2 ;
  assign spi_sdoR$EN = WILL_FIRE_RL_spi_send_i || WILL_FIRE_RL_spi_send_d ;

  // register spi_xmt_d
  assign spi_xmt_d$D_IN = WILL_FIRE_RL_spi_send_i && spi_iPos == 5'd0 ;
  assign spi_xmt_d$EN =
	     WILL_FIRE_RL_spi_send_d && spi_dPos == 6'd0 ||
	     WILL_FIRE_RL_spi_send_i ;

  // register spi_xmt_i
  assign spi_xmt_i$D_IN = !WILL_FIRE_RL_spi_send_i || spi_iPos != 5'd0 ;
  assign spi_xmt_i$EN = WILL_FIRE_RL_spi_send_i || WILL_FIRE_RL_spi_start_cs ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = !WILL_FIRE_RL_spi_response ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_spi_response || WILL_FIRE_RL_wci_cfrd ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     !MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ||
	     MUX_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(MUX_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_0$write_1__SEL_1:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(MUX_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_1$write_1__SEL_1:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_spi_iPos_43_EQ_15_49_THEN_spi_reqS_read__21_ETC___d262 =
	     (spi_iPos == 5'd15) ?
	       spi_reqS[48] :
	       spi_iPos != 5'd14 && spi_iPos != 5'd13 &&
	       (spi_iPos < 5'd7 || spi_iPos > 5'd12) &&
	       x__h10972 ;
  assign _31_MINUS_spi_rPos_83___d705 = 6'd31 - spi_rPos ;
  assign _dor1spi_reqF_enq_pw$EN_wset =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ;
  assign spi_cap_2_87_CONCAT_spi_cap_1_88_CONCAT_spi_ca_ETC___d593 =
	     { spi_cap_2, spi_cap_1, spi_cap, spi_sdiP[spi_devId] } ;
  assign spi_reqF_head_wrapped_crossed__68_EQ_spi_reqF__ETC___d729 =
	     spi_reqF_head_wrapped == spi_reqF_tail_wrapped &&
	     !spi_reqF_sInReset_isInReset &&
	     spi_cd$PREEDGE ;
  assign spi_reqS_BITS_31_TO_0__q2 = spi_reqS[31:0] ;
  assign spi_reqS_BITS_47_TO_32__q1 = spi_reqS[47:32] ;
  assign val_addr__h17725 = { 8'd0, wci_wslv_reqF$D_OUT[41:34] } ;
  assign x__h10844 = spi_reqS_BITS_47_TO_32__q1[x__h10907[3:0]] ;
  assign x__h10907 = 5'd4 - spi_iPos ;
  assign x__h10972 = spi_reqS_BITS_47_TO_32__q1[spi_iPos[3:0]] ;
  assign x__h11697 = spi_reqS_BITS_31_TO_0__q2[x__h11756[4:0]] ;
  assign x__h11756 = 6'd27 - spi_dPos ;
  assign x__h11821 = spi_reqS_BITS_31_TO_0__q2[spi_dPos[4:0]] ;
  always@(wci_wslv_reqF$D_OUT or
	  spi_reqF_head_wrapped_crossed__68_EQ_spi_reqF__ETC___d729)
  begin
    case (wci_wslv_reqF$D_OUT[43:42])
      2'b0, 2'b01, 2'b10:
	  IF_wci_wslv_reqF_first__5_BITS_43_TO_42_08_EQ__ETC___d730 =
	      spi_reqF_head_wrapped_crossed__68_EQ_spi_reqF__ETC___d729;
      2'd3:
	  IF_wci_wslv_reqF_first__5_BITS_43_TO_42_08_EQ__ETC___d730 =
	      wci_wslv_reqF$D_OUT[43:42] != 2'b11 ||
	      spi_reqF_head_wrapped_crossed__68_EQ_spi_reqF__ETC___d729;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[43:42])
      2'b0: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_4_0b0_0_ETC__q3 = 3'd0;
      2'b01: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_4_0b0_0_ETC__q3 = 3'd2;
      default: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_4_0b0_0_ETC__q3 = 3'd4;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[43:42])
      2'b0: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4 = 3'd1;
      2'b01: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4 = 3'd3;
      2'b10: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4 = 3'd5;
      2'd3: CASE_wci_wslv_reqFD_OUT_BITS_43_TO_42_7_0b0_1_ETC__q4 = 3'd7;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        spi_reqF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_respF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (spi_reqF_tail_wrapped$EN)
	  spi_reqF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      spi_reqF_tail_wrapped$D_IN;
	if (spi_respF_head_wrapped$EN)
	  spi_respF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      spi_respF_head_wrapped$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
      end
    if (spi_reqS$EN) spi_reqS <= `BSV_ASSIGNMENT_DELAY spi_reqS$D_IN;
  end

  always@(posedge spi_cd$CLK_OUT)
  begin
    if (!spi_slowReset$OUT_RST_N)
      begin
        spi_csbR <= `BSV_ASSIGNMENT_DELAY 4'd15;
	spi_doResp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_lsbFirst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_rcv_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_reqF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_respF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_sdoR <= `BSV_ASSIGNMENT_DELAY 1'b0;
	spi_xmt_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_xmt_i <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (spi_csbR$EN) spi_csbR <= `BSV_ASSIGNMENT_DELAY spi_csbR$D_IN;
	if (spi_doResp$EN)
	  spi_doResp <= `BSV_ASSIGNMENT_DELAY spi_doResp$D_IN;
	if (spi_lsbFirst$EN)
	  spi_lsbFirst <= `BSV_ASSIGNMENT_DELAY spi_lsbFirst$D_IN;
	if (spi_rcv_d$EN) spi_rcv_d <= `BSV_ASSIGNMENT_DELAY spi_rcv_d$D_IN;
	if (spi_reqF_head_wrapped$EN)
	  spi_reqF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      spi_reqF_head_wrapped$D_IN;
	if (spi_respF_tail_wrapped$EN)
	  spi_respF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      spi_respF_tail_wrapped$D_IN;
	if (spi_sdoR$EN) spi_sdoR <= `BSV_ASSIGNMENT_DELAY spi_sdoR$D_IN;
	if (spi_xmt_d$EN) spi_xmt_d <= `BSV_ASSIGNMENT_DELAY spi_xmt_d$D_IN;
	if (spi_xmt_i$EN) spi_xmt_i <= `BSV_ASSIGNMENT_DELAY spi_xmt_i$D_IN;
      end
    if (spi_cap$EN) spi_cap <= `BSV_ASSIGNMENT_DELAY spi_cap$D_IN;
    if (spi_cap_1$EN) spi_cap_1 <= `BSV_ASSIGNMENT_DELAY spi_cap_1$D_IN;
    if (spi_cap_10$EN) spi_cap_10 <= `BSV_ASSIGNMENT_DELAY spi_cap_10$D_IN;
    if (spi_cap_11$EN) spi_cap_11 <= `BSV_ASSIGNMENT_DELAY spi_cap_11$D_IN;
    if (spi_cap_12$EN) spi_cap_12 <= `BSV_ASSIGNMENT_DELAY spi_cap_12$D_IN;
    if (spi_cap_13$EN) spi_cap_13 <= `BSV_ASSIGNMENT_DELAY spi_cap_13$D_IN;
    if (spi_cap_14$EN) spi_cap_14 <= `BSV_ASSIGNMENT_DELAY spi_cap_14$D_IN;
    if (spi_cap_15$EN) spi_cap_15 <= `BSV_ASSIGNMENT_DELAY spi_cap_15$D_IN;
    if (spi_cap_16$EN) spi_cap_16 <= `BSV_ASSIGNMENT_DELAY spi_cap_16$D_IN;
    if (spi_cap_17$EN) spi_cap_17 <= `BSV_ASSIGNMENT_DELAY spi_cap_17$D_IN;
    if (spi_cap_18$EN) spi_cap_18 <= `BSV_ASSIGNMENT_DELAY spi_cap_18$D_IN;
    if (spi_cap_19$EN) spi_cap_19 <= `BSV_ASSIGNMENT_DELAY spi_cap_19$D_IN;
    if (spi_cap_2$EN) spi_cap_2 <= `BSV_ASSIGNMENT_DELAY spi_cap_2$D_IN;
    if (spi_cap_20$EN) spi_cap_20 <= `BSV_ASSIGNMENT_DELAY spi_cap_20$D_IN;
    if (spi_cap_21$EN) spi_cap_21 <= `BSV_ASSIGNMENT_DELAY spi_cap_21$D_IN;
    if (spi_cap_22$EN) spi_cap_22 <= `BSV_ASSIGNMENT_DELAY spi_cap_22$D_IN;
    if (spi_cap_23$EN) spi_cap_23 <= `BSV_ASSIGNMENT_DELAY spi_cap_23$D_IN;
    if (spi_cap_24$EN) spi_cap_24 <= `BSV_ASSIGNMENT_DELAY spi_cap_24$D_IN;
    if (spi_cap_25$EN) spi_cap_25 <= `BSV_ASSIGNMENT_DELAY spi_cap_25$D_IN;
    if (spi_cap_26$EN) spi_cap_26 <= `BSV_ASSIGNMENT_DELAY spi_cap_26$D_IN;
    if (spi_cap_27$EN) spi_cap_27 <= `BSV_ASSIGNMENT_DELAY spi_cap_27$D_IN;
    if (spi_cap_28$EN) spi_cap_28 <= `BSV_ASSIGNMENT_DELAY spi_cap_28$D_IN;
    if (spi_cap_29$EN) spi_cap_29 <= `BSV_ASSIGNMENT_DELAY spi_cap_29$D_IN;
    if (spi_cap_3$EN) spi_cap_3 <= `BSV_ASSIGNMENT_DELAY spi_cap_3$D_IN;
    if (spi_cap_30$EN) spi_cap_30 <= `BSV_ASSIGNMENT_DELAY spi_cap_30$D_IN;
    if (spi_cap_31$EN) spi_cap_31 <= `BSV_ASSIGNMENT_DELAY spi_cap_31$D_IN;
    if (spi_cap_4$EN) spi_cap_4 <= `BSV_ASSIGNMENT_DELAY spi_cap_4$D_IN;
    if (spi_cap_5$EN) spi_cap_5 <= `BSV_ASSIGNMENT_DELAY spi_cap_5$D_IN;
    if (spi_cap_6$EN) spi_cap_6 <= `BSV_ASSIGNMENT_DELAY spi_cap_6$D_IN;
    if (spi_cap_7$EN) spi_cap_7 <= `BSV_ASSIGNMENT_DELAY spi_cap_7$D_IN;
    if (spi_cap_8$EN) spi_cap_8 <= `BSV_ASSIGNMENT_DELAY spi_cap_8$D_IN;
    if (spi_cap_9$EN) spi_cap_9 <= `BSV_ASSIGNMENT_DELAY spi_cap_9$D_IN;
    if (spi_dPos$EN) spi_dPos <= `BSV_ASSIGNMENT_DELAY spi_dPos$D_IN;
    if (spi_devId$EN) spi_devId <= `BSV_ASSIGNMENT_DELAY spi_devId$D_IN;
    if (spi_iPos$EN) spi_iPos <= `BSV_ASSIGNMENT_DELAY spi_iPos$D_IN;
    if (spi_rPos$EN) spi_rPos <= `BSV_ASSIGNMENT_DELAY spi_rPos$D_IN;
    if (spi_respS$EN) spi_respS <= `BSV_ASSIGNMENT_DELAY spi_respS$D_IN;
  end

  always@(posedge spi_cinv$CLK_OUT)
  begin
    if (spi_sdiP$EN) spi_sdiP <= `BSV_ASSIGNMENT_DELAY spi_sdiP$D_IN;
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
    end

  always@(posedge wciS0_Clk or negedge spi_respF_dCombinedReset$RST_OUT)
  if (!spi_respF_dCombinedReset$RST_OUT)
    begin
      spi_respF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (spi_respF_dInReset_isInReset$EN)
	spi_respF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    spi_respF_dInReset_isInReset$D_IN;
    end

  always@(posedge wciS0_Clk or negedge spi_reqF_sCombinedReset$RST_OUT)
  if (!spi_reqF_sCombinedReset$RST_OUT)
    begin
      spi_reqF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (spi_reqF_sInReset_isInReset$EN)
	spi_reqF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    spi_reqF_sInReset_isInReset$D_IN;
    end

  always@(posedge spi_cd$CLK_OUT or negedge spi_respF_sCombinedReset$RST_OUT)
  if (!spi_respF_sCombinedReset$RST_OUT)
    begin
      spi_respF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (spi_respF_sInReset_isInReset$EN)
	spi_respF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    spi_respF_sInReset_isInReset$D_IN;
    end

  always@(posedge spi_cd$CLK_OUT or negedge spi_reqF_dCombinedReset$RST_OUT)
  if (!spi_reqF_dCombinedReset$RST_OUT)
    begin
      spi_reqF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (spi_reqF_dInReset_isInReset$EN)
	spi_reqF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    spi_reqF_dInReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    spi_cap = 1'h0;
    spi_cap_1 = 1'h0;
    spi_cap_10 = 1'h0;
    spi_cap_11 = 1'h0;
    spi_cap_12 = 1'h0;
    spi_cap_13 = 1'h0;
    spi_cap_14 = 1'h0;
    spi_cap_15 = 1'h0;
    spi_cap_16 = 1'h0;
    spi_cap_17 = 1'h0;
    spi_cap_18 = 1'h0;
    spi_cap_19 = 1'h0;
    spi_cap_2 = 1'h0;
    spi_cap_20 = 1'h0;
    spi_cap_21 = 1'h0;
    spi_cap_22 = 1'h0;
    spi_cap_23 = 1'h0;
    spi_cap_24 = 1'h0;
    spi_cap_25 = 1'h0;
    spi_cap_26 = 1'h0;
    spi_cap_27 = 1'h0;
    spi_cap_28 = 1'h0;
    spi_cap_29 = 1'h0;
    spi_cap_3 = 1'h0;
    spi_cap_30 = 1'h0;
    spi_cap_31 = 1'h0;
    spi_cap_4 = 1'h0;
    spi_cap_5 = 1'h0;
    spi_cap_6 = 1'h0;
    spi_cap_7 = 1'h0;
    spi_cap_8 = 1'h0;
    spi_cap_9 = 1'h0;
    spi_csbR = 4'hA;
    spi_dPos = 6'h2A;
    spi_devId = 2'h2;
    spi_doResp = 1'h0;
    spi_iPos = 5'h0A;
    spi_lsbFirst = 1'h0;
    spi_rPos = 6'h2A;
    spi_rcv_d = 1'h0;
    spi_reqF_dInReset_isInReset = 1'h0;
    spi_reqF_head_wrapped = 1'h0;
    spi_reqF_sInReset_isInReset = 1'h0;
    spi_reqF_tail_wrapped = 1'h0;
    spi_reqS = 51'h2AAAAAAAAAAAA;
    spi_respF_dInReset_isInReset = 1'h0;
    spi_respF_head_wrapped = 1'h0;
    spi_respF_sInReset_isInReset = 1'h0;
    spi_respF_tail_wrapped = 1'h0;
    spi_respS = 32'hAAAAAAAA;
    spi_sdiP = 4'hA;
    spi_sdoR = 1'h0;
    spi_xmt_d = 1'h0;
    spi_xmt_i = 1'h0;
    splitReadInFlight = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr)
	  begin
	    v__h18089 = $time;
	    #0;
	  end
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr)
	  $display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		   v__h18089,
		   wci_wslv_reqF$D_OUT[63:32],
		   wci_wslv_reqF$D_OUT[67:64],
		   wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd)
	  begin
	    v__h18893 = $time;
	    #0;
	  end
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd)
	  $display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		   v__h18893,
		   wci_wslv_reqF$D_OUT[63:32],
		   wci_wslv_reqF$D_OUT[67:64],
		   32'd0);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3616 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3616,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_spi_response)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_spi_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_respF_dCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_spi_response && WILL_FIRE_RL_wci_ctrl_OrE)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 88: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spi_response] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_respF_dCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_spi_response && WILL_FIRE_RL_wci_ctrl_IsO)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 88: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spi_response] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_respF_dCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_spi_response && WILL_FIRE_RL_wci_ctrl_EiI)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 88: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spi_response] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_spi_response)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_spi_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (spi_reqF_sCombinedReset$RST_OUT)
	if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	  $display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/dev/FMC150.bsv\", line 49, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3934 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3934,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3790 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3790,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkFMC150

